###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.1.7746/W32 for ARM        05/May/2015  09:12:26
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\core\mllite\message_layer.c
#    Command line =  
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\core\mllite\message_layer.c
#        -D USE_STDPERIPH_DRIVER -D USE_DMP -D MPL_LOG_NDEBUG=1 -D EMPL -D
#        MPU9250 -D EMPL_TARGET_STM32F4 -lcN
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\Debug\List\ -o
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4F -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0_2\arm\INC\c\DLib_Config_Normal.h" -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\User\inc\ -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\User\src\ -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\Peripheral\inc\ -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\Peripheral\src\ -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\STM32F4xx_StdPeriph_Driver\inc\
#        -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\STM32F4xx_StdPeriph_Driver\src\
#        -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\DeviceSupport\inc\
#        -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\DeviceSupport\inc\
#        -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\core\driver\include\
#        -I C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\core\driver\eMPL\
#        -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\core\driver\stm32l\
#        -I C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\core\mllite\ -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\core\mpl\ -I
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\..\core\eMPL-hal\ -Ol
#        -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\CMSIS\Include\"
#    List file    =  
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\Debug\List\message_layer.lst
#    Object file  =  
#        C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\EWARM\Debug\Obj\message_layer.o
#
###############################################################################

C:\STM32_EWARM\STM32F4_MD6\Projects\eMD6\core\mllite\message_layer.c
      1          /*
      2           $License:
      3              Copyright (C) 2011-2012 InvenSense Corporation, All Rights Reserved.
      4              See included License.txt for License information.
      5           $
      6           */
      7          /**
      8           *   @defgroup  Message_Layer message_layer
      9           *   @brief     Motion Library - Message Layer
     10           *              Holds Low Occurance messages
     11           *
     12           *   @{
     13           *       @file message_layer.c
     14           *       @brief Holds Low Occurance Messages.
     15           */
     16          #include "message_layer.h"
     17          #include "log.h"
     18          
     19          struct message_holder_t {
     20              long message;
     21          };
     22          
     23          static struct message_holder_t mh;
     24          
     25          /** Sets a message.
     26          * @param[in] set The flags to set.
     27          * @param[in] clear Before setting anything this will clear these messages,
     28          *                  which is useful for mutually exclusive messages such
     29          *                  a motion or no motion message.
     30          * @param[in] level Level of the messages. It starts at 0, and may increase
     31          *            in the future to allow more messages if the bit storage runs out.
     32          */
     33          void inv_set_message(long set, long clear, int level)
     34          {
     35              if (level == 0) {
     36                  mh.message &= ~clear;
     37                  mh.message |= set;
     38              }
     39          }
     40          
     41          /** Returns Message Flags for Level 0 Messages.
     42          * Levels are to allow expansion of more messages in the future.
     43          * @param[in] clear If set, will clear the message. Typically this will be set
     44          *  for one reader, so that you don't get the same message over and over.
     45          * @return bit field to corresponding message.
     46          */
     47          long inv_get_message_level_0(int clear)
     48          {
     49              long msg;
     50              msg = mh.message;
     51              if (clear) {
     52                  mh.message = 0;
     53              }
     54              return msg;
     55          }
     56          
     57          /**
     58           * @}
     59           */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   inv_get_message_level_0
       0   inv_set_message


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
      18  inv_get_message_level_0
      28  inv_set_message
       4  mh

 
  4 bytes in section .bss
 50 bytes in section .text
 
 50 bytes of CODE memory
  4 bytes of DATA memory

Errors: none
Warnings: none
