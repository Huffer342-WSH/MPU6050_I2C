
MPU6050_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e80  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017ac  08016070  08016070  00026070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801781c  0801781c  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  0801781c  0801781c  0002781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017824  08017824  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017824  08017824  00027824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017828  08017828  00027828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801782c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001360  20000238  08017a60  00030238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001598  08017a60  00031598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b465  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a0e  00000000  00000000  0005b6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df0  00000000  00000000  000620d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ee8  00000000  00000000  00063ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fda  00000000  00000000  00065da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024df0  00000000  00000000  00086d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aec0d  00000000  00000000  000abb72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  0015a77f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fa4  00000000  00000000  0015a844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000038aa  00000000  00000000  001647e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000238 	.word	0x20000238
 800020c:	00000000 	.word	0x00000000
 8000210:	08016058 	.word	0x08016058

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000023c 	.word	0x2000023c
 800022c:	08016058 	.word	0x08016058

08000230 <inv_fast_nomot_parameter.part.3>:
 8000230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000234:	2200      	movs	r2, #0
 8000236:	b087      	sub	sp, #28
 8000238:	2300      	movs	r3, #0
 800023a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800023e:	f04f 0b03 	mov.w	fp, #3
 8000242:	f8cd b00c 	str.w	fp, [sp, #12]
 8000246:	9002      	str	r0, [sp, #8]
 8000248:	9b02      	ldr	r3, [sp, #8]
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	6858      	ldr	r0, [r3, #4]
 800024e:	fba1 2301 	umull	r2, r3, r1, r1
 8000252:	461d      	mov	r5, r3
 8000254:	4614      	mov	r4, r2
 8000256:	9b02      	ldr	r3, [sp, #8]
 8000258:	e9cd 4500 	strd	r4, r5, [sp]
 800025c:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 8000260:	fb01 f300 	mul.w	r3, r1, r0
 8000264:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8000268:	9301      	str	r3, [sp, #4]
 800026a:	e9dd ab00 	ldrd	sl, fp, [sp]
 800026e:	ebb8 040a 	subs.w	r4, r8, sl
 8000272:	eb69 050b 	sbc.w	r5, r9, fp
 8000276:	4622      	mov	r2, r4
 8000278:	462b      	mov	r3, r5
 800027a:	e9cd 2300 	strd	r2, r3, [sp]
 800027e:	fba8 2308 	umull	r2, r3, r8, r8
 8000282:	1926      	adds	r6, r4, r4
 8000284:	eb45 0705 	adc.w	r7, r5, r5
 8000288:	fb08 f509 	mul.w	r5, r8, r9
 800028c:	4690      	mov	r8, r2
 800028e:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8000292:	f1d8 0400 	rsbs	r4, r8, #0
 8000296:	eb63 0543 	sbc.w	r5, r3, r3, lsl #1
 800029a:	4699      	mov	r9, r3
 800029c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80002a0:	1992      	adds	r2, r2, r6
 80002a2:	417b      	adcs	r3, r7
 80002a4:	00ae      	lsls	r6, r5, #2
 80002a6:	00a7      	lsls	r7, r4, #2
 80002a8:	ea46 7694 	orr.w	r6, r6, r4, lsr #30
 80002ac:	463c      	mov	r4, r7
 80002ae:	4635      	mov	r5, r6
 80002b0:	e9cd ab00 	strd	sl, fp, [sp]
 80002b4:	eb1a 0a02 	adds.w	sl, sl, r2
 80002b8:	eb4b 0b03 	adc.w	fp, fp, r3
 80002bc:	fb01 f60b 	mul.w	r6, r1, fp
 80002c0:	fba1 230a 	umull	r2, r3, r1, sl
 80002c4:	fb00 660a 	mla	r6, r0, sl, r6
 80002c8:	e9dd ab00 	ldrd	sl, fp, [sp]
 80002cc:	4433      	add	r3, r6
 80002ce:	9e02      	ldr	r6, [sp, #8]
 80002d0:	f106 0730 	add.w	r7, r6, #48	; 0x30
 80002d4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80002d8:	1ab6      	subs	r6, r6, r2
 80002da:	eb67 0703 	sbc.w	r7, r7, r3
 80002de:	eb18 0204 	adds.w	r2, r8, r4
 80002e2:	eb49 0305 	adc.w	r3, r9, r5
 80002e6:	4614      	mov	r4, r2
 80002e8:	461d      	mov	r5, r3
 80002ea:	eb1a 080a 	adds.w	r8, sl, sl
 80002ee:	eb4b 090b 	adc.w	r9, fp, fp
 80002f2:	fb01 fc09 	mul.w	ip, r1, r9
 80002f6:	9b02      	ldr	r3, [sp, #8]
 80002f8:	ea4f 0e87 	mov.w	lr, r7, lsl #2
 80002fc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000300:	1912      	adds	r2, r2, r4
 8000302:	416b      	adcs	r3, r5
 8000304:	4614      	mov	r4, r2
 8000306:	461d      	mov	r5, r3
 8000308:	fba1 2308 	umull	r2, r3, r1, r8
 800030c:	fb00 c808 	mla	r8, r0, r8, ip
 8000310:	ea4e 7e96 	orr.w	lr, lr, r6, lsr #30
 8000314:	4443      	add	r3, r8
 8000316:	fb01 f703 	mul.w	r7, r1, r3
 800031a:	4673      	mov	r3, lr
 800031c:	00b6      	lsls	r6, r6, #2
 800031e:	46b2      	mov	sl, r6
 8000320:	fba1 8902 	umull	r8, r9, r1, r2
 8000324:	fb00 7602 	mla	r6, r0, r2, r7
 8000328:	fb01 f303 	mul.w	r3, r1, r3
 800032c:	eb14 0408 	adds.w	r4, r4, r8
 8000330:	44b1      	add	r9, r6
 8000332:	eb45 0509 	adc.w	r5, r5, r9
 8000336:	fb00 320a 	mla	r2, r0, sl, r3
 800033a:	fba1 890a 	umull	r8, r9, r1, sl
 800033e:	eb14 0008 	adds.w	r0, r4, r8
 8000342:	4491      	add	r9, r2
 8000344:	eb45 0109 	adc.w	r1, r5, r9
 8000348:	2800      	cmp	r0, #0
 800034a:	f171 0300 	sbcs.w	r3, r1, #0
 800034e:	9b02      	ldr	r3, [sp, #8]
 8000350:	f103 0308 	add.w	r3, r3, #8
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	db2b      	blt.n	80003b0 <inv_fast_nomot_parameter.part.3+0x180>
 8000358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800035c:	4282      	cmp	r2, r0
 800035e:	418b      	sbcs	r3, r1
 8000360:	da01      	bge.n	8000366 <inv_fast_nomot_parameter.part.3+0x136>
 8000362:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8000366:	9b03      	ldr	r3, [sp, #12]
 8000368:	3b01      	subs	r3, #1
 800036a:	9303      	str	r3, [sp, #12]
 800036c:	f47f af6c 	bne.w	8000248 <inv_fast_nomot_parameter.part.3+0x18>
 8000370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000374:	f003 faa0 	bl	80038b8 <__aeabi_l2f>
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <inv_fast_nomot_parameter.part.3+0x188>)
 800037a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800037c:	f003 fb8e 	bl	8003a9c <__aeabi_fdiv>
 8000380:	f003 fd4a 	bl	8003e18 <__aeabi_f2lz>
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <inv_fast_nomot_parameter.part.3+0x18c>)
 8000386:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	f1c3 0220 	rsb	r2, r3, #32
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	f1b3 0420 	subs.w	r4, r3, #32
 8000398:	fa20 f003 	lsr.w	r0, r0, r3
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	bf5c      	itt	pl
 80003a2:	fa41 f404 	asrpl.w	r4, r1, r4
 80003a6:	4320      	orrpl	r0, r4
 80003a8:	4119      	asrs	r1, r3
 80003aa:	b007      	add	sp, #28
 80003ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003b0:	4240      	negs	r0, r0
 80003b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b6:	e7cf      	b.n	8000358 <inv_fast_nomot_parameter.part.3+0x128>
 80003b8:	20000258 	.word	0x20000258
 80003bc:	200011f0 	.word	0x200011f0

080003c0 <inv_init_maxmin>:
 80003c0:	07c1      	lsls	r1, r0, #31
 80003c2:	d50a      	bpl.n	80003da <inv_init_maxmin+0x1a>
 80003c4:	4b18      	ldr	r3, [pc, #96]	; (8000428 <inv_init_maxmin+0x68>)
 80003c6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80003ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ce:	6699      	str	r1, [r3, #104]	; 0x68
 80003d0:	66d9      	str	r1, [r3, #108]	; 0x6c
 80003d2:	6719      	str	r1, [r3, #112]	; 0x70
 80003d4:	675a      	str	r2, [r3, #116]	; 0x74
 80003d6:	679a      	str	r2, [r3, #120]	; 0x78
 80003d8:	67da      	str	r2, [r3, #124]	; 0x7c
 80003da:	0782      	lsls	r2, r0, #30
 80003dc:	d510      	bpl.n	8000400 <inv_init_maxmin+0x40>
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <inv_init_maxmin+0x68>)
 80003e0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80003e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 80003ec:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
 80003f0:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
 80003f4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80003f8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 80003fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8000400:	0743      	lsls	r3, r0, #29
 8000402:	d510      	bpl.n	8000426 <inv_init_maxmin+0x66>
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <inv_init_maxmin+0x68>)
 8000406:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f8c3 1198 	str.w	r1, [r3, #408]	; 0x198
 8000412:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
 8000416:	f8c3 11a0 	str.w	r1, [r3, #416]	; 0x1a0
 800041a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 800041e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
 8000422:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
 8000426:	4770      	bx	lr
 8000428:	200011f0 	.word	0x200011f0

0800042c <inv_reset_packet>:
 800042c:	b538      	push	{r3, r4, r5, lr}
 800042e:	4d09      	ldr	r5, [pc, #36]	; (8000454 <inv_reset_packet+0x28>)
 8000430:	2498      	movs	r4, #152	; 0x98
 8000432:	4622      	mov	r2, r4
 8000434:	4628      	mov	r0, r5
 8000436:	2100      	movs	r1, #0
 8000438:	f010 f8f9 	bl	801062e <memset>
 800043c:	f505 7098 	add.w	r0, r5, #304	; 0x130
 8000440:	4622      	mov	r2, r4
 8000442:	2100      	movs	r1, #0
 8000444:	f010 f8f3 	bl	801062e <memset>
 8000448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800044c:	2005      	movs	r0, #5
 800044e:	f7ff bfb7 	b.w	80003c0 <inv_init_maxmin>
 8000452:	bf00      	nop
 8000454:	200011f8 	.word	0x200011f8

08000458 <inv_start_fast_nomot>:
 8000458:	b510      	push	{r4, lr}
 800045a:	4c0d      	ldr	r4, [pc, #52]	; (8000490 <inv_start_fast_nomot+0x38>)
 800045c:	2100      	movs	r1, #0
 800045e:	f44f 7218 	mov.w	r2, #608	; 0x260
 8000462:	4620      	mov	r0, r4
 8000464:	f010 f8e3 	bl	801062e <memset>
 8000468:	2007      	movs	r0, #7
 800046a:	f7ff ffa9 	bl	80003c0 <inv_init_maxmin>
 800046e:	2301      	movs	r3, #1
 8000470:	4618      	mov	r0, r3
 8000472:	2103      	movs	r1, #3
 8000474:	2200      	movs	r2, #0
 8000476:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
 800047a:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 800047e:	f00e f849 	bl	800e514 <inv_set_message>
 8000482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000486:	4803      	ldr	r0, [pc, #12]	; (8000494 <inv_start_fast_nomot+0x3c>)
 8000488:	2164      	movs	r1, #100	; 0x64
 800048a:	2207      	movs	r2, #7
 800048c:	f00d bb1a 	b.w	800dac4 <inv_register_data_cb>
 8000490:	200011f0 	.word	0x200011f0
 8000494:	08000b29 	.word	0x08000b29

08000498 <inv_fast_nomot_parameter>:
 8000498:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800049a:	b103      	cbz	r3, 800049e <inv_fast_nomot_parameter+0x6>
 800049c:	e6c8      	b.n	8000230 <inv_fast_nomot_parameter.part.3>
 800049e:	2000      	movs	r0, #0
 80004a0:	2100      	movs	r1, #0
 80004a2:	4770      	bx	lr

080004a4 <inv_fast_nomot_parameter_3rd>:
 80004a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004a8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d057      	beq.n	800055e <inv_fast_nomot_parameter_3rd+0xba>
 80004ae:	f1a0 0e08 	sub.w	lr, r0, #8
 80004b2:	2600      	movs	r6, #0
 80004b4:	2700      	movs	r7, #0
 80004b6:	3010      	adds	r0, #16
 80004b8:	f85e 1f08 	ldr.w	r1, [lr, #8]!
 80004bc:	f8de c004 	ldr.w	ip, [lr, #4]
 80004c0:	fba1 4501 	umull	r4, r5, r1, r1
 80004c4:	e9de 2306 	ldrd	r2, r3, [lr, #24]
 80004c8:	e9de ab0c 	ldrd	sl, fp, [lr, #48]	; 0x30
 80004cc:	fb01 f80c 	mul.w	r8, r1, ip
 80004d0:	1b12      	subs	r2, r2, r4
 80004d2:	eb05 0548 	add.w	r5, r5, r8, lsl #1
 80004d6:	eb63 0305 	sbc.w	r3, r3, r5
 80004da:	eb12 0802 	adds.w	r8, r2, r2
 80004de:	eb43 0903 	adc.w	r9, r3, r3
 80004e2:	eb12 0208 	adds.w	r2, r2, r8
 80004e6:	eb43 0309 	adc.w	r3, r3, r9
 80004ea:	1912      	adds	r2, r2, r4
 80004ec:	fb02 fc0c 	mul.w	ip, r2, ip
 80004f0:	416b      	adcs	r3, r5
 80004f2:	fba2 4501 	umull	r4, r5, r2, r1
 80004f6:	fb01 c103 	mla	r1, r1, r3, ip
 80004fa:	ebb4 040a 	subs.w	r4, r4, sl
 80004fe:	440d      	add	r5, r1
 8000500:	eb65 050b 	sbc.w	r5, r5, fp
 8000504:	2c00      	cmp	r4, #0
 8000506:	f175 0300 	sbcs.w	r3, r5, #0
 800050a:	db2c      	blt.n	8000566 <inv_fast_nomot_parameter_3rd+0xc2>
 800050c:	42a6      	cmp	r6, r4
 800050e:	eb77 0305 	sbcs.w	r3, r7, r5
 8000512:	bfbc      	itt	lt
 8000514:	4626      	movlt	r6, r4
 8000516:	462f      	movlt	r7, r5
 8000518:	4586      	cmp	lr, r0
 800051a:	d1cd      	bne.n	80004b8 <inv_fast_nomot_parameter_3rd+0x14>
 800051c:	4639      	mov	r1, r7
 800051e:	4630      	mov	r0, r6
 8000520:	f003 f9ca 	bl	80038b8 <__aeabi_l2f>
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <inv_fast_nomot_parameter_3rd+0xcc>)
 8000526:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000528:	f003 fab8 	bl	8003a9c <__aeabi_fdiv>
 800052c:	f003 fc74 	bl	8003e18 <__aeabi_f2lz>
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <inv_fast_nomot_parameter_3rd+0xd0>)
 8000532:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000536:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800053a:	f1c3 0220 	rsb	r2, r3, #32
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	f1b3 0420 	subs.w	r4, r3, #32
 8000546:	fa20 f003 	lsr.w	r0, r0, r3
 800054a:	bf58      	it	pl
 800054c:	fa41 f404 	asrpl.w	r4, r1, r4
 8000550:	ea40 0002 	orr.w	r0, r0, r2
 8000554:	bf58      	it	pl
 8000556:	4320      	orrpl	r0, r4
 8000558:	4119      	asrs	r1, r3
 800055a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800055e:	4618      	mov	r0, r3
 8000560:	4619      	mov	r1, r3
 8000562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000566:	4264      	negs	r4, r4
 8000568:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800056c:	e7ce      	b.n	800050c <inv_fast_nomot_parameter_3rd+0x68>
 800056e:	bf00      	nop
 8000570:	20000258 	.word	0x20000258
 8000574:	200011f0 	.word	0x200011f0

08000578 <inv_fast_nomot_set_gyro_bias>:
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <inv_fast_nomot_set_gyro_bias+0xbc>)
 800057a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057c:	461a      	mov	r2, r3
 800057e:	461c      	mov	r4, r3
 8000580:	b085      	sub	sp, #20
 8000582:	f8d3 e210 	ldr.w	lr, [r3, #528]	; 0x210
 8000586:	4605      	mov	r5, r0
 8000588:	f103 0180 	add.w	r1, r3, #128	; 0x80
 800058c:	a801      	add	r0, sp, #4
 800058e:	f103 0718 	add.w	r7, r3, #24
 8000592:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8000596:	f851 6f04 	ldr.w	r6, [r1, #4]!
 800059a:	fa03 f30e 	lsl.w	r3, r3, lr
 800059e:	eb03 4306 	add.w	r3, r3, r6, lsl #16
 80005a2:	42ba      	cmp	r2, r7
 80005a4:	f840 3b04 	str.w	r3, [r0], #4
 80005a8:	d1f3      	bne.n	8000592 <inv_fast_nomot_set_gyro_bias+0x1a>
 80005aa:	2298      	movs	r2, #152	; 0x98
 80005ac:	2100      	movs	r1, #0
 80005ae:	4822      	ldr	r0, [pc, #136]	; (8000638 <inv_fast_nomot_set_gyro_bias+0xc0>)
 80005b0:	f010 f83d 	bl	801062e <memset>
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff ff03 	bl	80003c0 <inv_init_maxmin>
 80005ba:	f894 31e8 	ldrb.w	r3, [r4, #488]	; 0x1e8
 80005be:	4a1d      	ldr	r2, [pc, #116]	; (8000634 <inv_fast_nomot_set_gyro_bias+0xbc>)
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d02e      	beq.n	8000622 <inv_fast_nomot_set_gyro_bias+0xaa>
 80005c4:	4e1d      	ldr	r6, [pc, #116]	; (800063c <inv_fast_nomot_set_gyro_bias+0xc4>)
 80005c6:	9b02      	ldr	r3, [sp, #8]
 80005c8:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80005ca:	9901      	ldr	r1, [sp, #4]
 80005cc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80005ce:	1a09      	subs	r1, r1, r0
 80005d0:	1a9a      	subs	r2, r3, r2
 80005d2:	2900      	cmp	r1, #0
 80005d4:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 80005d8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 80005dc:	bfb8      	it	lt
 80005de:	4249      	neglt	r1, r1
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bfb8      	it	lt
 80005e4:	460b      	movlt	r3, r1
 80005e6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80005e8:	9a03      	ldr	r2, [sp, #12]
 80005ea:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80005ec:	1a10      	subs	r0, r2, r0
 80005ee:	2800      	cmp	r0, #0
 80005f0:	bfb8      	it	lt
 80005f2:	4240      	neglt	r0, r0
 80005f4:	4298      	cmp	r0, r3
 80005f6:	bfb8      	it	lt
 80005f8:	4618      	movlt	r0, r3
 80005fa:	f00e f8a3 	bl	800e744 <inv_q30_mult>
 80005fe:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8000602:	4298      	cmp	r0, r3
 8000604:	da06      	bge.n	8000614 <inv_fast_nomot_set_gyro_bias+0x9c>
 8000606:	a801      	add	r0, sp, #4
 8000608:	2103      	movs	r1, #3
 800060a:	f00d f8db 	bl	800d7c4 <inv_set_gyro_bias>
 800060e:	2002      	movs	r0, #2
 8000610:	f00f f880 	bl	800f714 <inv_set_motion_state>
 8000614:	a901      	add	r1, sp, #4
 8000616:	c90e      	ldmia	r1, {r1, r2, r3}
 8000618:	6271      	str	r1, [r6, #36]	; 0x24
 800061a:	62b2      	str	r2, [r6, #40]	; 0x28
 800061c:	62f3      	str	r3, [r6, #44]	; 0x2c
 800061e:	b005      	add	sp, #20
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	f8d2 3218 	ldr.w	r3, [r2, #536]	; 0x218
 8000626:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800062a:	bfc4      	itt	gt
 800062c:	2305      	movgt	r3, #5
 800062e:	f882 31e8 	strbgt.w	r3, [r2, #488]	; 0x1e8
 8000632:	e7c7      	b.n	80005c4 <inv_fast_nomot_set_gyro_bias+0x4c>
 8000634:	200011f0 	.word	0x200011f0
 8000638:	200011f8 	.word	0x200011f8
 800063c:	20000258 	.word	0x20000258

08000640 <inv_set_fast_nomot_compass_threshold>:
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <inv_set_fast_nomot_compass_threshold+0x8>)
 8000642:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8000646:	4770      	bx	lr
 8000648:	20000258 	.word	0x20000258

0800064c <int_set_fast_nomot_gyro_threshold>:
 800064c:	4b01      	ldr	r3, [pc, #4]	; (8000654 <int_set_fast_nomot_gyro_threshold+0x8>)
 800064e:	e9c3 0106 	strd	r0, r1, [r3, #24]
 8000652:	4770      	bx	lr
 8000654:	20000258 	.word	0x20000258

08000658 <inv_set_fast_nomot_accel_threshold>:
 8000658:	4b01      	ldr	r3, [pc, #4]	; (8000660 <inv_set_fast_nomot_accel_threshold+0x8>)
 800065a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800065e:	4770      	bx	lr
 8000660:	20000258 	.word	0x20000258

08000664 <inv_get_fast_nomot_compass_param>:
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <inv_get_fast_nomot_compass_param+0x18>)
 8000666:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800066a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800066e:	6002      	str	r2, [r0, #0]
 8000670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000674:	e9c1 2300 	strd	r2, r3, [r1]
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	200011f0 	.word	0x200011f0

08000680 <inv_get_fast_nomot_accel_param>:
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <inv_get_fast_nomot_accel_param+0x18>)
 8000682:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8000686:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800068a:	6002      	str	r2, [r0, #0]
 800068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000690:	e9c1 2300 	strd	r2, r3, [r1]
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200011f0 	.word	0x200011f0

0800069c <inv_fast_nomot_store_data>:
 800069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a0:	460d      	mov	r5, r1
 80006a2:	b083      	sub	sp, #12
 80006a4:	f101 0318 	add.w	r3, r1, #24
 80006a8:	f8d1 b078 	ldr.w	fp, [r1, #120]	; 0x78
 80006ac:	f101 0c68 	add.w	ip, r1, #104	; 0x68
 80006b0:	f101 0a5c 	add.w	sl, r1, #92	; 0x5c
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	f1bb 0f00 	cmp.w	fp, #0
 80006ba:	d037      	beq.n	800072c <inv_fast_nomot_store_data+0x90>
 80006bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 80006c0:	f8dc 3014 	ldr.w	r3, [ip, #20]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	461e      	mov	r6, r3
 80006c8:	17df      	asrs	r7, r3, #31
 80006ca:	462c      	mov	r4, r5
 80006cc:	f85a 2f04 	ldr.w	r2, [sl, #4]!
 80006d0:	f105 0e60 	add.w	lr, r5, #96	; 0x60
 80006d4:	429a      	cmp	r2, r3
 80006d6:	bfb8      	it	lt
 80006d8:	f8ca 3000 	strlt.w	r3, [sl]
 80006dc:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 80006e0:	429a      	cmp	r2, r3
 80006e2:	bfc8      	it	gt
 80006e4:	f8cc 3000 	strgt.w	r3, [ip]
 80006e8:	2201      	movs	r2, #1
 80006ea:	2300      	movs	r3, #0
 80006ec:	fb02 f807 	mul.w	r8, r2, r7
 80006f0:	fb06 8803 	mla	r8, r6, r3, r8
 80006f4:	fba2 2306 	umull	r2, r3, r2, r6
 80006f8:	4443      	add	r3, r8
 80006fa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80006fe:	eb18 0802 	adds.w	r8, r8, r2
 8000702:	eb49 0903 	adc.w	r9, r9, r3
 8000706:	e8e4 8906 	strd	r8, r9, [r4], #24
 800070a:	4574      	cmp	r4, lr
 800070c:	d1ee      	bne.n	80006ec <inv_fast_nomot_store_data+0x50>
 800070e:	9b01      	ldr	r3, [sp, #4]
 8000710:	3508      	adds	r5, #8
 8000712:	429d      	cmp	r5, r3
 8000714:	f100 0002 	add.w	r0, r0, #2
 8000718:	d1cd      	bne.n	80006b6 <inv_fast_nomot_store_data+0x1a>
 800071a:	f10b 0301 	add.w	r3, fp, #1
 800071e:	2201      	movs	r2, #1
 8000720:	678b      	str	r3, [r1, #120]	; 0x78
 8000722:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8000726:	b003      	add	sp, #12
 8000728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800072c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8000730:	2600      	movs	r6, #0
 8000732:	2700      	movs	r7, #0
 8000734:	465b      	mov	r3, fp
 8000736:	f8cc 2014 	str.w	r2, [ip, #20]
 800073a:	e7c6      	b.n	80006ca <inv_fast_nomot_store_data+0x2e>

0800073c <inv_fast_nomot_store_data_compass>:
 800073c:	6803      	ldr	r3, [r0, #0]
 800073e:	b4f0      	push	{r4, r5, r6, r7}
 8000740:	66d3      	str	r3, [r2, #108]	; 0x6c
 8000742:	6843      	ldr	r3, [r0, #4]
 8000744:	6f94      	ldr	r4, [r2, #120]	; 0x78
 8000746:	6713      	str	r3, [r2, #112]	; 0x70
 8000748:	6883      	ldr	r3, [r0, #8]
 800074a:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 800074e:	6753      	str	r3, [r2, #116]	; 0x74
 8000750:	b194      	cbz	r4, 8000778 <inv_fast_nomot_store_data_compass+0x3c>
 8000752:	3804      	subs	r0, #4
 8000754:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8000758:	f102 0768 	add.w	r7, r2, #104	; 0x68
 800075c:	f850 3f04 	ldr.w	r3, [r0, #4]!
 8000760:	6a0e      	ldr	r6, [r1, #32]
 8000762:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8000766:	1b9b      	subs	r3, r3, r6
 8000768:	2b00      	cmp	r3, #0
 800076a:	bfb8      	it	lt
 800076c:	425b      	neglt	r3, r3
 800076e:	42ab      	cmp	r3, r5
 8000770:	bfc8      	it	gt
 8000772:	600b      	strgt	r3, [r1, #0]
 8000774:	42b9      	cmp	r1, r7
 8000776:	d1f1      	bne.n	800075c <inv_fast_nomot_store_data_compass+0x20>
 8000778:	3401      	adds	r4, #1
 800077a:	2301      	movs	r3, #1
 800077c:	6794      	str	r4, [r2, #120]	; 0x78
 800077e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000782:	bcf0      	pop	{r4, r5, r6, r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <inv_fast_nomot_reset_data_compass>:
 8000788:	b430      	push	{r4, r5}
 800078a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800078c:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 800078e:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8000790:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8000794:	2300      	movs	r3, #0
 8000796:	67c5      	str	r5, [r0, #124]	; 0x7c
 8000798:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
 800079c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
 80007a0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 80007a4:	6603      	str	r3, [r0, #96]	; 0x60
 80007a6:	6643      	str	r3, [r0, #100]	; 0x64
 80007a8:	6683      	str	r3, [r0, #104]	; 0x68
 80007aa:	6783      	str	r3, [r0, #120]	; 0x78
 80007ac:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
 80007b0:	bc30      	pop	{r4, r5}
 80007b2:	4770      	bx	lr

080007b4 <inv_fast_nomot_get_time_elaps>:
 80007b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80007b8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
 80007bc:	1a10      	subs	r0, r2, r0
 80007be:	4770      	bx	lr

080007c0 <inv_fast_nomot_parameter_compass>:
 80007c0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80007c2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80007c4:	6e82      	ldr	r2, [r0, #104]	; 0x68
 80007c6:	4299      	cmp	r1, r3
 80007c8:	bfb8      	it	lt
 80007ca:	4619      	movlt	r1, r3
 80007cc:	4291      	cmp	r1, r2
 80007ce:	4608      	mov	r0, r1
 80007d0:	bfb8      	it	lt
 80007d2:	4610      	movlt	r0, r2
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <inv_get_right_shift_by_rounding>:
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	4603      	mov	r3, r0
 80007dc:	468e      	mov	lr, r1
 80007de:	f1c2 0420 	rsb	r4, r2, #32
 80007e2:	f1b2 0720 	subs.w	r7, r2, #32
 80007e6:	fa0e fc04 	lsl.w	ip, lr, r4
 80007ea:	fa23 f002 	lsr.w	r0, r3, r2
 80007ee:	f102 35ff 	add.w	r5, r2, #4294967295
 80007f2:	f04f 0601 	mov.w	r6, #1
 80007f6:	bf58      	it	pl
 80007f8:	fa4e f707 	asrpl.w	r7, lr, r7
 80007fc:	fa06 f605 	lsl.w	r6, r6, r5
 8000800:	ea4c 0000 	orr.w	r0, ip, r0
 8000804:	f1a4 0520 	sub.w	r5, r4, #32
 8000808:	bf58      	it	pl
 800080a:	4338      	orrpl	r0, r7
 800080c:	fa03 f505 	lsl.w	r5, r3, r5
 8000810:	f1c4 0720 	rsb	r7, r4, #32
 8000814:	fa23 f707 	lsr.w	r7, r3, r7
 8000818:	ea4c 0505 	orr.w	r5, ip, r5
 800081c:	433d      	orrs	r5, r7
 800081e:	40a3      	lsls	r3, r4
 8000820:	f1c4 0720 	rsb	r7, r4, #32
 8000824:	40e3      	lsrs	r3, r4
 8000826:	fa05 f707 	lsl.w	r7, r5, r7
 800082a:	3c20      	subs	r4, #32
 800082c:	ea43 0307 	orr.w	r3, r3, r7
 8000830:	bf5c      	itt	pl
 8000832:	fa45 f404 	asrpl.w	r4, r5, r4
 8000836:	4323      	orrpl	r3, r4
 8000838:	429e      	cmp	r6, r3
 800083a:	fa4e f102 	asr.w	r1, lr, r2
 800083e:	db07      	blt.n	8000850 <inv_get_right_shift_by_rounding+0x78>
 8000840:	4276      	negs	r6, r6
 8000842:	42b3      	cmp	r3, r6
 8000844:	da03      	bge.n	800084e <inv_get_right_shift_by_rounding+0x76>
 8000846:	f110 30ff 	adds.w	r0, r0, #4294967295
 800084a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800084e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000850:	3001      	adds	r0, #1
 8000852:	f141 0100 	adc.w	r1, r1, #0
 8000856:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000858 <inv_reset_min_max_gyro_accel_statistics>:
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <inv_reset_min_max_gyro_accel_statistics+0x30>)
 800085a:	2300      	movs	r3, #0
 800085c:	4611      	mov	r1, r2
 800085e:	f841 3b04 	str.w	r3, [r1], #4
 8000862:	3104      	adds	r1, #4
 8000864:	6053      	str	r3, [r2, #4]
 8000866:	f841 3b04 	str.w	r3, [r1], #4
 800086a:	600b      	str	r3, [r1, #0]
 800086c:	6213      	str	r3, [r2, #32]
 800086e:	6253      	str	r3, [r2, #36]	; 0x24
 8000870:	6293      	str	r3, [r2, #40]	; 0x28
 8000872:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000874:	6113      	str	r3, [r2, #16]
 8000876:	6153      	str	r3, [r2, #20]
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	61d3      	str	r3, [r2, #28]
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	6353      	str	r3, [r2, #52]	; 0x34
 8000880:	6393      	str	r3, [r2, #56]	; 0x38
 8000882:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20001410 	.word	0x20001410

0800088c <inv_record_max_moment_in_no_motion_gyro>:
 800088c:	4a0b      	ldr	r2, [pc, #44]	; (80008bc <inv_record_max_moment_in_no_motion_gyro+0x30>)
 800088e:	b4f0      	push	{r4, r5, r6, r7}
 8000890:	f8d2 3248 	ldr.w	r3, [r2, #584]	; 0x248
 8000894:	4604      	mov	r4, r0
 8000896:	460d      	mov	r5, r1
 8000898:	b16b      	cbz	r3, 80008b6 <inv_record_max_moment_in_no_motion_gyro+0x2a>
 800089a:	4611      	mov	r1, r2
 800089c:	e9f1 6790 	ldrd	r6, r7, [r1, #576]!	; 0x240
 80008a0:	4286      	cmp	r6, r0
 80008a2:	eb77 0005 	sbcs.w	r0, r7, r5
 80008a6:	da01      	bge.n	80008ac <inv_record_max_moment_in_no_motion_gyro+0x20>
 80008a8:	e9c1 4500 	strd	r4, r5, [r1]
 80008ac:	bcf0      	pop	{r4, r5, r6, r7}
 80008ae:	3301      	adds	r3, #1
 80008b0:	f8c2 3248 	str.w	r3, [r2, #584]	; 0x248
 80008b4:	4770      	bx	lr
 80008b6:	f502 7110 	add.w	r1, r2, #576	; 0x240
 80008ba:	e7f5      	b.n	80008a8 <inv_record_max_moment_in_no_motion_gyro+0x1c>
 80008bc:	200011f0 	.word	0x200011f0

080008c0 <inv_record_max_moment_in_no_motion_accel>:
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <inv_record_max_moment_in_no_motion_accel+0x30>)
 80008c2:	b4f0      	push	{r4, r5, r6, r7}
 80008c4:	f8d2 3258 	ldr.w	r3, [r2, #600]	; 0x258
 80008c8:	4604      	mov	r4, r0
 80008ca:	460d      	mov	r5, r1
 80008cc:	b16b      	cbz	r3, 80008ea <inv_record_max_moment_in_no_motion_accel+0x2a>
 80008ce:	4611      	mov	r1, r2
 80008d0:	e9f1 6794 	ldrd	r6, r7, [r1, #592]!	; 0x250
 80008d4:	4286      	cmp	r6, r0
 80008d6:	eb77 0005 	sbcs.w	r0, r7, r5
 80008da:	da01      	bge.n	80008e0 <inv_record_max_moment_in_no_motion_accel+0x20>
 80008dc:	e9c1 4500 	strd	r4, r5, [r1]
 80008e0:	bcf0      	pop	{r4, r5, r6, r7}
 80008e2:	3301      	adds	r3, #1
 80008e4:	f8c2 3258 	str.w	r3, [r2, #600]	; 0x258
 80008e8:	4770      	bx	lr
 80008ea:	f502 7114 	add.w	r1, r2, #592	; 0x250
 80008ee:	e7f5      	b.n	80008dc <inv_record_max_moment_in_no_motion_accel+0x1c>
 80008f0:	200011f0 	.word	0x200011f0

080008f4 <inv_record_min_moment_in_motion_gyro>:
 80008f4:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <inv_record_min_moment_in_motion_gyro+0x30>)
 80008f6:	b4f0      	push	{r4, r5, r6, r7}
 80008f8:	f8d2 3228 	ldr.w	r3, [r2, #552]	; 0x228
 80008fc:	4604      	mov	r4, r0
 80008fe:	460d      	mov	r5, r1
 8000900:	b16b      	cbz	r3, 800091e <inv_record_min_moment_in_motion_gyro+0x2a>
 8000902:	4611      	mov	r1, r2
 8000904:	e9f1 6788 	ldrd	r6, r7, [r1, #544]!	; 0x220
 8000908:	42b0      	cmp	r0, r6
 800090a:	eb75 0007 	sbcs.w	r0, r5, r7
 800090e:	da01      	bge.n	8000914 <inv_record_min_moment_in_motion_gyro+0x20>
 8000910:	e9c1 4500 	strd	r4, r5, [r1]
 8000914:	bcf0      	pop	{r4, r5, r6, r7}
 8000916:	3301      	adds	r3, #1
 8000918:	f8c2 3228 	str.w	r3, [r2, #552]	; 0x228
 800091c:	4770      	bx	lr
 800091e:	f502 7108 	add.w	r1, r2, #544	; 0x220
 8000922:	e7f5      	b.n	8000910 <inv_record_min_moment_in_motion_gyro+0x1c>
 8000924:	200011f0 	.word	0x200011f0

08000928 <inv_record_min_moment_in_motion_accel>:
 8000928:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <inv_record_min_moment_in_motion_accel+0x30>)
 800092a:	b4f0      	push	{r4, r5, r6, r7}
 800092c:	f8d2 3238 	ldr.w	r3, [r2, #568]	; 0x238
 8000930:	4604      	mov	r4, r0
 8000932:	460d      	mov	r5, r1
 8000934:	b16b      	cbz	r3, 8000952 <inv_record_min_moment_in_motion_accel+0x2a>
 8000936:	4611      	mov	r1, r2
 8000938:	e9f1 678c 	ldrd	r6, r7, [r1, #560]!	; 0x230
 800093c:	42b0      	cmp	r0, r6
 800093e:	eb75 0007 	sbcs.w	r0, r5, r7
 8000942:	da01      	bge.n	8000948 <inv_record_min_moment_in_motion_accel+0x20>
 8000944:	e9c1 4500 	strd	r4, r5, [r1]
 8000948:	bcf0      	pop	{r4, r5, r6, r7}
 800094a:	3301      	adds	r3, #1
 800094c:	f8c2 3238 	str.w	r3, [r2, #568]	; 0x238
 8000950:	4770      	bx	lr
 8000952:	f502 710c 	add.w	r1, r2, #560	; 0x230
 8000956:	e7f5      	b.n	8000944 <inv_record_min_moment_in_motion_accel+0x1c>
 8000958:	200011f0 	.word	0x200011f0

0800095c <inv_detect_motion_by_gyro_accel>:
 800095c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000960:	4c4c      	ldr	r4, [pc, #304]	; (8000a94 <inv_detect_motion_by_gyro_accel+0x138>)
 8000962:	4e4d      	ldr	r6, [pc, #308]	; (8000a98 <inv_detect_motion_by_gyro_accel+0x13c>)
 8000964:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8000966:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8000968:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800096a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800096c:	1a52      	subs	r2, r2, r1
 800096e:	1aeb      	subs	r3, r5, r3
 8000970:	4293      	cmp	r3, r2
 8000972:	bfb8      	it	lt
 8000974:	4613      	movlt	r3, r2
 8000976:	4619      	mov	r1, r3
 8000978:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800097a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800097c:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
 800097e:	1a9a      	subs	r2, r3, r2
 8000980:	4291      	cmp	r1, r2
 8000982:	460b      	mov	r3, r1
 8000984:	bfb8      	it	lt
 8000986:	4613      	movlt	r3, r2
 8000988:	429d      	cmp	r5, r3
 800098a:	db5a      	blt.n	8000a42 <inv_detect_motion_by_gyro_accel+0xe6>
 800098c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800098e:	05dd      	lsls	r5, r3, #23
 8000990:	d402      	bmi.n	8000998 <inv_detect_motion_by_gyro_accel+0x3c>
 8000992:	2002      	movs	r0, #2
 8000994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000998:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800099c:	6822      	ldr	r2, [r4, #0]
 800099e:	4293      	cmp	r3, r2
 80009a0:	dbf7      	blt.n	8000992 <inv_detect_motion_by_gyro_accel+0x36>
 80009a2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80009a4:	05c9      	lsls	r1, r1, #23
 80009a6:	d551      	bpl.n	8000a4c <inv_detect_motion_by_gyro_accel+0xf0>
 80009a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
 80009ac:	429a      	cmp	r2, r3
 80009ae:	dcf0      	bgt.n	8000992 <inv_detect_motion_by_gyro_accel+0x36>
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d15b      	bne.n	8000a6c <inv_detect_motion_by_gyro_accel+0x110>
 80009b4:	f04f 0800 	mov.w	r8, #0
 80009b8:	f04f 0900 	mov.w	r9, #0
 80009bc:	4935      	ldr	r1, [pc, #212]	; (8000a94 <inv_detect_motion_by_gyro_accel+0x138>)
 80009be:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80009c2:	4542      	cmp	r2, r8
 80009c4:	f501 70ec 	add.w	r0, r1, #472	; 0x1d8
 80009c8:	eb73 0309 	sbcs.w	r3, r3, r9
 80009cc:	e9c0 8900 	strd	r8, r9, [r0]
 80009d0:	da4a      	bge.n	8000a68 <inv_detect_motion_by_gyro_accel+0x10c>
 80009d2:	f8d1 3238 	ldr.w	r3, [r1, #568]	; 0x238
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d153      	bne.n	8000a82 <inv_detect_motion_by_gyro_accel+0x126>
 80009da:	f501 710c 	add.w	r1, r1, #560	; 0x230
 80009de:	e9c1 8900 	strd	r8, r9, [r1]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f8c4 3238 	str.w	r3, [r4, #568]	; 0x238
 80009e8:	2500      	movs	r5, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2298      	movs	r2, #152	; 0x98
 80009ee:	482b      	ldr	r0, [pc, #172]	; (8000a9c <inv_detect_motion_by_gyro_accel+0x140>)
 80009f0:	f00f fe1d 	bl	801062e <memset>
 80009f4:	2004      	movs	r0, #4
 80009f6:	f7ff fce3 	bl	80003c0 <inv_init_maxmin>
 80009fa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80009fe:	b343      	cbz	r3, 8000a52 <inv_detect_motion_by_gyro_accel+0xf6>
 8000a00:	4827      	ldr	r0, [pc, #156]	; (8000aa0 <inv_detect_motion_by_gyro_accel+0x144>)
 8000a02:	f7ff fc15 	bl	8000230 <inv_fast_nomot_parameter.part.3>
 8000a06:	f106 0718 	add.w	r7, r6, #24
 8000a0a:	e9d7 6700 	ldrd	r6, r7, [r7]
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <inv_detect_motion_by_gyro_accel+0x138>)
 8000a10:	4286      	cmp	r6, r0
 8000a12:	f503 72f8 	add.w	r2, r3, #496	; 0x1f0
 8000a16:	e9c2 0100 	strd	r0, r1, [r2]
 8000a1a:	eb77 0201 	sbcs.w	r2, r7, r1
 8000a1e:	da1b      	bge.n	8000a58 <inv_detect_motion_by_gyro_accel+0xfc>
 8000a20:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8000a24:	b1da      	cbz	r2, 8000a5e <inv_detect_motion_by_gyro_accel+0x102>
 8000a26:	e9f3 6788 	ldrd	r6, r7, [r3, #544]!	; 0x220
 8000a2a:	42b0      	cmp	r0, r6
 8000a2c:	eb71 0507 	sbcs.w	r5, r1, r7
 8000a30:	da01      	bge.n	8000a36 <inv_detect_motion_by_gyro_accel+0xda>
 8000a32:	e9c3 0100 	strd	r0, r1, [r3]
 8000a36:	3201      	adds	r2, #1
 8000a38:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a42:	f7ff fcf3 	bl	800042c <inv_reset_packet>
 8000a46:	2000      	movs	r0, #0
 8000a48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a4c:	2501      	movs	r5, #1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1d6      	bne.n	8000a00 <inv_detect_motion_by_gyro_accel+0xa4>
 8000a52:	2000      	movs	r0, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	e7d6      	b.n	8000a06 <inv_detect_motion_by_gyro_accel+0xaa>
 8000a58:	4628      	mov	r0, r5
 8000a5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a62:	e9c3 0100 	strd	r0, r1, [r3]
 8000a66:	e7e6      	b.n	8000a36 <inv_detect_motion_by_gyro_accel+0xda>
 8000a68:	2501      	movs	r5, #1
 8000a6a:	e7be      	b.n	80009ea <inv_detect_motion_by_gyro_accel+0x8e>
 8000a6c:	f504 709c 	add.w	r0, r4, #312	; 0x138
 8000a70:	f7ff fbde 	bl	8000230 <inv_fast_nomot_parameter.part.3>
 8000a74:	ea4f 5810 	mov.w	r8, r0, lsr #20
 8000a78:	ea48 3801 	orr.w	r8, r8, r1, lsl #12
 8000a7c:	ea4f 5921 	mov.w	r9, r1, asr #20
 8000a80:	e79c      	b.n	80009bc <inv_detect_motion_by_gyro_accel+0x60>
 8000a82:	e9f1 ab8c 	ldrd	sl, fp, [r1, #560]!	; 0x230
 8000a86:	45d0      	cmp	r8, sl
 8000a88:	eb79 020b 	sbcs.w	r2, r9, fp
 8000a8c:	daa9      	bge.n	80009e2 <inv_detect_motion_by_gyro_accel+0x86>
 8000a8e:	e9c1 8900 	strd	r8, r9, [r1]
 8000a92:	e7a6      	b.n	80009e2 <inv_detect_motion_by_gyro_accel+0x86>
 8000a94:	200011f0 	.word	0x200011f0
 8000a98:	20000258 	.word	0x20000258
 8000a9c:	20001328 	.word	0x20001328
 8000aa0:	200011f8 	.word	0x200011f8

08000aa4 <inv_sensor_data_preprocess>:
 8000aa4:	b570      	push	{r4, r5, r6, lr}
 8000aa6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000aa8:	b084      	sub	sp, #16
 8000aaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000aae:	2bc0      	cmp	r3, #192	; 0xc0
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	d02e      	beq.n	8000b12 <inv_sensor_data_preprocess+0x6e>
 8000ab4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000ab6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8000aba:	2bc0      	cmp	r3, #192	; 0xc0
 8000abc:	d023      	beq.n	8000b06 <inv_sensor_data_preprocess+0x62>
 8000abe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000ac2:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8000ac6:	2ac0      	cmp	r2, #192	; 0xc0
 8000ac8:	d016      	beq.n	8000af8 <inv_sensor_data_preprocess+0x54>
 8000aca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000ace:	2b60      	cmp	r3, #96	; 0x60
 8000ad0:	d001      	beq.n	8000ad6 <inv_sensor_data_preprocess+0x32>
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd70      	pop	{r4, r5, r6, pc}
 8000ad6:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8000ada:	c90e      	ldmia	r1, {r1, r2, r3}
 8000adc:	138e      	asrs	r6, r1, #14
 8000ade:	1395      	asrs	r5, r2, #14
 8000ae0:	139b      	asrs	r3, r3, #14
 8000ae2:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8000ae6:	a801      	add	r0, sp, #4
 8000ae8:	4a0c      	ldr	r2, [pc, #48]	; (8000b1c <inv_sensor_data_preprocess+0x78>)
 8000aea:	9601      	str	r6, [sp, #4]
 8000aec:	9502      	str	r5, [sp, #8]
 8000aee:	9303      	str	r3, [sp, #12]
 8000af0:	f7ff fe24 	bl	800073c <inv_fast_nomot_store_data_compass>
 8000af4:	b004      	add	sp, #16
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
 8000af8:	f9b4 608c 	ldrsh.w	r6, [r4, #140]	; 0x8c
 8000afc:	f9b4 508e 	ldrsh.w	r5, [r4, #142]	; 0x8e
 8000b00:	f9b4 3090 	ldrsh.w	r3, [r4, #144]	; 0x90
 8000b04:	e7ed      	b.n	8000ae2 <inv_sensor_data_preprocess+0x3e>
 8000b06:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000b0a:	4905      	ldr	r1, [pc, #20]	; (8000b20 <inv_sensor_data_preprocess+0x7c>)
 8000b0c:	f7ff fdc6 	bl	800069c <inv_fast_nomot_store_data>
 8000b10:	e7d5      	b.n	8000abe <inv_sensor_data_preprocess+0x1a>
 8000b12:	3004      	adds	r0, #4
 8000b14:	4903      	ldr	r1, [pc, #12]	; (8000b24 <inv_sensor_data_preprocess+0x80>)
 8000b16:	f7ff fdc1 	bl	800069c <inv_fast_nomot_store_data>
 8000b1a:	e7cb      	b.n	8000ab4 <inv_sensor_data_preprocess+0x10>
 8000b1c:	20001290 	.word	0x20001290
 8000b20:	20001328 	.word	0x20001328
 8000b24:	200011f8 	.word	0x200011f8

08000b28 <inv_generate_fast_nomot>:
 8000b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b2e:	05d9      	lsls	r1, r3, #23
 8000b30:	f140 8082 	bpl.w	8000c38 <inv_generate_fast_nomot+0x110>
 8000b34:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8000b36:	4604      	mov	r4, r0
 8000b38:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000b3c:	2a40      	cmp	r2, #64	; 0x40
 8000b3e:	d07e      	beq.n	8000c3e <inv_generate_fast_nomot+0x116>
 8000b40:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 8000b44:	f002 0250 	and.w	r2, r2, #80	; 0x50
 8000b48:	2a40      	cmp	r2, #64	; 0x40
 8000b4a:	d078      	beq.n	8000c3e <inv_generate_fast_nomot+0x116>
 8000b4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000b50:	2b40      	cmp	r3, #64	; 0x40
 8000b52:	d074      	beq.n	8000c3e <inv_generate_fast_nomot+0x116>
 8000b54:	4db8      	ldr	r5, [pc, #736]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000b56:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b58:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
 8000b5c:	4eb6      	ldr	r6, [pc, #728]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d019      	beq.n	8000b96 <inv_generate_fast_nomot+0x6e>
 8000b62:	2b09      	cmp	r3, #9
 8000b64:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
 8000b68:	4fb4      	ldr	r7, [pc, #720]	; (8000e3c <inv_generate_fast_nomot+0x314>)
 8000b6a:	f340 8124 	ble.w	8000db6 <inv_generate_fast_nomot+0x28e>
 8000b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b72:	4619      	mov	r1, r3
 8000b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b76:	f8c6 320c 	str.w	r3, [r6, #524]	; 0x20c
 8000b7a:	6030      	str	r0, [r6, #0]
 8000b7c:	f8c6 2214 	str.w	r2, [r6, #532]	; 0x214
 8000b80:	2219      	movs	r2, #25
 8000b82:	408a      	lsls	r2, r1
 8000b84:	f1c3 0310 	rsb	r3, r3, #16
 8000b88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8c:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
 8000b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000b92:	f8c5 1218 	str.w	r1, [r5, #536]	; 0x218
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff ff84 	bl	8000aa4 <inv_sensor_data_preprocess>
 8000b9c:	f895 31e8 	ldrb.w	r3, [r5, #488]	; 0x1e8
 8000ba0:	2b06      	cmp	r3, #6
 8000ba2:	d849      	bhi.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000ba4:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000ba8:	00c800f4 	.word	0x00c800f4
 8000bac:	000700bf 	.word	0x000700bf
 8000bb0:	0077009b 	.word	0x0077009b
 8000bb4:	0054      	.short	0x0054
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	f7ff fed0 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	f000 80f6 	beq.w	8000dae <inv_generate_fast_nomot+0x286>
 8000bc2:	2801      	cmp	r0, #1
 8000bc4:	d138      	bne.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000bc6:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000bca:	05da      	lsls	r2, r3, #23
 8000bcc:	f140 812c 	bpl.w	8000e28 <inv_generate_fast_nomot+0x300>
 8000bd0:	f505 7080 	add.w	r0, r5, #256	; 0x100
 8000bd4:	c80d      	ldmia	r0, {r0, r2, r3}
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	bfb8      	it	lt
 8000bda:	4610      	movlt	r0, r2
 8000bdc:	4283      	cmp	r3, r0
 8000bde:	bfb8      	it	lt
 8000be0:	4603      	movlt	r3, r0
 8000be2:	4618      	mov	r0, r3
 8000be4:	4e94      	ldr	r6, [pc, #592]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000be6:	4f95      	ldr	r7, [pc, #596]	; (8000e3c <inv_generate_fast_nomot+0x314>)
 8000be8:	17d9      	asrs	r1, r3, #31
 8000bea:	f506 73e8 	add.w	r3, r6, #464	; 0x1d0
 8000bee:	e9c3 0100 	strd	r0, r1, [r3]
 8000bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	418b      	sbcs	r3, r1
 8000bfa:	f280 810c 	bge.w	8000e16 <inv_generate_fast_nomot+0x2ee>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
 8000c04:	4b8e      	ldr	r3, [pc, #568]	; (8000e40 <inv_generate_fast_nomot+0x318>)
 8000c06:	f8d5 2258 	ldr.w	r2, [r5, #600]	; 0x258
 8000c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 80f1 	bne.w	8000df6 <inv_generate_fast_nomot+0x2ce>
 8000c14:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
 8000c18:	498a      	ldr	r1, [pc, #552]	; (8000e44 <inv_generate_fast_nomot+0x31c>)
 8000c1a:	f8d5 3248 	ldr.w	r3, [r5, #584]	; 0x248
 8000c1e:	3201      	adds	r2, #1
 8000c20:	f8c5 2258 	str.w	r2, [r5, #600]	; 0x258
 8000c24:	e9d1 6700 	ldrd	r6, r7, [r1]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f040 80da 	bne.w	8000de2 <inv_generate_fast_nomot+0x2ba>
 8000c2e:	e9c1 6714 	strd	r6, r7, [r1, #80]	; 0x50
 8000c32:	3301      	adds	r3, #1
 8000c34:	f8c5 3248 	str.w	r3, [r5, #584]	; 0x248
 8000c38:	2000      	movs	r0, #0
 8000c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c3e:	4d7e      	ldr	r5, [pc, #504]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000c40:	f7ff fbf4 	bl	800042c <inv_reset_packet>
 8000c44:	2300      	movs	r3, #0
 8000c46:	f8c5 31e0 	str.w	r3, [r5, #480]	; 0x1e0
 8000c4a:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000c4e:	e782      	b.n	8000b56 <inv_generate_fast_nomot+0x2e>
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fe83 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000c56:	2801      	cmp	r0, #1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	f000 80be 	beq.w	8000dda <inv_generate_fast_nomot+0x2b2>
 8000c5e:	2800      	cmp	r0, #0
 8000c60:	d1ea      	bne.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000c62:	f7ff fbe3 	bl	800042c <inv_reset_packet>
 8000c66:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 8000c6a:	f505 7086 	add.w	r0, r5, #268	; 0x10c
 8000c6e:	c807      	ldmia	r0, {r0, r1, r2}
 8000c70:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
 8000c74:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
 8000c78:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
 8000c7c:	f8c5 4118 	str.w	r4, [r5, #280]	; 0x118
 8000c80:	f8c5 4130 	str.w	r4, [r5, #304]	; 0x130
 8000c84:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
 8000c88:	f8c5 1120 	str.w	r1, [r5, #288]	; 0x120
 8000c8c:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8000c90:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
 8000c94:	e7d0      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000c96:	2306      	movs	r3, #6
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000c9e:	f00e fd39 	bl	800f714 <inv_set_motion_state>
 8000ca2:	f7ff fbc3 	bl	800042c <inv_reset_packet>
 8000ca6:	f8d5 410c 	ldr.w	r4, [r5, #268]	; 0x10c
 8000caa:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8000cae:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
 8000cb2:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c5 411c 	str.w	r4, [r5, #284]	; 0x11c
 8000cbc:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 8000cc0:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
 8000cc4:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
 8000cc8:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8000ccc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8000cd0:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
 8000cd4:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8000cd8:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
 8000cdc:	e7ac      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000cde:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	d514      	bpl.n	8000d10 <inv_generate_fast_nomot+0x1e8>
 8000ce6:	f505 7180 	add.w	r1, r5, #256	; 0x100
 8000cea:	c90e      	ldmia	r1, {r1, r2, r3}
 8000cec:	428a      	cmp	r2, r1
 8000cee:	bfb8      	it	lt
 8000cf0:	460a      	movlt	r2, r1
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	bfb8      	it	lt
 8000cf6:	4613      	movlt	r3, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4853      	ldr	r0, [pc, #332]	; (8000e48 <inv_generate_fast_nomot+0x320>)
 8000cfc:	494f      	ldr	r1, [pc, #316]	; (8000e3c <inv_generate_fast_nomot+0x314>)
 8000cfe:	17db      	asrs	r3, r3, #31
 8000d00:	e9c0 2300 	strd	r2, r3, [r0]
 8000d04:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8000d0e:	db4e      	blt.n	8000dae <inv_generate_fast_nomot+0x286>
 8000d10:	4620      	mov	r0, r4
 8000d12:	f7ff fe23 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d049      	beq.n	8000dae <inv_generate_fast_nomot+0x286>
 8000d1a:	2801      	cmp	r0, #1
 8000d1c:	d18c      	bne.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff fc2a 	bl	8000578 <inv_fast_nomot_set_gyro_bias>
 8000d24:	e76e      	b.n	8000c04 <inv_generate_fast_nomot+0xdc>
 8000d26:	2303      	movs	r3, #3
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000d2e:	f7ff fc23 	bl	8000578 <inv_fast_nomot_set_gyro_bias>
 8000d32:	f7ff fb7b 	bl	800042c <inv_reset_packet>
 8000d36:	e77f      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000d38:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000d3c:	4e3e      	ldr	r6, [pc, #248]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	f47f af7a 	bne.w	8000c38 <inv_generate_fast_nomot+0x110>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f7ff fe09 	bl	800095c <inv_detect_motion_by_gyro_accel>
 8000d4a:	2800      	cmp	r0, #0
 8000d4c:	d15d      	bne.n	8000e0a <inv_generate_fast_nomot+0x2e2>
 8000d4e:	2305      	movs	r3, #5
 8000d50:	f886 31e8 	strb.w	r3, [r6, #488]	; 0x1e8
 8000d54:	f8d5 410c 	ldr.w	r4, [r5, #268]	; 0x10c
 8000d58:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
 8000d5c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
 8000d60:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c5 411c 	str.w	r4, [r5, #284]	; 0x11c
 8000d6a:	f8c5 0120 	str.w	r0, [r5, #288]	; 0x120
 8000d6e:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
 8000d72:	f8c5 212c 	str.w	r2, [r5, #300]	; 0x12c
 8000d76:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
 8000d7a:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
 8000d7e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
 8000d82:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
 8000d86:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
 8000d8a:	f7ff fd65 	bl	8000858 <inv_reset_min_max_gyro_accel_statistics>
 8000d8e:	e753      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000d90:	f8d5 31e0 	ldr.w	r3, [r5, #480]	; 0x1e0
 8000d94:	4c28      	ldr	r4, [pc, #160]	; (8000e38 <inv_generate_fast_nomot+0x310>)
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	2b09      	cmp	r3, #9
 8000d9a:	f8c5 21e0 	str.w	r2, [r5, #480]	; 0x1e0
 8000d9e:	f77f af4b 	ble.w	8000c38 <inv_generate_fast_nomot+0x110>
 8000da2:	f7ff fb43 	bl	800042c <inv_reset_packet>
 8000da6:	2301      	movs	r3, #1
 8000da8:	f884 31e8 	strb.w	r3, [r4, #488]	; 0x1e8
 8000dac:	e744      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000dae:	2305      	movs	r3, #5
 8000db0:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000db4:	e740      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	3201      	adds	r2, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	6033      	str	r3, [r6, #0]
 8000dc2:	f8c6 220c 	str.w	r2, [r6, #524]	; 0x20c
 8000dc6:	f002 fd61 	bl	800388c <__aeabi_i2f>
 8000dca:	f014 f841 	bl	8014e50 <sqrtf>
 8000dce:	f8d6 320c 	ldr.w	r3, [r6, #524]	; 0x20c
 8000dd2:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 8000dd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000dd8:	e6d2      	b.n	8000b80 <inv_generate_fast_nomot+0x58>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000de0:	e72a      	b.n	8000c38 <inv_generate_fast_nomot+0x110>
 8000de2:	e9f1 8914 	ldrd	r8, r9, [r1, #80]!	; 0x50
 8000de6:	45b0      	cmp	r8, r6
 8000de8:	eb79 0207 	sbcs.w	r2, r9, r7
 8000dec:	f6bf af21 	bge.w	8000c32 <inv_generate_fast_nomot+0x10a>
 8000df0:	e9c1 6700 	strd	r6, r7, [r1]
 8000df4:	e71d      	b.n	8000c32 <inv_generate_fast_nomot+0x10a>
 8000df6:	e9f3 671e 	ldrd	r6, r7, [r3, #120]!	; 0x78
 8000dfa:	4286      	cmp	r6, r0
 8000dfc:	eb77 0401 	sbcs.w	r4, r7, r1
 8000e00:	f6bf af0a 	bge.w	8000c18 <inv_generate_fast_nomot+0xf0>
 8000e04:	e9c3 0100 	strd	r0, r1, [r3]
 8000e08:	e706      	b.n	8000c18 <inv_generate_fast_nomot+0xf0>
 8000e0a:	2801      	cmp	r0, #1
 8000e0c:	bf04      	itt	eq
 8000e0e:	2302      	moveq	r3, #2
 8000e10:	f886 31e8 	strbeq.w	r3, [r6, #488]	; 0x1e8
 8000e14:	e79e      	b.n	8000d54 <inv_generate_fast_nomot+0x22c>
 8000e16:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 8000e1a:	f8d6 112c 	ldr.w	r1, [r6, #300]	; 0x12c
 8000e1e:	6a3a      	ldr	r2, [r7, #32]
 8000e20:	1a5b      	subs	r3, r3, r1
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f4ff aeee 	bcc.w	8000c04 <inv_generate_fast_nomot+0xdc>
 8000e28:	2304      	movs	r3, #4
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f885 31e8 	strb.w	r3, [r5, #488]	; 0x1e8
 8000e30:	f7ff fba2 	bl	8000578 <inv_fast_nomot_set_gyro_bias>
 8000e34:	e6e6      	b.n	8000c04 <inv_generate_fast_nomot+0xdc>
 8000e36:	bf00      	nop
 8000e38:	200011f0 	.word	0x200011f0
 8000e3c:	20000258 	.word	0x20000258
 8000e40:	200013c8 	.word	0x200013c8
 8000e44:	200013e0 	.word	0x200013e0
 8000e48:	200013c0 	.word	0x200013c0

08000e4c <inv_set_default_number_of_samples>:
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	2300      	movs	r3, #0
 8000e50:	1040      	asrs	r0, r0, #1
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d110      	bne.n	8000e78 <inv_set_default_number_of_samples+0x2c>
 8000e56:	3301      	adds	r3, #1
 8000e58:	4c09      	ldr	r4, [pc, #36]	; (8000e80 <inv_set_default_number_of_samples+0x34>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	4610      	mov	r0, r2
 8000e60:	6363      	str	r3, [r4, #52]	; 0x34
 8000e62:	6322      	str	r2, [r4, #48]	; 0x30
 8000e64:	f002 fd12 	bl	800388c <__aeabi_i2f>
 8000e68:	f013 fff2 	bl	8014e50 <sqrtf>
 8000e6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000e6e:	2319      	movs	r3, #25
 8000e70:	4093      	lsls	r3, r2
 8000e72:	63a0      	str	r0, [r4, #56]	; 0x38
 8000e74:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000e76:	bd10      	pop	{r4, pc}
 8000e78:	f103 0301 	add.w	r3, r3, #1
 8000e7c:	dce8      	bgt.n	8000e50 <inv_set_default_number_of_samples+0x4>
 8000e7e:	e7ea      	b.n	8000e56 <inv_set_default_number_of_samples+0xa>
 8000e80:	20000258 	.word	0x20000258

08000e84 <inv_init_fast_nomot>:
 8000e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e88:	f240 58dc 	movw	r8, #1500	; 0x5dc
 8000e8c:	4d15      	ldr	r5, [pc, #84]	; (8000ee4 <inv_init_fast_nomot+0x60>)
 8000e8e:	4c16      	ldr	r4, [pc, #88]	; (8000ee8 <inv_init_fast_nomot+0x64>)
 8000e90:	4628      	mov	r0, r5
 8000e92:	2100      	movs	r1, #0
 8000e94:	f44f 7218 	mov.w	r2, #608	; 0x260
 8000e98:	f00f fbc9 	bl	801062e <memset>
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2240      	movs	r2, #64	; 0x40
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f00f fbc4 	bl	801062e <memset>
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f7ff fa8a 	bl	80003c0 <inv_init_maxmin>
 8000eac:	490f      	ldr	r1, [pc, #60]	; (8000eec <inv_init_fast_nomot+0x68>)
 8000eae:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f04f 0e01 	mov.w	lr, #1
 8000eb8:	f04f 0900 	mov.w	r9, #0
 8000ebc:	2614      	movs	r6, #20
 8000ebe:	2700      	movs	r7, #0
 8000ec0:	2019      	movs	r0, #25
 8000ec2:	f8c5 e1e4 	str.w	lr, [r5, #484]	; 0x1e4
 8000ec6:	e9c4 8906 	strd	r8, r9, [r4, #24]
 8000eca:	e9c4 6702 	strd	r6, r7, [r4, #8]
 8000ece:	e9c4 2304 	strd	r2, r3, [r4, #16]
 8000ed2:	6221      	str	r1, [r4, #32]
 8000ed4:	f7ff ffba 	bl	8000e4c <inv_set_default_number_of_samples>
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f8c5 0208 	str.w	r0, [r5, #520]	; 0x208
 8000ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200011f0 	.word	0x200011f0
 8000ee8:	20000258 	.word	0x20000258
 8000eec:	2faf0800 	.word	0x2faf0800

08000ef0 <inv_stop_fast_nomot>:
 8000ef0:	b508      	push	{r3, lr}
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f00e fc0e 	bl	800f714 <inv_set_motion_state>
 8000ef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000efc:	4801      	ldr	r0, [pc, #4]	; (8000f04 <inv_stop_fast_nomot+0x14>)
 8000efe:	f00c be83 	b.w	800dc08 <inv_unregister_data_cb>
 8000f02:	bf00      	nop
 8000f04:	08000b29 	.word	0x08000b29

08000f08 <inv_enable_fast_nomot>:
 8000f08:	b508      	push	{r3, lr}
 8000f0a:	f7ff ffbb 	bl	8000e84 <inv_init_fast_nomot>
 8000f0e:	b100      	cbz	r0, 8000f12 <inv_enable_fast_nomot+0xa>
 8000f10:	bd08      	pop	{r3, pc}
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <inv_enable_fast_nomot+0x14>)
 8000f14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f18:	f00e bdec 	b.w	800faf4 <inv_register_mpl_start_notification>
 8000f1c:	08000459 	.word	0x08000459

08000f20 <inv_disable_fast_nomot>:
 8000f20:	b508      	push	{r3, lr}
 8000f22:	f7ff ffe5 	bl	8000ef0 <inv_stop_fast_nomot>
 8000f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000f2a:	4801      	ldr	r0, [pc, #4]	; (8000f30 <inv_disable_fast_nomot+0x10>)
 8000f2c:	f00e bda2 	b.w	800fa74 <inv_unregister_mpl_start_notification>
 8000f30:	08000459 	.word	0x08000459

08000f34 <inv_get_fnm_gyro_no_motion_param>:
 8000f34:	4b01      	ldr	r3, [pc, #4]	; (8000f3c <inv_get_fnm_gyro_no_motion_param+0x8>)
 8000f36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f3a:	4770      	bx	lr
 8000f3c:	200013e0 	.word	0x200013e0

08000f40 <inv_fnm_debug_print>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <inv_start_9x_sensor_fusion>:
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <inv_start_9x_sensor_fusion+0xc>)
 8000f4a:	f44f 7116 	mov.w	r1, #600	; 0x258
 8000f4e:	2204      	movs	r2, #4
 8000f50:	f00c bdb8 	b.w	800dac4 <inv_register_data_cb>
 8000f54:	08001539 	.word	0x08001539

08000f58 <inv_filter_correction_angle>:
 8000f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f5c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000f5e:	4688      	mov	r8, r1
 8000f60:	2c00      	cmp	r4, #0
 8000f62:	4692      	mov	sl, r2
 8000f64:	461f      	mov	r7, r3
 8000f66:	f2c0 80b9 	blt.w	80010dc <inv_filter_correction_angle+0x184>
 8000f6a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
 8000f6e:	f1a3 0903 	sub.w	r9, r3, #3
 8000f72:	fab9 f989 	clz	r9, r9
 8000f76:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8000f7a:	486b      	ldr	r0, [pc, #428]	; (8001128 <inv_filter_correction_angle+0x1d0>)
 8000f7c:	2224      	movs	r2, #36	; 0x24
 8000f7e:	f1a0 06bc 	sub.w	r6, r0, #188	; 0xbc
 8000f82:	1d01      	adds	r1, r0, #4
 8000f84:	f00f fb39 	bl	80105fa <memmove>
 8000f88:	f106 04b8 	add.w	r4, r6, #184	; 0xb8
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c6 80e0 	str.w	r8, [r6, #224]	; 0xe0
 8000f92:	f106 05e0 	add.w	r5, r6, #224	; 0xe0
 8000f96:	f854 1f04 	ldr.w	r1, [r4, #4]!
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f002 fbc2 	bl	8003724 <__addsf3>
 8000fa0:	42ac      	cmp	r4, r5
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	d1f7      	bne.n	8000f96 <inv_filter_correction_angle+0x3e>
 8000fa6:	4961      	ldr	r1, [pc, #388]	; (800112c <inv_filter_correction_angle+0x1d4>)
 8000fa8:	f002 fd78 	bl	8003a9c <__aeabi_fdiv>
 8000fac:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	4d5f      	ldr	r5, [pc, #380]	; (8001130 <inv_filter_correction_angle+0x1d8>)
 8000fb4:	f8c6 00e4 	str.w	r0, [r6, #228]	; 0xe4
 8000fb8:	dd16      	ble.n	8000fe8 <inv_filter_correction_angle+0x90>
 8000fba:	23c8      	movs	r3, #200	; 0xc8
 8000fbc:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	f002 fc63 	bl	800388c <__aeabi_i2f>
 8000fc6:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
 8000fca:	4605      	mov	r5, r0
 8000fcc:	4640      	mov	r0, r8
 8000fce:	db76      	blt.n	80010be <inv_filter_correction_angle+0x166>
 8000fd0:	4958      	ldr	r1, [pc, #352]	; (8001134 <inv_filter_correction_angle+0x1dc>)
 8000fd2:	f002 fd63 	bl	8003a9c <__aeabi_fdiv>
 8000fd6:	4601      	mov	r1, r0
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f002 fcab 	bl	8003934 <__aeabi_fmul>
 8000fde:	4956      	ldr	r1, [pc, #344]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 8000fe0:	f002 fd5c 	bl	8003a9c <__aeabi_fdiv>
 8000fe4:	4605      	mov	r5, r0
 8000fe6:	e023      	b.n	8001030 <inv_filter_correction_angle+0xd8>
 8000fe8:	4854      	ldr	r0, [pc, #336]	; (800113c <inv_filter_correction_angle+0x1e4>)
 8000fea:	17fb      	asrs	r3, r7, #31
 8000fec:	fb80 2007 	smull	r2, r0, r0, r7
 8000ff0:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
 8000ff4:	eba3 23e0 	sub.w	r3, r3, r0, asr #11
 8000ff8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ffc:	eb03 0a01 	add.w	sl, r3, r1
 8001000:	f1ba 0f00 	cmp.w	sl, #0
 8001004:	f8c5 a11c 	str.w	sl, [r5, #284]	; 0x11c
 8001008:	db6b      	blt.n	80010e2 <inv_filter_correction_angle+0x18a>
 800100a:	494d      	ldr	r1, [pc, #308]	; (8001140 <inv_filter_correction_angle+0x1e8>)
 800100c:	4640      	mov	r0, r8
 800100e:	f002 fd45 	bl	8003a9c <__aeabi_fdiv>
 8001012:	4605      	mov	r5, r0
 8001014:	4638      	mov	r0, r7
 8001016:	f002 fc39 	bl	800388c <__aeabi_i2f>
 800101a:	4601      	mov	r1, r0
 800101c:	4628      	mov	r0, r5
 800101e:	f002 fc89 	bl	8003934 <__aeabi_fmul>
 8001022:	4945      	ldr	r1, [pc, #276]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 8001024:	f002 fd3a 	bl	8003a9c <__aeabi_fdiv>
 8001028:	4605      	mov	r5, r0
 800102a:	f1ba 0f00 	cmp.w	sl, #0
 800102e:	d06b      	beq.n	8001108 <inv_filter_correction_angle+0x1b0>
 8001030:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 8001034:	b103      	cbz	r3, 8001038 <inv_filter_correction_angle+0xe0>
 8001036:	4645      	mov	r5, r8
 8001038:	4b42      	ldr	r3, [pc, #264]	; (8001144 <inv_filter_correction_angle+0x1ec>)
 800103a:	2100      	movs	r1, #0
 800103c:	429f      	cmp	r7, r3
 800103e:	bf08      	it	eq
 8001040:	4645      	moveq	r5, r8
 8001042:	4628      	mov	r0, r5
 8001044:	f002 fe0a 	bl	8003c5c <__aeabi_fcmpeq>
 8001048:	2800      	cmp	r0, #0
 800104a:	d043      	beq.n	80010d4 <inv_filter_correction_angle+0x17c>
 800104c:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
 8001050:	4621      	mov	r1, r4
 8001052:	f002 fb65 	bl	8003720 <__aeabi_fsub>
 8001056:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800105a:	f001 ffbd 	bl	8002fd8 <__aeabi_f2d>
 800105e:	a32e      	add	r3, pc, #184	; (adr r3, 8001118 <inv_filter_correction_angle+0x1c0>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f002 faa0 	bl	80035a8 <__aeabi_dcmpgt>
 8001068:	b330      	cbz	r0, 80010b8 <inv_filter_correction_angle+0x160>
 800106a:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
 800106e:	2100      	movs	r1, #0
 8001070:	4c2f      	ldr	r4, [pc, #188]	; (8001130 <inv_filter_correction_angle+0x1d8>)
 8001072:	f002 fdf3 	bl	8003c5c <__aeabi_fcmpeq>
 8001076:	b1f8      	cbz	r0, 80010b8 <inv_filter_correction_angle+0x160>
 8001078:	f1b9 0f00 	cmp.w	r9, #0
 800107c:	d01c      	beq.n	80010b8 <inv_filter_correction_angle+0x160>
 800107e:	23c8      	movs	r3, #200	; 0xc8
 8001080:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8001084:	4640      	mov	r0, r8
 8001086:	f001 ffa7 	bl	8002fd8 <__aeabi_f2d>
 800108a:	2200      	movs	r2, #0
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <inv_filter_correction_angle+0x1f0>)
 800108e:	f002 f925 	bl	80032dc <__aeabi_ddiv>
 8001092:	4604      	mov	r4, r0
 8001094:	4638      	mov	r0, r7
 8001096:	460d      	mov	r5, r1
 8001098:	f001 ff8c 	bl	8002fb4 <__aeabi_i2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f001 fff0 	bl	8003088 <__aeabi_dmul>
 80010a8:	a31d      	add	r3, pc, #116	; (adr r3, 8001120 <inv_filter_correction_angle+0x1c8>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f002 f915 	bl	80032dc <__aeabi_ddiv>
 80010b2:	f002 fae1 	bl	8003678 <__aeabi_d2f>
 80010b6:	4605      	mov	r5, r0
 80010b8:	4628      	mov	r0, r5
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	4923      	ldr	r1, [pc, #140]	; (800114c <inv_filter_correction_angle+0x1f4>)
 80010c0:	f002 fcec 	bl	8003a9c <__aeabi_fdiv>
 80010c4:	4629      	mov	r1, r5
 80010c6:	f002 fc35 	bl	8003934 <__aeabi_fmul>
 80010ca:	491b      	ldr	r1, [pc, #108]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 80010cc:	f002 fce6 	bl	8003a9c <__aeabi_fdiv>
 80010d0:	4605      	mov	r5, r0
 80010d2:	e7ad      	b.n	8001030 <inv_filter_correction_angle+0xd8>
 80010d4:	4620      	mov	r0, r4
 80010d6:	f8c6 40e8 	str.w	r4, [r6, #232]	; 0xe8
 80010da:	e7b9      	b.n	8001050 <inv_filter_correction_angle+0xf8>
 80010dc:	f04f 0900 	mov.w	r9, #0
 80010e0:	e74b      	b.n	8000f7a <inv_filter_correction_angle+0x22>
 80010e2:	2300      	movs	r3, #0
 80010e4:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
 80010e8:	4915      	ldr	r1, [pc, #84]	; (8001140 <inv_filter_correction_angle+0x1e8>)
 80010ea:	4640      	mov	r0, r8
 80010ec:	f002 fcd6 	bl	8003a9c <__aeabi_fdiv>
 80010f0:	4605      	mov	r5, r0
 80010f2:	4638      	mov	r0, r7
 80010f4:	f002 fbca 	bl	800388c <__aeabi_i2f>
 80010f8:	4601      	mov	r1, r0
 80010fa:	4628      	mov	r0, r5
 80010fc:	f002 fc1a 	bl	8003934 <__aeabi_fmul>
 8001100:	490d      	ldr	r1, [pc, #52]	; (8001138 <inv_filter_correction_angle+0x1e0>)
 8001102:	f002 fccb 	bl	8003a9c <__aeabi_fdiv>
 8001106:	4605      	mov	r5, r0
 8001108:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800110c:	2b01      	cmp	r3, #1
 800110e:	bf08      	it	eq
 8001110:	2500      	moveq	r5, #0
 8001112:	e78d      	b.n	8001030 <inv_filter_correction_angle+0xd8>
 8001114:	f3af 8000 	nop.w
 8001118:	cac08312 	.word	0xcac08312
 800111c:	3fb645a1 	.word	0x3fb645a1
 8001120:	00000000 	.word	0x00000000
 8001124:	40b38800 	.word	0x40b38800
 8001128:	2000150c 	.word	0x2000150c
 800112c:	41200000 	.word	0x41200000
 8001130:	20001450 	.word	0x20001450
 8001134:	42480000 	.word	0x42480000
 8001138:	459c4000 	.word	0x459c4000
 800113c:	68db8bad 	.word	0x68db8bad
 8001140:	43c80000 	.word	0x43c80000
 8001144:	000f4240 	.word	0x000f4240
 8001148:	40790000 	.word	0x40790000
 800114c:	43480000 	.word	0x43480000

08001150 <inv_perform_9x_fusion>:
 8001150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001154:	4ed0      	ldr	r6, [pc, #832]	; (8001498 <inv_perform_9x_fusion+0x348>)
 8001156:	b0ab      	sub	sp, #172	; 0xac
 8001158:	f8d6 2120 	ldr.w	r2, [r6, #288]	; 0x120
 800115c:	2300      	movs	r3, #0
 800115e:	2a03      	cmp	r2, #3
 8001160:	9303      	str	r3, [sp, #12]
 8001162:	9304      	str	r3, [sp, #16]
 8001164:	9305      	str	r3, [sp, #20]
 8001166:	f000 81a9 	beq.w	80014bc <inv_perform_9x_fusion+0x36c>
 800116a:	f106 03a4 	add.w	r3, r6, #164	; 0xa4
 800116e:	461c      	mov	r4, r3
 8001170:	9000      	str	r0, [sp, #0]
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	ad09      	add	r5, sp, #36	; 0x24
 8001176:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800117a:	f002 fb87 	bl	800388c <__aeabi_i2f>
 800117e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8001182:	f002 fbd7 	bl	8003934 <__aeabi_fmul>
 8001186:	4bc5      	ldr	r3, [pc, #788]	; (800149c <inv_perform_9x_fusion+0x34c>)
 8001188:	f845 0b04 	str.w	r0, [r5], #4
 800118c:	429c      	cmp	r4, r3
 800118e:	d1f2      	bne.n	8001176 <inv_perform_9x_fusion+0x26>
 8001190:	ad06      	add	r5, sp, #24
 8001192:	a81d      	add	r0, sp, #116	; 0x74
 8001194:	f1a3 04b4 	sub.w	r4, r3, #180	; 0xb4
 8001198:	f00e fb4c 	bl	800f834 <inv_get_6axis_quaternion>
 800119c:	4628      	mov	r0, r5
 800119e:	f00e fafb 	bl	800f798 <inv_get_gravity>
 80011a2:	f104 010c 	add.w	r1, r4, #12
 80011a6:	223c      	movs	r2, #60	; 0x3c
 80011a8:	4620      	mov	r0, r4
 80011aa:	f00f fa26 	bl	80105fa <memmove>
 80011ae:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80011b2:	2250      	movs	r2, #80	; 0x50
 80011b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80011b8:	f00f fa1f 	bl	80105fa <memmove>
 80011bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c0:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80011c4:	f8d6 c124 	ldr.w	ip, [r6, #292]	; 0x124
 80011c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80011cc:	f10c 0e01 	add.w	lr, ip, #1
 80011d0:	f104 0598 	add.w	r5, r4, #152	; 0x98
 80011d4:	ab1d      	add	r3, sp, #116	; 0x74
 80011d6:	f1be 0f06 	cmp.w	lr, #6
 80011da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011dc:	f8c6 e124 	str.w	lr, [r6, #292]	; 0x124
 80011e0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011e4:	f340 8116 	ble.w	8001414 <inv_perform_9x_fusion+0x2c4>
 80011e8:	2306      	movs	r3, #6
 80011ea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80011ee:	f04f 0900 	mov.w	r9, #0
 80011f2:	9b00      	ldr	r3, [sp, #0]
 80011f4:	eb06 1c09 	add.w	ip, r6, r9, lsl #4
 80011f8:	eb09 0449 	add.w	r4, r9, r9, lsl #1
 80011fc:	f8df a2b4 	ldr.w	sl, [pc, #692]	; 80014b4 <inv_perform_9x_fusion+0x364>
 8001200:	f10c 0848 	add.w	r8, ip, #72	; 0x48
 8001204:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8001208:	f103 0ba0 	add.w	fp, r3, #160	; 0xa0
 800120c:	ad21      	add	r5, sp, #132	; 0x84
 800120e:	4641      	mov	r1, r8
 8001210:	48a3      	ldr	r0, [pc, #652]	; (80014a0 <inv_perform_9x_fusion+0x350>)
 8001212:	462a      	mov	r2, r5
 8001214:	f00d fac2 	bl	800e79c <inv_q_mult>
 8001218:	4621      	mov	r1, r4
 800121a:	462a      	mov	r2, r5
 800121c:	4658      	mov	r0, fp
 800121e:	f00d f9bf 	bl	800e5a0 <inv_compass_angle>
 8001222:	f02a 4100 	bic.w	r1, sl, #2147483648	; 0x80000000
 8001226:	4607      	mov	r7, r0
 8001228:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800122c:	f002 fd20 	bl	8003c70 <__aeabi_fcmplt>
 8001230:	f109 0901 	add.w	r9, r9, #1
 8001234:	f108 0810 	add.w	r8, r8, #16
 8001238:	340c      	adds	r4, #12
 800123a:	b100      	cbz	r0, 800123e <inv_perform_9x_fusion+0xee>
 800123c:	46ba      	mov	sl, r7
 800123e:	f1b9 0f06 	cmp.w	r9, #6
 8001242:	d1e4      	bne.n	800120e <inv_perform_9x_fusion+0xbe>
 8001244:	9f00      	ldr	r7, [sp, #0]
 8001246:	4c97      	ldr	r4, [pc, #604]	; (80014a4 <inv_perform_9x_fusion+0x354>)
 8001248:	f107 0018 	add.w	r0, r7, #24
 800124c:	f00d fa2b 	bl	800e6a6 <inv_get_gyro_sum_of_sqr>
 8001250:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
 8001254:	0982      	lsrs	r2, r0, #6
 8001256:	42a3      	cmp	r3, r4
 8001258:	bfa8      	it	ge
 800125a:	4623      	movge	r3, r4
 800125c:	4651      	mov	r1, sl
 800125e:	4638      	mov	r0, r7
 8001260:	f7ff fe7a 	bl	8000f58 <inv_filter_correction_angle>
 8001264:	f8d6 10ec 	ldr.w	r1, [r6, #236]	; 0xec
 8001268:	f002 fb64 	bl	8003934 <__aeabi_fmul>
 800126c:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
 8001270:	a819      	add	r0, sp, #100	; 0x64
 8001272:	f00e fadf 	bl	800f834 <inv_get_6axis_quaternion>
 8001276:	a819      	add	r0, sp, #100	; 0x64
 8001278:	4629      	mov	r1, r5
 800127a:	f00d ff10 	bl	800f09e <inv_quaternion_to_rotation>
 800127e:	a919      	add	r1, sp, #100	; 0x64
 8001280:	4889      	ldr	r0, [pc, #548]	; (80014a8 <inv_perform_9x_fusion+0x358>)
 8001282:	aa1d      	add	r2, sp, #116	; 0x74
 8001284:	f00d fa8a 	bl	800e79c <inv_q_mult>
 8001288:	a819      	add	r0, sp, #100	; 0x64
 800128a:	4987      	ldr	r1, [pc, #540]	; (80014a8 <inv_perform_9x_fusion+0x358>)
 800128c:	f00d fb7f 	bl	800e98e <inv_q_invert>
 8001290:	f10d 0b0c 	add.w	fp, sp, #12
 8001294:	f04f 0c00 	mov.w	ip, #0
 8001298:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
 800129c:	eb05 020c 	add.w	r2, r5, ip
 80012a0:	ab1d      	add	r3, sp, #116	; 0x74
 80012a2:	2000      	movs	r0, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	f853 4f04 	ldr.w	r4, [r3, #4]!
 80012aa:	f852 7b04 	ldr.w	r7, [r2], #4
 80012ae:	4553      	cmp	r3, sl
 80012b0:	fbc4 0107 	smlal	r0, r1, r4, r7
 80012b4:	d1f7      	bne.n	80012a6 <inv_perform_9x_fusion+0x156>
 80012b6:	0f83      	lsrs	r3, r0, #30
 80012b8:	f10c 0c0c 	add.w	ip, ip, #12
 80012bc:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80012c0:	f1bc 0f24 	cmp.w	ip, #36	; 0x24
 80012c4:	f84b 3b04 	str.w	r3, [fp], #4
 80012c8:	d1e8      	bne.n	800129c <inv_perform_9x_fusion+0x14c>
 80012ca:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 80aa 	bne.w	8001428 <inv_perform_9x_fusion+0x2d8>
 80012d4:	9c05      	ldr	r4, [sp, #20]
 80012d6:	4260      	negs	r0, r4
 80012d8:	f002 fad8 	bl	800388c <__aeabi_i2f>
 80012dc:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80012e0:	f002 fb28 	bl	8003934 <__aeabi_fmul>
 80012e4:	4605      	mov	r5, r0
 80012e6:	f013 fd21 	bl	8014d2c <cosf>
 80012ea:	4682      	mov	sl, r0
 80012ec:	4628      	mov	r0, r5
 80012ee:	f013 fd51 	bl	8014d94 <sinf>
 80012f2:	4605      	mov	r5, r0
 80012f4:	4620      	mov	r0, r4
 80012f6:	f002 fac9 	bl	800388c <__aeabi_i2f>
 80012fa:	496c      	ldr	r1, [pc, #432]	; (80014ac <inv_perform_9x_fusion+0x35c>)
 80012fc:	f002 fbce 	bl	8003a9c <__aeabi_fdiv>
 8001300:	4607      	mov	r7, r0
 8001302:	4a6b      	ldr	r2, [pc, #428]	; (80014b0 <inv_perform_9x_fusion+0x360>)
 8001304:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
 8001308:	2400      	movs	r4, #0
 800130a:	17d8      	asrs	r0, r3, #31
 800130c:	fb82 2303 	smull	r2, r3, r2, r3
 8001310:	ebc0 20e3 	rsb	r0, r0, r3, asr #11
 8001314:	9514      	str	r5, [sp, #80]	; 0x50
 8001316:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800131a:	9412      	str	r4, [sp, #72]	; 0x48
 800131c:	9413      	str	r4, [sp, #76]	; 0x4c
 800131e:	f002 fab5 	bl	800388c <__aeabi_i2f>
 8001322:	4605      	mov	r5, r0
 8001324:	4638      	mov	r0, r7
 8001326:	4629      	mov	r1, r5
 8001328:	f002 fbb8 	bl	8003a9c <__aeabi_fdiv>
 800132c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001330:	f002 fb00 	bl	8003934 <__aeabi_fmul>
 8001334:	f002 fcda 	bl	8003cec <__aeabi_f2iz>
 8001338:	0040      	lsls	r0, r0, #1
 800133a:	f002 faa7 	bl	800388c <__aeabi_i2f>
 800133e:	495b      	ldr	r1, [pc, #364]	; (80014ac <inv_perform_9x_fusion+0x35c>)
 8001340:	f002 faf8 	bl	8003934 <__aeabi_fmul>
 8001344:	4601      	mov	r1, r0
 8001346:	4628      	mov	r0, r5
 8001348:	f002 faf4 	bl	8003934 <__aeabi_fmul>
 800134c:	f002 fcce 	bl	8003cec <__aeabi_f2iz>
 8001350:	f002 fa9c 	bl	800388c <__aeabi_i2f>
 8001354:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8001358:	f002 faec 	bl	8003934 <__aeabi_fmul>
 800135c:	4605      	mov	r5, r0
 800135e:	f013 fce5 	bl	8014d2c <cosf>
 8001362:	9015      	str	r0, [sp, #84]	; 0x54
 8001364:	4628      	mov	r0, r5
 8001366:	9416      	str	r4, [sp, #88]	; 0x58
 8001368:	9417      	str	r4, [sp, #92]	; 0x5c
 800136a:	f013 fd13 	bl	8014d94 <sinf>
 800136e:	ad11      	add	r5, sp, #68	; 0x44
 8001370:	9018      	str	r0, [sp, #96]	; 0x60
 8001372:	4629      	mov	r1, r5
 8001374:	aa0d      	add	r2, sp, #52	; 0x34
 8001376:	a809      	add	r0, sp, #36	; 0x24
 8001378:	f00d fb5f 	bl	800ea3a <inv_q_multf>
 800137c:	a80d      	add	r0, sp, #52	; 0x34
 800137e:	462a      	mov	r2, r5
 8001380:	a915      	add	r1, sp, #84	; 0x54
 8001382:	f00d fb5a 	bl	800ea3a <inv_q_multf>
 8001386:	9b00      	ldr	r3, [sp, #0]
 8001388:	f8d3 70bc 	ldr.w	r7, [r3, #188]	; 0xbc
 800138c:	2f00      	cmp	r7, #0
 800138e:	dd16      	ble.n	80013be <inv_perform_9x_fusion+0x26e>
 8001390:	f8df a124 	ldr.w	sl, [pc, #292]	; 80014b8 <inv_perform_9x_fusion+0x368>
 8001394:	2400      	movs	r4, #0
 8001396:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800139a:	aa09      	add	r2, sp, #36	; 0x24
 800139c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80013a0:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fac5 	bl	8003934 <__aeabi_fmul>
 80013aa:	f002 fc9f 	bl	8003cec <__aeabi_f2iz>
 80013ae:	3401      	adds	r4, #1
 80013b0:	2c04      	cmp	r4, #4
 80013b2:	f84a 0f04 	str.w	r0, [sl, #4]!
 80013b6:	d1ee      	bne.n	8001396 <inv_perform_9x_fusion+0x246>
 80013b8:	2f03      	cmp	r7, #3
 80013ba:	f000 8085 	beq.w	80014c8 <inv_perform_9x_fusion+0x378>
 80013be:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
 80013c2:	f002 fa63 	bl	800388c <__aeabi_i2f>
 80013c6:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80013ca:	f002 fab3 	bl	8003934 <__aeabi_fmul>
 80013ce:	900d      	str	r0, [sp, #52]	; 0x34
 80013d0:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
 80013d4:	f002 fa5a 	bl	800388c <__aeabi_i2f>
 80013d8:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80013dc:	f002 faaa 	bl	8003934 <__aeabi_fmul>
 80013e0:	900e      	str	r0, [sp, #56]	; 0x38
 80013e2:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
 80013e6:	f002 fa51 	bl	800388c <__aeabi_i2f>
 80013ea:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 80013ee:	f002 faa1 	bl	8003934 <__aeabi_fmul>
 80013f2:	900f      	str	r0, [sp, #60]	; 0x3c
 80013f4:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
 80013f8:	f002 fa48 	bl	800388c <__aeabi_i2f>
 80013fc:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8001400:	f002 fa98 	bl	8003934 <__aeabi_fmul>
 8001404:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 8001408:	9010      	str	r0, [sp, #64]	; 0x40
 800140a:	4c23      	ldr	r4, [pc, #140]	; (8001498 <inv_perform_9x_fusion+0x348>)
 800140c:	b98b      	cbnz	r3, 8001432 <inv_perform_9x_fusion+0x2e2>
 800140e:	b02b      	add	sp, #172	; 0xac
 8001410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001414:	f1cc 0905 	rsb	r9, ip, #5
 8001418:	f1b9 0f05 	cmp.w	r9, #5
 800141c:	f77f aee9 	ble.w	80011f2 <inv_perform_9x_fusion+0xa2>
 8001420:	f8df a090 	ldr.w	sl, [pc, #144]	; 80014b4 <inv_perform_9x_fusion+0x364>
 8001424:	ad21      	add	r5, sp, #132	; 0x84
 8001426:	e70d      	b.n	8001244 <inv_perform_9x_fusion+0xf4>
 8001428:	2700      	movs	r7, #0
 800142a:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 800142e:	463d      	mov	r5, r7
 8001430:	e767      	b.n	8001302 <inv_perform_9x_fusion+0x1b2>
 8001432:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001436:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 800143a:	f002 fa7b 	bl	8003934 <__aeabi_fmul>
 800143e:	4605      	mov	r5, r0
 8001440:	f013 fc74 	bl	8014d2c <cosf>
 8001444:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001448:	f002 fa74 	bl	8003934 <__aeabi_fmul>
 800144c:	f002 fc4e 	bl	8003cec <__aeabi_f2iz>
 8001450:	2300      	movs	r3, #0
 8001452:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
 8001456:	4628      	mov	r0, r5
 8001458:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 800145c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8001460:	f013 fc98 	bl	8014d94 <sinf>
 8001464:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8001468:	f002 fa64 	bl	8003934 <__aeabi_fmul>
 800146c:	f002 fc3e 	bl	8003cec <__aeabi_f2iz>
 8001470:	9b00      	ldr	r3, [sp, #0]
 8001472:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001476:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
 800147a:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 800147e:	f00e f8fb 	bl	800f678 <inv_set_compass_correction>
 8001482:	f8d6 3120 	ldr.w	r3, [r6, #288]	; 0x120
 8001486:	4a04      	ldr	r2, [pc, #16]	; (8001498 <inv_perform_9x_fusion+0x348>)
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0c0      	beq.n	800140e <inv_perform_9x_fusion+0x2be>
 800148c:	3b01      	subs	r3, #1
 800148e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
 8001492:	b02b      	add	sp, #172	; 0xac
 8001494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001498:	20001450 	.word	0x20001450
 800149c:	20001504 	.word	0x20001504
 80014a0:	200014f8 	.word	0x200014f8
 80014a4:	000f4240 	.word	0x000f4240
 80014a8:	2000154c 	.word	0x2000154c
 80014ac:	473702e1 	.word	0x473702e1
 80014b0:	68db8bad 	.word	0x68db8bad
 80014b4:	49742400 	.word	0x49742400
 80014b8:	200014f4 	.word	0x200014f4
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c6 3120 	str.w	r3, [r6, #288]	; 0x120
 80014c2:	b02b      	add	sp, #172	; 0xac
 80014c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014c8:	f000 fec6 	bl	8002258 <inv_get_magnetic_disturbance_state>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	f47f af76 	bne.w	80013be <inv_perform_9x_fusion+0x26e>
 80014d2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014d6:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
 80014da:	f002 fa2b 	bl	8003934 <__aeabi_fmul>
 80014de:	4604      	mov	r4, r0
 80014e0:	f013 fc24 	bl	8014d2c <cosf>
 80014e4:	2300      	movs	r3, #0
 80014e6:	9015      	str	r0, [sp, #84]	; 0x54
 80014e8:	4620      	mov	r0, r4
 80014ea:	9316      	str	r3, [sp, #88]	; 0x58
 80014ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80014ee:	f013 fc51 	bl	8014d94 <sinf>
 80014f2:	a915      	add	r1, sp, #84	; 0x54
 80014f4:	9018      	str	r0, [sp, #96]	; 0x60
 80014f6:	462a      	mov	r2, r5
 80014f8:	a809      	add	r0, sp, #36	; 0x24
 80014fa:	f00d fa9e 	bl	800ea3a <inv_q_multf>
 80014fe:	4628      	mov	r0, r5
 8001500:	f00d fbe5 	bl	800ecce <inv_q_normalizef>
 8001504:	9c01      	ldr	r4, [sp, #4]
 8001506:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 800150a:	f855 0b04 	ldr.w	r0, [r5], #4
 800150e:	f002 fa11 	bl	8003934 <__aeabi_fmul>
 8001512:	f002 fbeb 	bl	8003cec <__aeabi_f2iz>
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <inv_perform_9x_fusion+0x3e0>)
 8001518:	f844 0f04 	str.w	r0, [r4, #4]!
 800151c:	429c      	cmp	r4, r3
 800151e:	d1f2      	bne.n	8001506 <inv_perform_9x_fusion+0x3b6>
 8001520:	9b00      	ldr	r3, [sp, #0]
 8001522:	4804      	ldr	r0, [pc, #16]	; (8001534 <inv_perform_9x_fusion+0x3e4>)
 8001524:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001528:	f00e f8a6 	bl	800f678 <inv_set_compass_correction>
 800152c:	e7a9      	b.n	8001482 <inv_perform_9x_fusion+0x332>
 800152e:	bf00      	nop
 8001530:	20001504 	.word	0x20001504
 8001534:	200014f8 	.word	0x200014f8

08001538 <inv_process_9x_sensor_fusion_cb>:
 8001538:	b538      	push	{r3, r4, r5, lr}
 800153a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <inv_process_9x_sensor_fusion_cb+0x90>)
 8001540:	f013 0310 	ands.w	r3, r3, #16
 8001544:	bf08      	it	eq
 8001546:	f8c2 3124 	streq.w	r3, [r2, #292]	; 0x124
 800154a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800154e:	bf04      	itt	eq
 8001550:	2103      	moveq	r1, #3
 8001552:	f8c2 1120 	streq.w	r1, [r2, #288]	; 0x120
 8001556:	05dc      	lsls	r4, r3, #23
 8001558:	d405      	bmi.n	8001566 <inv_process_9x_sensor_fusion_cb+0x2e>
 800155a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800155c:	05d9      	lsls	r1, r3, #23
 800155e:	d527      	bpl.n	80015b0 <inv_process_9x_sensor_fusion_cb+0x78>
 8001560:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001562:	05db      	lsls	r3, r3, #23
 8001564:	d524      	bpl.n	80015b0 <inv_process_9x_sensor_fusion_cb+0x78>
 8001566:	f8d2 3134 	ldr.w	r3, [r2, #308]	; 0x134
 800156a:	4a17      	ldr	r2, [pc, #92]	; (80015c8 <inv_process_9x_sensor_fusion_cb+0x90>)
 800156c:	b173      	cbz	r3, 800158c <inv_process_9x_sensor_fusion_cb+0x54>
 800156e:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 8001572:	f8d0 40c4 	ldr.w	r4, [r0, #196]	; 0xc4
 8001576:	4915      	ldr	r1, [pc, #84]	; (80015cc <inv_process_9x_sensor_fusion_cb+0x94>)
 8001578:	1b1b      	subs	r3, r3, r4
 800157a:	fba1 1303 	umull	r1, r3, r1, r3
 800157e:	099b      	lsrs	r3, r3, #6
 8001580:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 8001584:	f7ff fde4 	bl	8001150 <inv_perform_9x_fusion>
 8001588:	2000      	movs	r0, #0
 800158a:	bd38      	pop	{r3, r4, r5, pc}
 800158c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8001590:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8001594:	42a9      	cmp	r1, r5
 8001596:	dc13      	bgt.n	80015c0 <inv_process_9x_sensor_fusion_cb+0x88>
 8001598:	f8d2 412c 	ldr.w	r4, [r2, #300]	; 0x12c
 800159c:	4421      	add	r1, r4
 800159e:	42a9      	cmp	r1, r5
 80015a0:	f8c2 112c 	str.w	r1, [r2, #300]	; 0x12c
 80015a4:	ddf0      	ble.n	8001588 <inv_process_9x_sensor_fusion_cb+0x50>
 80015a6:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
 80015aa:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
 80015ae:	e7e9      	b.n	8001584 <inv_process_9x_sensor_fusion_cb+0x4c>
 80015b0:	2103      	movs	r1, #3
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
 80015b8:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
 80015bc:	2000      	movs	r0, #0
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	f8c2 1130 	str.w	r1, [r2, #304]	; 0x130
 80015c4:	e7de      	b.n	8001584 <inv_process_9x_sensor_fusion_cb+0x4c>
 80015c6:	bf00      	nop
 80015c8:	20001450 	.word	0x20001450
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <inv_init_9x_fusion>:
 80015d0:	b510      	push	{r4, lr}
 80015d2:	4c0d      	ldr	r4, [pc, #52]	; (8001608 <inv_init_9x_fusion+0x38>)
 80015d4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80015d8:	2100      	movs	r1, #0
 80015da:	4620      	mov	r0, r4
 80015dc:	f00f f827 	bl	801062e <memset>
 80015e0:	4620      	mov	r0, r4
 80015e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e6:	f840 3fa8 	str.w	r3, [r0, #168]!
 80015ea:	2100      	movs	r1, #0
 80015ec:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
 80015f0:	f00e f842 	bl	800f678 <inv_set_compass_correction>
 80015f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80015f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015fc:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
 8001600:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
 8001604:	bd10      	pop	{r4, pc}
 8001606:	bf00      	nop
 8001608:	20001450 	.word	0x20001450

0800160c <inv_9x_fusion_set_mag_fb>:
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <inv_9x_fusion_set_mag_fb+0xc>)
 800160e:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
 8001612:	2000      	movs	r0, #0
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20001450 	.word	0x20001450

0800161c <inv_9x_fusion_enable_jitter_reduction>:
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <inv_9x_fusion_enable_jitter_reduction+0xc>)
 800161e:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
 8001622:	2000      	movs	r0, #0
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	20001450 	.word	0x20001450

0800162c <inv_9x_fusion_use_timestamps>:
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <inv_9x_fusion_use_timestamps+0xc>)
 800162e:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
 8001632:	2000      	movs	r0, #0
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20001450 	.word	0x20001450

0800163c <inv_stop_9x_sensor_fusion>:
 800163c:	4801      	ldr	r0, [pc, #4]	; (8001644 <inv_stop_9x_sensor_fusion+0x8>)
 800163e:	f00c bae3 	b.w	800dc08 <inv_unregister_data_cb>
 8001642:	bf00      	nop
 8001644:	08001539 	.word	0x08001539

08001648 <inv_enable_9x_sensor_fusion>:
 8001648:	b508      	push	{r3, lr}
 800164a:	f7ff ffc1 	bl	80015d0 <inv_init_9x_fusion>
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <inv_enable_9x_sensor_fusion+0x1c>)
 8001650:	2200      	movs	r2, #0
 8001652:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8001656:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 800165a:	4803      	ldr	r0, [pc, #12]	; (8001668 <inv_enable_9x_sensor_fusion+0x20>)
 800165c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001660:	f00e ba48 	b.w	800faf4 <inv_register_mpl_start_notification>
 8001664:	20001450 	.word	0x20001450
 8001668:	08000f49 	.word	0x08000f49

0800166c <inv_disable_9x_sensor_fusion>:
 800166c:	4801      	ldr	r0, [pc, #4]	; (8001674 <inv_disable_9x_sensor_fusion+0x8>)
 800166e:	f00e ba01 	b.w	800fa74 <inv_unregister_mpl_start_notification>
 8001672:	bf00      	nop
 8001674:	08000f49 	.word	0x08000f49

08001678 <inv_start_gyro_tc>:
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <inv_start_gyro_tc+0xc>)
 800167a:	2196      	movs	r1, #150	; 0x96
 800167c:	2208      	movs	r2, #8
 800167e:	f00c ba21 	b.w	800dac4 <inv_register_data_cb>
 8001682:	bf00      	nop
 8001684:	08001689 	.word	0x08001689

08001688 <inv_gtc_data_cb>:
 8001688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800168c:	b0af      	sub	sp, #188	; 0xbc
 800168e:	a91d      	add	r1, sp, #116	; 0x74
 8001690:	4604      	mov	r4, r0
 8001692:	a81f      	add	r0, sp, #124	; 0x7c
 8001694:	f00c f8f2 	bl	800d87c <inv_get_gyro_bias>
 8001698:	a81e      	add	r0, sp, #120	; 0x78
 800169a:	f00e f829 	bl	800f6f0 <inv_get_motion_state>
 800169e:	2802      	cmp	r0, #2
 80016a0:	d00d      	beq.n	80016be <inv_gtc_data_cb+0x36>
 80016a2:	4996      	ldr	r1, [pc, #600]	; (80018fc <inv_gtc_data_cb+0x274>)
 80016a4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 80016a8:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
 80016ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80016ae:	b110      	cbz	r0, 80016b6 <inv_gtc_data_cb+0x2e>
 80016b0:	1a9b      	subs	r3, r3, r2
 80016b2:	f040 80fa 	bne.w	80018aa <inv_gtc_data_cb+0x222>
 80016b6:	2000      	movs	r0, #0
 80016b8:	b02f      	add	sp, #188	; 0xbc
 80016ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d1f8      	bne.n	80016b6 <inv_gtc_data_cb+0x2e>
 80016c4:	f00c f8c2 	bl	800d84c <inv_get_gyro_bias_tc_set>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d0f4      	beq.n	80016b6 <inv_gtc_data_cb+0x2e>
 80016cc:	4f8b      	ldr	r7, [pc, #556]	; (80018fc <inv_gtc_data_cb+0x274>)
 80016ce:	4c8c      	ldr	r4, [pc, #560]	; (8001900 <inv_gtc_data_cb+0x278>)
 80016d0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016d4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80016d8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	fb84 1403 	smull	r1, r4, r4, r3
 80016e0:	17db      	asrs	r3, r3, #31
 80016e2:	ebc3 0364 	rsb	r3, r3, r4, asr #1
 80016e6:	1aaa      	subs	r2, r5, r2
 80016e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ec:	b2dc      	uxtb	r4, r3
 80016ee:	2c04      	cmp	r4, #4
 80016f0:	d8e1      	bhi.n	80016b6 <inv_gtc_data_cb+0x2e>
 80016f2:	2654      	movs	r6, #84	; 0x54
 80016f4:	fb06 f604 	mul.w	r6, r6, r4
 80016f8:	eb07 0c06 	add.w	ip, r7, r6
 80016fc:	f89c 3050 	ldrb.w	r3, [ip, #80]	; 0x50
 8001700:	2b05      	cmp	r3, #5
 8001702:	f000 819b 	beq.w	8001a3c <inv_gtc_data_cb+0x3b4>
 8001706:	4619      	mov	r1, r3
 8001708:	3301      	adds	r3, #1
 800170a:	f88c 3050 	strb.w	r3, [ip, #80]	; 0x50
 800170e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001712:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8001716:	1862      	adds	r2, r4, r1
 8001718:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800171a:	eb07 0682 	add.w	r6, r7, r2, lsl #2
 800171e:	f102 000a 	add.w	r0, r2, #10
 8001722:	f847 1022 	str.w	r1, [r7, r2, lsl #2]
 8001726:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001728:	f897 e1c0 	ldrb.w	lr, [r7, #448]	; 0x1c0
 800172c:	6172      	str	r2, [r6, #20]
 800172e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001730:	2300      	movs	r3, #0
 8001732:	f1be 0f01 	cmp.w	lr, #1
 8001736:	f847 2020 	str.w	r2, [r7, r0, lsl #2]
 800173a:	63f5      	str	r5, [r6, #60]	; 0x3c
 800173c:	9322      	str	r3, [sp, #136]	; 0x88
 800173e:	9323      	str	r3, [sp, #140]	; 0x8c
 8001740:	9324      	str	r3, [sp, #144]	; 0x90
 8001742:	9325      	str	r3, [sp, #148]	; 0x94
 8001744:	9326      	str	r3, [sp, #152]	; 0x98
 8001746:	9327      	str	r3, [sp, #156]	; 0x9c
 8001748:	9328      	str	r3, [sp, #160]	; 0xa0
 800174a:	9329      	str	r3, [sp, #164]	; 0xa4
 800174c:	932a      	str	r3, [sp, #168]	; 0xa8
 800174e:	932b      	str	r3, [sp, #172]	; 0xac
 8001750:	932c      	str	r3, [sp, #176]	; 0xb0
 8001752:	932d      	str	r3, [sp, #180]	; 0xb4
 8001754:	4a69      	ldr	r2, [pc, #420]	; (80018fc <inv_gtc_data_cb+0x274>)
 8001756:	d1ae      	bne.n	80016b6 <inv_gtc_data_cb+0x2e>
 8001758:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800175c:	4694      	mov	ip, r2
 800175e:	469e      	mov	lr, r3
 8001760:	9317      	str	r3, [sp, #92]	; 0x5c
 8001762:	f8d2 31b8 	ldr.w	r3, [r2, #440]	; 0x1b8
 8001766:	46e1      	mov	r9, ip
 8001768:	469c      	mov	ip, r3
 800176a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800176e:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8001772:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8001776:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800177a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800177e:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 8001782:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001786:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800178a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800178e:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 8001792:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001796:	2000      	movs	r0, #0
 8001798:	2100      	movs	r1, #0
 800179a:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800179e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80017a2:	9216      	str	r2, [sp, #88]	; 0x58
 80017a4:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 80017a8:	9719      	str	r7, [sp, #100]	; 0x64
 80017aa:	f899 e050 	ldrb.w	lr, [r9, #80]	; 0x50
 80017ae:	f1be 0f00 	cmp.w	lr, #0
 80017b2:	f000 80ae 	beq.w	8001912 <inv_gtc_data_cb+0x28a>
 80017b6:	464a      	mov	r2, r9
 80017b8:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 80017bc:	f04f 0800 	mov.w	r8, #0
 80017c0:	46f1      	mov	r9, lr
 80017c2:	e00b      	b.n	80017dc <inv_gtc_data_cb+0x154>
 80017c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80017c6:	4299      	cmp	r1, r3
 80017c8:	bfb8      	it	lt
 80017ca:	4619      	movlt	r1, r3
 80017cc:	9116      	str	r1, [sp, #88]	; 0x58
 80017ce:	f108 0801 	add.w	r8, r8, #1
 80017d2:	45c8      	cmp	r8, r9
 80017d4:	f102 0204 	add.w	r2, r2, #4
 80017d8:	f000 8094 	beq.w	8001904 <inv_gtc_data_cb+0x27c>
 80017dc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80017de:	6811      	ldr	r1, [r2, #0]
 80017e0:	f8d2 e028 	ldr.w	lr, [r2, #40]	; 0x28
 80017e4:	fb81 4503 	smull	r4, r5, r1, r3
 80017e8:	6951      	ldr	r1, [r2, #20]
 80017ea:	0c26      	lsrs	r6, r4, #16
 80017ec:	fb81 0103 	smull	r0, r1, r1, r3
 80017f0:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 80017f4:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 80017f8:	ea4f 4b21 	mov.w	fp, r1, asr #16
 80017fc:	fb8e 0103 	smull	r0, r1, lr, r3
 8001800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001804:	0c01      	lsrs	r1, r0, #16
 8001806:	9100      	str	r1, [sp, #0]
 8001808:	fb83 0103 	smull	r0, r1, r3, r3
 800180c:	0c04      	lsrs	r4, r0, #16
 800180e:	9402      	str	r4, [sp, #8]
 8001810:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8001814:	9c00      	ldr	r4, [sp, #0]
 8001816:	142f      	asrs	r7, r5, #16
 8001818:	9d05      	ldr	r5, [sp, #20]
 800181a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800181e:	9400      	str	r4, [sp, #0]
 8001820:	9c02      	ldr	r4, [sp, #8]
 8001822:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8001826:	1409      	asrs	r1, r1, #16
 8001828:	9103      	str	r1, [sp, #12]
 800182a:	6811      	ldr	r1, [r2, #0]
 800182c:	9402      	str	r4, [sp, #8]
 800182e:	142c      	asrs	r4, r5, #16
 8001830:	9401      	str	r4, [sp, #4]
 8001832:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8001836:	1864      	adds	r4, r4, r1
 8001838:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 800183c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800183e:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001842:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
 8001846:	4419      	add	r1, r3
 8001848:	9113      	str	r1, [sp, #76]	; 0x4c
 800184a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800184e:	1980      	adds	r0, r0, r6
 8001850:	4179      	adcs	r1, r7
 8001852:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001856:	6951      	ldr	r1, [r2, #20]
 8001858:	1864      	adds	r4, r4, r1
 800185a:	eb45 75e1 	adc.w	r5, r5, r1, asr #31
 800185e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001862:	eb10 000a 	adds.w	r0, r0, sl
 8001866:	eb41 010b 	adc.w	r1, r1, fp
 800186a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800186e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001872:	eb10 000e 	adds.w	r0, r0, lr
 8001876:	eb41 71ee 	adc.w	r1, r1, lr, asr #31
 800187a:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 800187e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8001882:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800188a:	1900      	adds	r0, r0, r4
 800188c:	4169      	adcs	r1, r5
 800188e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001892:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 8001896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800189a:	1900      	adds	r0, r0, r4
 800189c:	4169      	adcs	r1, r5
 800189e:	4563      	cmp	r3, ip
 80018a0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80018a4:	da8e      	bge.n	80017c4 <inv_gtc_data_cb+0x13c>
 80018a6:	469c      	mov	ip, r3
 80018a8:	e791      	b.n	80017ce <inv_gtc_data_cb+0x146>
 80018aa:	f8d1 41a4 	ldr.w	r4, [r1, #420]	; 0x1a4
 80018ae:	f8d1 21ac 	ldr.w	r2, [r1, #428]	; 0x1ac
 80018b2:	f8d1 01a8 	ldr.w	r0, [r1, #424]	; 0x1a8
 80018b6:	fb83 8904 	smull	r8, r9, r3, r4
 80018ba:	fb83 0100 	smull	r0, r1, r3, r0
 80018be:	fb83 ab02 	smull	sl, fp, r3, r2
 80018c2:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80018c4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80018c6:	9f21      	ldr	r7, [sp, #132]	; 0x84
 80018c8:	ea4f 4c18 	mov.w	ip, r8, lsr #16
 80018cc:	ea4f 4e10 	mov.w	lr, r0, lsr #16
 80018d0:	ea4f 421a 	mov.w	r2, sl, lsr #16
 80018d4:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 80018d8:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 80018dc:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80018e0:	a81f      	add	r0, sp, #124	; 0x7c
 80018e2:	4464      	add	r4, ip
 80018e4:	4476      	add	r6, lr
 80018e6:	443a      	add	r2, r7
 80018e8:	2103      	movs	r1, #3
 80018ea:	941f      	str	r4, [sp, #124]	; 0x7c
 80018ec:	9620      	str	r6, [sp, #128]	; 0x80
 80018ee:	9221      	str	r2, [sp, #132]	; 0x84
 80018f0:	f00b ff68 	bl	800d7c4 <inv_set_gyro_bias>
 80018f4:	2000      	movs	r0, #0
 80018f6:	b02f      	add	sp, #188	; 0xbc
 80018f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018fc:	20000298 	.word	0x20000298
 8001900:	66666667 	.word	0x66666667
 8001904:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001906:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800190a:	4498      	add	r8, r3
 800190c:	f008 03ff 	and.w	r3, r8, #255	; 0xff
 8001910:	9317      	str	r3, [sp, #92]	; 0x5c
 8001912:	4b5c      	ldr	r3, [pc, #368]	; (8001a84 <inv_gtc_data_cb+0x3fc>)
 8001914:	f109 0954 	add.w	r9, r9, #84	; 0x54
 8001918:	4599      	cmp	r9, r3
 800191a:	f47f af46 	bne.w	80017aa <inv_gtc_data_cb+0x122>
 800191e:	4661      	mov	r1, ip
 8001920:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8001922:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001924:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001928:	1a52      	subs	r2, r2, r1
 800192a:	429a      	cmp	r2, r3
 800192c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8001930:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8001934:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
 8001938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800193c:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
 8001940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001944:	e9cd 0126 	strd	r0, r1, [sp, #152]	; 0x98
 8001948:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800194c:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
 8001950:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001954:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
 8001958:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800195c:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
 8001960:	f6ff aea9 	blt.w	80016b6 <inv_gtc_data_cb+0x2e>
 8001964:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8001968:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800196a:	f507 79d2 	add.w	r9, r7, #420	; 0x1a4
 800196e:	fba0 2306 	umull	r2, r3, r0, r6
 8001972:	461d      	mov	r5, r3
 8001974:	4614      	mov	r4, r2
 8001976:	fb8e 230e 	smull	r2, r3, lr, lr
 800197a:	fb06 5101 	mla	r1, r6, r1, r5
 800197e:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8001982:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001986:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800198a:	9105      	str	r1, [sp, #20]
 800198c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8001990:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001994:	ebb2 020a 	subs.w	r2, r2, sl
 8001998:	eb63 030b 	sbc.w	r3, r3, fp
 800199c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80019a0:	4672      	mov	r2, lr
 80019a2:	17d3      	asrs	r3, r2, #31
 80019a4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80019a8:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80019ac:	ac28      	add	r4, sp, #160	; 0xa0
 80019ae:	ad22      	add	r5, sp, #136	; 0x88
 80019b0:	f8cd 9000 	str.w	r9, [sp]
 80019b4:	6823      	ldr	r3, [r4, #0]
 80019b6:	6861      	ldr	r1, [r4, #4]
 80019b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80019c2:	4599      	cmp	r9, r3
 80019c4:	bf08      	it	eq
 80019c6:	4590      	cmpeq	r8, r2
 80019c8:	9106      	str	r1, [sp, #24]
 80019ca:	6828      	ldr	r0, [r5, #0]
 80019cc:	6869      	ldr	r1, [r5, #4]
 80019ce:	f104 0408 	add.w	r4, r4, #8
 80019d2:	f105 0508 	add.w	r5, r5, #8
 80019d6:	d027      	beq.n	8001a28 <inv_gtc_data_cb+0x3a0>
 80019d8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
 80019dc:	9a02      	ldr	r2, [sp, #8]
 80019de:	fb00 fc09 	mul.w	ip, r0, r9
 80019e2:	2300      	movs	r3, #0
 80019e4:	fb02 fe03 	mul.w	lr, r2, r3
 80019e8:	fb01 cc08 	mla	ip, r1, r8, ip
 80019ec:	9a06      	ldr	r2, [sp, #24]
 80019ee:	fba0 0108 	umull	r0, r1, r0, r8
 80019f2:	9b02      	ldr	r3, [sp, #8]
 80019f4:	fb02 ee06 	mla	lr, r2, r6, lr
 80019f8:	fba3 2306 	umull	r2, r3, r3, r6
 80019fc:	4461      	add	r1, ip
 80019fe:	ea4f 4a10 	mov.w	sl, r0, lsr #16
 8001a02:	ea4a 4a01 	orr.w	sl, sl, r1, lsl #16
 8001a06:	ebb2 020a 	subs.w	r2, r2, sl
 8001a0a:	ea4f 4b21 	mov.w	fp, r1, asr #16
 8001a0e:	4473      	add	r3, lr
 8001a10:	eb63 030b 	sbc.w	r3, r3, fp
 8001a14:	0419      	lsls	r1, r3, #16
 8001a16:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001a1a:	0410      	lsls	r0, r2, #16
 8001a1c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8001a20:	f002 f9aa 	bl	8003d78 <__aeabi_ldivmod>
 8001a24:	9b00      	ldr	r3, [sp, #0]
 8001a26:	6018      	str	r0, [r3, #0]
 8001a28:	9b00      	ldr	r3, [sp, #0]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	ab2e      	add	r3, sp, #184	; 0xb8
 8001a30:	429c      	cmp	r4, r3
 8001a32:	d1bf      	bne.n	80019b4 <inv_gtc_data_cb+0x32c>
 8001a34:	2301      	movs	r3, #1
 8001a36:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
 8001a3a:	e63c      	b.n	80016b6 <inv_gtc_data_cb+0x2e>
 8001a3c:	19b8      	adds	r0, r7, r6
 8001a3e:	4601      	mov	r1, r0
 8001a40:	2210      	movs	r2, #16
 8001a42:	3140      	adds	r1, #64	; 0x40
 8001a44:	303c      	adds	r0, #60	; 0x3c
 8001a46:	f8cd c010 	str.w	ip, [sp, #16]
 8001a4a:	f00e fdd6 	bl	80105fa <memmove>
 8001a4e:	f8dd c010 	ldr.w	ip, [sp, #16]
 8001a52:	1d31      	adds	r1, r6, #4
 8001a54:	4660      	mov	r0, ip
 8001a56:	4439      	add	r1, r7
 8001a58:	2210      	movs	r2, #16
 8001a5a:	f00e fdce 	bl	80105fa <memmove>
 8001a5e:	19b8      	adds	r0, r7, r6
 8001a60:	4601      	mov	r1, r0
 8001a62:	2210      	movs	r2, #16
 8001a64:	3118      	adds	r1, #24
 8001a66:	3014      	adds	r0, #20
 8001a68:	f00e fdc7 	bl	80105fa <memmove>
 8001a6c:	f106 0028 	add.w	r0, r6, #40	; 0x28
 8001a70:	f106 012c 	add.w	r1, r6, #44	; 0x2c
 8001a74:	4439      	add	r1, r7
 8001a76:	4438      	add	r0, r7
 8001a78:	2210      	movs	r2, #16
 8001a7a:	f00e fdbe 	bl	80105fa <memmove>
 8001a7e:	2104      	movs	r1, #4
 8001a80:	e645      	b.n	800170e <inv_gtc_data_cb+0x86>
 8001a82:	bf00      	nop
 8001a84:	2000043c 	.word	0x2000043c

08001a88 <inv_gtc_store>:
 8001a88:	b470      	push	{r4, r5, r6}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	4605      	mov	r5, r0
 8001a8e:	466c      	mov	r4, sp
 8001a90:	4e09      	ldr	r6, [pc, #36]	; (8001ab8 <inv_gtc_store+0x30>)
 8001a92:	f506 72d2 	add.w	r2, r6, #420	; 0x1a4
 8001a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a98:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8001a9c:	f896 31b0 	ldrb.w	r3, [r6, #432]	; 0x1b0
 8001aa0:	f88d 300c 	strb.w	r3, [sp, #12]
 8001aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa6:	6028      	str	r0, [r5, #0]
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	6069      	str	r1, [r5, #4]
 8001aac:	60aa      	str	r2, [r5, #8]
 8001aae:	60eb      	str	r3, [r5, #12]
 8001ab0:	b005      	add	sp, #20
 8001ab2:	bc70      	pop	{r4, r5, r6}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000298 	.word	0x20000298

08001abc <inv_gtc_load>:
 8001abc:	b470      	push	{r4, r5, r6}
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	466c      	mov	r4, sp
 8001ac4:	6800      	ldr	r0, [r0, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4e06      	ldr	r6, [pc, #24]	; (8001ae8 <inv_gtc_load+0x2c>)
 8001ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad0:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8001ad4:	f506 73d2 	add.w	r3, r6, #420	; 0x1a4
 8001ad8:	f886 41b0 	strb.w	r4, [r6, #432]	; 0x1b0
 8001adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	b005      	add	sp, #20
 8001ae4:	bc70      	pop	{r4, r5, r6}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000298 	.word	0x20000298

08001aec <inv_init_gyro_ts>:
 8001aec:	b510      	push	{r4, lr}
 8001aee:	4c0b      	ldr	r4, [pc, #44]	; (8001b1c <inv_init_gyro_ts+0x30>)
 8001af0:	2100      	movs	r1, #0
 8001af2:	4620      	mov	r0, r4
 8001af4:	f44f 72e2 	mov.w	r2, #452	; 0x1c4
 8001af8:	f00e fd99 	bl	801062e <memset>
 8001afc:	4808      	ldr	r0, [pc, #32]	; (8001b20 <inv_init_gyro_ts+0x34>)
 8001afe:	2301      	movs	r3, #1
 8001b00:	f44f 01aa 	mov.w	r1, #5570560	; 0x550000
 8001b04:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001b08:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
 8001b0c:	f8c4 01b4 	str.w	r0, [r4, #436]	; 0x1b4
 8001b10:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
 8001b14:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
 8001b18:	2000      	movs	r0, #0
 8001b1a:	bd10      	pop	{r4, pc}
 8001b1c:	20000298 	.word	0x20000298
 8001b20:	ffd80000 	.word	0xffd80000

08001b24 <inv_set_gtc_max_temp>:
 8001b24:	4b02      	ldr	r3, [pc, #8]	; (8001b30 <inv_set_gtc_max_temp+0xc>)
 8001b26:	f8c3 01b8 	str.w	r0, [r3, #440]	; 0x1b8
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000298 	.word	0x20000298

08001b34 <inv_set_gtc_min_temp>:
 8001b34:	4b02      	ldr	r3, [pc, #8]	; (8001b40 <inv_set_gtc_min_temp+0xc>)
 8001b36:	f8c3 01b4 	str.w	r0, [r3, #436]	; 0x1b4
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000298 	.word	0x20000298

08001b44 <inv_set_gtc_min_diff>:
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <inv_set_gtc_min_diff+0xc>)
 8001b46:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000298 	.word	0x20000298

08001b54 <inv_get_gyro_ts>:
 8001b54:	4603      	mov	r3, r0
 8001b56:	b158      	cbz	r0, 8001b70 <inv_get_gyro_ts+0x1c>
 8001b58:	4a06      	ldr	r2, [pc, #24]	; (8001b74 <inv_get_gyro_ts+0x20>)
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f8d2 11a4 	ldr.w	r1, [r2, #420]	; 0x1a4
 8001b60:	6019      	str	r1, [r3, #0]
 8001b62:	f8d2 11a8 	ldr.w	r1, [r2, #424]	; 0x1a8
 8001b66:	6059      	str	r1, [r3, #4]
 8001b68:	f8d2 21ac 	ldr.w	r2, [r2, #428]	; 0x1ac
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	4770      	bx	lr
 8001b70:	2016      	movs	r0, #22
 8001b72:	4770      	bx	lr
 8001b74:	20000298 	.word	0x20000298

08001b78 <inv_set_gyro_ts>:
 8001b78:	2024      	movs	r0, #36	; 0x24
 8001b7a:	4770      	bx	lr

08001b7c <inv_set_gtc_order>:
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	b908      	cbnz	r0, 8001b84 <inv_set_gtc_order+0x8>
 8001b80:	2024      	movs	r0, #36	; 0x24
 8001b82:	4770      	bx	lr
 8001b84:	4a02      	ldr	r2, [pc, #8]	; (8001b90 <inv_set_gtc_order+0x14>)
 8001b86:	2000      	movs	r0, #0
 8001b88:	f882 31c0 	strb.w	r3, [r2, #448]	; 0x1c0
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	20000298 	.word	0x20000298

08001b94 <inv_print_gtc_data>:
 8001b94:	2000      	movs	r0, #0
 8001b96:	4770      	bx	lr

08001b98 <inv_stop_gyro_tc>:
 8001b98:	4801      	ldr	r0, [pc, #4]	; (8001ba0 <inv_stop_gyro_tc+0x8>)
 8001b9a:	f00c b835 	b.w	800dc08 <inv_unregister_data_cb>
 8001b9e:	bf00      	nop
 8001ba0:	08001689 	.word	0x08001689

08001ba4 <inv_enable_gyro_tc>:
 8001ba4:	b508      	push	{r3, lr}
 8001ba6:	f7ff ffa1 	bl	8001aec <inv_init_gyro_ts>
 8001baa:	480a      	ldr	r0, [pc, #40]	; (8001bd4 <inv_enable_gyro_tc+0x30>)
 8001bac:	490a      	ldr	r1, [pc, #40]	; (8001bd8 <inv_enable_gyro_tc+0x34>)
 8001bae:	2210      	movs	r2, #16
 8001bb0:	f44f 739a 	mov.w	r3, #308	; 0x134
 8001bb4:	f00d fff2 	bl	800fb9c <inv_register_load_store>
 8001bb8:	b108      	cbz	r0, 8001bbe <inv_enable_gyro_tc+0x1a>
 8001bba:	2001      	movs	r0, #1
 8001bbc:	bd08      	pop	{r3, pc}
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <inv_enable_gyro_tc+0x38>)
 8001bc0:	f00d ff98 	bl	800faf4 <inv_register_mpl_start_notification>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d1f8      	bne.n	8001bba <inv_enable_gyro_tc+0x16>
 8001bc8:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <inv_enable_gyro_tc+0x3c>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 21b1 	strb.w	r2, [r3, #433]	; 0x1b1
 8001bd0:	bd08      	pop	{r3, pc}
 8001bd2:	bf00      	nop
 8001bd4:	08001abd 	.word	0x08001abd
 8001bd8:	08001a89 	.word	0x08001a89
 8001bdc:	08001679 	.word	0x08001679
 8001be0:	20000298 	.word	0x20000298

08001be4 <inv_disable_gyro_tc>:
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4c08      	ldr	r4, [pc, #32]	; (8001c08 <inv_disable_gyro_tc+0x24>)
 8001be8:	f894 01b1 	ldrb.w	r0, [r4, #433]	; 0x1b1
 8001bec:	b900      	cbnz	r0, 8001bf0 <inv_disable_gyro_tc+0xc>
 8001bee:	bd10      	pop	{r4, pc}
 8001bf0:	4806      	ldr	r0, [pc, #24]	; (8001c0c <inv_disable_gyro_tc+0x28>)
 8001bf2:	f00c f809 	bl	800dc08 <inv_unregister_data_cb>
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <inv_disable_gyro_tc+0x2c>)
 8001bf8:	f00d ff3c 	bl	800fa74 <inv_unregister_mpl_start_notification>
 8001bfc:	b910      	cbnz	r0, 8001c04 <inv_disable_gyro_tc+0x20>
 8001bfe:	f884 01b1 	strb.w	r0, [r4, #433]	; 0x1b1
 8001c02:	bd10      	pop	{r4, pc}
 8001c04:	2001      	movs	r0, #1
 8001c06:	bd10      	pop	{r4, pc}
 8001c08:	20000298 	.word	0x20000298
 8001c0c:	08001689 	.word	0x08001689
 8001c10:	08001679 	.word	0x08001679

08001c14 <inv_start_magnetic_disturbance>:
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <inv_start_magnetic_disturbance+0xc>)
 8001c16:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	f00b bf52 	b.w	800dac4 <inv_register_data_cb>
 8001c20:	08002221 	.word	0x08002221

08001c24 <inv_set_magnetic_disturbance>:
 8001c24:	2800      	cmp	r0, #0
 8001c26:	dd05      	ble.n	8001c34 <inv_set_magnetic_disturbance+0x10>
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <inv_set_magnetic_disturbance+0x14>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
 8001c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001c34:	2000      	movs	r0, #0
 8001c36:	4770      	bx	lr
 8001c38:	2000045c 	.word	0x2000045c

08001c3c <inv_init_magnetic_disturbance>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	4c0c      	ldr	r4, [pc, #48]	; (8001c70 <inv_init_magnetic_disturbance+0x34>)
 8001c40:	2100      	movs	r1, #0
 8001c42:	4620      	mov	r0, r4
 8001c44:	22b8      	movs	r2, #184	; 0xb8
 8001c46:	f00e fcf2 	bl	801062e <memset>
 8001c4a:	4f0a      	ldr	r7, [pc, #40]	; (8001c74 <inv_init_magnetic_disturbance+0x38>)
 8001c4c:	4e0a      	ldr	r6, [pc, #40]	; (8001c78 <inv_init_magnetic_disturbance+0x3c>)
 8001c4e:	4d0b      	ldr	r5, [pc, #44]	; (8001c7c <inv_init_magnetic_disturbance+0x40>)
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <inv_init_magnetic_disturbance+0x44>)
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <inv_init_magnetic_disturbance+0x48>)
 8001c54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c58:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001c5c:	6060      	str	r0, [r4, #4]
 8001c5e:	60e7      	str	r7, [r4, #12]
 8001c60:	60a6      	str	r6, [r4, #8]
 8001c62:	6025      	str	r5, [r4, #0]
 8001c64:	6661      	str	r1, [r4, #100]	; 0x64
 8001c66:	67e2      	str	r2, [r4, #124]	; 0x7c
 8001c68:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c70:	2000045c 	.word	0x2000045c
 8001c74:	42b40000 	.word	0x42b40000
 8001c78:	c2b40000 	.word	0xc2b40000
 8001c7c:	42700000 	.word	0x42700000
 8001c80:	41f00000 	.word	0x41f00000
 8001c84:	3e2e147b 	.word	0x3e2e147b

08001c88 <inv_stop_magnetic_disturbance>:
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <inv_stop_magnetic_disturbance+0x8>)
 8001c8a:	f00b bfbd 	b.w	800dc08 <inv_unregister_data_cb>
 8001c8e:	bf00      	nop
 8001c90:	08002221 	.word	0x08002221

08001c94 <inv_enable_magnetic_disturbance>:
 8001c94:	b508      	push	{r3, lr}
 8001c96:	f7ff ffd1 	bl	8001c3c <inv_init_magnetic_disturbance>
 8001c9a:	b100      	cbz	r0, 8001c9e <inv_enable_magnetic_disturbance+0xa>
 8001c9c:	bd08      	pop	{r3, pc}
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <inv_enable_magnetic_disturbance+0x24>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ca8:	4804      	ldr	r0, [pc, #16]	; (8001cbc <inv_enable_magnetic_disturbance+0x28>)
 8001caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001cae:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
 8001cb2:	f00d bf1f 	b.w	800faf4 <inv_register_mpl_start_notification>
 8001cb6:	bf00      	nop
 8001cb8:	2000045c 	.word	0x2000045c
 8001cbc:	08001c15 	.word	0x08001c15

08001cc0 <inv_disable_magnetic_disturbance>:
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	4c04      	ldr	r4, [pc, #16]	; (8001cd4 <inv_disable_magnetic_disturbance+0x14>)
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f00b ff9f 	bl	800dc08 <inv_unregister_data_cb>
 8001cca:	4620      	mov	r0, r4
 8001ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cd0:	f00b bf9a 	b.w	800dc08 <inv_unregister_data_cb>
 8001cd4:	08002221 	.word	0x08002221

08001cd8 <inv_disable_dip_tracking>:
 8001cd8:	4b02      	ldr	r3, [pc, #8]	; (8001ce4 <inv_disable_dip_tracking+0xc>)
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2000045c 	.word	0x2000045c

08001ce8 <inv_enable_dip_tracking>:
 8001ce8:	4b02      	ldr	r3, [pc, #8]	; (8001cf4 <inv_enable_dip_tracking+0xc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	4770      	bx	lr
 8001cf4:	2000045c 	.word	0x2000045c

08001cf8 <inv_track_dip_angle>:
 8001cf8:	b538      	push	{r3, r4, r5, lr}
 8001cfa:	b158      	cbz	r0, 8001d14 <inv_track_dip_angle+0x1c>
 8001cfc:	2801      	cmp	r0, #1
 8001cfe:	d019      	beq.n	8001d34 <inv_track_dip_angle+0x3c>
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <inv_track_dip_angle+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	2101      	movs	r1, #1
 8001d06:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8001d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001d0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
 8001d14:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <inv_track_dip_angle+0x94>)
 8001d16:	2400      	movs	r4, #0
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
 8001d1e:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8001d22:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
 8001d26:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
 8001d2a:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
 8001d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8001d32:	bd38      	pop	{r3, r4, r5, pc}
 8001d34:	4d15      	ldr	r5, [pc, #84]	; (8001d8c <inv_track_dip_angle+0x94>)
 8001d36:	4608      	mov	r0, r1
 8001d38:	460c      	mov	r4, r1
 8001d3a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8001d3e:	f001 fcef 	bl	8003720 <__aeabi_fsub>
 8001d42:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8001d46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001d4a:	f001 ff91 	bl	8003c70 <__aeabi_fcmplt>
 8001d4e:	b1b0      	cbz	r0, 8001d7e <inv_track_dip_angle+0x86>
 8001d50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8001d54:	4620      	mov	r0, r4
 8001d56:	1c5c      	adds	r4, r3, #1
 8001d58:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8001d5c:	f8c5 4094 	str.w	r4, [r5, #148]	; 0x94
 8001d60:	f001 fce0 	bl	8003724 <__addsf3>
 8001d64:	2c31      	cmp	r4, #49	; 0x31
 8001d66:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
 8001d6a:	dd0d      	ble.n	8001d88 <inv_track_dip_angle+0x90>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <inv_track_dip_angle+0x98>)
 8001d70:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8001d74:	f001 fe92 	bl	8003a9c <__aeabi_fdiv>
 8001d78:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
 8001d7c:	bd38      	pop	{r3, r4, r5, pc}
 8001d7e:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
 8001d82:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
 8001d86:	bd38      	pop	{r3, r4, r5, pc}
 8001d88:	bd38      	pop	{r3, r4, r5, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000045c 	.word	0x2000045c
 8001d90:	42480000 	.word	0x42480000

08001d94 <ComputeAngleVelocity>:
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	4606      	mov	r6, r0
 8001d98:	460d      	mov	r5, r1
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	b08f      	sub	sp, #60	; 0x3c
 8001d9e:	a905      	add	r1, sp, #20
 8001da0:	f00d f97d 	bl	800f09e <inv_quaternion_to_rotation>
 8001da4:	aa01      	add	r2, sp, #4
 8001da6:	4628      	mov	r0, r5
 8001da8:	4631      	mov	r1, r6
 8001daa:	f00c fcf7 	bl	800e79c <inv_q_mult>
 8001dae:	4630      	mov	r0, r6
 8001db0:	4629      	mov	r1, r5
 8001db2:	f00c fdec 	bl	800e98e <inv_q_invert>
 8001db6:	af05      	add	r7, sp, #20
 8001db8:	f1a4 0c04 	sub.w	ip, r4, #4
 8001dbc:	f104 0208 	add.w	r2, r4, #8
 8001dc0:	f10d 0e10 	add.w	lr, sp, #16
 8001dc4:	463c      	mov	r4, r7
 8001dc6:	ab01      	add	r3, sp, #4
 8001dc8:	2000      	movs	r0, #0
 8001dca:	2100      	movs	r1, #0
 8001dcc:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8001dd0:	f854 6b04 	ldr.w	r6, [r4], #4
 8001dd4:	4573      	cmp	r3, lr
 8001dd6:	fbc5 0106 	smlal	r0, r1, r5, r6
 8001dda:	d1f7      	bne.n	8001dcc <ComputeAngleVelocity+0x38>
 8001ddc:	0f83      	lsrs	r3, r0, #30
 8001dde:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8001de2:	f84c 3f04 	str.w	r3, [ip, #4]!
 8001de6:	4594      	cmp	ip, r2
 8001de8:	f107 070c 	add.w	r7, r7, #12
 8001dec:	d1ea      	bne.n	8001dc4 <ComputeAngleVelocity+0x30>
 8001dee:	b00f      	add	sp, #60	; 0x3c
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df2:	bf00      	nop

08001df4 <Mag3ofNormalizedLong>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	4604      	mov	r4, r0
 8001df8:	6800      	ldr	r0, [r0, #0]
 8001dfa:	f001 fd47 	bl	800388c <__aeabi_i2f>
 8001dfe:	4607      	mov	r7, r0
 8001e00:	6860      	ldr	r0, [r4, #4]
 8001e02:	f001 fd43 	bl	800388c <__aeabi_i2f>
 8001e06:	4606      	mov	r6, r0
 8001e08:	68a0      	ldr	r0, [r4, #8]
 8001e0a:	f001 fd3f 	bl	800388c <__aeabi_i2f>
 8001e0e:	4639      	mov	r1, r7
 8001e10:	4605      	mov	r5, r0
 8001e12:	4638      	mov	r0, r7
 8001e14:	f001 fd8e 	bl	8003934 <__aeabi_fmul>
 8001e18:	4631      	mov	r1, r6
 8001e1a:	4604      	mov	r4, r0
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f001 fd89 	bl	8003934 <__aeabi_fmul>
 8001e22:	4601      	mov	r1, r0
 8001e24:	4620      	mov	r0, r4
 8001e26:	f001 fc7d 	bl	8003724 <__addsf3>
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	4604      	mov	r4, r0
 8001e2e:	4628      	mov	r0, r5
 8001e30:	f001 fd80 	bl	8003934 <__aeabi_fmul>
 8001e34:	4601      	mov	r1, r0
 8001e36:	4620      	mov	r0, r4
 8001e38:	f001 fc74 	bl	8003724 <__addsf3>
 8001e3c:	f013 f808 	bl	8014e50 <sqrtf>
 8001e40:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8001e44:	f001 fd76 	bl	8003934 <__aeabi_fmul>
 8001e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4a:	bf00      	nop

08001e4c <MagDisturbSetDisturbance>:
 8001e4c:	b570      	push	{r4, r5, r6, lr}
 8001e4e:	4605      	mov	r5, r0
 8001e50:	4c1b      	ldr	r4, [pc, #108]	; (8001ec0 <MagDisturbSetDisturbance+0x74>)
 8001e52:	460e      	mov	r6, r1
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	4629      	mov	r1, r5
 8001e58:	f001 ff0a 	bl	8003c70 <__aeabi_fcmplt>
 8001e5c:	b920      	cbnz	r0, 8001e68 <MagDisturbSetDisturbance+0x1c>
 8001e5e:	4628      	mov	r0, r5
 8001e60:	6861      	ldr	r1, [r4, #4]
 8001e62:	f001 ff05 	bl	8003c70 <__aeabi_fcmplt>
 8001e66:	b198      	cbz	r0, 8001e90 <MagDisturbSetDisturbance+0x44>
 8001e68:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001e6a:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <MagDisturbSetDisturbance+0x74>)
 8001e6c:	b1ab      	cbz	r3, 8001e9a <MagDisturbSetDisturbance+0x4e>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	461a      	mov	r2, r3
 8001e72:	2101      	movs	r1, #1
 8001e74:	67a3      	str	r3, [r4, #120]	; 0x78
 8001e76:	6761      	str	r1, [r4, #116]	; 0x74
 8001e78:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001e7a:	4911      	ldr	r1, [pc, #68]	; (8001ec0 <MagDisturbSetDisturbance+0x74>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	dc06      	bgt.n	8001e8e <MagDisturbSetDisturbance+0x42>
 8001e80:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	bf04      	itt	eq
 8001e86:	2300      	moveq	r3, #0
 8001e88:	65cb      	streq	r3, [r1, #92]	; 0x5c
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	6763      	str	r3, [r4, #116]	; 0x74
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}
 8001e90:	6923      	ldr	r3, [r4, #16]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d007      	beq.n	8001ea6 <MagDisturbSetDisturbance+0x5a>
 8001e96:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001e98:	e7ee      	b.n	8001e78 <MagDisturbSetDisturbance+0x2c>
 8001e9a:	f102 0018 	add.w	r0, r2, #24
 8001e9e:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8001ea0:	f00d fbea 	bl	800f678 <inv_set_compass_correction>
 8001ea4:	e7e3      	b.n	8001e6e <MagDisturbSetDisturbance+0x22>
 8001ea6:	68e0      	ldr	r0, [r4, #12]
 8001ea8:	4631      	mov	r1, r6
 8001eaa:	f001 fee1 	bl	8003c70 <__aeabi_fcmplt>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d1da      	bne.n	8001e68 <MagDisturbSetDisturbance+0x1c>
 8001eb2:	4630      	mov	r0, r6
 8001eb4:	68a1      	ldr	r1, [r4, #8]
 8001eb6:	f001 fedb 	bl	8003c70 <__aeabi_fcmplt>
 8001eba:	2800      	cmp	r0, #0
 8001ebc:	d0eb      	beq.n	8001e96 <MagDisturbSetDisturbance+0x4a>
 8001ebe:	e7d3      	b.n	8001e68 <MagDisturbSetDisturbance+0x1c>
 8001ec0:	2000045c 	.word	0x2000045c

08001ec4 <MagDisturbCheckSettling>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4605      	mov	r5, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	f00d fc07 	bl	800f6dc <inv_get_acc_state>
 8001ece:	b920      	cbnz	r0, 8001eda <MagDisturbCheckSettling+0x16>
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	490c      	ldr	r1, [pc, #48]	; (8001f04 <MagDisturbCheckSettling+0x40>)
 8001ed4:	f001 feea 	bl	8003cac <__aeabi_fcmpgt>
 8001ed8:	b178      	cbz	r0, 8001efa <MagDisturbCheckSettling+0x36>
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <MagDisturbCheckSettling+0x44>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
 8001ee0:	615a      	str	r2, [r3, #20]
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <MagDisturbCheckSettling+0x44>)
 8001ee6:	4421      	add	r1, r4
 8001ee8:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
 8001eec:	6159      	str	r1, [r3, #20]
 8001eee:	dd03      	ble.n	8001ef8 <MagDisturbCheckSettling+0x34>
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	6111      	str	r1, [r2, #16]
 8001ef6:	6153      	str	r3, [r2, #20]
 8001ef8:	bd38      	pop	{r3, r4, r5, pc}
 8001efa:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <MagDisturbCheckSettling+0x44>)
 8001efc:	691a      	ldr	r2, [r3, #16]
 8001efe:	2a00      	cmp	r2, #0
 8001f00:	d0ef      	beq.n	8001ee2 <MagDisturbCheckSettling+0x1e>
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	461c4000 	.word	0x461c4000
 8001f08:	2000045c 	.word	0x2000045c

08001f0c <inv_check_magnetic_disturbance>:
 8001f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	4db0      	ldr	r5, [pc, #704]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8001f12:	b08d      	sub	sp, #52	; 0x34
 8001f14:	f8d5 6088 	ldr.w	r6, [r5, #136]	; 0x88
 8001f18:	2400      	movs	r4, #0
 8001f1a:	9406      	str	r4, [sp, #24]
 8001f1c:	9407      	str	r4, [sp, #28]
 8001f1e:	9408      	str	r4, [sp, #32]
 8001f20:	b926      	cbnz	r6, 8001f2c <inv_check_magnetic_disturbance+0x20>
 8001f22:	2300      	movs	r3, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	b00d      	add	sp, #52	; 0x34
 8001f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	4617      	mov	r7, r2
 8001f30:	9100      	str	r1, [sp, #0]
 8001f32:	4680      	mov	r8, r0
 8001f34:	f00b fb72 	bl	800d61c <inv_get_gyro_on>
 8001f38:	2800      	cmp	r0, #0
 8001f3a:	f040 8129 	bne.w	8002190 <inv_check_magnetic_disturbance+0x284>
 8001f3e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8001f42:	4ea4      	ldr	r6, [pc, #656]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	dd12      	ble.n	8001f6e <inv_check_magnetic_disturbance+0x62>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
 8001f4e:	f00b fb65 	bl	800d61c <inv_get_gyro_on>
 8001f52:	2800      	cmp	r0, #0
 8001f54:	f040 80b0 	bne.w	80020b8 <inv_check_magnetic_disturbance+0x1ac>
 8001f58:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8001f5c:	ebc8 0303 	rsb	r3, r8, r3
 8001f60:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bfdc      	itt	le
 8001f68:	2300      	movle	r3, #0
 8001f6a:	f8c5 3084 	strle.w	r3, [r5, #132]	; 0x84
 8001f6e:	f00d fd2b 	bl	800f9c8 <inv_got_compass_bias>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d0d5      	beq.n	8001f22 <inv_check_magnetic_disturbance+0x16>
 8001f76:	f04f 0a00 	mov.w	sl, #0
 8001f7a:	3c04      	subs	r4, #4
 8001f7c:	1f3e      	subs	r6, r7, #4
 8001f7e:	f107 0b08 	add.w	fp, r7, #8
 8001f82:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8001f86:	f001 fc81 	bl	800388c <__aeabi_i2f>
 8001f8a:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8001f8e:	f001 fcd1 	bl	8003934 <__aeabi_fmul>
 8001f92:	4681      	mov	r9, r0
 8001f94:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8001f98:	f001 fc78 	bl	800388c <__aeabi_i2f>
 8001f9c:	4601      	mov	r1, r0
 8001f9e:	4648      	mov	r0, r9
 8001fa0:	f001 fcc8 	bl	8003934 <__aeabi_fmul>
 8001fa4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 8001fa8:	f001 fcc4 	bl	8003934 <__aeabi_fmul>
 8001fac:	4601      	mov	r1, r0
 8001fae:	4650      	mov	r0, sl
 8001fb0:	f001 fbb8 	bl	8003724 <__addsf3>
 8001fb4:	455e      	cmp	r6, fp
 8001fb6:	4682      	mov	sl, r0
 8001fb8:	d1e3      	bne.n	8001f82 <inv_check_magnetic_disturbance+0x76>
 8001fba:	4638      	mov	r0, r7
 8001fbc:	f7ff ff1a 	bl	8001df4 <Mag3ofNormalizedLong>
 8001fc0:	4606      	mov	r6, r0
 8001fc2:	4650      	mov	r0, sl
 8001fc4:	4631      	mov	r1, r6
 8001fc6:	f001 fd69 	bl	8003a9c <__aeabi_fdiv>
 8001fca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001fce:	4604      	mov	r4, r0
 8001fd0:	f001 fe6c 	bl	8003cac <__aeabi_fcmpgt>
 8001fd4:	2800      	cmp	r0, #0
 8001fd6:	d067      	beq.n	80020a8 <inv_check_magnetic_disturbance+0x19c>
 8001fd8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8001fdc:	4620      	mov	r0, r4
 8001fde:	f012 ff0f 	bl	8014e00 <acosf>
 8001fe2:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8001fe6:	4607      	mov	r7, r0
 8001fe8:	4c7a      	ldr	r4, [pc, #488]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8001fea:	b15b      	cbz	r3, 8002004 <inv_check_magnetic_disturbance+0xf8>
 8001fec:	4630      	mov	r0, r6
 8001fee:	6821      	ldr	r1, [r4, #0]
 8001ff0:	f001 fe3e 	bl	8003c70 <__aeabi_fcmplt>
 8001ff4:	b130      	cbz	r0, 8002004 <inv_check_magnetic_disturbance+0xf8>
 8001ff6:	4630      	mov	r0, r6
 8001ff8:	6861      	ldr	r1, [r4, #4]
 8001ffa:	f001 fe57 	bl	8003cac <__aeabi_fcmpgt>
 8001ffe:	2800      	cmp	r0, #0
 8002000:	f040 80ca 	bne.w	8002198 <inv_check_magnetic_disturbance+0x28c>
 8002004:	ac09      	add	r4, sp, #36	; 0x24
 8002006:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80021d4 <inv_check_magnetic_disturbance+0x2c8>
 800200a:	4620      	mov	r0, r4
 800200c:	f00d fbb4 	bl	800f778 <inv_get_local_field>
 8002010:	4620      	mov	r0, r4
 8002012:	f10a 01ac 	add.w	r1, sl, #172	; 0xac
 8002016:	220c      	movs	r2, #12
 8002018:	f00e fad3 	bl	80105c2 <memcmp>
 800201c:	2800      	cmp	r0, #0
 800201e:	d155      	bne.n	80020cc <inv_check_magnetic_disturbance+0x1c0>
 8002020:	f8da 3098 	ldr.w	r3, [sl, #152]	; 0x98
 8002024:	2b01      	cmp	r3, #1
 8002026:	d051      	beq.n	80020cc <inv_check_magnetic_disturbance+0x1c0>
 8002028:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 800202a:	4b6a      	ldr	r3, [pc, #424]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 800202c:	b962      	cbnz	r2, 8002048 <inv_check_magnetic_disturbance+0x13c>
 800202e:	2201      	movs	r2, #1
 8002030:	65da      	str	r2, [r3, #92]	; 0x5c
 8002032:	f103 0418 	add.w	r4, r3, #24
 8002036:	f103 0a58 	add.w	sl, r3, #88	; 0x58
 800203a:	4620      	mov	r0, r4
 800203c:	4966      	ldr	r1, [pc, #408]	; (80021d8 <inv_check_magnetic_disturbance+0x2cc>)
 800203e:	3410      	adds	r4, #16
 8002040:	f00d fb36 	bl	800f6b0 <inv_get_compass_correction>
 8002044:	4554      	cmp	r4, sl
 8002046:	d1f8      	bne.n	800203a <inv_check_magnetic_disturbance+0x12e>
 8002048:	f8dd 9000 	ldr.w	r9, [sp]
 800204c:	4c61      	ldr	r4, [pc, #388]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 800204e:	aa03      	add	r2, sp, #12
 8002050:	4648      	mov	r0, r9
 8002052:	f104 0164 	add.w	r1, r4, #100	; 0x64
 8002056:	f7ff fe9d 	bl	8001d94 <ComputeAngleVelocity>
 800205a:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800205e:	4648      	mov	r0, r9
 8002060:	f00c fc95 	bl	800e98e <inv_q_invert>
 8002064:	a806      	add	r0, sp, #24
 8002066:	f00c fb1e 	bl	800e6a6 <inv_get_gyro_sum_of_sqr>
 800206a:	f001 fc0b 	bl	8003884 <__aeabi_ui2f>
 800206e:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
 8002072:	f001 fc5f 	bl	8003934 <__aeabi_fmul>
 8002076:	4641      	mov	r1, r8
 8002078:	f7ff ff24 	bl	8001ec4 <MagDisturbCheckSettling>
 800207c:	4630      	mov	r0, r6
 800207e:	4639      	mov	r1, r7
 8002080:	f7ff fee4 	bl	8001e4c <MagDisturbSetDisturbance>
 8002084:	6fab      	ldr	r3, [r5, #120]	; 0x78
 8002086:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002088:	4293      	cmp	r3, r2
 800208a:	da01      	bge.n	8002090 <inv_check_magnetic_disturbance+0x184>
 800208c:	4443      	add	r3, r8
 800208e:	67a3      	str	r3, [r4, #120]	; 0x78
 8002090:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002092:	4c50      	ldr	r4, [pc, #320]	; (80021d4 <inv_check_magnetic_disturbance+0x2c8>)
 8002094:	2b00      	cmp	r3, #0
 8002096:	f47f af45 	bne.w	8001f24 <inv_check_magnetic_disturbance+0x18>
 800209a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800209c:	4440      	add	r0, r8
 800209e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80020a2:	dc7f      	bgt.n	80021a4 <inv_check_magnetic_disturbance+0x298>
 80020a4:	6620      	str	r0, [r4, #96]	; 0x60
 80020a6:	e73d      	b.n	8001f24 <inv_check_magnetic_disturbance+0x18>
 80020a8:	4620      	mov	r0, r4
 80020aa:	494c      	ldr	r1, [pc, #304]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80020ac:	f001 fde0 	bl	8003c70 <__aeabi_fcmplt>
 80020b0:	2800      	cmp	r0, #0
 80020b2:	d093      	beq.n	8001fdc <inv_check_magnetic_disturbance+0xd0>
 80020b4:	4c49      	ldr	r4, [pc, #292]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80020b6:	e791      	b.n	8001fdc <inv_check_magnetic_disturbance+0xd0>
 80020b8:	a806      	add	r0, sp, #24
 80020ba:	f00c faf4 	bl	800e6a6 <inv_get_gyro_sum_of_sqr>
 80020be:	f5b0 4fc8 	cmp.w	r0, #25600	; 0x6400
 80020c2:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80020c6:	f4bf af49 	bcs.w	8001f5c <inv_check_magnetic_disturbance+0x50>
 80020ca:	e74b      	b.n	8001f64 <inv_check_magnetic_disturbance+0x58>
 80020cc:	f8df a104 	ldr.w	sl, [pc, #260]	; 80021d4 <inv_check_magnetic_disturbance+0x2c8>
 80020d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020d2:	f10a 0eac 	add.w	lr, sl, #172	; 0xac
 80020d6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80020da:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 80020de:	b9a3      	cbnz	r3, 800210a <inv_check_magnetic_disturbance+0x1fe>
 80020e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020e2:	b993      	cbnz	r3, 800210a <inv_check_magnetic_disturbance+0x1fe>
 80020e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020e6:	b983      	cbnz	r3, 800210a <inv_check_magnetic_disturbance+0x1fe>
 80020e8:	f8da 2098 	ldr.w	r2, [sl, #152]	; 0x98
 80020ec:	483c      	ldr	r0, [pc, #240]	; (80021e0 <inv_check_magnetic_disturbance+0x2d4>)
 80020ee:	493d      	ldr	r1, [pc, #244]	; (80021e4 <inv_check_magnetic_disturbance+0x2d8>)
 80020f0:	2a01      	cmp	r2, #1
 80020f2:	f8ca 0000 	str.w	r0, [sl]
 80020f6:	f8ca 1004 	str.w	r1, [sl, #4]
 80020fa:	d07b      	beq.n	80021f4 <inv_check_magnetic_disturbance+0x2e8>
 80020fc:	4a3a      	ldr	r2, [pc, #232]	; (80021e8 <inv_check_magnetic_disturbance+0x2dc>)
 80020fe:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <inv_check_magnetic_disturbance+0x2e0>)
 8002100:	f8ca 2008 	str.w	r2, [sl, #8]
 8002104:	f8ca 300c 	str.w	r3, [sl, #12]
 8002108:	e78e      	b.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 800210a:	4620      	mov	r0, r4
 800210c:	f7ff fe72 	bl	8001df4 <Mag3ofNormalizedLong>
 8002110:	2100      	movs	r1, #0
 8002112:	4604      	mov	r4, r0
 8002114:	f001 fda2 	bl	8003c5c <__aeabi_fcmpeq>
 8002118:	2800      	cmp	r0, #0
 800211a:	d185      	bne.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 800211c:	4620      	mov	r0, r4
 800211e:	4934      	ldr	r1, [pc, #208]	; (80021f0 <inv_check_magnetic_disturbance+0x2e4>)
 8002120:	f001 fafe 	bl	8003720 <__aeabi_fsub>
 8002124:	4601      	mov	r1, r0
 8002126:	f001 fc05 	bl	8003934 <__aeabi_fmul>
 800212a:	f012 fe91 	bl	8014e50 <sqrtf>
 800212e:	4930      	ldr	r1, [pc, #192]	; (80021f0 <inv_check_magnetic_disturbance+0x2e4>)
 8002130:	6068      	str	r0, [r5, #4]
 8002132:	4620      	mov	r0, r4
 8002134:	f001 faf6 	bl	8003724 <__addsf3>
 8002138:	4601      	mov	r1, r0
 800213a:	f001 fbfb 	bl	8003934 <__aeabi_fmul>
 800213e:	f012 fe87 	bl	8014e50 <sqrtf>
 8002142:	6028      	str	r0, [r5, #0]
 8002144:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002146:	f001 fba1 	bl	800388c <__aeabi_i2f>
 800214a:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800214e:	f001 fbf1 	bl	8003934 <__aeabi_fmul>
 8002152:	4621      	mov	r1, r4
 8002154:	f001 fca2 	bl	8003a9c <__aeabi_fdiv>
 8002158:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800215c:	4604      	mov	r4, r0
 800215e:	f001 fda5 	bl	8003cac <__aeabi_fcmpgt>
 8002162:	b378      	cbz	r0, 80021c4 <inv_check_magnetic_disturbance+0x2b8>
 8002164:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8002168:	4620      	mov	r0, r4
 800216a:	f012 fe49 	bl	8014e00 <acosf>
 800216e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8002172:	f001 fad5 	bl	8003720 <__aeabi_fsub>
 8002176:	60a8      	str	r0, [r5, #8]
 8002178:	4620      	mov	r0, r4
 800217a:	f012 fe41 	bl	8014e00 <acosf>
 800217e:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8002182:	f001 facf 	bl	8003724 <__addsf3>
 8002186:	2300      	movs	r3, #0
 8002188:	60e8      	str	r0, [r5, #12]
 800218a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
 800218e:	e74b      	b.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 8002190:	a806      	add	r0, sp, #24
 8002192:	f00b fed7 	bl	800df44 <inv_get_gyro>
 8002196:	e6d2      	b.n	8001f3e <inv_check_magnetic_disturbance+0x32>
 8002198:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800219c:	4639      	mov	r1, r7
 800219e:	f7ff fdab 	bl	8001cf8 <inv_track_dip_angle>
 80021a2:	e72f      	b.n	8002004 <inv_check_magnetic_disturbance+0xf8>
 80021a4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80021a8:	2230      	movs	r2, #48	; 0x30
 80021aa:	f104 0018 	add.w	r0, r4, #24
 80021ae:	6623      	str	r3, [r4, #96]	; 0x60
 80021b0:	f00e fa23 	bl	80105fa <memmove>
 80021b4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80021b8:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80021bc:	f00d fa78 	bl	800f6b0 <inv_get_compass_correction>
 80021c0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80021c2:	e6af      	b.n	8001f24 <inv_check_magnetic_disturbance+0x18>
 80021c4:	4620      	mov	r0, r4
 80021c6:	4905      	ldr	r1, [pc, #20]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80021c8:	f001 fd52 	bl	8003c70 <__aeabi_fcmplt>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d0cb      	beq.n	8002168 <inv_check_magnetic_disturbance+0x25c>
 80021d0:	4c02      	ldr	r4, [pc, #8]	; (80021dc <inv_check_magnetic_disturbance+0x2d0>)
 80021d2:	e7c9      	b.n	8002168 <inv_check_magnetic_disturbance+0x25c>
 80021d4:	2000045c 	.word	0x2000045c
 80021d8:	200004b4 	.word	0x200004b4
 80021dc:	bf800000 	.word	0xbf800000
 80021e0:	42700000 	.word	0x42700000
 80021e4:	41f00000 	.word	0x41f00000
 80021e8:	c2b40000 	.word	0xc2b40000
 80021ec:	42b40000 	.word	0x42b40000
 80021f0:	41200000 	.word	0x41200000
 80021f4:	f8da 40a8 	ldr.w	r4, [sl, #168]	; 0xa8
 80021f8:	f8da b09c 	ldr.w	fp, [sl, #156]	; 0x9c
 80021fc:	4620      	mov	r0, r4
 80021fe:	4659      	mov	r1, fp
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	f001 fa8d 	bl	8003720 <__aeabi_fsub>
 8002206:	4659      	mov	r1, fp
 8002208:	f8ca 0008 	str.w	r0, [sl, #8]
 800220c:	4620      	mov	r0, r4
 800220e:	f001 fa89 	bl	8003724 <__addsf3>
 8002212:	9b01      	ldr	r3, [sp, #4]
 8002214:	f8ca 000c 	str.w	r0, [sl, #12]
 8002218:	f8ca 3098 	str.w	r3, [sl, #152]	; 0x98
 800221c:	e704      	b.n	8002028 <inv_check_magnetic_disturbance+0x11c>
 800221e:	bf00      	nop

08002220 <inv_magnetic_disturbance_process>:
 8002220:	b570      	push	{r4, r5, r6, lr}
 8002222:	4604      	mov	r4, r0
 8002224:	b088      	sub	sp, #32
 8002226:	a801      	add	r0, sp, #4
 8002228:	f00d fab6 	bl	800f798 <inv_get_gravity>
 800222c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8002230:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
 8002234:	a804      	add	r0, sp, #16
 8002236:	1b5d      	subs	r5, r3, r5
 8002238:	f00d fafc 	bl	800f834 <inv_get_6axis_quaternion>
 800223c:	4606      	mov	r6, r0
 800223e:	a904      	add	r1, sp, #16
 8002240:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 8002244:	ab01      	add	r3, sp, #4
 8002246:	4628      	mov	r0, r5
 8002248:	f7ff fe60 	bl	8001f0c <inv_check_magnetic_disturbance>
 800224c:	f00b faaa 	bl	800d7a4 <inv_set_compass_disturbance>
 8002250:	4630      	mov	r0, r6
 8002252:	b008      	add	sp, #32
 8002254:	bd70      	pop	{r4, r5, r6, pc}
 8002256:	bf00      	nop

08002258 <inv_get_magnetic_disturbance_state>:
 8002258:	4b01      	ldr	r3, [pc, #4]	; (8002260 <inv_get_magnetic_disturbance_state+0x8>)
 800225a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000045c 	.word	0x2000045c
 8002264:	00000000 	.word	0x00000000

08002268 <inv_normalize_quat>:
 8002268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800226c:	4604      	mov	r4, r0
 800226e:	6800      	ldr	r0, [r0, #0]
 8002270:	460d      	mov	r5, r1
 8002272:	f001 fb0b 	bl	800388c <__aeabi_i2f>
 8002276:	4606      	mov	r6, r0
 8002278:	6860      	ldr	r0, [r4, #4]
 800227a:	f001 fb07 	bl	800388c <__aeabi_i2f>
 800227e:	4681      	mov	r9, r0
 8002280:	68a0      	ldr	r0, [r4, #8]
 8002282:	f001 fb03 	bl	800388c <__aeabi_i2f>
 8002286:	4680      	mov	r8, r0
 8002288:	68e0      	ldr	r0, [r4, #12]
 800228a:	f001 faff 	bl	800388c <__aeabi_i2f>
 800228e:	4631      	mov	r1, r6
 8002290:	4607      	mov	r7, r0
 8002292:	4630      	mov	r0, r6
 8002294:	f001 fb4e 	bl	8003934 <__aeabi_fmul>
 8002298:	4649      	mov	r1, r9
 800229a:	4606      	mov	r6, r0
 800229c:	4648      	mov	r0, r9
 800229e:	f001 fb49 	bl	8003934 <__aeabi_fmul>
 80022a2:	4601      	mov	r1, r0
 80022a4:	4630      	mov	r0, r6
 80022a6:	f001 fa3d 	bl	8003724 <__addsf3>
 80022aa:	4641      	mov	r1, r8
 80022ac:	4606      	mov	r6, r0
 80022ae:	4640      	mov	r0, r8
 80022b0:	f001 fb40 	bl	8003934 <__aeabi_fmul>
 80022b4:	4601      	mov	r1, r0
 80022b6:	4630      	mov	r0, r6
 80022b8:	f001 fa34 	bl	8003724 <__addsf3>
 80022bc:	4639      	mov	r1, r7
 80022be:	4606      	mov	r6, r0
 80022c0:	4638      	mov	r0, r7
 80022c2:	f001 fb37 	bl	8003934 <__aeabi_fmul>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4630      	mov	r0, r6
 80022ca:	f001 fa2b 	bl	8003724 <__addsf3>
 80022ce:	2100      	movs	r1, #0
 80022d0:	4606      	mov	r6, r0
 80022d2:	f001 fcd7 	bl	8003c84 <__aeabi_fcmple>
 80022d6:	2800      	cmp	r0, #0
 80022d8:	d132      	bne.n	8002340 <inv_normalize_quat+0xd8>
 80022da:	4630      	mov	r0, r6
 80022dc:	f012 fdb8 	bl	8014e50 <sqrtf>
 80022e0:	4601      	mov	r1, r0
 80022e2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80022e6:	f001 fbd9 	bl	8003a9c <__aeabi_fdiv>
 80022ea:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 80022ee:	f001 fb21 	bl	8003934 <__aeabi_fmul>
 80022f2:	4606      	mov	r6, r0
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	f001 fac9 	bl	800388c <__aeabi_i2f>
 80022fa:	4631      	mov	r1, r6
 80022fc:	f001 fb1a 	bl	8003934 <__aeabi_fmul>
 8002300:	f001 fcf4 	bl	8003cec <__aeabi_f2iz>
 8002304:	6028      	str	r0, [r5, #0]
 8002306:	6860      	ldr	r0, [r4, #4]
 8002308:	f001 fac0 	bl	800388c <__aeabi_i2f>
 800230c:	4631      	mov	r1, r6
 800230e:	f001 fb11 	bl	8003934 <__aeabi_fmul>
 8002312:	f001 fceb 	bl	8003cec <__aeabi_f2iz>
 8002316:	6068      	str	r0, [r5, #4]
 8002318:	68a0      	ldr	r0, [r4, #8]
 800231a:	f001 fab7 	bl	800388c <__aeabi_i2f>
 800231e:	4631      	mov	r1, r6
 8002320:	f001 fb08 	bl	8003934 <__aeabi_fmul>
 8002324:	f001 fce2 	bl	8003cec <__aeabi_f2iz>
 8002328:	60a8      	str	r0, [r5, #8]
 800232a:	68e0      	ldr	r0, [r4, #12]
 800232c:	f001 faae 	bl	800388c <__aeabi_i2f>
 8002330:	4631      	mov	r1, r6
 8002332:	f001 faff 	bl	8003934 <__aeabi_fmul>
 8002336:	f001 fcd9 	bl	8003cec <__aeabi_f2iz>
 800233a:	60e8      	str	r0, [r5, #12]
 800233c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002340:	2300      	movs	r3, #0
 8002342:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002346:	e885 000c 	stmia.w	r5, {r2, r3}
 800234a:	60ab      	str	r3, [r5, #8]
 800234c:	60eb      	str	r3, [r5, #12]
 800234e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002352:	bf00      	nop

08002354 <inv_start_quaternion>:
 8002354:	b508      	push	{r3, lr}
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <inv_start_quaternion+0x24>)
 8002358:	4908      	ldr	r1, [pc, #32]	; (800237c <inv_start_quaternion+0x28>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	f00e f930 	bl	80105c2 <memcmp>
 8002362:	b108      	cbz	r0, 8002368 <inv_start_quaternion+0x14>
 8002364:	2032      	movs	r0, #50	; 0x32
 8002366:	bd08      	pop	{r3, pc}
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <inv_start_quaternion+0x2c>)
 800236a:	21c8      	movs	r1, #200	; 0xc8
 800236c:	2213      	movs	r2, #19
 800236e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002372:	f00b bba7 	b.w	800dac4 <inv_register_data_cb>
 8002376:	bf00      	nop
 8002378:	2000004c 	.word	0x2000004c
 800237c:	08016f50 	.word	0x08016f50
 8002380:	08002c3d 	.word	0x08002c3d

08002384 <inv_generate_gyro_quaternion.part.1>:
 8002384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002386:	6986      	ldr	r6, [r0, #24]
 8002388:	b089      	sub	sp, #36	; 0x24
 800238a:	ea86 73e6 	eor.w	r3, r6, r6, asr #31
 800238e:	eba3 73e6 	sub.w	r3, r3, r6, asr #31
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002396:	da5c      	bge.n	8002452 <inv_generate_gyro_quaternion.part.1+0xce>
 8002398:	69c3      	ldr	r3, [r0, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	bfb8      	it	lt
 800239e:	425b      	neglt	r3, r3
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	db5d      	blt.n	8002462 <inv_generate_gyro_quaternion.part.1+0xde>
 80023a6:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 80023aa:	dd71      	ble.n	8002490 <inv_generate_gyro_quaternion.part.1+0x10c>
 80023ac:	4d3c      	ldr	r5, [pc, #240]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 80023ae:	2303      	movs	r3, #3
 80023b0:	63ab      	str	r3, [r5, #56]	; 0x38
 80023b2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80023b4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80023b6:	4604      	mov	r4, r0
 80023b8:	429a      	cmp	r2, r3
 80023ba:	4f39      	ldr	r7, [pc, #228]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 80023bc:	d06a      	beq.n	8002494 <inv_generate_gyro_quaternion.part.1+0x110>
 80023be:	4618      	mov	r0, r3
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
 80023c2:	f001 fa63 	bl	800388c <__aeabi_i2f>
 80023c6:	4937      	ldr	r1, [pc, #220]	; (80024a4 <inv_generate_gyro_quaternion.part.1+0x120>)
 80023c8:	f001 fb68 	bl	8003a9c <__aeabi_fdiv>
 80023cc:	f04f 419c 	mov.w	r1, #1308622848	; 0x4e000000
 80023d0:	f001 fab0 	bl	8003934 <__aeabi_fmul>
 80023d4:	f000 fe00 	bl	8002fd8 <__aeabi_f2d>
 80023d8:	a32f      	add	r3, pc, #188	; (adr r3, 8002498 <inv_generate_gyro_quaternion.part.1+0x114>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f000 fe53 	bl	8003088 <__aeabi_dmul>
 80023e2:	2200      	movs	r2, #0
 80023e4:	4b30      	ldr	r3, [pc, #192]	; (80024a8 <inv_generate_gyro_quaternion.part.1+0x124>)
 80023e6:	f000 fe4f 	bl	8003088 <__aeabi_dmul>
 80023ea:	2200      	movs	r2, #0
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <inv_generate_gyro_quaternion.part.1+0x128>)
 80023ee:	f000 ff75 	bl	80032dc <__aeabi_ddiv>
 80023f2:	f001 f8f9 	bl	80035e8 <__aeabi_d2iz>
 80023f6:	4601      	mov	r1, r0
 80023f8:	6338      	str	r0, [r7, #48]	; 0x30
 80023fa:	2300      	movs	r3, #0
 80023fc:	4630      	mov	r0, r6
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	f00c f9a0 	bl	800e744 <inv_q30_mult>
 8002404:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002406:	9001      	str	r0, [sp, #4]
 8002408:	69e0      	ldr	r0, [r4, #28]
 800240a:	f00c f99b 	bl	800e744 <inv_q30_mult>
 800240e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002410:	9002      	str	r0, [sp, #8]
 8002412:	6a20      	ldr	r0, [r4, #32]
 8002414:	f00c f996 	bl	800e744 <inv_q30_mult>
 8002418:	aa04      	add	r2, sp, #16
 800241a:	9003      	str	r0, [sp, #12]
 800241c:	4669      	mov	r1, sp
 800241e:	4820      	ldr	r0, [pc, #128]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002420:	f00c f9bc 	bl	800e79c <inv_q_mult>
 8002424:	9d04      	ldr	r5, [sp, #16]
 8002426:	9c05      	ldr	r4, [sp, #20]
 8002428:	9a06      	ldr	r2, [sp, #24]
 800242a:	9b07      	ldr	r3, [sp, #28]
 800242c:	481c      	ldr	r0, [pc, #112]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 800242e:	019b      	lsls	r3, r3, #6
 8002430:	a904      	add	r1, sp, #16
 8002432:	01ae      	lsls	r6, r5, #6
 8002434:	01a5      	lsls	r5, r4, #6
 8002436:	0194      	lsls	r4, r2, #6
 8002438:	4602      	mov	r2, r0
 800243a:	9307      	str	r3, [sp, #28]
 800243c:	9604      	str	r6, [sp, #16]
 800243e:	9505      	str	r5, [sp, #20]
 8002440:	9406      	str	r4, [sp, #24]
 8002442:	f00c fa74 	bl	800e92e <inv_q_add>
 8002446:	4816      	ldr	r0, [pc, #88]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002448:	4601      	mov	r1, r0
 800244a:	f7ff ff0d 	bl	8002268 <inv_normalize_quat>
 800244e:	b009      	add	sp, #36	; 0x24
 8002450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002452:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 8002456:	dca9      	bgt.n	80023ac <inv_generate_gyro_quaternion.part.1+0x28>
 8002458:	69c3      	ldr	r3, [r0, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	bfb8      	it	lt
 800245e:	425b      	neglt	r3, r3
 8002460:	e7a1      	b.n	80023a6 <inv_generate_gyro_quaternion.part.1+0x22>
 8002462:	6a03      	ldr	r3, [r0, #32]
 8002464:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002468:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800246c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002470:	db09      	blt.n	8002486 <inv_generate_gyro_quaternion.part.1+0x102>
 8002472:	2b00      	cmp	r3, #0
 8002474:	bfb8      	it	lt
 8002476:	425b      	neglt	r3, r3
 8002478:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800247c:	dc96      	bgt.n	80023ac <inv_generate_gyro_quaternion.part.1+0x28>
 800247e:	4d08      	ldr	r5, [pc, #32]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002480:	2302      	movs	r3, #2
 8002482:	63ab      	str	r3, [r5, #56]	; 0x38
 8002484:	e795      	b.n	80023b2 <inv_generate_gyro_quaternion.part.1+0x2e>
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <inv_generate_gyro_quaternion.part.1+0x11c>)
 8002488:	2200      	movs	r2, #0
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
 800248c:	b009      	add	sp, #36	; 0x24
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	6a03      	ldr	r3, [r0, #32]
 8002492:	e7ee      	b.n	8002472 <inv_generate_gyro_quaternion.part.1+0xee>
 8002494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002496:	e7b0      	b.n	80023fa <inv_generate_gyro_quaternion.part.1+0x76>
 8002498:	54442d18 	.word	0x54442d18
 800249c:	400921fb 	.word	0x400921fb
 80024a0:	20000514 	.word	0x20000514
 80024a4:	49742400 	.word	0x49742400
 80024a8:	40700000 	.word	0x40700000
 80024ac:	40668000 	.word	0x40668000

080024b0 <inv_generate_gyro_quaternion>:
 80024b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80024b2:	065b      	lsls	r3, r3, #25
 80024b4:	d500      	bpl.n	80024b8 <inv_generate_gyro_quaternion+0x8>
 80024b6:	e765      	b.n	8002384 <inv_generate_gyro_quaternion.part.1>
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop

080024bc <inv_set_quaternion>:
 80024bc:	b530      	push	{r4, r5, lr}
 80024be:	4605      	mov	r5, r0
 80024c0:	4c09      	ldr	r4, [pc, #36]	; (80024e8 <inv_set_quaternion+0x2c>)
 80024c2:	b085      	sub	sp, #20
 80024c4:	4620      	mov	r0, r4
 80024c6:	4669      	mov	r1, sp
 80024c8:	f00c fa61 	bl	800e98e <inv_q_invert>
 80024cc:	4628      	mov	r0, r5
 80024ce:	4669      	mov	r1, sp
 80024d0:	f104 0220 	add.w	r2, r4, #32
 80024d4:	f00c f962 	bl	800e79c <inv_q_mult>
 80024d8:	6828      	ldr	r0, [r5, #0]
 80024da:	6869      	ldr	r1, [r5, #4]
 80024dc:	68aa      	ldr	r2, [r5, #8]
 80024de:	68eb      	ldr	r3, [r5, #12]
 80024e0:	3410      	adds	r4, #16
 80024e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e4:	b005      	add	sp, #20
 80024e6:	bd30      	pop	{r4, r5, pc}
 80024e8:	20000514 	.word	0x20000514

080024ec <inv_generate_accel_gyro_quaternion>:
 80024ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024f2:	b09d      	sub	sp, #116	; 0x74
 80024f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	4604      	mov	r4, r0
 80024fc:	f000 8220 	beq.w	8002940 <inv_generate_accel_gyro_quaternion+0x454>
 8002500:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8002504:	4e87      	ldr	r6, [pc, #540]	; (8002724 <inv_generate_accel_gyro_quaternion+0x238>)
 8002506:	f001 0350 	and.w	r3, r1, #80	; 0x50
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	f000 82d3 	beq.w	8002ab6 <inv_generate_accel_gyro_quaternion+0x5ca>
 8002510:	05cd      	lsls	r5, r1, #23
 8002512:	f100 8115 	bmi.w	8002740 <inv_generate_accel_gyro_quaternion+0x254>
 8002516:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002518:	0659      	lsls	r1, r3, #25
 800251a:	f100 81e8 	bmi.w	80028ee <inv_generate_accel_gyro_quaternion+0x402>
 800251e:	4d81      	ldr	r5, [pc, #516]	; (8002724 <inv_generate_accel_gyro_quaternion+0x238>)
 8002520:	f105 0210 	add.w	r2, r5, #16
 8002524:	f105 0020 	add.w	r0, r5, #32
 8002528:	4629      	mov	r1, r5
 800252a:	f00c f937 	bl	800e79c <inv_q_mult>
 800252e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002530:	065a      	lsls	r2, r3, #25
 8002532:	d556      	bpl.n	80025e2 <inv_generate_accel_gyro_quaternion+0xf6>
 8002534:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8002538:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800253a:	4313      	orrs	r3, r2
 800253c:	05db      	lsls	r3, r3, #23
 800253e:	d554      	bpl.n	80025ea <inv_generate_accel_gyro_quaternion+0xfe>
 8002540:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 8002544:	aa10      	add	r2, sp, #64	; 0x40
 8002546:	f105 0010 	add.w	r0, r5, #16
 800254a:	f00c fa43 	bl	800e9d4 <inv_q_rotate>
 800254e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002550:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002552:	fb82 2302 	smull	r2, r3, r2, r2
 8002556:	fbc1 2301 	smlal	r2, r3, r1, r1
 800255a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800255c:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
 8002560:	fbc1 2301 	smlal	r2, r3, r1, r1
 8002564:	f04f 0902 	mov.w	r9, #2
 8002568:	4590      	cmp	r8, r2
 800256a:	eb79 0303 	sbcs.w	r3, r9, r3
 800256e:	f2c0 82af 	blt.w	8002ad0 <inv_generate_accel_gyro_quaternion+0x5e4>
 8002572:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002574:	2b04      	cmp	r3, #4
 8002576:	f000 82be 	beq.w	8002af6 <inv_generate_accel_gyro_quaternion+0x60a>
 800257a:	1e9a      	subs	r2, r3, #2
 800257c:	2a01      	cmp	r2, #1
 800257e:	f240 81ba 	bls.w	80028f6 <inv_generate_accel_gyro_quaternion+0x40a>
 8002582:	2b01      	cmp	r3, #1
 8002584:	f000 831e 	beq.w	8002bc4 <inv_generate_accel_gyro_quaternion+0x6d8>
 8002588:	2401      	movs	r4, #1
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <inv_generate_accel_gyro_quaternion+0x23c>)
 800258c:	00a4      	lsls	r4, r4, #2
 800258e:	fb03 f404 	mul.w	r4, r3, r4
 8002592:	9811      	ldr	r0, [sp, #68]	; 0x44
 8002594:	2500      	movs	r5, #0
 8002596:	4621      	mov	r1, r4
 8002598:	0280      	lsls	r0, r0, #10
 800259a:	9514      	str	r5, [sp, #80]	; 0x50
 800259c:	f00c f8d2 	bl	800e744 <inv_q30_mult>
 80025a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025a2:	9015      	str	r0, [sp, #84]	; 0x54
 80025a4:	4258      	negs	r0, r3
 80025a6:	4621      	mov	r1, r4
 80025a8:	0280      	lsls	r0, r0, #10
 80025aa:	f00c f8cb 	bl	800e744 <inv_q30_mult>
 80025ae:	aa18      	add	r2, sp, #96	; 0x60
 80025b0:	9016      	str	r0, [sp, #88]	; 0x58
 80025b2:	495e      	ldr	r1, [pc, #376]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025b4:	a814      	add	r0, sp, #80	; 0x50
 80025b6:	9517      	str	r5, [sp, #92]	; 0x5c
 80025b8:	f00c f8f0 	bl	800e79c <inv_q_mult>
 80025bc:	485b      	ldr	r0, [pc, #364]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025be:	a918      	add	r1, sp, #96	; 0x60
 80025c0:	4602      	mov	r2, r0
 80025c2:	f00c f9b4 	bl	800e92e <inv_q_add>
 80025c6:	4859      	ldr	r0, [pc, #356]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025c8:	4601      	mov	r1, r0
 80025ca:	f7ff fe4d 	bl	8002268 <inv_normalize_quat>
 80025ce:	4669      	mov	r1, sp
 80025d0:	4854      	ldr	r0, [pc, #336]	; (8002724 <inv_generate_accel_gyro_quaternion+0x238>)
 80025d2:	f00c f9dc 	bl	800e98e <inv_q_invert>
 80025d6:	4855      	ldr	r0, [pc, #340]	; (800272c <inv_generate_accel_gyro_quaternion+0x240>)
 80025d8:	4669      	mov	r1, sp
 80025da:	f100 0210 	add.w	r2, r0, #16
 80025de:	f00c f8dd 	bl	800e79c <inv_q_mult>
 80025e2:	2000      	movs	r0, #0
 80025e4:	b01d      	add	sp, #116	; 0x74
 80025e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ea:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80025ec:	f001 f94e 	bl	800388c <__aeabi_i2f>
 80025f0:	4607      	mov	r7, r0
 80025f2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80025f4:	f001 f94a 	bl	800388c <__aeabi_i2f>
 80025f8:	4681      	mov	r9, r0
 80025fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80025fc:	f001 f946 	bl	800388c <__aeabi_i2f>
 8002600:	4639      	mov	r1, r7
 8002602:	4680      	mov	r8, r0
 8002604:	4638      	mov	r0, r7
 8002606:	f001 f995 	bl	8003934 <__aeabi_fmul>
 800260a:	4649      	mov	r1, r9
 800260c:	4607      	mov	r7, r0
 800260e:	4648      	mov	r0, r9
 8002610:	f001 f990 	bl	8003934 <__aeabi_fmul>
 8002614:	4601      	mov	r1, r0
 8002616:	4638      	mov	r0, r7
 8002618:	f001 f884 	bl	8003724 <__addsf3>
 800261c:	4641      	mov	r1, r8
 800261e:	4607      	mov	r7, r0
 8002620:	4640      	mov	r0, r8
 8002622:	f001 f987 	bl	8003934 <__aeabi_fmul>
 8002626:	4601      	mov	r1, r0
 8002628:	4638      	mov	r0, r7
 800262a:	f001 f87b 	bl	8003724 <__addsf3>
 800262e:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
 8002632:	f012 fc0d 	bl	8014e50 <sqrtf>
 8002636:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800263a:	4607      	mov	r7, r0
 800263c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002640:	f001 fb34 	bl	8003cac <__aeabi_fcmpgt>
 8002644:	2800      	cmp	r0, #0
 8002646:	d0c2      	beq.n	80025ce <inv_generate_accel_gyro_quaternion+0xe2>
 8002648:	6928      	ldr	r0, [r5, #16]
 800264a:	f001 f91f 	bl	800388c <__aeabi_i2f>
 800264e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002652:	f001 f96f 	bl	8003934 <__aeabi_fmul>
 8002656:	9018      	str	r0, [sp, #96]	; 0x60
 8002658:	6968      	ldr	r0, [r5, #20]
 800265a:	f001 f917 	bl	800388c <__aeabi_i2f>
 800265e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002662:	f001 f967 	bl	8003934 <__aeabi_fmul>
 8002666:	9019      	str	r0, [sp, #100]	; 0x64
 8002668:	69a8      	ldr	r0, [r5, #24]
 800266a:	f001 f90f 	bl	800388c <__aeabi_i2f>
 800266e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002672:	f001 f95f 	bl	8003934 <__aeabi_fmul>
 8002676:	901a      	str	r0, [sp, #104]	; 0x68
 8002678:	69e8      	ldr	r0, [r5, #28]
 800267a:	f001 f907 	bl	800388c <__aeabi_i2f>
 800267e:	f04f 5142 	mov.w	r1, #813694976	; 0x30800000
 8002682:	f001 f957 	bl	8003934 <__aeabi_fmul>
 8002686:	2300      	movs	r3, #0
 8002688:	901b      	str	r0, [sp, #108]	; 0x6c
 800268a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800268c:	9314      	str	r3, [sp, #80]	; 0x50
 800268e:	f001 f8fd 	bl	800388c <__aeabi_i2f>
 8002692:	4639      	mov	r1, r7
 8002694:	f001 fa02 	bl	8003a9c <__aeabi_fdiv>
 8002698:	9015      	str	r0, [sp, #84]	; 0x54
 800269a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800269c:	f001 f8f6 	bl	800388c <__aeabi_i2f>
 80026a0:	4639      	mov	r1, r7
 80026a2:	f001 f9fb 	bl	8003a9c <__aeabi_fdiv>
 80026a6:	9016      	str	r0, [sp, #88]	; 0x58
 80026a8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80026aa:	f001 f8ef 	bl	800388c <__aeabi_i2f>
 80026ae:	4639      	mov	r1, r7
 80026b0:	f001 f9f4 	bl	8003a9c <__aeabi_fdiv>
 80026b4:	ad18      	add	r5, sp, #96	; 0x60
 80026b6:	aa04      	add	r2, sp, #16
 80026b8:	9017      	str	r0, [sp, #92]	; 0x5c
 80026ba:	a914      	add	r1, sp, #80	; 0x50
 80026bc:	4628      	mov	r0, r5
 80026be:	f00c f9bc 	bl	800ea3a <inv_q_multf>
 80026c2:	4628      	mov	r0, r5
 80026c4:	a90c      	add	r1, sp, #48	; 0x30
 80026c6:	f00c fcc4 	bl	800f052 <inv_q_invertf>
 80026ca:	aa08      	add	r2, sp, #32
 80026cc:	a804      	add	r0, sp, #16
 80026ce:	a90c      	add	r1, sp, #48	; 0x30
 80026d0:	f00c f9b3 	bl	800ea3a <inv_q_multf>
 80026d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80026d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80026d8:	4639      	mov	r1, r7
 80026da:	4638      	mov	r0, r7
 80026dc:	f001 f92a 	bl	8003934 <__aeabi_fmul>
 80026e0:	4621      	mov	r1, r4
 80026e2:	4681      	mov	r9, r0
 80026e4:	4620      	mov	r0, r4
 80026e6:	f001 f925 	bl	8003934 <__aeabi_fmul>
 80026ea:	4601      	mov	r1, r0
 80026ec:	4648      	mov	r0, r9
 80026ee:	f001 f819 	bl	8003724 <__addsf3>
 80026f2:	490f      	ldr	r1, [pc, #60]	; (8002730 <inv_generate_accel_gyro_quaternion+0x244>)
 80026f4:	4681      	mov	r9, r0
 80026f6:	f001 fabb 	bl	8003c70 <__aeabi_fcmplt>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	f040 8203 	bne.w	8002b06 <inv_generate_accel_gyro_quaternion+0x61a>
 8002700:	4648      	mov	r0, r9
 8002702:	490c      	ldr	r1, [pc, #48]	; (8002734 <inv_generate_accel_gyro_quaternion+0x248>)
 8002704:	f001 fab4 	bl	8003c70 <__aeabi_fcmplt>
 8002708:	2800      	cmp	r0, #0
 800270a:	f040 826f 	bne.w	8002bec <inv_generate_accel_gyro_quaternion+0x700>
 800270e:	4648      	mov	r0, r9
 8002710:	4909      	ldr	r1, [pc, #36]	; (8002738 <inv_generate_accel_gyro_quaternion+0x24c>)
 8002712:	f001 faad 	bl	8003c70 <__aeabi_fcmplt>
 8002716:	2800      	cmp	r0, #0
 8002718:	f040 8248 	bne.w	8002bac <inv_generate_accel_gyro_quaternion+0x6c0>
 800271c:	f8df 901c 	ldr.w	r9, [pc, #28]	; 800273c <inv_generate_accel_gyro_quaternion+0x250>
 8002720:	e1f3      	b.n	8002b0a <inv_generate_accel_gyro_quaternion+0x61e>
 8002722:	bf00      	nop
 8002724:	20000514 	.word	0x20000514
 8002728:	00c49ba6 	.word	0x00c49ba6
 800272c:	20000524 	.word	0x20000524
 8002730:	3951b717 	.word	0x3951b717
 8002734:	3c23d70a 	.word	0x3c23d70a
 8002738:	3e4ccccd 	.word	0x3e4ccccd
 800273c:	3ecccccd 	.word	0x3ecccccd
 8002740:	0648      	lsls	r0, r1, #25
 8002742:	f57f aeec 	bpl.w	800251e <inv_generate_accel_gyro_quaternion+0x32>
 8002746:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
 800274a:	4b73      	ldr	r3, [pc, #460]	; (8002918 <inv_generate_accel_gyro_quaternion+0x42c>)
 800274c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002750:	fb03 f300 	mul.w	r3, r3, r0
 8002754:	6835      	ldr	r5, [r6, #0]
 8002756:	4871      	ldr	r0, [pc, #452]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 8002758:	1b52      	subs	r2, r2, r5
 800275a:	429a      	cmp	r2, r3
 800275c:	bfcc      	ite	gt
 800275e:	2303      	movgt	r3, #3
 8002760:	2302      	movle	r3, #2
 8002762:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8002766:	6383      	str	r3, [r0, #56]	; 0x38
 8002768:	f040 81c7 	bne.w	8002afa <inv_generate_accel_gyro_quaternion+0x60e>
 800276c:	af10      	add	r7, sp, #64	; 0x40
 800276e:	4d6b      	ldr	r5, [pc, #428]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 8002770:	4638      	mov	r0, r7
 8002772:	f00b f883 	bl	800d87c <inv_get_gyro_bias>
 8002776:	4638      	mov	r0, r7
 8002778:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 800277c:	220c      	movs	r2, #12
 800277e:	f00d ff20 	bl	80105c2 <memcmp>
 8002782:	b928      	cbnz	r0, 8002790 <inv_generate_accel_gyro_quaternion+0x2a4>
 8002784:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002786:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
 800278a:	429a      	cmp	r2, r3
 800278c:	f000 8241 	beq.w	8002c12 <inv_generate_accel_gyro_quaternion+0x726>
 8002790:	ad18      	add	r5, sp, #96	; 0x60
 8002792:	462b      	mov	r3, r5
 8002794:	463a      	mov	r2, r7
 8002796:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002798:	8820      	ldrh	r0, [r4, #0]
 800279a:	f00c fdd4 	bl	800f346 <inv_convert_to_body_with_scale>
 800279e:	9818      	ldr	r0, [sp, #96]	; 0x60
 80027a0:	f001 f874 	bl	800388c <__aeabi_i2f>
 80027a4:	4680      	mov	r8, r0
 80027a6:	9819      	ldr	r0, [sp, #100]	; 0x64
 80027a8:	f001 f870 	bl	800388c <__aeabi_i2f>
 80027ac:	4682      	mov	sl, r0
 80027ae:	981a      	ldr	r0, [sp, #104]	; 0x68
 80027b0:	f001 f86c 	bl	800388c <__aeabi_i2f>
 80027b4:	4641      	mov	r1, r8
 80027b6:	4681      	mov	r9, r0
 80027b8:	4640      	mov	r0, r8
 80027ba:	f001 f8bb 	bl	8003934 <__aeabi_fmul>
 80027be:	4651      	mov	r1, sl
 80027c0:	4680      	mov	r8, r0
 80027c2:	4650      	mov	r0, sl
 80027c4:	f001 f8b6 	bl	8003934 <__aeabi_fmul>
 80027c8:	4601      	mov	r1, r0
 80027ca:	4640      	mov	r0, r8
 80027cc:	f000 ffaa 	bl	8003724 <__addsf3>
 80027d0:	4649      	mov	r1, r9
 80027d2:	4680      	mov	r8, r0
 80027d4:	4648      	mov	r0, r9
 80027d6:	f001 f8ad 	bl	8003934 <__aeabi_fmul>
 80027da:	4601      	mov	r1, r0
 80027dc:	4640      	mov	r0, r8
 80027de:	f000 ffa1 	bl	8003724 <__addsf3>
 80027e2:	f012 fb35 	bl	8014e50 <sqrtf>
 80027e6:	494e      	ldr	r1, [pc, #312]	; (8002920 <inv_generate_accel_gyro_quaternion+0x434>)
 80027e8:	4680      	mov	r8, r0
 80027ea:	f001 f8a3 	bl	8003934 <__aeabi_fmul>
 80027ee:	494d      	ldr	r1, [pc, #308]	; (8002924 <inv_generate_accel_gyro_quaternion+0x438>)
 80027f0:	f001 f954 	bl	8003a9c <__aeabi_fdiv>
 80027f4:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80027f8:	f001 f89c 	bl	8003934 <__aeabi_fmul>
 80027fc:	f8d4 9128 	ldr.w	r9, [r4, #296]	; 0x128
 8002800:	4682      	mov	sl, r0
 8002802:	4648      	mov	r0, r9
 8002804:	f001 f842 	bl	800388c <__aeabi_i2f>
 8002808:	4601      	mov	r1, r0
 800280a:	4650      	mov	r0, sl
 800280c:	f001 f892 	bl	8003934 <__aeabi_fmul>
 8002810:	4945      	ldr	r1, [pc, #276]	; (8002928 <inv_generate_accel_gyro_quaternion+0x43c>)
 8002812:	f001 f943 	bl	8003a9c <__aeabi_fdiv>
 8002816:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800281a:	f001 f88b 	bl	8003934 <__aeabi_fmul>
 800281e:	4682      	mov	sl, r0
 8002820:	f012 fa84 	bl	8014d2c <cosf>
 8002824:	4683      	mov	fp, r0
 8002826:	4650      	mov	r0, sl
 8002828:	f012 fab4 	bl	8014d94 <sinf>
 800282c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002830:	4682      	mov	sl, r0
 8002832:	4640      	mov	r0, r8
 8002834:	f001 fa1c 	bl	8003c70 <__aeabi_fcmplt>
 8002838:	2800      	cmp	r0, #0
 800283a:	f040 81af 	bne.w	8002b9c <inv_generate_accel_gyro_quaternion+0x6b0>
 800283e:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002842:	4658      	mov	r0, fp
 8002844:	f001 f876 	bl	8003934 <__aeabi_fmul>
 8002848:	f001 fa50 	bl	8003cec <__aeabi_f2iz>
 800284c:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
 8002850:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002854:	64b0      	str	r0, [r6, #72]	; 0x48
 8002856:	4650      	mov	r0, sl
 8002858:	f001 f86c 	bl	8003934 <__aeabi_fmul>
 800285c:	4682      	mov	sl, r0
 800285e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002860:	f001 f814 	bl	800388c <__aeabi_i2f>
 8002864:	4601      	mov	r1, r0
 8002866:	4650      	mov	r0, sl
 8002868:	f001 f864 	bl	8003934 <__aeabi_fmul>
 800286c:	4641      	mov	r1, r8
 800286e:	f001 f915 	bl	8003a9c <__aeabi_fdiv>
 8002872:	f001 fa3b 	bl	8003cec <__aeabi_f2iz>
 8002876:	64f0      	str	r0, [r6, #76]	; 0x4c
 8002878:	9819      	ldr	r0, [sp, #100]	; 0x64
 800287a:	f001 f807 	bl	800388c <__aeabi_i2f>
 800287e:	4601      	mov	r1, r0
 8002880:	4650      	mov	r0, sl
 8002882:	f001 f857 	bl	8003934 <__aeabi_fmul>
 8002886:	4641      	mov	r1, r8
 8002888:	f001 f908 	bl	8003a9c <__aeabi_fdiv>
 800288c:	f001 fa2e 	bl	8003cec <__aeabi_f2iz>
 8002890:	6530      	str	r0, [r6, #80]	; 0x50
 8002892:	981a      	ldr	r0, [sp, #104]	; 0x68
 8002894:	f000 fffa 	bl	800388c <__aeabi_i2f>
 8002898:	4601      	mov	r1, r0
 800289a:	4650      	mov	r0, sl
 800289c:	f001 f84a 	bl	8003934 <__aeabi_fmul>
 80028a0:	4641      	mov	r1, r8
 80028a2:	f001 f8fb 	bl	8003a9c <__aeabi_fdiv>
 80028a6:	f001 fa21 	bl	8003cec <__aeabi_f2iz>
 80028aa:	6570      	str	r0, [r6, #84]	; 0x54
 80028ac:	4b1f      	ldr	r3, [pc, #124]	; (800292c <inv_generate_accel_gyro_quaternion+0x440>)
 80028ae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80028b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028b6:	f8c6 9058 	str.w	r9, [r6, #88]	; 0x58
 80028ba:	f504 7788 	add.w	r7, r4, #272	; 0x110
 80028be:	4638      	mov	r0, r7
 80028c0:	462a      	mov	r2, r5
 80028c2:	491b      	ldr	r1, [pc, #108]	; (8002930 <inv_generate_accel_gyro_quaternion+0x444>)
 80028c4:	f00b ff6a 	bl	800e79c <inv_q_mult>
 80028c8:	aa14      	add	r2, sp, #80	; 0x50
 80028ca:	4629      	mov	r1, r5
 80028cc:	4819      	ldr	r0, [pc, #100]	; (8002934 <inv_generate_accel_gyro_quaternion+0x448>)
 80028ce:	f00b ff65 	bl	800e79c <inv_q_mult>
 80028d2:	4638      	mov	r0, r7
 80028d4:	4917      	ldr	r1, [pc, #92]	; (8002934 <inv_generate_accel_gyro_quaternion+0x448>)
 80028d6:	f00c f85a 	bl	800e98e <inv_q_invert>
 80028da:	a914      	add	r1, sp, #80	; 0x50
 80028dc:	480f      	ldr	r0, [pc, #60]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 80028de:	462a      	mov	r2, r5
 80028e0:	f00b ff5c 	bl	800e79c <inv_q_mult>
 80028e4:	4628      	mov	r0, r5
 80028e6:	490d      	ldr	r1, [pc, #52]	; (800291c <inv_generate_accel_gyro_quaternion+0x430>)
 80028e8:	f7ff fcbe 	bl	8002268 <inv_normalize_quat>
 80028ec:	e617      	b.n	800251e <inv_generate_accel_gyro_quaternion+0x32>
 80028ee:	4620      	mov	r0, r4
 80028f0:	f7ff fd48 	bl	8002384 <inv_generate_gyro_quaternion.part.1>
 80028f4:	e613      	b.n	800251e <inv_generate_accel_gyro_quaternion+0x32>
 80028f6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80028f8:	4c0f      	ldr	r4, [pc, #60]	; (8002938 <inv_generate_accel_gyro_quaternion+0x44c>)
 80028fa:	17ca      	asrs	r2, r1, #31
 80028fc:	fb84 1401 	smull	r1, r4, r4, r1
 8002900:	ebc2 24e4 	rsb	r4, r2, r4, asr #11
 8002904:	2c01      	cmp	r4, #1
 8002906:	bfb8      	it	lt
 8002908:	2401      	movlt	r4, #1
 800290a:	2b03      	cmp	r3, #3
 800290c:	f47f ae3d 	bne.w	800258a <inv_generate_accel_gyro_quaternion+0x9e>
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <inv_generate_accel_gyro_quaternion+0x450>)
 8002912:	fb03 f404 	mul.w	r4, r3, r4
 8002916:	e63c      	b.n	8002592 <inv_generate_accel_gyro_quaternion+0xa6>
 8002918:	001c9871 	.word	0x001c9871
 800291c:	20000514 	.word	0x20000514
 8002920:	40490fdb 	.word	0x40490fdb
 8002924:	43340000 	.word	0x43340000
 8002928:	49742400 	.word	0x49742400
 800292c:	20000550 	.word	0x20000550
 8002930:	2000055c 	.word	0x2000055c
 8002934:	20000570 	.word	0x20000570
 8002938:	68db8bad 	.word	0x68db8bad
 800293c:	00c49ba6 	.word	0x00c49ba6
 8002940:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002942:	f000 ffa3 	bl	800388c <__aeabi_i2f>
 8002946:	4605      	mov	r5, r0
 8002948:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800294a:	f000 ff9f 	bl	800388c <__aeabi_i2f>
 800294e:	4607      	mov	r7, r0
 8002950:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8002952:	f000 ff9b 	bl	800388c <__aeabi_i2f>
 8002956:	4629      	mov	r1, r5
 8002958:	4606      	mov	r6, r0
 800295a:	4628      	mov	r0, r5
 800295c:	f000 ffea 	bl	8003934 <__aeabi_fmul>
 8002960:	4639      	mov	r1, r7
 8002962:	4605      	mov	r5, r0
 8002964:	4638      	mov	r0, r7
 8002966:	f000 ffe5 	bl	8003934 <__aeabi_fmul>
 800296a:	4601      	mov	r1, r0
 800296c:	4628      	mov	r0, r5
 800296e:	f000 fed9 	bl	8003724 <__addsf3>
 8002972:	4631      	mov	r1, r6
 8002974:	4605      	mov	r5, r0
 8002976:	4630      	mov	r0, r6
 8002978:	f000 ffdc 	bl	8003934 <__aeabi_fmul>
 800297c:	4601      	mov	r1, r0
 800297e:	4628      	mov	r0, r5
 8002980:	f000 fed0 	bl	8003724 <__addsf3>
 8002984:	f012 fa64 	bl	8014e50 <sqrtf>
 8002988:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800298c:	4605      	mov	r5, r0
 800298e:	f001 f979 	bl	8003c84 <__aeabi_fcmple>
 8002992:	2800      	cmp	r0, #0
 8002994:	f040 810d 	bne.w	8002bb2 <inv_generate_accel_gyro_quaternion+0x6c6>
 8002998:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800299a:	f000 ff77 	bl	800388c <__aeabi_i2f>
 800299e:	4629      	mov	r1, r5
 80029a0:	f001 f87c 	bl	8003a9c <__aeabi_fdiv>
 80029a4:	4605      	mov	r5, r0
 80029a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80029aa:	4629      	mov	r1, r5
 80029ac:	f000 feb8 	bl	8003720 <__aeabi_fsub>
 80029b0:	2100      	movs	r1, #0
 80029b2:	4606      	mov	r6, r0
 80029b4:	f001 f97a 	bl	8003cac <__aeabi_fcmpgt>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	f000 8128 	beq.w	8002c0e <inv_generate_accel_gyro_quaternion+0x722>
 80029be:	4630      	mov	r0, r6
 80029c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029c4:	f000 ffb6 	bl	8003934 <__aeabi_fmul>
 80029c8:	f012 fa42 	bl	8014e50 <sqrtf>
 80029cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80029d0:	4680      	mov	r8, r0
 80029d2:	4628      	mov	r0, r5
 80029d4:	f000 fea6 	bl	8003724 <__addsf3>
 80029d8:	2100      	movs	r1, #0
 80029da:	4605      	mov	r5, r0
 80029dc:	f001 f966 	bl	8003cac <__aeabi_fcmpgt>
 80029e0:	2800      	cmp	r0, #0
 80029e2:	f000 8112 	beq.w	8002c0a <inv_generate_accel_gyro_quaternion+0x71e>
 80029e6:	4628      	mov	r0, r5
 80029e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029ec:	f000 ffa2 	bl	8003934 <__aeabi_fmul>
 80029f0:	f012 fa2e 	bl	8014e50 <sqrtf>
 80029f4:	4681      	mov	r9, r0
 80029f6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80029f8:	f000 ff48 	bl	800388c <__aeabi_i2f>
 80029fc:	4605      	mov	r5, r0
 80029fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002a00:	f000 ff44 	bl	800388c <__aeabi_i2f>
 8002a04:	4629      	mov	r1, r5
 8002a06:	4606      	mov	r6, r0
 8002a08:	4628      	mov	r0, r5
 8002a0a:	f000 ff93 	bl	8003934 <__aeabi_fmul>
 8002a0e:	4631      	mov	r1, r6
 8002a10:	4605      	mov	r5, r0
 8002a12:	4630      	mov	r0, r6
 8002a14:	f000 ff8e 	bl	8003934 <__aeabi_fmul>
 8002a18:	4601      	mov	r1, r0
 8002a1a:	4628      	mov	r0, r5
 8002a1c:	f000 fe82 	bl	8003724 <__addsf3>
 8002a20:	f012 fa16 	bl	8014e50 <sqrtf>
 8002a24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a28:	4607      	mov	r7, r0
 8002a2a:	f001 f92b 	bl	8003c84 <__aeabi_fcmple>
 8002a2e:	4605      	mov	r5, r0
 8002a30:	2800      	cmp	r0, #0
 8002a32:	f040 80be 	bne.w	8002bb2 <inv_generate_accel_gyro_quaternion+0x6c6>
 8002a36:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002a3a:	4648      	mov	r0, r9
 8002a3c:	f000 ff7a 	bl	8003934 <__aeabi_fmul>
 8002a40:	f001 f954 	bl	8003cec <__aeabi_f2iz>
 8002a44:	4e74      	ldr	r6, [pc, #464]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002a46:	f108 4900 	add.w	r9, r8, #2147483648	; 0x80000000
 8002a4a:	6130      	str	r0, [r6, #16]
 8002a4c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002a4e:	f000 ff1d 	bl	800388c <__aeabi_i2f>
 8002a52:	4639      	mov	r1, r7
 8002a54:	f001 f822 	bl	8003a9c <__aeabi_fdiv>
 8002a58:	4601      	mov	r1, r0
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	f000 ff6a 	bl	8003934 <__aeabi_fmul>
 8002a60:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002a64:	f000 ff66 	bl	8003934 <__aeabi_fmul>
 8002a68:	f001 f940 	bl	8003cec <__aeabi_f2iz>
 8002a6c:	6170      	str	r0, [r6, #20]
 8002a6e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002a70:	f000 ff0c 	bl	800388c <__aeabi_i2f>
 8002a74:	4639      	mov	r1, r7
 8002a76:	f001 f811 	bl	8003a9c <__aeabi_fdiv>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4648      	mov	r0, r9
 8002a7e:	f000 ff59 	bl	8003934 <__aeabi_fmul>
 8002a82:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002a86:	f000 ff55 	bl	8003934 <__aeabi_fmul>
 8002a8a:	f001 f92f 	bl	8003cec <__aeabi_f2iz>
 8002a8e:	61f5      	str	r5, [r6, #28]
 8002a90:	61b0      	str	r0, [r6, #24]
 8002a92:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002a96:	05db      	lsls	r3, r3, #23
 8002a98:	f100 80a2 	bmi.w	8002be0 <inv_generate_accel_gyro_quaternion+0x6f4>
 8002a9c:	4669      	mov	r1, sp
 8002a9e:	485e      	ldr	r0, [pc, #376]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002aa0:	f00b ff75 	bl	800e98e <inv_q_invert>
 8002aa4:	485d      	ldr	r0, [pc, #372]	; (8002c1c <inv_generate_accel_gyro_quaternion+0x730>)
 8002aa6:	4669      	mov	r1, sp
 8002aa8:	f100 0210 	add.w	r2, r0, #16
 8002aac:	f00b fe76 	bl	800e79c <inv_q_mult>
 8002ab0:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8002ab4:	e52c      	b.n	8002510 <inv_generate_accel_gyro_quaternion+0x24>
 8002ab6:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8002aba:	f106 015c 	add.w	r1, r6, #92	; 0x5c
 8002abe:	f00b ff66 	bl	800e98e <inv_q_invert>
 8002ac2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002ac4:	05df      	lsls	r7, r3, #23
 8002ac6:	f100 8094 	bmi.w	8002bf2 <inv_generate_accel_gyro_quaternion+0x706>
 8002aca:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
 8002ace:	e51f      	b.n	8002510 <inv_generate_accel_gyro_quaternion+0x24>
 8002ad0:	a80c      	add	r0, sp, #48	; 0x30
 8002ad2:	f00c ff91 	bl	800f9f8 <inv_get_linear_accel>
 8002ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ad8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ada:	fb82 2302 	smull	r2, r3, r2, r2
 8002ade:	fbc1 2301 	smlal	r2, r3, r1, r1
 8002ae2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ae4:	fbc1 2301 	smlal	r2, r3, r1, r1
 8002ae8:	4590      	cmp	r8, r2
 8002aea:	eb79 0303 	sbcs.w	r3, r9, r3
 8002aee:	f6bf ad40 	bge.w	8002572 <inv_generate_accel_gyro_quaternion+0x86>
 8002af2:	2304      	movs	r3, #4
 8002af4:	63ab      	str	r3, [r5, #56]	; 0x38
 8002af6:	2400      	movs	r4, #0
 8002af8:	e54b      	b.n	8002592 <inv_generate_accel_gyro_quaternion+0xa6>
 8002afa:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002afe:	4946      	ldr	r1, [pc, #280]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002b00:	f7ff fbb2 	bl	8002268 <inv_normalize_quat>
 8002b04:	e50b      	b.n	800251e <inv_generate_accel_gyro_quaternion+0x32>
 8002b06:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8002c34 <inv_generate_accel_gyro_quaternion+0x748>
 8002b0a:	4640      	mov	r0, r8
 8002b0c:	f000 febe 	bl	800388c <__aeabi_i2f>
 8002b10:	4943      	ldr	r1, [pc, #268]	; (8002c20 <inv_generate_accel_gyro_quaternion+0x734>)
 8002b12:	f000 ffc3 	bl	8003a9c <__aeabi_fdiv>
 8002b16:	4649      	mov	r1, r9
 8002b18:	f000 ff0c 	bl	8003934 <__aeabi_fmul>
 8002b1c:	4681      	mov	r9, r0
 8002b1e:	f04f 0800 	mov.w	r8, #0
 8002b22:	4649      	mov	r1, r9
 8002b24:	4638      	mov	r0, r7
 8002b26:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002b2a:	f000 ff03 	bl	8003934 <__aeabi_fmul>
 8002b2e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8002b32:	9011      	str	r0, [sp, #68]	; 0x44
 8002b34:	4648      	mov	r0, r9
 8002b36:	f000 fefd 	bl	8003934 <__aeabi_fmul>
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	9012      	str	r0, [sp, #72]	; 0x48
 8002b3e:	aa08      	add	r2, sp, #32
 8002b40:	a810      	add	r0, sp, #64	; 0x40
 8002b42:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002b46:	f00b ff78 	bl	800ea3a <inv_q_multf>
 8002b4a:	a808      	add	r0, sp, #32
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f00c f87e 	bl	800ec50 <inv_q_addf>
 8002b54:	a808      	add	r0, sp, #32
 8002b56:	f00c f9eb 	bl	800ef30 <inv_q_norm4>
 8002b5a:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b5e:	9808      	ldr	r0, [sp, #32]
 8002b60:	f000 fee8 	bl	8003934 <__aeabi_fmul>
 8002b64:	f001 f8c2 	bl	8003cec <__aeabi_f2iz>
 8002b68:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b6c:	6130      	str	r0, [r6, #16]
 8002b6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b70:	f000 fee0 	bl	8003934 <__aeabi_fmul>
 8002b74:	f001 f8ba 	bl	8003cec <__aeabi_f2iz>
 8002b78:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b7c:	6170      	str	r0, [r6, #20]
 8002b7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002b80:	f000 fed8 	bl	8003934 <__aeabi_fmul>
 8002b84:	f001 f8b2 	bl	8003cec <__aeabi_f2iz>
 8002b88:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 8002b8c:	61b0      	str	r0, [r6, #24]
 8002b8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002b90:	f000 fed0 	bl	8003934 <__aeabi_fmul>
 8002b94:	f001 f8aa 	bl	8003cec <__aeabi_f2iz>
 8002b98:	61f0      	str	r0, [r6, #28]
 8002b9a:	e518      	b.n	80025ce <inv_generate_accel_gyro_quaternion+0xe2>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ba2:	64b2      	str	r2, [r6, #72]	; 0x48
 8002ba4:	64f3      	str	r3, [r6, #76]	; 0x4c
 8002ba6:	6533      	str	r3, [r6, #80]	; 0x50
 8002ba8:	6573      	str	r3, [r6, #84]	; 0x54
 8002baa:	e67f      	b.n	80028ac <inv_generate_accel_gyro_quaternion+0x3c0>
 8002bac:	f04f 597a 	mov.w	r9, #1048576000	; 0x3e800000
 8002bb0:	e7ab      	b.n	8002b0a <inv_generate_accel_gyro_quaternion+0x61e>
 8002bb2:	4e19      	ldr	r6, [pc, #100]	; (8002c18 <inv_generate_accel_gyro_quaternion+0x72c>)
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bba:	6132      	str	r2, [r6, #16]
 8002bbc:	6173      	str	r3, [r6, #20]
 8002bbe:	61b3      	str	r3, [r6, #24]
 8002bc0:	61f3      	str	r3, [r6, #28]
 8002bc2:	e766      	b.n	8002a92 <inv_generate_accel_gyro_quaternion+0x5a6>
 8002bc4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002bc6:	4c17      	ldr	r4, [pc, #92]	; (8002c24 <inv_generate_accel_gyro_quaternion+0x738>)
 8002bc8:	17d3      	asrs	r3, r2, #31
 8002bca:	fb84 2402 	smull	r2, r4, r4, r2
 8002bce:	ebc3 24e4 	rsb	r4, r3, r4, asr #11
 8002bd2:	2c00      	cmp	r4, #0
 8002bd4:	bfc3      	ittte	gt
 8002bd6:	4b14      	ldrgt	r3, [pc, #80]	; (8002c28 <inv_generate_accel_gyro_quaternion+0x73c>)
 8002bd8:	00e4      	lslgt	r4, r4, #3
 8002bda:	435c      	mulgt	r4, r3
 8002bdc:	4c13      	ldrle	r4, [pc, #76]	; (8002c2c <inv_generate_accel_gyro_quaternion+0x740>)
 8002bde:	e4d8      	b.n	8002592 <inv_generate_accel_gyro_quaternion+0xa6>
 8002be0:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8002be4:	4912      	ldr	r1, [pc, #72]	; (8002c30 <inv_generate_accel_gyro_quaternion+0x744>)
 8002be6:	f00b fed2 	bl	800e98e <inv_q_invert>
 8002bea:	e757      	b.n	8002a9c <inv_generate_accel_gyro_quaternion+0x5b0>
 8002bec:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002c38 <inv_generate_accel_gyro_quaternion+0x74c>
 8002bf0:	e78b      	b.n	8002b0a <inv_generate_accel_gyro_quaternion+0x61e>
 8002bf2:	4669      	mov	r1, sp
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f00b feca 	bl	800e98e <inv_q_invert>
 8002bfa:	4669      	mov	r1, sp
 8002bfc:	f106 0010 	add.w	r0, r6, #16
 8002c00:	f106 0220 	add.w	r2, r6, #32
 8002c04:	f00b fdca 	bl	800e79c <inv_q_mult>
 8002c08:	e75f      	b.n	8002aca <inv_generate_accel_gyro_quaternion+0x5de>
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	e6f0      	b.n	80029f0 <inv_generate_accel_gyro_quaternion+0x504>
 8002c0e:	2000      	movs	r0, #0
 8002c10:	e6da      	b.n	80029c8 <inv_generate_accel_gyro_quaternion+0x4dc>
 8002c12:	ad18      	add	r5, sp, #96	; 0x60
 8002c14:	e651      	b.n	80028ba <inv_generate_accel_gyro_quaternion+0x3ce>
 8002c16:	bf00      	nop
 8002c18:	20000514 	.word	0x20000514
 8002c1c:	20000524 	.word	0x20000524
 8002c20:	47cd1400 	.word	0x47cd1400
 8002c24:	68db8bad 	.word	0x68db8bad
 8002c28:	00c49ba6 	.word	0x00c49ba6
 8002c2c:	0624dd30 	.word	0x0624dd30
 8002c30:	20000570 	.word	0x20000570
 8002c34:	3bc49ba6 	.word	0x3bc49ba6
 8002c38:	3d75c28f 	.word	0x3d75c28f

08002c3c <inv_generate_quaternion>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c40:	05dc      	lsls	r4, r3, #23
 8002c42:	d402      	bmi.n	8002c4a <inv_generate_quaternion+0xe>
 8002c44:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002c46:	05d9      	lsls	r1, r3, #23
 8002c48:	d50f      	bpl.n	8002c6a <inv_generate_quaternion+0x2e>
 8002c4a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8002c4e:	4604      	mov	r4, r0
 8002c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c58:	d011      	beq.n	8002c7e <inv_generate_quaternion+0x42>
 8002c5a:	f7ff fc47 	bl	80024ec <inv_generate_accel_gyro_quaternion>
 8002c5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002c60:	480c      	ldr	r0, [pc, #48]	; (8002c94 <inv_generate_quaternion+0x58>)
 8002c62:	f00c fced 	bl	800f640 <inv_store_gaming_quaternion>
 8002c66:	2000      	movs	r0, #0
 8002c68:	bd38      	pop	{r3, r4, r5, pc}
 8002c6a:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 8002c6e:	05da      	lsls	r2, r3, #23
 8002c70:	d5f9      	bpl.n	8002c66 <inv_generate_quaternion+0x2a>
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	d1ed      	bne.n	8002c5a <inv_generate_quaternion+0x1e>
 8002c7e:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
 8002c82:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 8002c86:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
 8002c8a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8002c8e:	4d01      	ldr	r5, [pc, #4]	; (8002c94 <inv_generate_quaternion+0x58>)
 8002c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c92:	e7e4      	b.n	8002c5e <inv_generate_quaternion+0x22>
 8002c94:	20000524 	.word	0x20000524

08002c98 <inv_stop_quaternion>:
 8002c98:	4801      	ldr	r0, [pc, #4]	; (8002ca0 <inv_stop_quaternion+0x8>)
 8002c9a:	f00a bfb5 	b.w	800dc08 <inv_unregister_data_cb>
 8002c9e:	bf00      	nop
 8002ca0:	08002c3d 	.word	0x08002c3d

08002ca4 <inv_init_quaternion>:
 8002ca4:	b510      	push	{r4, lr}
 8002ca6:	4c07      	ldr	r4, [pc, #28]	; (8002cc4 <inv_init_quaternion+0x20>)
 8002ca8:	2100      	movs	r1, #0
 8002caa:	4620      	mov	r0, r4
 8002cac:	226c      	movs	r2, #108	; 0x6c
 8002cae:	f00d fcbe 	bl	801062e <memset>
 8002cb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cb6:	6123      	str	r3, [r4, #16]
 8002cb8:	6023      	str	r3, [r4, #0]
 8002cba:	6223      	str	r3, [r4, #32]
 8002cbc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002cbe:	65e3      	str	r3, [r4, #92]	; 0x5c
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	bd10      	pop	{r4, pc}
 8002cc4:	20000514 	.word	0x20000514

08002cc8 <inv_enable_quaternion>:
 8002cc8:	b508      	push	{r3, lr}
 8002cca:	f7ff ffeb 	bl	8002ca4 <inv_init_quaternion>
 8002cce:	b100      	cbz	r0, 8002cd2 <inv_enable_quaternion+0xa>
 8002cd0:	bd08      	pop	{r3, pc}
 8002cd2:	4802      	ldr	r0, [pc, #8]	; (8002cdc <inv_enable_quaternion+0x14>)
 8002cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cd8:	f00c bf0c 	b.w	800faf4 <inv_register_mpl_start_notification>
 8002cdc:	08002355 	.word	0x08002355

08002ce0 <inv_disable_quaternion>:
 8002ce0:	b508      	push	{r3, lr}
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <inv_disable_quaternion+0x14>)
 8002ce4:	f00a ff90 	bl	800dc08 <inv_unregister_data_cb>
 8002ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cec:	4802      	ldr	r0, [pc, #8]	; (8002cf8 <inv_disable_quaternion+0x18>)
 8002cee:	f00c bec1 	b.w	800fa74 <inv_unregister_mpl_start_notification>
 8002cf2:	bf00      	nop
 8002cf4:	08002c3d 	.word	0x08002c3d
 8002cf8:	08002355 	.word	0x08002355
 8002cfc:	f3af 8000 	nop.w

08002d00 <strlen>:
 8002d00:	4603      	mov	r3, r0
 8002d02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	d1fb      	bne.n	8002d02 <strlen+0x2>
 8002d0a:	1a18      	subs	r0, r3, r0
 8002d0c:	3801      	subs	r0, #1
 8002d0e:	4770      	bx	lr

08002d10 <__aeabi_drsub>:
 8002d10:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002d14:	e002      	b.n	8002d1c <__adddf3>
 8002d16:	bf00      	nop

08002d18 <__aeabi_dsub>:
 8002d18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002d1c <__adddf3>:
 8002d1c:	b530      	push	{r4, r5, lr}
 8002d1e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002d22:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002d26:	ea94 0f05 	teq	r4, r5
 8002d2a:	bf08      	it	eq
 8002d2c:	ea90 0f02 	teqeq	r0, r2
 8002d30:	bf1f      	itttt	ne
 8002d32:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002d36:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002d3a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002d3e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002d42:	f000 80e2 	beq.w	8002f0a <__adddf3+0x1ee>
 8002d46:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002d4a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002d4e:	bfb8      	it	lt
 8002d50:	426d      	neglt	r5, r5
 8002d52:	dd0c      	ble.n	8002d6e <__adddf3+0x52>
 8002d54:	442c      	add	r4, r5
 8002d56:	ea80 0202 	eor.w	r2, r0, r2
 8002d5a:	ea81 0303 	eor.w	r3, r1, r3
 8002d5e:	ea82 0000 	eor.w	r0, r2, r0
 8002d62:	ea83 0101 	eor.w	r1, r3, r1
 8002d66:	ea80 0202 	eor.w	r2, r0, r2
 8002d6a:	ea81 0303 	eor.w	r3, r1, r3
 8002d6e:	2d36      	cmp	r5, #54	; 0x36
 8002d70:	bf88      	it	hi
 8002d72:	bd30      	pophi	{r4, r5, pc}
 8002d74:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002d78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002d7c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002d80:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002d84:	d002      	beq.n	8002d8c <__adddf3+0x70>
 8002d86:	4240      	negs	r0, r0
 8002d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002d8c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002d90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002d94:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002d98:	d002      	beq.n	8002da0 <__adddf3+0x84>
 8002d9a:	4252      	negs	r2, r2
 8002d9c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002da0:	ea94 0f05 	teq	r4, r5
 8002da4:	f000 80a7 	beq.w	8002ef6 <__adddf3+0x1da>
 8002da8:	f1a4 0401 	sub.w	r4, r4, #1
 8002dac:	f1d5 0e20 	rsbs	lr, r5, #32
 8002db0:	db0d      	blt.n	8002dce <__adddf3+0xb2>
 8002db2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002db6:	fa22 f205 	lsr.w	r2, r2, r5
 8002dba:	1880      	adds	r0, r0, r2
 8002dbc:	f141 0100 	adc.w	r1, r1, #0
 8002dc0:	fa03 f20e 	lsl.w	r2, r3, lr
 8002dc4:	1880      	adds	r0, r0, r2
 8002dc6:	fa43 f305 	asr.w	r3, r3, r5
 8002dca:	4159      	adcs	r1, r3
 8002dcc:	e00e      	b.n	8002dec <__adddf3+0xd0>
 8002dce:	f1a5 0520 	sub.w	r5, r5, #32
 8002dd2:	f10e 0e20 	add.w	lr, lr, #32
 8002dd6:	2a01      	cmp	r2, #1
 8002dd8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002ddc:	bf28      	it	cs
 8002dde:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002de2:	fa43 f305 	asr.w	r3, r3, r5
 8002de6:	18c0      	adds	r0, r0, r3
 8002de8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002dec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002df0:	d507      	bpl.n	8002e02 <__adddf3+0xe6>
 8002df2:	f04f 0e00 	mov.w	lr, #0
 8002df6:	f1dc 0c00 	rsbs	ip, ip, #0
 8002dfa:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002dfe:	eb6e 0101 	sbc.w	r1, lr, r1
 8002e02:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002e06:	d31b      	bcc.n	8002e40 <__adddf3+0x124>
 8002e08:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002e0c:	d30c      	bcc.n	8002e28 <__adddf3+0x10c>
 8002e0e:	0849      	lsrs	r1, r1, #1
 8002e10:	ea5f 0030 	movs.w	r0, r0, rrx
 8002e14:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002e18:	f104 0401 	add.w	r4, r4, #1
 8002e1c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002e20:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002e24:	f080 809a 	bcs.w	8002f5c <__adddf3+0x240>
 8002e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002e2c:	bf08      	it	eq
 8002e2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002e32:	f150 0000 	adcs.w	r0, r0, #0
 8002e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002e3a:	ea41 0105 	orr.w	r1, r1, r5
 8002e3e:	bd30      	pop	{r4, r5, pc}
 8002e40:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002e44:	4140      	adcs	r0, r0
 8002e46:	eb41 0101 	adc.w	r1, r1, r1
 8002e4a:	3c01      	subs	r4, #1
 8002e4c:	bf28      	it	cs
 8002e4e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8002e52:	d2e9      	bcs.n	8002e28 <__adddf3+0x10c>
 8002e54:	f091 0f00 	teq	r1, #0
 8002e58:	bf04      	itt	eq
 8002e5a:	4601      	moveq	r1, r0
 8002e5c:	2000      	moveq	r0, #0
 8002e5e:	fab1 f381 	clz	r3, r1
 8002e62:	bf08      	it	eq
 8002e64:	3320      	addeq	r3, #32
 8002e66:	f1a3 030b 	sub.w	r3, r3, #11
 8002e6a:	f1b3 0220 	subs.w	r2, r3, #32
 8002e6e:	da0c      	bge.n	8002e8a <__adddf3+0x16e>
 8002e70:	320c      	adds	r2, #12
 8002e72:	dd08      	ble.n	8002e86 <__adddf3+0x16a>
 8002e74:	f102 0c14 	add.w	ip, r2, #20
 8002e78:	f1c2 020c 	rsb	r2, r2, #12
 8002e7c:	fa01 f00c 	lsl.w	r0, r1, ip
 8002e80:	fa21 f102 	lsr.w	r1, r1, r2
 8002e84:	e00c      	b.n	8002ea0 <__adddf3+0x184>
 8002e86:	f102 0214 	add.w	r2, r2, #20
 8002e8a:	bfd8      	it	le
 8002e8c:	f1c2 0c20 	rsble	ip, r2, #32
 8002e90:	fa01 f102 	lsl.w	r1, r1, r2
 8002e94:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002e98:	bfdc      	itt	le
 8002e9a:	ea41 010c 	orrle.w	r1, r1, ip
 8002e9e:	4090      	lslle	r0, r2
 8002ea0:	1ae4      	subs	r4, r4, r3
 8002ea2:	bfa2      	ittt	ge
 8002ea4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002ea8:	4329      	orrge	r1, r5
 8002eaa:	bd30      	popge	{r4, r5, pc}
 8002eac:	ea6f 0404 	mvn.w	r4, r4
 8002eb0:	3c1f      	subs	r4, #31
 8002eb2:	da1c      	bge.n	8002eee <__adddf3+0x1d2>
 8002eb4:	340c      	adds	r4, #12
 8002eb6:	dc0e      	bgt.n	8002ed6 <__adddf3+0x1ba>
 8002eb8:	f104 0414 	add.w	r4, r4, #20
 8002ebc:	f1c4 0220 	rsb	r2, r4, #32
 8002ec0:	fa20 f004 	lsr.w	r0, r0, r4
 8002ec4:	fa01 f302 	lsl.w	r3, r1, r2
 8002ec8:	ea40 0003 	orr.w	r0, r0, r3
 8002ecc:	fa21 f304 	lsr.w	r3, r1, r4
 8002ed0:	ea45 0103 	orr.w	r1, r5, r3
 8002ed4:	bd30      	pop	{r4, r5, pc}
 8002ed6:	f1c4 040c 	rsb	r4, r4, #12
 8002eda:	f1c4 0220 	rsb	r2, r4, #32
 8002ede:	fa20 f002 	lsr.w	r0, r0, r2
 8002ee2:	fa01 f304 	lsl.w	r3, r1, r4
 8002ee6:	ea40 0003 	orr.w	r0, r0, r3
 8002eea:	4629      	mov	r1, r5
 8002eec:	bd30      	pop	{r4, r5, pc}
 8002eee:	fa21 f004 	lsr.w	r0, r1, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	bd30      	pop	{r4, r5, pc}
 8002ef6:	f094 0f00 	teq	r4, #0
 8002efa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002efe:	bf06      	itte	eq
 8002f00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002f04:	3401      	addeq	r4, #1
 8002f06:	3d01      	subne	r5, #1
 8002f08:	e74e      	b.n	8002da8 <__adddf3+0x8c>
 8002f0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002f0e:	bf18      	it	ne
 8002f10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002f14:	d029      	beq.n	8002f6a <__adddf3+0x24e>
 8002f16:	ea94 0f05 	teq	r4, r5
 8002f1a:	bf08      	it	eq
 8002f1c:	ea90 0f02 	teqeq	r0, r2
 8002f20:	d005      	beq.n	8002f2e <__adddf3+0x212>
 8002f22:	ea54 0c00 	orrs.w	ip, r4, r0
 8002f26:	bf04      	itt	eq
 8002f28:	4619      	moveq	r1, r3
 8002f2a:	4610      	moveq	r0, r2
 8002f2c:	bd30      	pop	{r4, r5, pc}
 8002f2e:	ea91 0f03 	teq	r1, r3
 8002f32:	bf1e      	ittt	ne
 8002f34:	2100      	movne	r1, #0
 8002f36:	2000      	movne	r0, #0
 8002f38:	bd30      	popne	{r4, r5, pc}
 8002f3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002f3e:	d105      	bne.n	8002f4c <__adddf3+0x230>
 8002f40:	0040      	lsls	r0, r0, #1
 8002f42:	4149      	adcs	r1, r1
 8002f44:	bf28      	it	cs
 8002f46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002f4a:	bd30      	pop	{r4, r5, pc}
 8002f4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002f50:	bf3c      	itt	cc
 8002f52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002f56:	bd30      	popcc	{r4, r5, pc}
 8002f58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002f5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002f60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002f64:	f04f 0000 	mov.w	r0, #0
 8002f68:	bd30      	pop	{r4, r5, pc}
 8002f6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002f6e:	bf1a      	itte	ne
 8002f70:	4619      	movne	r1, r3
 8002f72:	4610      	movne	r0, r2
 8002f74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002f78:	bf1c      	itt	ne
 8002f7a:	460b      	movne	r3, r1
 8002f7c:	4602      	movne	r2, r0
 8002f7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002f82:	bf06      	itte	eq
 8002f84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002f88:	ea91 0f03 	teqeq	r1, r3
 8002f8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002f90:	bd30      	pop	{r4, r5, pc}
 8002f92:	bf00      	nop

08002f94 <__aeabi_ui2d>:
 8002f94:	f090 0f00 	teq	r0, #0
 8002f98:	bf04      	itt	eq
 8002f9a:	2100      	moveq	r1, #0
 8002f9c:	4770      	bxeq	lr
 8002f9e:	b530      	push	{r4, r5, lr}
 8002fa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002fa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002fa8:	f04f 0500 	mov.w	r5, #0
 8002fac:	f04f 0100 	mov.w	r1, #0
 8002fb0:	e750      	b.n	8002e54 <__adddf3+0x138>
 8002fb2:	bf00      	nop

08002fb4 <__aeabi_i2d>:
 8002fb4:	f090 0f00 	teq	r0, #0
 8002fb8:	bf04      	itt	eq
 8002fba:	2100      	moveq	r1, #0
 8002fbc:	4770      	bxeq	lr
 8002fbe:	b530      	push	{r4, r5, lr}
 8002fc0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002fc4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002fc8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002fcc:	bf48      	it	mi
 8002fce:	4240      	negmi	r0, r0
 8002fd0:	f04f 0100 	mov.w	r1, #0
 8002fd4:	e73e      	b.n	8002e54 <__adddf3+0x138>
 8002fd6:	bf00      	nop

08002fd8 <__aeabi_f2d>:
 8002fd8:	0042      	lsls	r2, r0, #1
 8002fda:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002fde:	ea4f 0131 	mov.w	r1, r1, rrx
 8002fe2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002fe6:	bf1f      	itttt	ne
 8002fe8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002fec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002ff0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002ff4:	4770      	bxne	lr
 8002ff6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002ffa:	bf08      	it	eq
 8002ffc:	4770      	bxeq	lr
 8002ffe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003002:	bf04      	itt	eq
 8003004:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003008:	4770      	bxeq	lr
 800300a:	b530      	push	{r4, r5, lr}
 800300c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003010:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003014:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003018:	e71c      	b.n	8002e54 <__adddf3+0x138>
 800301a:	bf00      	nop

0800301c <__aeabi_ul2d>:
 800301c:	ea50 0201 	orrs.w	r2, r0, r1
 8003020:	bf08      	it	eq
 8003022:	4770      	bxeq	lr
 8003024:	b530      	push	{r4, r5, lr}
 8003026:	f04f 0500 	mov.w	r5, #0
 800302a:	e00a      	b.n	8003042 <__aeabi_l2d+0x16>

0800302c <__aeabi_l2d>:
 800302c:	ea50 0201 	orrs.w	r2, r0, r1
 8003030:	bf08      	it	eq
 8003032:	4770      	bxeq	lr
 8003034:	b530      	push	{r4, r5, lr}
 8003036:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800303a:	d502      	bpl.n	8003042 <__aeabi_l2d+0x16>
 800303c:	4240      	negs	r0, r0
 800303e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003042:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003046:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800304a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800304e:	f43f aed8 	beq.w	8002e02 <__adddf3+0xe6>
 8003052:	f04f 0203 	mov.w	r2, #3
 8003056:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800305a:	bf18      	it	ne
 800305c:	3203      	addne	r2, #3
 800305e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003062:	bf18      	it	ne
 8003064:	3203      	addne	r2, #3
 8003066:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800306a:	f1c2 0320 	rsb	r3, r2, #32
 800306e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003072:	fa20 f002 	lsr.w	r0, r0, r2
 8003076:	fa01 fe03 	lsl.w	lr, r1, r3
 800307a:	ea40 000e 	orr.w	r0, r0, lr
 800307e:	fa21 f102 	lsr.w	r1, r1, r2
 8003082:	4414      	add	r4, r2
 8003084:	e6bd      	b.n	8002e02 <__adddf3+0xe6>
 8003086:	bf00      	nop

08003088 <__aeabi_dmul>:
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800308e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003092:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003096:	bf1d      	ittte	ne
 8003098:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800309c:	ea94 0f0c 	teqne	r4, ip
 80030a0:	ea95 0f0c 	teqne	r5, ip
 80030a4:	f000 f8de 	bleq	8003264 <__aeabi_dmul+0x1dc>
 80030a8:	442c      	add	r4, r5
 80030aa:	ea81 0603 	eor.w	r6, r1, r3
 80030ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80030b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80030b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80030ba:	bf18      	it	ne
 80030bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80030c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80030c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030c8:	d038      	beq.n	800313c <__aeabi_dmul+0xb4>
 80030ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80030ce:	f04f 0500 	mov.w	r5, #0
 80030d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80030d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80030da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80030de:	f04f 0600 	mov.w	r6, #0
 80030e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80030e6:	f09c 0f00 	teq	ip, #0
 80030ea:	bf18      	it	ne
 80030ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80030f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80030f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80030f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80030fc:	d204      	bcs.n	8003108 <__aeabi_dmul+0x80>
 80030fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003102:	416d      	adcs	r5, r5
 8003104:	eb46 0606 	adc.w	r6, r6, r6
 8003108:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800310c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003110:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003114:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003118:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800311c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003120:	bf88      	it	hi
 8003122:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003126:	d81e      	bhi.n	8003166 <__aeabi_dmul+0xde>
 8003128:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800312c:	bf08      	it	eq
 800312e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003132:	f150 0000 	adcs.w	r0, r0, #0
 8003136:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800313a:	bd70      	pop	{r4, r5, r6, pc}
 800313c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003140:	ea46 0101 	orr.w	r1, r6, r1
 8003144:	ea40 0002 	orr.w	r0, r0, r2
 8003148:	ea81 0103 	eor.w	r1, r1, r3
 800314c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003150:	bfc2      	ittt	gt
 8003152:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003156:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800315a:	bd70      	popgt	{r4, r5, r6, pc}
 800315c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003160:	f04f 0e00 	mov.w	lr, #0
 8003164:	3c01      	subs	r4, #1
 8003166:	f300 80ab 	bgt.w	80032c0 <__aeabi_dmul+0x238>
 800316a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800316e:	bfde      	ittt	le
 8003170:	2000      	movle	r0, #0
 8003172:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003176:	bd70      	pople	{r4, r5, r6, pc}
 8003178:	f1c4 0400 	rsb	r4, r4, #0
 800317c:	3c20      	subs	r4, #32
 800317e:	da35      	bge.n	80031ec <__aeabi_dmul+0x164>
 8003180:	340c      	adds	r4, #12
 8003182:	dc1b      	bgt.n	80031bc <__aeabi_dmul+0x134>
 8003184:	f104 0414 	add.w	r4, r4, #20
 8003188:	f1c4 0520 	rsb	r5, r4, #32
 800318c:	fa00 f305 	lsl.w	r3, r0, r5
 8003190:	fa20 f004 	lsr.w	r0, r0, r4
 8003194:	fa01 f205 	lsl.w	r2, r1, r5
 8003198:	ea40 0002 	orr.w	r0, r0, r2
 800319c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80031a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80031a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80031a8:	fa21 f604 	lsr.w	r6, r1, r4
 80031ac:	eb42 0106 	adc.w	r1, r2, r6
 80031b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80031b4:	bf08      	it	eq
 80031b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f1c4 040c 	rsb	r4, r4, #12
 80031c0:	f1c4 0520 	rsb	r5, r4, #32
 80031c4:	fa00 f304 	lsl.w	r3, r0, r4
 80031c8:	fa20 f005 	lsr.w	r0, r0, r5
 80031cc:	fa01 f204 	lsl.w	r2, r1, r4
 80031d0:	ea40 0002 	orr.w	r0, r0, r2
 80031d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80031d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80031dc:	f141 0100 	adc.w	r1, r1, #0
 80031e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80031e4:	bf08      	it	eq
 80031e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	f1c4 0520 	rsb	r5, r4, #32
 80031f0:	fa00 f205 	lsl.w	r2, r0, r5
 80031f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80031f8:	fa20 f304 	lsr.w	r3, r0, r4
 80031fc:	fa01 f205 	lsl.w	r2, r1, r5
 8003200:	ea43 0302 	orr.w	r3, r3, r2
 8003204:	fa21 f004 	lsr.w	r0, r1, r4
 8003208:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800320c:	fa21 f204 	lsr.w	r2, r1, r4
 8003210:	ea20 0002 	bic.w	r0, r0, r2
 8003214:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003218:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800321c:	bf08      	it	eq
 800321e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f094 0f00 	teq	r4, #0
 8003228:	d10f      	bne.n	800324a <__aeabi_dmul+0x1c2>
 800322a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800322e:	0040      	lsls	r0, r0, #1
 8003230:	eb41 0101 	adc.w	r1, r1, r1
 8003234:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003238:	bf08      	it	eq
 800323a:	3c01      	subeq	r4, #1
 800323c:	d0f7      	beq.n	800322e <__aeabi_dmul+0x1a6>
 800323e:	ea41 0106 	orr.w	r1, r1, r6
 8003242:	f095 0f00 	teq	r5, #0
 8003246:	bf18      	it	ne
 8003248:	4770      	bxne	lr
 800324a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800324e:	0052      	lsls	r2, r2, #1
 8003250:	eb43 0303 	adc.w	r3, r3, r3
 8003254:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003258:	bf08      	it	eq
 800325a:	3d01      	subeq	r5, #1
 800325c:	d0f7      	beq.n	800324e <__aeabi_dmul+0x1c6>
 800325e:	ea43 0306 	orr.w	r3, r3, r6
 8003262:	4770      	bx	lr
 8003264:	ea94 0f0c 	teq	r4, ip
 8003268:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800326c:	bf18      	it	ne
 800326e:	ea95 0f0c 	teqne	r5, ip
 8003272:	d00c      	beq.n	800328e <__aeabi_dmul+0x206>
 8003274:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003278:	bf18      	it	ne
 800327a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800327e:	d1d1      	bne.n	8003224 <__aeabi_dmul+0x19c>
 8003280:	ea81 0103 	eor.w	r1, r1, r3
 8003284:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003288:	f04f 0000 	mov.w	r0, #0
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003292:	bf06      	itte	eq
 8003294:	4610      	moveq	r0, r2
 8003296:	4619      	moveq	r1, r3
 8003298:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800329c:	d019      	beq.n	80032d2 <__aeabi_dmul+0x24a>
 800329e:	ea94 0f0c 	teq	r4, ip
 80032a2:	d102      	bne.n	80032aa <__aeabi_dmul+0x222>
 80032a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80032a8:	d113      	bne.n	80032d2 <__aeabi_dmul+0x24a>
 80032aa:	ea95 0f0c 	teq	r5, ip
 80032ae:	d105      	bne.n	80032bc <__aeabi_dmul+0x234>
 80032b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80032b4:	bf1c      	itt	ne
 80032b6:	4610      	movne	r0, r2
 80032b8:	4619      	movne	r1, r3
 80032ba:	d10a      	bne.n	80032d2 <__aeabi_dmul+0x24a>
 80032bc:	ea81 0103 	eor.w	r1, r1, r3
 80032c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80032c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80032c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80032cc:	f04f 0000 	mov.w	r0, #0
 80032d0:	bd70      	pop	{r4, r5, r6, pc}
 80032d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80032d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80032da:	bd70      	pop	{r4, r5, r6, pc}

080032dc <__aeabi_ddiv>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80032e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80032e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80032ea:	bf1d      	ittte	ne
 80032ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80032f0:	ea94 0f0c 	teqne	r4, ip
 80032f4:	ea95 0f0c 	teqne	r5, ip
 80032f8:	f000 f8a7 	bleq	800344a <__aeabi_ddiv+0x16e>
 80032fc:	eba4 0405 	sub.w	r4, r4, r5
 8003300:	ea81 0e03 	eor.w	lr, r1, r3
 8003304:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800330c:	f000 8088 	beq.w	8003420 <__aeabi_ddiv+0x144>
 8003310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003314:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003318:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800331c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003320:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003324:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003328:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800332c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003330:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003334:	429d      	cmp	r5, r3
 8003336:	bf08      	it	eq
 8003338:	4296      	cmpeq	r6, r2
 800333a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800333e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003342:	d202      	bcs.n	800334a <__aeabi_ddiv+0x6e>
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	ea4f 0232 	mov.w	r2, r2, rrx
 800334a:	1ab6      	subs	r6, r6, r2
 800334c:	eb65 0503 	sbc.w	r5, r5, r3
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	ea4f 0232 	mov.w	r2, r2, rrx
 8003356:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800335a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800335e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003362:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003366:	bf22      	ittt	cs
 8003368:	1ab6      	subcs	r6, r6, r2
 800336a:	4675      	movcs	r5, lr
 800336c:	ea40 000c 	orrcs.w	r0, r0, ip
 8003370:	085b      	lsrs	r3, r3, #1
 8003372:	ea4f 0232 	mov.w	r2, r2, rrx
 8003376:	ebb6 0e02 	subs.w	lr, r6, r2
 800337a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800337e:	bf22      	ittt	cs
 8003380:	1ab6      	subcs	r6, r6, r2
 8003382:	4675      	movcs	r5, lr
 8003384:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003388:	085b      	lsrs	r3, r3, #1
 800338a:	ea4f 0232 	mov.w	r2, r2, rrx
 800338e:	ebb6 0e02 	subs.w	lr, r6, r2
 8003392:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003396:	bf22      	ittt	cs
 8003398:	1ab6      	subcs	r6, r6, r2
 800339a:	4675      	movcs	r5, lr
 800339c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80033a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80033aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80033ae:	bf22      	ittt	cs
 80033b0:	1ab6      	subcs	r6, r6, r2
 80033b2:	4675      	movcs	r5, lr
 80033b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80033b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80033bc:	d018      	beq.n	80033f0 <__aeabi_ddiv+0x114>
 80033be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80033c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80033c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80033ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80033ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80033d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80033d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80033da:	d1c0      	bne.n	800335e <__aeabi_ddiv+0x82>
 80033dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80033e0:	d10b      	bne.n	80033fa <__aeabi_ddiv+0x11e>
 80033e2:	ea41 0100 	orr.w	r1, r1, r0
 80033e6:	f04f 0000 	mov.w	r0, #0
 80033ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80033ee:	e7b6      	b.n	800335e <__aeabi_ddiv+0x82>
 80033f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80033f4:	bf04      	itt	eq
 80033f6:	4301      	orreq	r1, r0
 80033f8:	2000      	moveq	r0, #0
 80033fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80033fe:	bf88      	it	hi
 8003400:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003404:	f63f aeaf 	bhi.w	8003166 <__aeabi_dmul+0xde>
 8003408:	ebb5 0c03 	subs.w	ip, r5, r3
 800340c:	bf04      	itt	eq
 800340e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003412:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003416:	f150 0000 	adcs.w	r0, r0, #0
 800341a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800341e:	bd70      	pop	{r4, r5, r6, pc}
 8003420:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003424:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003428:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800342c:	bfc2      	ittt	gt
 800342e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003436:	bd70      	popgt	{r4, r5, r6, pc}
 8003438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800343c:	f04f 0e00 	mov.w	lr, #0
 8003440:	3c01      	subs	r4, #1
 8003442:	e690      	b.n	8003166 <__aeabi_dmul+0xde>
 8003444:	ea45 0e06 	orr.w	lr, r5, r6
 8003448:	e68d      	b.n	8003166 <__aeabi_dmul+0xde>
 800344a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800344e:	ea94 0f0c 	teq	r4, ip
 8003452:	bf08      	it	eq
 8003454:	ea95 0f0c 	teqeq	r5, ip
 8003458:	f43f af3b 	beq.w	80032d2 <__aeabi_dmul+0x24a>
 800345c:	ea94 0f0c 	teq	r4, ip
 8003460:	d10a      	bne.n	8003478 <__aeabi_ddiv+0x19c>
 8003462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003466:	f47f af34 	bne.w	80032d2 <__aeabi_dmul+0x24a>
 800346a:	ea95 0f0c 	teq	r5, ip
 800346e:	f47f af25 	bne.w	80032bc <__aeabi_dmul+0x234>
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	e72c      	b.n	80032d2 <__aeabi_dmul+0x24a>
 8003478:	ea95 0f0c 	teq	r5, ip
 800347c:	d106      	bne.n	800348c <__aeabi_ddiv+0x1b0>
 800347e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003482:	f43f aefd 	beq.w	8003280 <__aeabi_dmul+0x1f8>
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	e722      	b.n	80032d2 <__aeabi_dmul+0x24a>
 800348c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003490:	bf18      	it	ne
 8003492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003496:	f47f aec5 	bne.w	8003224 <__aeabi_dmul+0x19c>
 800349a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800349e:	f47f af0d 	bne.w	80032bc <__aeabi_dmul+0x234>
 80034a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80034a6:	f47f aeeb 	bne.w	8003280 <__aeabi_dmul+0x1f8>
 80034aa:	e712      	b.n	80032d2 <__aeabi_dmul+0x24a>

080034ac <__gedf2>:
 80034ac:	f04f 3cff 	mov.w	ip, #4294967295
 80034b0:	e006      	b.n	80034c0 <__cmpdf2+0x4>
 80034b2:	bf00      	nop

080034b4 <__ledf2>:
 80034b4:	f04f 0c01 	mov.w	ip, #1
 80034b8:	e002      	b.n	80034c0 <__cmpdf2+0x4>
 80034ba:	bf00      	nop

080034bc <__cmpdf2>:
 80034bc:	f04f 0c01 	mov.w	ip, #1
 80034c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80034c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80034c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80034cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80034d0:	bf18      	it	ne
 80034d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80034d6:	d01b      	beq.n	8003510 <__cmpdf2+0x54>
 80034d8:	b001      	add	sp, #4
 80034da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80034de:	bf0c      	ite	eq
 80034e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80034e4:	ea91 0f03 	teqne	r1, r3
 80034e8:	bf02      	ittt	eq
 80034ea:	ea90 0f02 	teqeq	r0, r2
 80034ee:	2000      	moveq	r0, #0
 80034f0:	4770      	bxeq	lr
 80034f2:	f110 0f00 	cmn.w	r0, #0
 80034f6:	ea91 0f03 	teq	r1, r3
 80034fa:	bf58      	it	pl
 80034fc:	4299      	cmppl	r1, r3
 80034fe:	bf08      	it	eq
 8003500:	4290      	cmpeq	r0, r2
 8003502:	bf2c      	ite	cs
 8003504:	17d8      	asrcs	r0, r3, #31
 8003506:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800350a:	f040 0001 	orr.w	r0, r0, #1
 800350e:	4770      	bx	lr
 8003510:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003518:	d102      	bne.n	8003520 <__cmpdf2+0x64>
 800351a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800351e:	d107      	bne.n	8003530 <__cmpdf2+0x74>
 8003520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003524:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003528:	d1d6      	bne.n	80034d8 <__cmpdf2+0x1c>
 800352a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800352e:	d0d3      	beq.n	80034d8 <__cmpdf2+0x1c>
 8003530:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <__aeabi_cdrcmple>:
 8003538:	4684      	mov	ip, r0
 800353a:	4610      	mov	r0, r2
 800353c:	4662      	mov	r2, ip
 800353e:	468c      	mov	ip, r1
 8003540:	4619      	mov	r1, r3
 8003542:	4663      	mov	r3, ip
 8003544:	e000      	b.n	8003548 <__aeabi_cdcmpeq>
 8003546:	bf00      	nop

08003548 <__aeabi_cdcmpeq>:
 8003548:	b501      	push	{r0, lr}
 800354a:	f7ff ffb7 	bl	80034bc <__cmpdf2>
 800354e:	2800      	cmp	r0, #0
 8003550:	bf48      	it	mi
 8003552:	f110 0f00 	cmnmi.w	r0, #0
 8003556:	bd01      	pop	{r0, pc}

08003558 <__aeabi_dcmpeq>:
 8003558:	f84d ed08 	str.w	lr, [sp, #-8]!
 800355c:	f7ff fff4 	bl	8003548 <__aeabi_cdcmpeq>
 8003560:	bf0c      	ite	eq
 8003562:	2001      	moveq	r0, #1
 8003564:	2000      	movne	r0, #0
 8003566:	f85d fb08 	ldr.w	pc, [sp], #8
 800356a:	bf00      	nop

0800356c <__aeabi_dcmplt>:
 800356c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003570:	f7ff ffea 	bl	8003548 <__aeabi_cdcmpeq>
 8003574:	bf34      	ite	cc
 8003576:	2001      	movcc	r0, #1
 8003578:	2000      	movcs	r0, #0
 800357a:	f85d fb08 	ldr.w	pc, [sp], #8
 800357e:	bf00      	nop

08003580 <__aeabi_dcmple>:
 8003580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003584:	f7ff ffe0 	bl	8003548 <__aeabi_cdcmpeq>
 8003588:	bf94      	ite	ls
 800358a:	2001      	movls	r0, #1
 800358c:	2000      	movhi	r0, #0
 800358e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003592:	bf00      	nop

08003594 <__aeabi_dcmpge>:
 8003594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003598:	f7ff ffce 	bl	8003538 <__aeabi_cdrcmple>
 800359c:	bf94      	ite	ls
 800359e:	2001      	movls	r0, #1
 80035a0:	2000      	movhi	r0, #0
 80035a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80035a6:	bf00      	nop

080035a8 <__aeabi_dcmpgt>:
 80035a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80035ac:	f7ff ffc4 	bl	8003538 <__aeabi_cdrcmple>
 80035b0:	bf34      	ite	cc
 80035b2:	2001      	movcc	r0, #1
 80035b4:	2000      	movcs	r0, #0
 80035b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80035ba:	bf00      	nop

080035bc <__aeabi_dcmpun>:
 80035bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80035c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80035c4:	d102      	bne.n	80035cc <__aeabi_dcmpun+0x10>
 80035c6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80035ca:	d10a      	bne.n	80035e2 <__aeabi_dcmpun+0x26>
 80035cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80035d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80035d4:	d102      	bne.n	80035dc <__aeabi_dcmpun+0x20>
 80035d6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80035da:	d102      	bne.n	80035e2 <__aeabi_dcmpun+0x26>
 80035dc:	f04f 0000 	mov.w	r0, #0
 80035e0:	4770      	bx	lr
 80035e2:	f04f 0001 	mov.w	r0, #1
 80035e6:	4770      	bx	lr

080035e8 <__aeabi_d2iz>:
 80035e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80035ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80035f0:	d215      	bcs.n	800361e <__aeabi_d2iz+0x36>
 80035f2:	d511      	bpl.n	8003618 <__aeabi_d2iz+0x30>
 80035f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80035f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80035fc:	d912      	bls.n	8003624 <__aeabi_d2iz+0x3c>
 80035fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800360a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800360e:	fa23 f002 	lsr.w	r0, r3, r2
 8003612:	bf18      	it	ne
 8003614:	4240      	negne	r0, r0
 8003616:	4770      	bx	lr
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	4770      	bx	lr
 800361e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003622:	d105      	bne.n	8003630 <__aeabi_d2iz+0x48>
 8003624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003628:	bf08      	it	eq
 800362a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800362e:	4770      	bx	lr
 8003630:	f04f 0000 	mov.w	r0, #0
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop

08003638 <__aeabi_d2uiz>:
 8003638:	004a      	lsls	r2, r1, #1
 800363a:	d211      	bcs.n	8003660 <__aeabi_d2uiz+0x28>
 800363c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003640:	d211      	bcs.n	8003666 <__aeabi_d2uiz+0x2e>
 8003642:	d50d      	bpl.n	8003660 <__aeabi_d2uiz+0x28>
 8003644:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003648:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800364c:	d40e      	bmi.n	800366c <__aeabi_d2uiz+0x34>
 800364e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003656:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800365a:	fa23 f002 	lsr.w	r0, r3, r2
 800365e:	4770      	bx	lr
 8003660:	f04f 0000 	mov.w	r0, #0
 8003664:	4770      	bx	lr
 8003666:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800366a:	d102      	bne.n	8003672 <__aeabi_d2uiz+0x3a>
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	4770      	bx	lr
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	4770      	bx	lr

08003678 <__aeabi_d2f>:
 8003678:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800367c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8003680:	bf24      	itt	cs
 8003682:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003686:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800368a:	d90d      	bls.n	80036a8 <__aeabi_d2f+0x30>
 800368c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003690:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003694:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003698:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800369c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80036a0:	bf08      	it	eq
 80036a2:	f020 0001 	biceq.w	r0, r0, #1
 80036a6:	4770      	bx	lr
 80036a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80036ac:	d121      	bne.n	80036f2 <__aeabi_d2f+0x7a>
 80036ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80036b2:	bfbc      	itt	lt
 80036b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80036b8:	4770      	bxlt	lr
 80036ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80036be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80036c2:	f1c2 0218 	rsb	r2, r2, #24
 80036c6:	f1c2 0c20 	rsb	ip, r2, #32
 80036ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80036ce:	fa20 f002 	lsr.w	r0, r0, r2
 80036d2:	bf18      	it	ne
 80036d4:	f040 0001 	orrne.w	r0, r0, #1
 80036d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80036dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80036e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80036e4:	ea40 000c 	orr.w	r0, r0, ip
 80036e8:	fa23 f302 	lsr.w	r3, r3, r2
 80036ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036f0:	e7cc      	b.n	800368c <__aeabi_d2f+0x14>
 80036f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80036f6:	d107      	bne.n	8003708 <__aeabi_d2f+0x90>
 80036f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80036fc:	bf1e      	ittt	ne
 80036fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8003702:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8003706:	4770      	bxne	lr
 8003708:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800370c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003710:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <__aeabi_frsub>:
 8003718:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800371c:	e002      	b.n	8003724 <__addsf3>
 800371e:	bf00      	nop

08003720 <__aeabi_fsub>:
 8003720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08003724 <__addsf3>:
 8003724:	0042      	lsls	r2, r0, #1
 8003726:	bf1f      	itttt	ne
 8003728:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800372c:	ea92 0f03 	teqne	r2, r3
 8003730:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8003734:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003738:	d06a      	beq.n	8003810 <__addsf3+0xec>
 800373a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800373e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8003742:	bfc1      	itttt	gt
 8003744:	18d2      	addgt	r2, r2, r3
 8003746:	4041      	eorgt	r1, r0
 8003748:	4048      	eorgt	r0, r1
 800374a:	4041      	eorgt	r1, r0
 800374c:	bfb8      	it	lt
 800374e:	425b      	neglt	r3, r3
 8003750:	2b19      	cmp	r3, #25
 8003752:	bf88      	it	hi
 8003754:	4770      	bxhi	lr
 8003756:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800375a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800375e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8003762:	bf18      	it	ne
 8003764:	4240      	negne	r0, r0
 8003766:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800376a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800376e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8003772:	bf18      	it	ne
 8003774:	4249      	negne	r1, r1
 8003776:	ea92 0f03 	teq	r2, r3
 800377a:	d03f      	beq.n	80037fc <__addsf3+0xd8>
 800377c:	f1a2 0201 	sub.w	r2, r2, #1
 8003780:	fa41 fc03 	asr.w	ip, r1, r3
 8003784:	eb10 000c 	adds.w	r0, r0, ip
 8003788:	f1c3 0320 	rsb	r3, r3, #32
 800378c:	fa01 f103 	lsl.w	r1, r1, r3
 8003790:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8003794:	d502      	bpl.n	800379c <__addsf3+0x78>
 8003796:	4249      	negs	r1, r1
 8003798:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800379c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80037a0:	d313      	bcc.n	80037ca <__addsf3+0xa6>
 80037a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80037a6:	d306      	bcc.n	80037b6 <__addsf3+0x92>
 80037a8:	0840      	lsrs	r0, r0, #1
 80037aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80037ae:	f102 0201 	add.w	r2, r2, #1
 80037b2:	2afe      	cmp	r2, #254	; 0xfe
 80037b4:	d251      	bcs.n	800385a <__addsf3+0x136>
 80037b6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80037ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80037be:	bf08      	it	eq
 80037c0:	f020 0001 	biceq.w	r0, r0, #1
 80037c4:	ea40 0003 	orr.w	r0, r0, r3
 80037c8:	4770      	bx	lr
 80037ca:	0049      	lsls	r1, r1, #1
 80037cc:	eb40 0000 	adc.w	r0, r0, r0
 80037d0:	3a01      	subs	r2, #1
 80037d2:	bf28      	it	cs
 80037d4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80037d8:	d2ed      	bcs.n	80037b6 <__addsf3+0x92>
 80037da:	fab0 fc80 	clz	ip, r0
 80037de:	f1ac 0c08 	sub.w	ip, ip, #8
 80037e2:	ebb2 020c 	subs.w	r2, r2, ip
 80037e6:	fa00 f00c 	lsl.w	r0, r0, ip
 80037ea:	bfaa      	itet	ge
 80037ec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80037f0:	4252      	neglt	r2, r2
 80037f2:	4318      	orrge	r0, r3
 80037f4:	bfbc      	itt	lt
 80037f6:	40d0      	lsrlt	r0, r2
 80037f8:	4318      	orrlt	r0, r3
 80037fa:	4770      	bx	lr
 80037fc:	f092 0f00 	teq	r2, #0
 8003800:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8003804:	bf06      	itte	eq
 8003806:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800380a:	3201      	addeq	r2, #1
 800380c:	3b01      	subne	r3, #1
 800380e:	e7b5      	b.n	800377c <__addsf3+0x58>
 8003810:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003814:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003818:	bf18      	it	ne
 800381a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800381e:	d021      	beq.n	8003864 <__addsf3+0x140>
 8003820:	ea92 0f03 	teq	r2, r3
 8003824:	d004      	beq.n	8003830 <__addsf3+0x10c>
 8003826:	f092 0f00 	teq	r2, #0
 800382a:	bf08      	it	eq
 800382c:	4608      	moveq	r0, r1
 800382e:	4770      	bx	lr
 8003830:	ea90 0f01 	teq	r0, r1
 8003834:	bf1c      	itt	ne
 8003836:	2000      	movne	r0, #0
 8003838:	4770      	bxne	lr
 800383a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800383e:	d104      	bne.n	800384a <__addsf3+0x126>
 8003840:	0040      	lsls	r0, r0, #1
 8003842:	bf28      	it	cs
 8003844:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8003848:	4770      	bx	lr
 800384a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800384e:	bf3c      	itt	cc
 8003850:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8003854:	4770      	bxcc	lr
 8003856:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800385a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800385e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003862:	4770      	bx	lr
 8003864:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8003868:	bf16      	itet	ne
 800386a:	4608      	movne	r0, r1
 800386c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8003870:	4601      	movne	r1, r0
 8003872:	0242      	lsls	r2, r0, #9
 8003874:	bf06      	itte	eq
 8003876:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800387a:	ea90 0f01 	teqeq	r0, r1
 800387e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8003882:	4770      	bx	lr

08003884 <__aeabi_ui2f>:
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e004      	b.n	8003894 <__aeabi_i2f+0x8>
 800388a:	bf00      	nop

0800388c <__aeabi_i2f>:
 800388c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8003890:	bf48      	it	mi
 8003892:	4240      	negmi	r0, r0
 8003894:	ea5f 0c00 	movs.w	ip, r0
 8003898:	bf08      	it	eq
 800389a:	4770      	bxeq	lr
 800389c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80038a0:	4601      	mov	r1, r0
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	e01c      	b.n	80038e2 <__aeabi_l2f+0x2a>

080038a8 <__aeabi_ul2f>:
 80038a8:	ea50 0201 	orrs.w	r2, r0, r1
 80038ac:	bf08      	it	eq
 80038ae:	4770      	bxeq	lr
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	e00a      	b.n	80038cc <__aeabi_l2f+0x14>
 80038b6:	bf00      	nop

080038b8 <__aeabi_l2f>:
 80038b8:	ea50 0201 	orrs.w	r2, r0, r1
 80038bc:	bf08      	it	eq
 80038be:	4770      	bxeq	lr
 80038c0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80038c4:	d502      	bpl.n	80038cc <__aeabi_l2f+0x14>
 80038c6:	4240      	negs	r0, r0
 80038c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80038cc:	ea5f 0c01 	movs.w	ip, r1
 80038d0:	bf02      	ittt	eq
 80038d2:	4684      	moveq	ip, r0
 80038d4:	4601      	moveq	r1, r0
 80038d6:	2000      	moveq	r0, #0
 80038d8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80038dc:	bf08      	it	eq
 80038de:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80038e2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80038e6:	fabc f28c 	clz	r2, ip
 80038ea:	3a08      	subs	r2, #8
 80038ec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80038f0:	db10      	blt.n	8003914 <__aeabi_l2f+0x5c>
 80038f2:	fa01 fc02 	lsl.w	ip, r1, r2
 80038f6:	4463      	add	r3, ip
 80038f8:	fa00 fc02 	lsl.w	ip, r0, r2
 80038fc:	f1c2 0220 	rsb	r2, r2, #32
 8003900:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003904:	fa20 f202 	lsr.w	r2, r0, r2
 8003908:	eb43 0002 	adc.w	r0, r3, r2
 800390c:	bf08      	it	eq
 800390e:	f020 0001 	biceq.w	r0, r0, #1
 8003912:	4770      	bx	lr
 8003914:	f102 0220 	add.w	r2, r2, #32
 8003918:	fa01 fc02 	lsl.w	ip, r1, r2
 800391c:	f1c2 0220 	rsb	r2, r2, #32
 8003920:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8003924:	fa21 f202 	lsr.w	r2, r1, r2
 8003928:	eb43 0002 	adc.w	r0, r3, r2
 800392c:	bf08      	it	eq
 800392e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8003932:	4770      	bx	lr

08003934 <__aeabi_fmul>:
 8003934:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003938:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800393c:	bf1e      	ittt	ne
 800393e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003942:	ea92 0f0c 	teqne	r2, ip
 8003946:	ea93 0f0c 	teqne	r3, ip
 800394a:	d06f      	beq.n	8003a2c <__aeabi_fmul+0xf8>
 800394c:	441a      	add	r2, r3
 800394e:	ea80 0c01 	eor.w	ip, r0, r1
 8003952:	0240      	lsls	r0, r0, #9
 8003954:	bf18      	it	ne
 8003956:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800395a:	d01e      	beq.n	800399a <__aeabi_fmul+0x66>
 800395c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003960:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8003964:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8003968:	fba0 3101 	umull	r3, r1, r0, r1
 800396c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003970:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003974:	bf3e      	ittt	cc
 8003976:	0049      	lslcc	r1, r1, #1
 8003978:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800397c:	005b      	lslcc	r3, r3, #1
 800397e:	ea40 0001 	orr.w	r0, r0, r1
 8003982:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8003986:	2afd      	cmp	r2, #253	; 0xfd
 8003988:	d81d      	bhi.n	80039c6 <__aeabi_fmul+0x92>
 800398a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800398e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003992:	bf08      	it	eq
 8003994:	f020 0001 	biceq.w	r0, r0, #1
 8003998:	4770      	bx	lr
 800399a:	f090 0f00 	teq	r0, #0
 800399e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80039a2:	bf08      	it	eq
 80039a4:	0249      	lsleq	r1, r1, #9
 80039a6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80039aa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80039ae:	3a7f      	subs	r2, #127	; 0x7f
 80039b0:	bfc2      	ittt	gt
 80039b2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80039b6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80039ba:	4770      	bxgt	lr
 80039bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	3a01      	subs	r2, #1
 80039c6:	dc5d      	bgt.n	8003a84 <__aeabi_fmul+0x150>
 80039c8:	f112 0f19 	cmn.w	r2, #25
 80039cc:	bfdc      	itt	le
 80039ce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80039d2:	4770      	bxle	lr
 80039d4:	f1c2 0200 	rsb	r2, r2, #0
 80039d8:	0041      	lsls	r1, r0, #1
 80039da:	fa21 f102 	lsr.w	r1, r1, r2
 80039de:	f1c2 0220 	rsb	r2, r2, #32
 80039e2:	fa00 fc02 	lsl.w	ip, r0, r2
 80039e6:	ea5f 0031 	movs.w	r0, r1, rrx
 80039ea:	f140 0000 	adc.w	r0, r0, #0
 80039ee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80039f2:	bf08      	it	eq
 80039f4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80039f8:	4770      	bx	lr
 80039fa:	f092 0f00 	teq	r2, #0
 80039fe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8003a02:	bf02      	ittt	eq
 8003a04:	0040      	lsleq	r0, r0, #1
 8003a06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8003a0a:	3a01      	subeq	r2, #1
 8003a0c:	d0f9      	beq.n	8003a02 <__aeabi_fmul+0xce>
 8003a0e:	ea40 000c 	orr.w	r0, r0, ip
 8003a12:	f093 0f00 	teq	r3, #0
 8003a16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003a1a:	bf02      	ittt	eq
 8003a1c:	0049      	lsleq	r1, r1, #1
 8003a1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8003a22:	3b01      	subeq	r3, #1
 8003a24:	d0f9      	beq.n	8003a1a <__aeabi_fmul+0xe6>
 8003a26:	ea41 010c 	orr.w	r1, r1, ip
 8003a2a:	e78f      	b.n	800394c <__aeabi_fmul+0x18>
 8003a2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003a30:	ea92 0f0c 	teq	r2, ip
 8003a34:	bf18      	it	ne
 8003a36:	ea93 0f0c 	teqne	r3, ip
 8003a3a:	d00a      	beq.n	8003a52 <__aeabi_fmul+0x11e>
 8003a3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003a40:	bf18      	it	ne
 8003a42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003a46:	d1d8      	bne.n	80039fa <__aeabi_fmul+0xc6>
 8003a48:	ea80 0001 	eor.w	r0, r0, r1
 8003a4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003a50:	4770      	bx	lr
 8003a52:	f090 0f00 	teq	r0, #0
 8003a56:	bf17      	itett	ne
 8003a58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8003a5c:	4608      	moveq	r0, r1
 8003a5e:	f091 0f00 	teqne	r1, #0
 8003a62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8003a66:	d014      	beq.n	8003a92 <__aeabi_fmul+0x15e>
 8003a68:	ea92 0f0c 	teq	r2, ip
 8003a6c:	d101      	bne.n	8003a72 <__aeabi_fmul+0x13e>
 8003a6e:	0242      	lsls	r2, r0, #9
 8003a70:	d10f      	bne.n	8003a92 <__aeabi_fmul+0x15e>
 8003a72:	ea93 0f0c 	teq	r3, ip
 8003a76:	d103      	bne.n	8003a80 <__aeabi_fmul+0x14c>
 8003a78:	024b      	lsls	r3, r1, #9
 8003a7a:	bf18      	it	ne
 8003a7c:	4608      	movne	r0, r1
 8003a7e:	d108      	bne.n	8003a92 <__aeabi_fmul+0x15e>
 8003a80:	ea80 0001 	eor.w	r0, r0, r1
 8003a84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003a90:	4770      	bx	lr
 8003a92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8003a96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8003a9a:	4770      	bx	lr

08003a9c <__aeabi_fdiv>:
 8003a9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003aa0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8003aa4:	bf1e      	ittt	ne
 8003aa6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8003aaa:	ea92 0f0c 	teqne	r2, ip
 8003aae:	ea93 0f0c 	teqne	r3, ip
 8003ab2:	d069      	beq.n	8003b88 <__aeabi_fdiv+0xec>
 8003ab4:	eba2 0203 	sub.w	r2, r2, r3
 8003ab8:	ea80 0c01 	eor.w	ip, r0, r1
 8003abc:	0249      	lsls	r1, r1, #9
 8003abe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8003ac2:	d037      	beq.n	8003b34 <__aeabi_fdiv+0x98>
 8003ac4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003ac8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8003acc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8003ad0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	bf38      	it	cc
 8003ad8:	005b      	lslcc	r3, r3, #1
 8003ada:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8003ade:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8003ae2:	428b      	cmp	r3, r1
 8003ae4:	bf24      	itt	cs
 8003ae6:	1a5b      	subcs	r3, r3, r1
 8003ae8:	ea40 000c 	orrcs.w	r0, r0, ip
 8003aec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8003af0:	bf24      	itt	cs
 8003af2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8003af6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003afa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8003afe:	bf24      	itt	cs
 8003b00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8003b04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003b08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8003b0c:	bf24      	itt	cs
 8003b0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8003b12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	bf18      	it	ne
 8003b1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8003b1e:	d1e0      	bne.n	8003ae2 <__aeabi_fdiv+0x46>
 8003b20:	2afd      	cmp	r2, #253	; 0xfd
 8003b22:	f63f af50 	bhi.w	80039c6 <__aeabi_fmul+0x92>
 8003b26:	428b      	cmp	r3, r1
 8003b28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8003b2c:	bf08      	it	eq
 8003b2e:	f020 0001 	biceq.w	r0, r0, #1
 8003b32:	4770      	bx	lr
 8003b34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8003b38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8003b3c:	327f      	adds	r2, #127	; 0x7f
 8003b3e:	bfc2      	ittt	gt
 8003b40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8003b44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8003b48:	4770      	bxgt	lr
 8003b4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	3a01      	subs	r2, #1
 8003b54:	e737      	b.n	80039c6 <__aeabi_fmul+0x92>
 8003b56:	f092 0f00 	teq	r2, #0
 8003b5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8003b5e:	bf02      	ittt	eq
 8003b60:	0040      	lsleq	r0, r0, #1
 8003b62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8003b66:	3a01      	subeq	r2, #1
 8003b68:	d0f9      	beq.n	8003b5e <__aeabi_fdiv+0xc2>
 8003b6a:	ea40 000c 	orr.w	r0, r0, ip
 8003b6e:	f093 0f00 	teq	r3, #0
 8003b72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8003b76:	bf02      	ittt	eq
 8003b78:	0049      	lsleq	r1, r1, #1
 8003b7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8003b7e:	3b01      	subeq	r3, #1
 8003b80:	d0f9      	beq.n	8003b76 <__aeabi_fdiv+0xda>
 8003b82:	ea41 010c 	orr.w	r1, r1, ip
 8003b86:	e795      	b.n	8003ab4 <__aeabi_fdiv+0x18>
 8003b88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8003b8c:	ea92 0f0c 	teq	r2, ip
 8003b90:	d108      	bne.n	8003ba4 <__aeabi_fdiv+0x108>
 8003b92:	0242      	lsls	r2, r0, #9
 8003b94:	f47f af7d 	bne.w	8003a92 <__aeabi_fmul+0x15e>
 8003b98:	ea93 0f0c 	teq	r3, ip
 8003b9c:	f47f af70 	bne.w	8003a80 <__aeabi_fmul+0x14c>
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	e776      	b.n	8003a92 <__aeabi_fmul+0x15e>
 8003ba4:	ea93 0f0c 	teq	r3, ip
 8003ba8:	d104      	bne.n	8003bb4 <__aeabi_fdiv+0x118>
 8003baa:	024b      	lsls	r3, r1, #9
 8003bac:	f43f af4c 	beq.w	8003a48 <__aeabi_fmul+0x114>
 8003bb0:	4608      	mov	r0, r1
 8003bb2:	e76e      	b.n	8003a92 <__aeabi_fmul+0x15e>
 8003bb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8003bb8:	bf18      	it	ne
 8003bba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8003bbe:	d1ca      	bne.n	8003b56 <__aeabi_fdiv+0xba>
 8003bc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8003bc4:	f47f af5c 	bne.w	8003a80 <__aeabi_fmul+0x14c>
 8003bc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8003bcc:	f47f af3c 	bne.w	8003a48 <__aeabi_fmul+0x114>
 8003bd0:	e75f      	b.n	8003a92 <__aeabi_fmul+0x15e>
 8003bd2:	bf00      	nop

08003bd4 <__gesf2>:
 8003bd4:	f04f 3cff 	mov.w	ip, #4294967295
 8003bd8:	e006      	b.n	8003be8 <__cmpsf2+0x4>
 8003bda:	bf00      	nop

08003bdc <__lesf2>:
 8003bdc:	f04f 0c01 	mov.w	ip, #1
 8003be0:	e002      	b.n	8003be8 <__cmpsf2+0x4>
 8003be2:	bf00      	nop

08003be4 <__cmpsf2>:
 8003be4:	f04f 0c01 	mov.w	ip, #1
 8003be8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003bec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003bf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003bf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003bf8:	bf18      	it	ne
 8003bfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8003bfe:	d011      	beq.n	8003c24 <__cmpsf2+0x40>
 8003c00:	b001      	add	sp, #4
 8003c02:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8003c06:	bf18      	it	ne
 8003c08:	ea90 0f01 	teqne	r0, r1
 8003c0c:	bf58      	it	pl
 8003c0e:	ebb2 0003 	subspl.w	r0, r2, r3
 8003c12:	bf88      	it	hi
 8003c14:	17c8      	asrhi	r0, r1, #31
 8003c16:	bf38      	it	cc
 8003c18:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8003c1c:	bf18      	it	ne
 8003c1e:	f040 0001 	orrne.w	r0, r0, #1
 8003c22:	4770      	bx	lr
 8003c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003c28:	d102      	bne.n	8003c30 <__cmpsf2+0x4c>
 8003c2a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8003c2e:	d105      	bne.n	8003c3c <__cmpsf2+0x58>
 8003c30:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003c34:	d1e4      	bne.n	8003c00 <__cmpsf2+0x1c>
 8003c36:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8003c3a:	d0e1      	beq.n	8003c00 <__cmpsf2+0x1c>
 8003c3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop

08003c44 <__aeabi_cfrcmple>:
 8003c44:	4684      	mov	ip, r0
 8003c46:	4608      	mov	r0, r1
 8003c48:	4661      	mov	r1, ip
 8003c4a:	e7ff      	b.n	8003c4c <__aeabi_cfcmpeq>

08003c4c <__aeabi_cfcmpeq>:
 8003c4c:	b50f      	push	{r0, r1, r2, r3, lr}
 8003c4e:	f7ff ffc9 	bl	8003be4 <__cmpsf2>
 8003c52:	2800      	cmp	r0, #0
 8003c54:	bf48      	it	mi
 8003c56:	f110 0f00 	cmnmi.w	r0, #0
 8003c5a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08003c5c <__aeabi_fcmpeq>:
 8003c5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c60:	f7ff fff4 	bl	8003c4c <__aeabi_cfcmpeq>
 8003c64:	bf0c      	ite	eq
 8003c66:	2001      	moveq	r0, #1
 8003c68:	2000      	movne	r0, #0
 8003c6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c6e:	bf00      	nop

08003c70 <__aeabi_fcmplt>:
 8003c70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c74:	f7ff ffea 	bl	8003c4c <__aeabi_cfcmpeq>
 8003c78:	bf34      	ite	cc
 8003c7a:	2001      	movcc	r0, #1
 8003c7c:	2000      	movcs	r0, #0
 8003c7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c82:	bf00      	nop

08003c84 <__aeabi_fcmple>:
 8003c84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c88:	f7ff ffe0 	bl	8003c4c <__aeabi_cfcmpeq>
 8003c8c:	bf94      	ite	ls
 8003c8e:	2001      	movls	r0, #1
 8003c90:	2000      	movhi	r0, #0
 8003c92:	f85d fb08 	ldr.w	pc, [sp], #8
 8003c96:	bf00      	nop

08003c98 <__aeabi_fcmpge>:
 8003c98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003c9c:	f7ff ffd2 	bl	8003c44 <__aeabi_cfrcmple>
 8003ca0:	bf94      	ite	ls
 8003ca2:	2001      	movls	r0, #1
 8003ca4:	2000      	movhi	r0, #0
 8003ca6:	f85d fb08 	ldr.w	pc, [sp], #8
 8003caa:	bf00      	nop

08003cac <__aeabi_fcmpgt>:
 8003cac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003cb0:	f7ff ffc8 	bl	8003c44 <__aeabi_cfrcmple>
 8003cb4:	bf34      	ite	cc
 8003cb6:	2001      	movcc	r0, #1
 8003cb8:	2000      	movcs	r0, #0
 8003cba:	f85d fb08 	ldr.w	pc, [sp], #8
 8003cbe:	bf00      	nop

08003cc0 <__aeabi_fcmpun>:
 8003cc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003cc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8003cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8003ccc:	d102      	bne.n	8003cd4 <__aeabi_fcmpun+0x14>
 8003cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8003cd2:	d108      	bne.n	8003ce6 <__aeabi_fcmpun+0x26>
 8003cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8003cd8:	d102      	bne.n	8003ce0 <__aeabi_fcmpun+0x20>
 8003cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8003cde:	d102      	bne.n	8003ce6 <__aeabi_fcmpun+0x26>
 8003ce0:	f04f 0000 	mov.w	r0, #0
 8003ce4:	4770      	bx	lr
 8003ce6:	f04f 0001 	mov.w	r0, #1
 8003cea:	4770      	bx	lr

08003cec <__aeabi_f2iz>:
 8003cec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8003cf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8003cf4:	d30f      	bcc.n	8003d16 <__aeabi_f2iz+0x2a>
 8003cf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8003cfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8003cfe:	d90d      	bls.n	8003d1c <__aeabi_f2iz+0x30>
 8003d00:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8003d0c:	fa23 f002 	lsr.w	r0, r3, r2
 8003d10:	bf18      	it	ne
 8003d12:	4240      	negne	r0, r0
 8003d14:	4770      	bx	lr
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	4770      	bx	lr
 8003d1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8003d20:	d101      	bne.n	8003d26 <__aeabi_f2iz+0x3a>
 8003d22:	0242      	lsls	r2, r0, #9
 8003d24:	d105      	bne.n	8003d32 <__aeabi_f2iz+0x46>
 8003d26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8003d2a:	bf08      	it	eq
 8003d2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8003d30:	4770      	bx	lr
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	4770      	bx	lr

08003d38 <__aeabi_f2uiz>:
 8003d38:	0042      	lsls	r2, r0, #1
 8003d3a:	d20e      	bcs.n	8003d5a <__aeabi_f2uiz+0x22>
 8003d3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8003d40:	d30b      	bcc.n	8003d5a <__aeabi_f2uiz+0x22>
 8003d42:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8003d46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8003d4a:	d409      	bmi.n	8003d60 <__aeabi_f2uiz+0x28>
 8003d4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8003d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d54:	fa23 f002 	lsr.w	r0, r3, r2
 8003d58:	4770      	bx	lr
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	4770      	bx	lr
 8003d60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8003d64:	d101      	bne.n	8003d6a <__aeabi_f2uiz+0x32>
 8003d66:	0242      	lsls	r2, r0, #9
 8003d68:	d102      	bne.n	8003d70 <__aeabi_f2uiz+0x38>
 8003d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6e:	4770      	bx	lr
 8003d70:	f04f 0000 	mov.w	r0, #0
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop

08003d78 <__aeabi_ldivmod>:
 8003d78:	b97b      	cbnz	r3, 8003d9a <__aeabi_ldivmod+0x22>
 8003d7a:	b972      	cbnz	r2, 8003d9a <__aeabi_ldivmod+0x22>
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	bfbe      	ittt	lt
 8003d80:	2000      	movlt	r0, #0
 8003d82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8003d86:	e006      	blt.n	8003d96 <__aeabi_ldivmod+0x1e>
 8003d88:	bf08      	it	eq
 8003d8a:	2800      	cmpeq	r0, #0
 8003d8c:	bf1c      	itt	ne
 8003d8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8003d92:	f04f 30ff 	movne.w	r0, #4294967295
 8003d96:	f000 ba0d 	b.w	80041b4 <__aeabi_idiv0>
 8003d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8003d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003da2:	2900      	cmp	r1, #0
 8003da4:	db09      	blt.n	8003dba <__aeabi_ldivmod+0x42>
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	db1a      	blt.n	8003de0 <__aeabi_ldivmod+0x68>
 8003daa:	f000 f8a1 	bl	8003ef0 <__udivmoddi4>
 8003dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003db6:	b004      	add	sp, #16
 8003db8:	4770      	bx	lr
 8003dba:	4240      	negs	r0, r0
 8003dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	db1b      	blt.n	8003dfc <__aeabi_ldivmod+0x84>
 8003dc4:	f000 f894 	bl	8003ef0 <__udivmoddi4>
 8003dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dd0:	b004      	add	sp, #16
 8003dd2:	4240      	negs	r0, r0
 8003dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003dd8:	4252      	negs	r2, r2
 8003dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003dde:	4770      	bx	lr
 8003de0:	4252      	negs	r2, r2
 8003de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003de6:	f000 f883 	bl	8003ef0 <__udivmoddi4>
 8003dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003df2:	b004      	add	sp, #16
 8003df4:	4240      	negs	r0, r0
 8003df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003dfa:	4770      	bx	lr
 8003dfc:	4252      	negs	r2, r2
 8003dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003e02:	f000 f875 	bl	8003ef0 <__udivmoddi4>
 8003e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e0e:	b004      	add	sp, #16
 8003e10:	4252      	negs	r2, r2
 8003e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003e16:	4770      	bx	lr

08003e18 <__aeabi_f2lz>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	f7ff ff27 	bl	8003c70 <__aeabi_fcmplt>
 8003e22:	b920      	cbnz	r0, 8003e2e <__aeabi_f2lz+0x16>
 8003e24:	4620      	mov	r0, r4
 8003e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e2a:	f000 b823 	b.w	8003e74 <__aeabi_f2ulz>
 8003e2e:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 8003e32:	f000 f81f 	bl	8003e74 <__aeabi_f2ulz>
 8003e36:	4240      	negs	r0, r0
 8003e38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	bf00      	nop

08003e40 <__aeabi_d2lz>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	460c      	mov	r4, r1
 8003e44:	4605      	mov	r5, r0
 8003e46:	4621      	mov	r1, r4
 8003e48:	4628      	mov	r0, r5
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f7ff fb8d 	bl	800356c <__aeabi_dcmplt>
 8003e52:	b928      	cbnz	r0, 8003e60 <__aeabi_d2lz+0x20>
 8003e54:	4628      	mov	r0, r5
 8003e56:	4621      	mov	r1, r4
 8003e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e5c:	f000 b82a 	b.w	8003eb4 <__aeabi_d2ulz>
 8003e60:	4628      	mov	r0, r5
 8003e62:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8003e66:	f000 f825 	bl	8003eb4 <__aeabi_d2ulz>
 8003e6a:	4240      	negs	r0, r0
 8003e6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003e70:	bd38      	pop	{r3, r4, r5, pc}
 8003e72:	bf00      	nop

08003e74 <__aeabi_f2ulz>:
 8003e74:	b5d0      	push	{r4, r6, r7, lr}
 8003e76:	f7ff f8af 	bl	8002fd8 <__aeabi_f2d>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	4b0b      	ldr	r3, [pc, #44]	; (8003eac <__aeabi_f2ulz+0x38>)
 8003e7e:	4606      	mov	r6, r0
 8003e80:	460f      	mov	r7, r1
 8003e82:	f7ff f901 	bl	8003088 <__aeabi_dmul>
 8003e86:	f7ff fbd7 	bl	8003638 <__aeabi_d2uiz>
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	f7ff f882 	bl	8002f94 <__aeabi_ui2d>
 8003e90:	2200      	movs	r2, #0
 8003e92:	4b07      	ldr	r3, [pc, #28]	; (8003eb0 <__aeabi_f2ulz+0x3c>)
 8003e94:	f7ff f8f8 	bl	8003088 <__aeabi_dmul>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	4639      	mov	r1, r7
 8003ea0:	f7fe ff3a 	bl	8002d18 <__aeabi_dsub>
 8003ea4:	f7ff fbc8 	bl	8003638 <__aeabi_d2uiz>
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	bdd0      	pop	{r4, r6, r7, pc}
 8003eac:	3df00000 	.word	0x3df00000
 8003eb0:	41f00000 	.word	0x41f00000

08003eb4 <__aeabi_d2ulz>:
 8003eb4:	b5d0      	push	{r4, r6, r7, lr}
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <__aeabi_d2ulz+0x34>)
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460f      	mov	r7, r1
 8003ebe:	f7ff f8e3 	bl	8003088 <__aeabi_dmul>
 8003ec2:	f7ff fbb9 	bl	8003638 <__aeabi_d2uiz>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	f7ff f864 	bl	8002f94 <__aeabi_ui2d>
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <__aeabi_d2ulz+0x38>)
 8003ed0:	f7ff f8da 	bl	8003088 <__aeabi_dmul>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4630      	mov	r0, r6
 8003eda:	4639      	mov	r1, r7
 8003edc:	f7fe ff1c 	bl	8002d18 <__aeabi_dsub>
 8003ee0:	f7ff fbaa 	bl	8003638 <__aeabi_d2uiz>
 8003ee4:	4621      	mov	r1, r4
 8003ee6:	bdd0      	pop	{r4, r6, r7, pc}
 8003ee8:	3df00000 	.word	0x3df00000
 8003eec:	41f00000 	.word	0x41f00000

08003ef0 <__udivmoddi4>:
 8003ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef4:	9e08      	ldr	r6, [sp, #32]
 8003ef6:	460d      	mov	r5, r1
 8003ef8:	4604      	mov	r4, r0
 8003efa:	468e      	mov	lr, r1
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f040 8083 	bne.w	8004008 <__udivmoddi4+0x118>
 8003f02:	428a      	cmp	r2, r1
 8003f04:	4617      	mov	r7, r2
 8003f06:	d947      	bls.n	8003f98 <__udivmoddi4+0xa8>
 8003f08:	fab2 f382 	clz	r3, r2
 8003f0c:	b14b      	cbz	r3, 8003f22 <__udivmoddi4+0x32>
 8003f0e:	f1c3 0120 	rsb	r1, r3, #32
 8003f12:	fa05 fe03 	lsl.w	lr, r5, r3
 8003f16:	fa20 f101 	lsr.w	r1, r0, r1
 8003f1a:	409f      	lsls	r7, r3
 8003f1c:	ea41 0e0e 	orr.w	lr, r1, lr
 8003f20:	409c      	lsls	r4, r3
 8003f22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8003f26:	fbbe fcf8 	udiv	ip, lr, r8
 8003f2a:	fa1f f987 	uxth.w	r9, r7
 8003f2e:	fb08 e21c 	mls	r2, r8, ip, lr
 8003f32:	fb0c f009 	mul.w	r0, ip, r9
 8003f36:	0c21      	lsrs	r1, r4, #16
 8003f38:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8003f3c:	4290      	cmp	r0, r2
 8003f3e:	d90a      	bls.n	8003f56 <__udivmoddi4+0x66>
 8003f40:	18ba      	adds	r2, r7, r2
 8003f42:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003f46:	f080 8118 	bcs.w	800417a <__udivmoddi4+0x28a>
 8003f4a:	4290      	cmp	r0, r2
 8003f4c:	f240 8115 	bls.w	800417a <__udivmoddi4+0x28a>
 8003f50:	f1ac 0c02 	sub.w	ip, ip, #2
 8003f54:	443a      	add	r2, r7
 8003f56:	1a12      	subs	r2, r2, r0
 8003f58:	fbb2 f0f8 	udiv	r0, r2, r8
 8003f5c:	fb08 2210 	mls	r2, r8, r0, r2
 8003f60:	fb00 f109 	mul.w	r1, r0, r9
 8003f64:	b2a4      	uxth	r4, r4
 8003f66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003f6a:	42a1      	cmp	r1, r4
 8003f6c:	d909      	bls.n	8003f82 <__udivmoddi4+0x92>
 8003f6e:	193c      	adds	r4, r7, r4
 8003f70:	f100 32ff 	add.w	r2, r0, #4294967295
 8003f74:	f080 8103 	bcs.w	800417e <__udivmoddi4+0x28e>
 8003f78:	42a1      	cmp	r1, r4
 8003f7a:	f240 8100 	bls.w	800417e <__udivmoddi4+0x28e>
 8003f7e:	3802      	subs	r0, #2
 8003f80:	443c      	add	r4, r7
 8003f82:	1a64      	subs	r4, r4, r1
 8003f84:	2100      	movs	r1, #0
 8003f86:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8003f8a:	b11e      	cbz	r6, 8003f94 <__udivmoddi4+0xa4>
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	40dc      	lsrs	r4, r3
 8003f90:	e9c6 4200 	strd	r4, r2, [r6]
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	b902      	cbnz	r2, 8003f9c <__udivmoddi4+0xac>
 8003f9a:	deff      	udf	#255	; 0xff
 8003f9c:	fab2 f382 	clz	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d14f      	bne.n	8004044 <__udivmoddi4+0x154>
 8003fa4:	1a8d      	subs	r5, r1, r2
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003fac:	fa1f f882 	uxth.w	r8, r2
 8003fb0:	fbb5 fcfe 	udiv	ip, r5, lr
 8003fb4:	fb0e 551c 	mls	r5, lr, ip, r5
 8003fb8:	fb08 f00c 	mul.w	r0, r8, ip
 8003fbc:	0c22      	lsrs	r2, r4, #16
 8003fbe:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8003fc2:	42a8      	cmp	r0, r5
 8003fc4:	d907      	bls.n	8003fd6 <__udivmoddi4+0xe6>
 8003fc6:	197d      	adds	r5, r7, r5
 8003fc8:	f10c 32ff 	add.w	r2, ip, #4294967295
 8003fcc:	d202      	bcs.n	8003fd4 <__udivmoddi4+0xe4>
 8003fce:	42a8      	cmp	r0, r5
 8003fd0:	f200 80e9 	bhi.w	80041a6 <__udivmoddi4+0x2b6>
 8003fd4:	4694      	mov	ip, r2
 8003fd6:	1a2d      	subs	r5, r5, r0
 8003fd8:	fbb5 f0fe 	udiv	r0, r5, lr
 8003fdc:	fb0e 5510 	mls	r5, lr, r0, r5
 8003fe0:	fb08 f800 	mul.w	r8, r8, r0
 8003fe4:	b2a4      	uxth	r4, r4
 8003fe6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003fea:	45a0      	cmp	r8, r4
 8003fec:	d907      	bls.n	8003ffe <__udivmoddi4+0x10e>
 8003fee:	193c      	adds	r4, r7, r4
 8003ff0:	f100 32ff 	add.w	r2, r0, #4294967295
 8003ff4:	d202      	bcs.n	8003ffc <__udivmoddi4+0x10c>
 8003ff6:	45a0      	cmp	r8, r4
 8003ff8:	f200 80d9 	bhi.w	80041ae <__udivmoddi4+0x2be>
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	eba4 0408 	sub.w	r4, r4, r8
 8004002:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8004006:	e7c0      	b.n	8003f8a <__udivmoddi4+0x9a>
 8004008:	428b      	cmp	r3, r1
 800400a:	d908      	bls.n	800401e <__udivmoddi4+0x12e>
 800400c:	2e00      	cmp	r6, #0
 800400e:	f000 80b1 	beq.w	8004174 <__udivmoddi4+0x284>
 8004012:	2100      	movs	r1, #0
 8004014:	e9c6 0500 	strd	r0, r5, [r6]
 8004018:	4608      	mov	r0, r1
 800401a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401e:	fab3 f183 	clz	r1, r3
 8004022:	2900      	cmp	r1, #0
 8004024:	d14b      	bne.n	80040be <__udivmoddi4+0x1ce>
 8004026:	42ab      	cmp	r3, r5
 8004028:	d302      	bcc.n	8004030 <__udivmoddi4+0x140>
 800402a:	4282      	cmp	r2, r0
 800402c:	f200 80b9 	bhi.w	80041a2 <__udivmoddi4+0x2b2>
 8004030:	1a84      	subs	r4, r0, r2
 8004032:	eb65 0303 	sbc.w	r3, r5, r3
 8004036:	2001      	movs	r0, #1
 8004038:	469e      	mov	lr, r3
 800403a:	2e00      	cmp	r6, #0
 800403c:	d0aa      	beq.n	8003f94 <__udivmoddi4+0xa4>
 800403e:	e9c6 4e00 	strd	r4, lr, [r6]
 8004042:	e7a7      	b.n	8003f94 <__udivmoddi4+0xa4>
 8004044:	409f      	lsls	r7, r3
 8004046:	f1c3 0220 	rsb	r2, r3, #32
 800404a:	40d1      	lsrs	r1, r2
 800404c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8004050:	fbb1 f0fe 	udiv	r0, r1, lr
 8004054:	fa1f f887 	uxth.w	r8, r7
 8004058:	fb0e 1110 	mls	r1, lr, r0, r1
 800405c:	fa24 f202 	lsr.w	r2, r4, r2
 8004060:	409d      	lsls	r5, r3
 8004062:	fb00 fc08 	mul.w	ip, r0, r8
 8004066:	432a      	orrs	r2, r5
 8004068:	0c15      	lsrs	r5, r2, #16
 800406a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800406e:	45ac      	cmp	ip, r5
 8004070:	fa04 f403 	lsl.w	r4, r4, r3
 8004074:	d909      	bls.n	800408a <__udivmoddi4+0x19a>
 8004076:	197d      	adds	r5, r7, r5
 8004078:	f100 31ff 	add.w	r1, r0, #4294967295
 800407c:	f080 808f 	bcs.w	800419e <__udivmoddi4+0x2ae>
 8004080:	45ac      	cmp	ip, r5
 8004082:	f240 808c 	bls.w	800419e <__udivmoddi4+0x2ae>
 8004086:	3802      	subs	r0, #2
 8004088:	443d      	add	r5, r7
 800408a:	eba5 050c 	sub.w	r5, r5, ip
 800408e:	fbb5 f1fe 	udiv	r1, r5, lr
 8004092:	fb0e 5c11 	mls	ip, lr, r1, r5
 8004096:	fb01 f908 	mul.w	r9, r1, r8
 800409a:	b295      	uxth	r5, r2
 800409c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80040a0:	45a9      	cmp	r9, r5
 80040a2:	d907      	bls.n	80040b4 <__udivmoddi4+0x1c4>
 80040a4:	197d      	adds	r5, r7, r5
 80040a6:	f101 32ff 	add.w	r2, r1, #4294967295
 80040aa:	d274      	bcs.n	8004196 <__udivmoddi4+0x2a6>
 80040ac:	45a9      	cmp	r9, r5
 80040ae:	d972      	bls.n	8004196 <__udivmoddi4+0x2a6>
 80040b0:	3902      	subs	r1, #2
 80040b2:	443d      	add	r5, r7
 80040b4:	eba5 0509 	sub.w	r5, r5, r9
 80040b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80040bc:	e778      	b.n	8003fb0 <__udivmoddi4+0xc0>
 80040be:	f1c1 0720 	rsb	r7, r1, #32
 80040c2:	408b      	lsls	r3, r1
 80040c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80040c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80040cc:	fa25 f407 	lsr.w	r4, r5, r7
 80040d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80040d4:	fbb4 f9fe 	udiv	r9, r4, lr
 80040d8:	fa1f f88c 	uxth.w	r8, ip
 80040dc:	fb0e 4419 	mls	r4, lr, r9, r4
 80040e0:	fa20 f307 	lsr.w	r3, r0, r7
 80040e4:	fb09 fa08 	mul.w	sl, r9, r8
 80040e8:	408d      	lsls	r5, r1
 80040ea:	431d      	orrs	r5, r3
 80040ec:	0c2b      	lsrs	r3, r5, #16
 80040ee:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80040f2:	45a2      	cmp	sl, r4
 80040f4:	fa02 f201 	lsl.w	r2, r2, r1
 80040f8:	fa00 f301 	lsl.w	r3, r0, r1
 80040fc:	d909      	bls.n	8004112 <__udivmoddi4+0x222>
 80040fe:	eb1c 0404 	adds.w	r4, ip, r4
 8004102:	f109 30ff 	add.w	r0, r9, #4294967295
 8004106:	d248      	bcs.n	800419a <__udivmoddi4+0x2aa>
 8004108:	45a2      	cmp	sl, r4
 800410a:	d946      	bls.n	800419a <__udivmoddi4+0x2aa>
 800410c:	f1a9 0902 	sub.w	r9, r9, #2
 8004110:	4464      	add	r4, ip
 8004112:	eba4 040a 	sub.w	r4, r4, sl
 8004116:	fbb4 f0fe 	udiv	r0, r4, lr
 800411a:	fb0e 4410 	mls	r4, lr, r0, r4
 800411e:	fb00 fa08 	mul.w	sl, r0, r8
 8004122:	b2ad      	uxth	r5, r5
 8004124:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004128:	45a2      	cmp	sl, r4
 800412a:	d908      	bls.n	800413e <__udivmoddi4+0x24e>
 800412c:	eb1c 0404 	adds.w	r4, ip, r4
 8004130:	f100 35ff 	add.w	r5, r0, #4294967295
 8004134:	d22d      	bcs.n	8004192 <__udivmoddi4+0x2a2>
 8004136:	45a2      	cmp	sl, r4
 8004138:	d92b      	bls.n	8004192 <__udivmoddi4+0x2a2>
 800413a:	3802      	subs	r0, #2
 800413c:	4464      	add	r4, ip
 800413e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8004142:	fba0 8902 	umull	r8, r9, r0, r2
 8004146:	eba4 040a 	sub.w	r4, r4, sl
 800414a:	454c      	cmp	r4, r9
 800414c:	46c6      	mov	lr, r8
 800414e:	464d      	mov	r5, r9
 8004150:	d319      	bcc.n	8004186 <__udivmoddi4+0x296>
 8004152:	d016      	beq.n	8004182 <__udivmoddi4+0x292>
 8004154:	b15e      	cbz	r6, 800416e <__udivmoddi4+0x27e>
 8004156:	ebb3 020e 	subs.w	r2, r3, lr
 800415a:	eb64 0405 	sbc.w	r4, r4, r5
 800415e:	fa04 f707 	lsl.w	r7, r4, r7
 8004162:	fa22 f301 	lsr.w	r3, r2, r1
 8004166:	431f      	orrs	r7, r3
 8004168:	40cc      	lsrs	r4, r1
 800416a:	e9c6 7400 	strd	r7, r4, [r6]
 800416e:	2100      	movs	r1, #0
 8004170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004174:	4631      	mov	r1, r6
 8004176:	4630      	mov	r0, r6
 8004178:	e70c      	b.n	8003f94 <__udivmoddi4+0xa4>
 800417a:	468c      	mov	ip, r1
 800417c:	e6eb      	b.n	8003f56 <__udivmoddi4+0x66>
 800417e:	4610      	mov	r0, r2
 8004180:	e6ff      	b.n	8003f82 <__udivmoddi4+0x92>
 8004182:	4543      	cmp	r3, r8
 8004184:	d2e6      	bcs.n	8004154 <__udivmoddi4+0x264>
 8004186:	ebb8 0e02 	subs.w	lr, r8, r2
 800418a:	eb69 050c 	sbc.w	r5, r9, ip
 800418e:	3801      	subs	r0, #1
 8004190:	e7e0      	b.n	8004154 <__udivmoddi4+0x264>
 8004192:	4628      	mov	r0, r5
 8004194:	e7d3      	b.n	800413e <__udivmoddi4+0x24e>
 8004196:	4611      	mov	r1, r2
 8004198:	e78c      	b.n	80040b4 <__udivmoddi4+0x1c4>
 800419a:	4681      	mov	r9, r0
 800419c:	e7b9      	b.n	8004112 <__udivmoddi4+0x222>
 800419e:	4608      	mov	r0, r1
 80041a0:	e773      	b.n	800408a <__udivmoddi4+0x19a>
 80041a2:	4608      	mov	r0, r1
 80041a4:	e749      	b.n	800403a <__udivmoddi4+0x14a>
 80041a6:	f1ac 0c02 	sub.w	ip, ip, #2
 80041aa:	443d      	add	r5, r7
 80041ac:	e713      	b.n	8003fd6 <__udivmoddi4+0xe6>
 80041ae:	3802      	subs	r0, #2
 80041b0:	443c      	add	r4, r7
 80041b2:	e724      	b.n	8003ffe <__udivmoddi4+0x10e>

080041b4 <__aeabi_idiv0>:
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop

080041b8 <_write>:

#define PRINT_UART_HANDLE huart1

extern UART_HandleTypeDef PRINT_UART_HANDLE;
int _write(int fd, char *ptr, int len)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&PRINT_UART_HANDLE, (uint8_t *)ptr, len, 0xFFFF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041cc:	68b9      	ldr	r1, [r7, #8]
 80041ce:	4804      	ldr	r0, [pc, #16]	; (80041e0 <_write+0x28>)
 80041d0:	f005 feef 	bl	8009fb2 <HAL_UART_Transmit>
    return len;
 80041d4:	687b      	ldr	r3, [r7, #4]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20001010 	.word	0x20001010

080041e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041ea:	4b10      	ldr	r3, [pc, #64]	; (800422c <MX_DMA_Init+0x48>)
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4a0f      	ldr	r2, [pc, #60]	; (800422c <MX_DMA_Init+0x48>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6153      	str	r3, [r2, #20]
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <MX_DMA_Init+0x48>)
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	607b      	str	r3, [r7, #4]
 8004200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8004202:	2200      	movs	r2, #0
 8004204:	2105      	movs	r1, #5
 8004206:	2010      	movs	r0, #16
 8004208:	f001 fa59 	bl	80056be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800420c:	2010      	movs	r0, #16
 800420e:	f001 fa72 	bl	80056f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8004212:	2200      	movs	r2, #0
 8004214:	2105      	movs	r1, #5
 8004216:	2011      	movs	r0, #17
 8004218:	f001 fa51 	bl	80056be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800421c:	2011      	movs	r0, #17
 800421e:	f001 fa6a 	bl	80056f6 <HAL_NVIC_EnableIRQ>

}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000

08004230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004236:	f107 0308 	add.w	r3, r7, #8
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004244:	4b18      	ldr	r3, [pc, #96]	; (80042a8 <MX_GPIO_Init+0x78>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <MX_GPIO_Init+0x78>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	6193      	str	r3, [r2, #24]
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <MX_GPIO_Init+0x78>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <MX_GPIO_Init+0x78>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <MX_GPIO_Init+0x78>)
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6193      	str	r3, [r2, #24]
 8004268:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <MX_GPIO_Init+0x78>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 8004274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004278:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <MX_GPIO_Init+0x7c>)
 800427c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 8004282:	f107 0308 	add.w	r3, r7, #8
 8004286:	4619      	mov	r1, r3
 8004288:	4809      	ldr	r0, [pc, #36]	; (80042b0 <MX_GPIO_Init+0x80>)
 800428a:	f001 fec9 	bl	8006020 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800428e:	2200      	movs	r2, #0
 8004290:	2105      	movs	r1, #5
 8004292:	2028      	movs	r0, #40	; 0x28
 8004294:	f001 fa13 	bl	80056be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004298:	2028      	movs	r0, #40	; 0x28
 800429a:	f001 fa2c 	bl	80056f6 <HAL_NVIC_EnableIRQ>

}
 800429e:	bf00      	nop
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40021000 	.word	0x40021000
 80042ac:	10110000 	.word	0x10110000
 80042b0:	40010800 	.word	0x40010800

080042b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <MX_I2C1_Init+0x50>)
 80042ba:	4a13      	ldr	r2, [pc, #76]	; (8004308 <MX_I2C1_Init+0x54>)
 80042bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <MX_I2C1_Init+0x50>)
 80042c0:	4a12      	ldr	r2, [pc, #72]	; (800430c <MX_I2C1_Init+0x58>)
 80042c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <MX_I2C1_Init+0x50>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 20;
 80042ca:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <MX_I2C1_Init+0x50>)
 80042cc:	2214      	movs	r2, #20
 80042ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <MX_I2C1_Init+0x50>)
 80042d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <MX_I2C1_Init+0x50>)
 80042da:	2200      	movs	r2, #0
 80042dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <MX_I2C1_Init+0x50>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <MX_I2C1_Init+0x50>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042ea:	4b06      	ldr	r3, [pc, #24]	; (8004304 <MX_I2C1_Init+0x50>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80042f0:	4804      	ldr	r0, [pc, #16]	; (8004304 <MX_I2C1_Init+0x50>)
 80042f2:	f002 f917 	bl	8006524 <HAL_I2C_Init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80042fc:	f000 fe70 	bl	8004fe0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000f30 	.word	0x20000f30
 8004308:	40005400 	.word	0x40005400
 800430c:	00061a80 	.word	0x00061a80

08004310 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0310 	add.w	r3, r7, #16
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a45      	ldr	r2, [pc, #276]	; (8004440 <HAL_I2C_MspInit+0x130>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f040 8082 	bne.w	8004436 <HAL_I2C_MspInit+0x126>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004332:	4b44      	ldr	r3, [pc, #272]	; (8004444 <HAL_I2C_MspInit+0x134>)
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	4a43      	ldr	r2, [pc, #268]	; (8004444 <HAL_I2C_MspInit+0x134>)
 8004338:	f043 0308 	orr.w	r3, r3, #8
 800433c:	6193      	str	r3, [r2, #24]
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <HAL_I2C_MspInit+0x134>)
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800434a:	23c0      	movs	r3, #192	; 0xc0
 800434c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800434e:	2312      	movs	r3, #18
 8004350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004352:	2303      	movs	r3, #3
 8004354:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004356:	f107 0310 	add.w	r3, r7, #16
 800435a:	4619      	mov	r1, r3
 800435c:	483a      	ldr	r0, [pc, #232]	; (8004448 <HAL_I2C_MspInit+0x138>)
 800435e:	f001 fe5f 	bl	8006020 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004362:	4b38      	ldr	r3, [pc, #224]	; (8004444 <HAL_I2C_MspInit+0x134>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4a37      	ldr	r2, [pc, #220]	; (8004444 <HAL_I2C_MspInit+0x134>)
 8004368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800436c:	61d3      	str	r3, [r2, #28]
 800436e:	4b35      	ldr	r3, [pc, #212]	; (8004444 <HAL_I2C_MspInit+0x134>)
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004376:	60bb      	str	r3, [r7, #8]
 8004378:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800437a:	4b34      	ldr	r3, [pc, #208]	; (800444c <HAL_I2C_MspInit+0x13c>)
 800437c:	4a34      	ldr	r2, [pc, #208]	; (8004450 <HAL_I2C_MspInit+0x140>)
 800437e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_I2C_MspInit+0x13c>)
 8004382:	2200      	movs	r2, #0
 8004384:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004386:	4b31      	ldr	r3, [pc, #196]	; (800444c <HAL_I2C_MspInit+0x13c>)
 8004388:	2200      	movs	r2, #0
 800438a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <HAL_I2C_MspInit+0x13c>)
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <HAL_I2C_MspInit+0x13c>)
 8004394:	2200      	movs	r2, #0
 8004396:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004398:	4b2c      	ldr	r3, [pc, #176]	; (800444c <HAL_I2C_MspInit+0x13c>)
 800439a:	2200      	movs	r2, #0
 800439c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800439e:	4b2b      	ldr	r3, [pc, #172]	; (800444c <HAL_I2C_MspInit+0x13c>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043a4:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_I2C_MspInit+0x13c>)
 80043a6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80043aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80043ac:	4827      	ldr	r0, [pc, #156]	; (800444c <HAL_I2C_MspInit+0x13c>)
 80043ae:	f001 f9bf 	bl	8005730 <HAL_DMA_Init>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_I2C_MspInit+0xac>
    {
      Error_Handler();
 80043b8:	f000 fe12 	bl	8004fe0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a23      	ldr	r2, [pc, #140]	; (800444c <HAL_I2C_MspInit+0x13c>)
 80043c0:	639a      	str	r2, [r3, #56]	; 0x38
 80043c2:	4a22      	ldr	r2, [pc, #136]	; (800444c <HAL_I2C_MspInit+0x13c>)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043ca:	4a23      	ldr	r2, [pc, #140]	; (8004458 <HAL_I2C_MspInit+0x148>)
 80043cc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043d0:	2210      	movs	r2, #16
 80043d2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043d4:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043e0:	4b1c      	ldr	r3, [pc, #112]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e6:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80043ec:	4b19      	ldr	r3, [pc, #100]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043f2:	4b18      	ldr	r3, [pc, #96]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043f4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80043f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80043fa:	4816      	ldr	r0, [pc, #88]	; (8004454 <HAL_I2C_MspInit+0x144>)
 80043fc:	f001 f998 	bl	8005730 <HAL_DMA_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 8004406:	f000 fdeb 	bl	8004fe0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a11      	ldr	r2, [pc, #68]	; (8004454 <HAL_I2C_MspInit+0x144>)
 800440e:	635a      	str	r2, [r3, #52]	; 0x34
 8004410:	4a10      	ldr	r2, [pc, #64]	; (8004454 <HAL_I2C_MspInit+0x144>)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	2105      	movs	r1, #5
 800441a:	201f      	movs	r0, #31
 800441c:	f001 f94f 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004420:	201f      	movs	r0, #31
 8004422:	f001 f968 	bl	80056f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8004426:	2200      	movs	r2, #0
 8004428:	2105      	movs	r1, #5
 800442a:	2020      	movs	r0, #32
 800442c:	f001 f947 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004430:	2020      	movs	r0, #32
 8004432:	f001 f960 	bl	80056f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004436:	bf00      	nop
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40005400 	.word	0x40005400
 8004444:	40021000 	.word	0x40021000
 8004448:	40010c00 	.word	0x40010c00
 800444c:	20000f84 	.word	0x20000f84
 8004450:	40020080 	.word	0x40020080
 8004454:	20000eec 	.word	0x20000eec
 8004458:	4002006c 	.word	0x4002006c

0800445c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <HAL_I2C_MspDeInit+0x58>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d11d      	bne.n	80044aa <HAL_I2C_MspDeInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_I2C_MspDeInit+0x5c>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <HAL_I2C_MspDeInit+0x5c>)
 8004474:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004478:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800447a:	2140      	movs	r1, #64	; 0x40
 800447c:	480f      	ldr	r0, [pc, #60]	; (80044bc <HAL_I2C_MspDeInit+0x60>)
 800447e:	f001 ff63 	bl	8006348 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	480d      	ldr	r0, [pc, #52]	; (80044bc <HAL_I2C_MspDeInit+0x60>)
 8004486:	f001 ff5f 	bl	8006348 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(i2cHandle->hdmarx);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	4618      	mov	r0, r3
 8004490:	f001 f9c4 	bl	800581c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(i2cHandle->hdmatx);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f9bf 	bl	800581c <HAL_DMA_DeInit>

    /* I2C1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800449e:	201f      	movs	r0, #31
 80044a0:	f001 f937 	bl	8005712 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80044a4:	2020      	movs	r0, #32
 80044a6:	f001 f934 	bl	8005712 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40005400 	.word	0x40005400
 80044b8:	40021000 	.word	0x40021000
 80044bc:	40010c00 	.word	0x40010c00

080044c0 <usart_send_char>:
 * @brief  控制串口发送1个字符
 * @param  c:要发送的字符
 * @retval none
 */
void usart_send_char(uint8_t c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart1, &c, 1, 0xff);
 80044ca:	1df9      	adds	r1, r7, #7
 80044cc:	23ff      	movs	r3, #255	; 0xff
 80044ce:	2201      	movs	r2, #1
 80044d0:	4803      	ldr	r0, [pc, #12]	; (80044e0 <usart_send_char+0x20>)
 80044d2:	f005 fd6e 	bl	8009fb2 <HAL_UART_Transmit>
    // while (USART_GetFlagStatus(DEBUG_USARTx, USART_FLAG_TXE) == RESET)
    //     ; //循环发送,直到发送完毕
    // USART_SendData(DEBUG_USARTx, c);
}
 80044d6:	bf00      	nop
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20001010 	.word	0x20001010

080044e4 <Data_Send_Status>:

/*函数功能：根据匿名最新上位机协议写的显示姿态的程序（上位机0512版本）
 *具体协议说明请查看上位机软件的帮助说明。
 */
void Data_Send_Status(float Pitch, float Roll, float Yaw)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b094      	sub	sp, #80	; 0x50
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]

#ifdef PRINT_INSTAND_SWJ
    printf("PIT:%4.1f  ROL:%4.1f  YAW:%4.1f  \n", Pitch, Roll, Yaw);
#else
    unsigned char i = 0;
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    unsigned char _cnt = 0, sum = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80044fc:	2300      	movs	r3, #0
 80044fe:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    unsigned int _temp;
    uint8_t data_to_send[50];
    data_to_send[_cnt++] = 0xAA;
 8004502:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 800450c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004510:	4413      	add	r3, r2
 8004512:	22aa      	movs	r2, #170	; 0xaa
 8004514:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = 0xAA;
 8004518:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8004522:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004526:	4413      	add	r3, r2
 8004528:	22aa      	movs	r2, #170	; 0xaa
 800452a:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = 0x01;
 800452e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8004538:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800453c:	4413      	add	r3, r2
 800453e:	2201      	movs	r2, #1
 8004540:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = 0;
 8004544:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 800454e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004552:	4413      	add	r3, r2
 8004554:	2200      	movs	r2, #0
 8004556:	f803 2c3c 	strb.w	r2, [r3, #-60]

    _temp = (int)(Roll * 100);
 800455a:	4982      	ldr	r1, [pc, #520]	; (8004764 <Data_Send_Status+0x280>)
 800455c:	68b8      	ldr	r0, [r7, #8]
 800455e:	f7ff f9e9 	bl	8003934 <__aeabi_fmul>
 8004562:	4603      	mov	r3, r0
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fbc1 	bl	8003cec <__aeabi_f2iz>
 800456a:	4603      	mov	r3, r0
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
    data_to_send[_cnt++] = BYTE1(_temp);
 800456e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004572:	3301      	adds	r3, #1
 8004574:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004578:	1c51      	adds	r1, r2, #1
 800457a:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 800457e:	4611      	mov	r1, r2
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004586:	440b      	add	r3, r1
 8004588:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = BYTE0(_temp);
 800458c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004590:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004594:	1c59      	adds	r1, r3, #1
 8004596:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 800459a:	7812      	ldrb	r2, [r2, #0]
 800459c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80045a0:	440b      	add	r3, r1
 80045a2:	f803 2c3c 	strb.w	r2, [r3, #-60]
    _temp = 0 - (int)(Pitch * 100);
 80045a6:	496f      	ldr	r1, [pc, #444]	; (8004764 <Data_Send_Status+0x280>)
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f7ff f9c3 	bl	8003934 <__aeabi_fmul>
 80045ae:	4603      	mov	r3, r0
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fb9b 	bl	8003cec <__aeabi_f2iz>
 80045b6:	4603      	mov	r3, r0
 80045b8:	425b      	negs	r3, r3
 80045ba:	64bb      	str	r3, [r7, #72]	; 0x48
    data_to_send[_cnt++] = BYTE1(_temp);
 80045bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045c0:	3301      	adds	r3, #1
 80045c2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80045c6:	1c51      	adds	r1, r2, #1
 80045c8:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 80045cc:	4611      	mov	r1, r2
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80045d4:	440b      	add	r3, r1
 80045d6:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = BYTE0(_temp);
 80045da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80045e2:	1c59      	adds	r1, r3, #1
 80045e4:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80045ee:	440b      	add	r3, r1
 80045f0:	f803 2c3c 	strb.w	r2, [r3, #-60]
    _temp = (int)(Yaw * 100);
 80045f4:	495b      	ldr	r1, [pc, #364]	; (8004764 <Data_Send_Status+0x280>)
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff f99c 	bl	8003934 <__aeabi_fmul>
 80045fc:	4603      	mov	r3, r0
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fb74 	bl	8003cec <__aeabi_f2iz>
 8004604:	4603      	mov	r3, r0
 8004606:	64bb      	str	r3, [r7, #72]	; 0x48
    data_to_send[_cnt++] = BYTE1(_temp);
 8004608:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800460c:	3301      	adds	r3, #1
 800460e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004612:	1c51      	adds	r1, r2, #1
 8004614:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 8004618:	4611      	mov	r1, r2
 800461a:	781a      	ldrb	r2, [r3, #0]
 800461c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004620:	440b      	add	r3, r1
 8004622:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = BYTE0(_temp);
 8004626:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800462a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800462e:	1c59      	adds	r1, r3, #1
 8004630:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800463a:	440b      	add	r3, r1
 800463c:	f803 2c3c 	strb.w	r2, [r3, #-60]
    _temp = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	64bb      	str	r3, [r7, #72]	; 0x48
    data_to_send[_cnt++] = BYTE3(_temp);
 8004644:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004648:	3303      	adds	r3, #3
 800464a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800464e:	1c51      	adds	r1, r2, #1
 8004650:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 8004654:	4611      	mov	r1, r2
 8004656:	781a      	ldrb	r2, [r3, #0]
 8004658:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800465c:	440b      	add	r3, r1
 800465e:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = BYTE2(_temp);
 8004662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004666:	3302      	adds	r3, #2
 8004668:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800466c:	1c51      	adds	r1, r2, #1
 800466e:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 8004672:	4611      	mov	r1, r2
 8004674:	781a      	ldrb	r2, [r3, #0]
 8004676:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800467a:	440b      	add	r3, r1
 800467c:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = BYTE1(_temp);
 8004680:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004684:	3301      	adds	r3, #1
 8004686:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800468a:	1c51      	adds	r1, r2, #1
 800468c:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 8004690:	4611      	mov	r1, r2
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004698:	440b      	add	r3, r1
 800469a:	f803 2c3c 	strb.w	r2, [r3, #-60]
    data_to_send[_cnt++] = BYTE0(_temp);
 800469e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	f887 104d 	strb.w	r1, [r7, #77]	; 0x4d
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80046b2:	440b      	add	r3, r1
 80046b4:	f803 2c3c 	strb.w	r2, [r3, #-60]

    data_to_send[_cnt++] = 0xA0;
 80046b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 80046c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046c6:	4413      	add	r3, r2
 80046c8:	22a0      	movs	r2, #160	; 0xa0
 80046ca:	f803 2c3c 	strb.w	r2, [r3, #-60]

    data_to_send[3] = _cnt - 4;
 80046ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046d2:	3b04      	subs	r3, #4
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	75fb      	strb	r3, [r7, #23]
    //和校验
    for (i = 0; i < _cnt; i++)
 80046d8:	2300      	movs	r3, #0
 80046da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80046de:	e010      	b.n	8004702 <Data_Send_Status+0x21e>
        sum += data_to_send[i];
 80046e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80046e4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046e8:	4413      	add	r3, r2
 80046ea:	f813 2c3c 	ldrb.w	r2, [r3, #-60]
 80046ee:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80046f2:	4413      	add	r3, r2
 80046f4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    for (i = 0; i < _cnt; i++)
 80046f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80046fc:	3301      	adds	r3, #1
 80046fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004702:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004706:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800470a:	429a      	cmp	r2, r3
 800470c:	d3e8      	bcc.n	80046e0 <Data_Send_Status+0x1fc>
    data_to_send[_cnt++] = sum;
 800470e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8004718:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800471c:	4413      	add	r3, r2
 800471e:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8004722:	f803 2c3c 	strb.w	r2, [r3, #-60]

    //串口发送数据
    for (i = 0; i < _cnt; i++)
 8004726:	2300      	movs	r3, #0
 8004728:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800472c:	e00e      	b.n	800474c <Data_Send_Status+0x268>
        usart_send_char(data_to_send[i]);
 800472e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004732:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004736:	4413      	add	r3, r2
 8004738:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff febf 	bl	80044c0 <usart_send_char>
    for (i = 0; i < _cnt; i++)
 8004742:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004746:	3301      	adds	r3, #1
 8004748:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800474c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004750:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004754:	429a      	cmp	r2, r3
 8004756:	d3ea      	bcc.n	800472e <Data_Send_Status+0x24a>
#endif
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	3750      	adds	r7, #80	; 0x50
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	42c80000 	.word	0x42c80000

08004768 <Send_Data>:

/*函数功能：根据匿名最新上位机协议写的显示传感器数据（上位机0512版本）
 *具体协议说明请查看上位机软件的帮助说明。
 */
void Send_Data(int16_t *Gyro, int16_t *Accel)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b090      	sub	sp, #64	; 0x40
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]

#ifdef PRINT_INSTAND_SWJ
    // printf("加速度: X%5d\tY%5d\tZ%5d || 角加速度: X%5d\tY%5d\tZ%5d\n", Accel[0], Accel[1], Accel[2], Gyro[0],
    // Gyro[1], Gyro[2]);
#else
    unsigned char i = 0;
 8004772:	2300      	movs	r3, #0
 8004774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    unsigned char _cnt = 0, sum = 0;
 8004778:	2300      	movs	r3, #0
 800477a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800477e:	2300      	movs	r3, #0
 8004780:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    //	unsigned int _temp;
    uint8_t data_to_send[50];
    data_to_send[_cnt++] = 0xAA;
 8004784:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 800478e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004792:	4413      	add	r3, r2
 8004794:	22aa      	movs	r2, #170	; 0xaa
 8004796:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0xAA;
 800479a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80047a4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80047a8:	4413      	add	r3, r2
 80047aa:	22aa      	movs	r2, #170	; 0xaa
 80047ac:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0x02;
 80047b0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80047ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80047be:	4413      	add	r3, r2
 80047c0:	2202      	movs	r2, #2
 80047c2:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0;
 80047c6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80047d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80047d4:	4413      	add	r3, r2
 80047d6:	2200      	movs	r2, #0
 80047d8:	f803 2c38 	strb.w	r2, [r3, #-56]

    data_to_send[_cnt++] = BYTE1(Accel[0]);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80047e4:	1c59      	adds	r1, r3, #1
 80047e6:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 80047ea:	7812      	ldrb	r2, [r2, #0]
 80047ec:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80047f0:	440b      	add	r3, r1
 80047f2:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE0(Accel[0]);
 80047f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8004800:	4619      	mov	r1, r3
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800480a:	440b      	add	r3, r1
 800480c:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE1(Accel[1]);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	3302      	adds	r3, #2
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004826:	440b      	add	r3, r1
 8004828:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE0(Accel[1]);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1c9a      	adds	r2, r3, #2
 8004830:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004834:	1c59      	adds	r1, r3, #1
 8004836:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004840:	440b      	add	r3, r1
 8004842:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE1(Accel[2]);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	3304      	adds	r3, #4
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004850:	1c59      	adds	r1, r3, #1
 8004852:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800485c:	440b      	add	r3, r1
 800485e:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE0(Accel[2]);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	1d1a      	adds	r2, r3, #4
 8004866:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800486a:	1c59      	adds	r1, r3, #1
 800486c:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 8004870:	7812      	ldrb	r2, [r2, #0]
 8004872:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004876:	440b      	add	r3, r1
 8004878:	f803 2c38 	strb.w	r2, [r3, #-56]

    data_to_send[_cnt++] = BYTE1(Gyro[0]);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004884:	1c59      	adds	r1, r3, #1
 8004886:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004890:	440b      	add	r3, r1
 8004892:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE0(Gyro[0]);
 8004896:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80048a0:	4619      	mov	r1, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	781a      	ldrb	r2, [r3, #0]
 80048a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048aa:	440b      	add	r3, r1
 80048ac:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE1(Gyro[1]);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3302      	adds	r3, #2
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80048ba:	1c59      	adds	r1, r3, #1
 80048bc:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 80048c0:	7812      	ldrb	r2, [r2, #0]
 80048c2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80048c6:	440b      	add	r3, r1
 80048c8:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE0(Gyro[1]);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1c9a      	adds	r2, r3, #2
 80048d0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80048d4:	1c59      	adds	r1, r3, #1
 80048d6:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80048e0:	440b      	add	r3, r1
 80048e2:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE1(Gyro[2]);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80048f0:	1c59      	adds	r1, r3, #1
 80048f2:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 80048f6:	7812      	ldrb	r2, [r2, #0]
 80048f8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80048fc:	440b      	add	r3, r1
 80048fe:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = BYTE0(Gyro[2]);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	1d1a      	adds	r2, r3, #4
 8004906:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	f887 103d 	strb.w	r1, [r7, #61]	; 0x3d
 8004910:	7812      	ldrb	r2, [r2, #0]
 8004912:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004916:	440b      	add	r3, r1
 8004918:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0;
 800491c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8004926:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800492a:	4413      	add	r3, r2
 800492c:	2200      	movs	r2, #0
 800492e:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0;
 8004932:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 800493c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004940:	4413      	add	r3, r2
 8004942:	2200      	movs	r2, #0
 8004944:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0;
 8004948:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8004952:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004956:	4413      	add	r3, r2
 8004958:	2200      	movs	r2, #0
 800495a:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0;
 800495e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8004968:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800496c:	4413      	add	r3, r2
 800496e:	2200      	movs	r2, #0
 8004970:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0;
 8004974:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 800497e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004982:	4413      	add	r3, r2
 8004984:	2200      	movs	r2, #0
 8004986:	f803 2c38 	strb.w	r2, [r3, #-56]
    data_to_send[_cnt++] = 0;
 800498a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8004994:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	f803 2c38 	strb.w	r2, [r3, #-56]

    data_to_send[3] = _cnt - 4;
 80049a0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80049a4:	3b04      	subs	r3, #4
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	72fb      	strb	r3, [r7, #11]
    //和校验
    for (i = 0; i < _cnt; i++)
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049b0:	e010      	b.n	80049d4 <Send_Data+0x26c>
        sum += data_to_send[i];
 80049b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80049ba:	4413      	add	r3, r2
 80049bc:	f813 2c38 	ldrb.w	r2, [r3, #-56]
 80049c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80049c4:	4413      	add	r3, r2
 80049c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    for (i = 0; i < _cnt; i++)
 80049ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80049ce:	3301      	adds	r3, #1
 80049d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049d4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80049d8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3e8      	bcc.n	80049b2 <Send_Data+0x24a>
    data_to_send[_cnt++] = sum;
 80049e0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80049ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80049ee:	4413      	add	r3, r2
 80049f0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80049f4:	f803 2c38 	strb.w	r2, [r3, #-56]

    //串口发送数据
    for (i = 0; i < _cnt; i++)
 80049f8:	2300      	movs	r3, #0
 80049fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80049fe:	e00e      	b.n	8004a1e <Send_Data+0x2b6>
        usart_send_char(data_to_send[i]);
 8004a00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a04:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004a08:	4413      	add	r3, r2
 8004a0a:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff fd56 	bl	80044c0 <usart_send_char>
    for (i = 0; i < _cnt; i++)
 8004a14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004a1e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004a22:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d3ea      	bcc.n	8004a00 <Send_Data+0x298>
#endif
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	3740      	adds	r7, #64	; 0x40
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <read_from_mpl>:
/* Get data from MPL.
 * TODO: Add return values to the inv_get_sensor_type_xxx APIs to differentiate
 * between new and stale data.
 */
static void read_from_mpl(void)
{
 8004a34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a38:	b09c      	sub	sp, #112	; 0x70
 8004a3a:	af04      	add	r7, sp, #16
    long msg, data[9];
    int8_t accuracy;
    unsigned long timestamp;
    float float_data[3] = {0};
 8004a3c:	f107 0318 	add.w	r3, r7, #24
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	609a      	str	r2, [r3, #8]

    //    MPU_DEBUG_FUNC();
    if (inv_get_sensor_type_quat(data, &accuracy, (inv_time_t *)&timestamp))
 8004a48:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004a4c:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a54:	4618      	mov	r0, r3
 8004a56:	f008 f9f5 	bl	800ce44 <inv_get_sensor_type_quat>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d010      	beq.n	8004a82 <read_from_mpl+0x4e>
    {
        /* Sends a quaternion packet to the PC. Since this is used by the Python
         * test app to visually represent a 3D quaternion, it's sent each time
         * the MPL has new data.
         */
        eMPL_send_quat(data);
 8004a60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a64:	4618      	mov	r0, r3
 8004a66:	f008 f809 	bl	800ca7c <eMPL_send_quat>

        /* Specific data packets can be sent or suppressed using USB commands. */
        if (hal.report & PRINT_QUAT)
 8004a6a:	4bbf      	ldr	r3, [pc, #764]	; (8004d68 <read_from_mpl+0x334>)
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <read_from_mpl+0x4e>
            eMPL_send_data(PACKET_DATA_QUAT, data);
 8004a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	2003      	movs	r0, #3
 8004a7e:	f008 f887 	bl	800cb90 <eMPL_send_data>
    }

    if (hal.report & PRINT_ACCEL)
 8004a82:	4bb9      	ldr	r3, [pc, #740]	; (8004d68 <read_from_mpl+0x334>)
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d011      	beq.n	8004ab2 <read_from_mpl+0x7e>
    {
        if (inv_get_sensor_type_accel(data, &accuracy, (inv_time_t *)&timestamp))
 8004a8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004a92:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004a96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f008 f99e 	bl	800cddc <inv_get_sensor_type_accel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d005      	beq.n	8004ab2 <read_from_mpl+0x7e>
            eMPL_send_data(PACKET_DATA_ACCEL, data);
 8004aa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aaa:	4619      	mov	r1, r3
 8004aac:	2000      	movs	r0, #0
 8004aae:	f008 f86f 	bl	800cb90 <eMPL_send_data>
    }
    if (hal.report & PRINT_GYRO)
 8004ab2:	4bad      	ldr	r3, [pc, #692]	; (8004d68 <read_from_mpl+0x334>)
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d011      	beq.n	8004ae2 <read_from_mpl+0xae>
    {
        if (inv_get_sensor_type_gyro(data, &accuracy, (inv_time_t *)&timestamp))
 8004abe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004ac2:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004ac6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004aca:	4618      	mov	r0, r3
 8004acc:	f008 f9a0 	bl	800ce10 <inv_get_sensor_type_gyro>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <read_from_mpl+0xae>
            eMPL_send_data(PACKET_DATA_GYRO, data);
 8004ad6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ada:	4619      	mov	r1, r3
 8004adc:	2001      	movs	r0, #1
 8004ade:	f008 f857 	bl	800cb90 <eMPL_send_data>
    {
        if (inv_get_sensor_type_compass(data, &accuracy, (inv_time_t *)&timestamp))
            eMPL_send_data(PACKET_DATA_COMPASS, data);
    }
#endif
    if (hal.report & PRINT_EULER)
 8004ae2:	4ba1      	ldr	r3, [pc, #644]	; (8004d68 <read_from_mpl+0x334>)
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d011      	beq.n	8004b12 <read_from_mpl+0xde>
    {
        if (inv_get_sensor_type_euler(data, &accuracy, (inv_time_t *)&timestamp))
 8004aee:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004af2:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004afa:	4618      	mov	r0, r3
 8004afc:	f008 fa3c 	bl	800cf78 <inv_get_sensor_type_euler>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <read_from_mpl+0xde>
            eMPL_send_data(PACKET_DATA_EULER, data);
 8004b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	2004      	movs	r0, #4
 8004b0e:	f008 f83f 	bl	800cb90 <eMPL_send_data>
#endif

        unsigned long timestamp, step_count, walk_time;

        /*获取欧拉角*/
        if (inv_get_sensor_type_euler(data, &accuracy, (inv_time_t *)&timestamp))
 8004b12:	f107 0214 	add.w	r2, r7, #20
 8004b16:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004b1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f008 fa2a 	bl	800cf78 <inv_get_sensor_type_euler>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03b      	beq.n	8004ba2 <read_from_mpl+0x16e>
        {
            float Pitch, Roll, Yaw;
            Pitch = data[0] * 1.0 / (1 << 16);
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe fa41 	bl	8002fb4 <__aeabi_i2d>
 8004b32:	f04f 0200 	mov.w	r2, #0
 8004b36:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <read_from_mpl+0x338>)
 8004b38:	f7fe fbd0 	bl	80032dc <__aeabi_ddiv>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4610      	mov	r0, r2
 8004b42:	4619      	mov	r1, r3
 8004b44:	f7fe fd98 	bl	8003678 <__aeabi_d2f>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
            Roll = data[1] * 1.0 / (1 << 16);
 8004b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fa30 	bl	8002fb4 <__aeabi_i2d>
 8004b54:	f04f 0200 	mov.w	r2, #0
 8004b58:	4b84      	ldr	r3, [pc, #528]	; (8004d6c <read_from_mpl+0x338>)
 8004b5a:	f7fe fbbf 	bl	80032dc <__aeabi_ddiv>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	460b      	mov	r3, r1
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	f7fe fd87 	bl	8003678 <__aeabi_d2f>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	65bb      	str	r3, [r7, #88]	; 0x58
            Yaw = data[2] * 1.0 / (1 << 16);
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fa1f 	bl	8002fb4 <__aeabi_i2d>
 8004b76:	f04f 0200 	mov.w	r2, #0
 8004b7a:	4b7c      	ldr	r3, [pc, #496]	; (8004d6c <read_from_mpl+0x338>)
 8004b7c:	f7fe fbae 	bl	80032dc <__aeabi_ddiv>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4610      	mov	r0, r2
 8004b86:	4619      	mov	r1, r3
 8004b88:	f7fe fd76 	bl	8003678 <__aeabi_d2f>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	657b      	str	r3, [r7, #84]	; 0x54

            /*向匿名上位机发送姿态*/
            Data_Send_Status(Pitch, Roll, Yaw);
 8004b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b94:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004b96:	f7ff fca5 	bl	80044e4 <Data_Send_Status>
            /*向匿名上位机发送原始数据*/
            Send_Data((int16_t *)&sensors.gyro.raw, (int16_t *)&sensors.accel.raw);
 8004b9a:	4975      	ldr	r1, [pc, #468]	; (8004d70 <read_from_mpl+0x33c>)
 8004b9c:	4875      	ldr	r0, [pc, #468]	; (8004d74 <read_from_mpl+0x340>)
 8004b9e:	f7ff fde3 	bl	8004768 <Send_Data>
            ILI9341_DispString_EN(30, 150, cStr);
#endif
        }

        /*获取步数*/
        get_tick_count(&timestamp);
 8004ba2:	f107 0314 	add.w	r3, r7, #20
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f00b f8fa 	bl	800fda0 <get_ms_user>
        if (timestamp > hal.next_pedo_ms)
 8004bac:	4b6e      	ldr	r3, [pc, #440]	; (8004d68 <read_from_mpl+0x334>)
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d20e      	bcs.n	8004bd4 <read_from_mpl+0x1a0>
        {

            hal.next_pedo_ms = timestamp + PEDO_READ_MS;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004bbc:	4a6a      	ldr	r2, [pc, #424]	; (8004d68 <read_from_mpl+0x334>)
 8004bbe:	60d3      	str	r3, [r2, #12]
            dmp_get_pedometer_step_count(&step_count);
 8004bc0:	f107 0310 	add.w	r3, r7, #16
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f007 fb9f 	bl	800c308 <dmp_get_pedometer_step_count>
            dmp_get_pedometer_walk_time(&walk_time);
 8004bca:	f107 030c 	add.w	r3, r7, #12
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f007 fbc3 	bl	800c35a <dmp_get_pedometer_walk_time>
            ILI9341_DispString_EN(0, 180, cStr);
#endif
        }
    }

    if (hal.report & PRINT_ROT_MAT)
 8004bd4:	4b64      	ldr	r3, [pc, #400]	; (8004d68 <read_from_mpl+0x334>)
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	f003 0320 	and.w	r3, r3, #32
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d011      	beq.n	8004c04 <read_from_mpl+0x1d0>
    {
        if (inv_get_sensor_type_rot_mat(data, &accuracy, (inv_time_t *)&timestamp))
 8004be0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004be4:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004be8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bec:	4618      	mov	r0, r3
 8004bee:	f008 fb43 	bl	800d278 <inv_get_sensor_type_rot_mat>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <read_from_mpl+0x1d0>
            eMPL_send_data(PACKET_DATA_ROT, data);
 8004bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	2005      	movs	r0, #5
 8004c00:	f007 ffc6 	bl	800cb90 <eMPL_send_data>
    }
    if (hal.report & PRINT_HEADING)
 8004c04:	4b58      	ldr	r3, [pc, #352]	; (8004d68 <read_from_mpl+0x334>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d011      	beq.n	8004c34 <read_from_mpl+0x200>
    {
        if (inv_get_sensor_type_heading(data, &accuracy, (inv_time_t *)&timestamp))
 8004c10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c14:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f008 f92d 	bl	800ce7c <inv_get_sensor_type_heading>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <read_from_mpl+0x200>
            eMPL_send_data(PACKET_DATA_HEADING, data);
 8004c28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	2006      	movs	r0, #6
 8004c30:	f007 ffae 	bl	800cb90 <eMPL_send_data>
    }
    if (hal.report & PRINT_LINEAR_ACCEL)
 8004c34:	4b4c      	ldr	r3, [pc, #304]	; (8004d68 <read_from_mpl+0x334>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d026      	beq.n	8004c8e <read_from_mpl+0x25a>
    {
        if (inv_get_sensor_type_linear_acceleration(float_data, &accuracy, (inv_time_t *)&timestamp))
 8004c40:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c44:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004c48:	f107 0318 	add.w	r3, r7, #24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f009 fa2b 	bl	800e0a8 <inv_get_sensor_type_linear_acceleration>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01a      	beq.n	8004c8e <read_from_mpl+0x25a>
        {
            MPL_LOGI("Linear Accel: %7.5f\t %7.5f\t %7.5f\t\r\n", float_data[0], float_data[1], float_data[2]);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe f9bc 	bl	8002fd8 <__aeabi_f2d>
 8004c60:	4680      	mov	r8, r0
 8004c62:	4689      	mov	r9, r1
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe f9b6 	bl	8002fd8 <__aeabi_f2d>
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	460d      	mov	r5, r1
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe f9b0 	bl	8002fd8 <__aeabi_f2d>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c80:	e9cd 4500 	strd	r4, r5, [sp]
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	483b      	ldr	r0, [pc, #236]	; (8004d78 <read_from_mpl+0x344>)
 8004c8a:	f00c fba5 	bl	80113d8 <iprintf>
        }
    }
    if (hal.report & PRINT_GRAVITY_VECTOR)
 8004c8e:	4b36      	ldr	r3, [pc, #216]	; (8004d68 <read_from_mpl+0x334>)
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d026      	beq.n	8004ce8 <read_from_mpl+0x2b4>
    {
        if (inv_get_sensor_type_gravity(float_data, &accuracy, (inv_time_t *)&timestamp))
 8004c9a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c9e:	f107 012b 	add.w	r1, r7, #43	; 0x2b
 8004ca2:	f107 0318 	add.w	r3, r7, #24
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f009 fa4e 	bl	800e148 <inv_get_sensor_type_gravity>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01a      	beq.n	8004ce8 <read_from_mpl+0x2b4>
            MPL_LOGI("Gravity Vector: %7.5f\t %7.5f\t %7.5f\t\r\n", float_data[0], float_data[1], float_data[2]);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fe f98f 	bl	8002fd8 <__aeabi_f2d>
 8004cba:	4680      	mov	r8, r0
 8004cbc:	4689      	mov	r9, r1
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe f989 	bl	8002fd8 <__aeabi_f2d>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	460d      	mov	r5, r1
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe f983 	bl	8002fd8 <__aeabi_f2d>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cda:	e9cd 4500 	strd	r4, r5, [sp]
 8004cde:	4642      	mov	r2, r8
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	4826      	ldr	r0, [pc, #152]	; (8004d7c <read_from_mpl+0x348>)
 8004ce4:	f00c fb78 	bl	80113d8 <iprintf>
    }
    if (hal.report & PRINT_PEDO)
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <read_from_mpl+0x334>)
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d01c      	beq.n	8004d2e <read_from_mpl+0x2fa>
    {
        unsigned long timestamp;
        get_tick_count(&timestamp);
 8004cf4:	f107 0308 	add.w	r3, r7, #8
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f00b f851 	bl	800fda0 <get_ms_user>
        if (timestamp > hal.next_pedo_ms)
 8004cfe:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <read_from_mpl+0x334>)
 8004d00:	68da      	ldr	r2, [r3, #12]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d212      	bcs.n	8004d2e <read_from_mpl+0x2fa>
        {
            hal.next_pedo_ms = timestamp + PEDO_READ_MS;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8004d0e:	4a16      	ldr	r2, [pc, #88]	; (8004d68 <read_from_mpl+0x334>)
 8004d10:	60d3      	str	r3, [r2, #12]
            unsigned long step_count, walk_time;
            dmp_get_pedometer_step_count(&step_count);
 8004d12:	1d3b      	adds	r3, r7, #4
 8004d14:	4618      	mov	r0, r3
 8004d16:	f007 faf7 	bl	800c308 <dmp_get_pedometer_step_count>
            dmp_get_pedometer_walk_time(&walk_time);
 8004d1a:	463b      	mov	r3, r7
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f007 fb1c 	bl	800c35a <dmp_get_pedometer_walk_time>
            MPL_LOGI("Walked %ld steps over %ld milliseconds..\n", step_count, walk_time);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4815      	ldr	r0, [pc, #84]	; (8004d80 <read_from_mpl+0x34c>)
 8004d2a:	f00c fb55 	bl	80113d8 <iprintf>

    /* Whenever the MPL detects a change in motion state, the application can
     * be notified. For this example, we use an LED to represent the current
     * motion state.
     */
    msg = inv_get_message_level_0(INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT);
 8004d2e:	2003      	movs	r0, #3
 8004d30:	f009 fc0e 	bl	800e550 <inv_get_message_level_0>
 8004d34:	6538      	str	r0, [r7, #80]	; 0x50
    if (msg)
 8004d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d010      	beq.n	8004d5e <read_from_mpl+0x32a>
    {
        if (msg & INV_MSG_MOTION_EVENT)
 8004d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <read_from_mpl+0x31a>
        {
            MPL_LOGI("Motion!\n");
 8004d46:	480f      	ldr	r0, [pc, #60]	; (8004d84 <read_from_mpl+0x350>)
 8004d48:	f00c fbcc 	bl	80114e4 <puts>
        else if (msg & INV_MSG_NO_MOTION_EVENT)
        {
            MPL_LOGI("No motion!\n");
        }
    }
}
 8004d4c:	e007      	b.n	8004d5e <read_from_mpl+0x32a>
        else if (msg & INV_MSG_NO_MOTION_EVENT)
 8004d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <read_from_mpl+0x32a>
            MPL_LOGI("No motion!\n");
 8004d58:	480b      	ldr	r0, [pc, #44]	; (8004d88 <read_from_mpl+0x354>)
 8004d5a:	f00c fbc3 	bl	80114e4 <puts>
}
 8004d5e:	bf00      	nop
 8004d60:	3760      	adds	r7, #96	; 0x60
 8004d62:	46bd      	mov	sp, r7
 8004d64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d68:	20000a38 	.word	0x20000a38
 8004d6c:	40f00000 	.word	0x40f00000
 8004d70:	200010a0 	.word	0x200010a0
 8004d74:	2000105c 	.word	0x2000105c
 8004d78:	08016070 	.word	0x08016070
 8004d7c:	08016098 	.word	0x08016098
 8004d80:	080160c0 	.word	0x080160c0
 8004d84:	080160ec 	.word	0x080160ec
 8004d88:	080160f4 	.word	0x080160f4

08004d8c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b095      	sub	sp, #84	; 0x54
 8004d90:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004d92:	f000 fb65 	bl	8005460 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004d96:	f000 f8cb 	bl	8004f30 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004d9a:	f7ff fa49 	bl	8004230 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8004d9e:	f000 fabb 	bl	8005318 <MX_USART1_UART_Init>
    MX_DMA_Init();
 8004da2:	f7ff fa1f 	bl	80041e4 <MX_DMA_Init>
    MX_I2C1_Init();
 8004da6:	f7ff fa85 	bl	80042b4 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */

    unsigned char new_temp = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    unsigned long timestamp;

    MPU6050_mpu_init();
 8004db0:	f00b f804 	bl	800fdbc <MPU6050_mpu_init>
    MPU6050_mpl_init();
 8004db4:	f00b f820 	bl	800fdf8 <MPU6050_mpl_init>
    MPU6050_config();
 8004db8:	f00b f838 	bl	800fe2c <MPU6050_config>

    while (1)
    {
        unsigned long sensor_timestamp;
        int new_data = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	643b      	str	r3, [r7, #64]	; 0x40

        if (!hal.sensors || !hal.new_gyro)
 8004dc0:	4b5a      	ldr	r3, [pc, #360]	; (8004f2c <main+0x1a0>)
 8004dc2:	785b      	ldrb	r3, [r3, #1]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80af 	beq.w	8004f28 <main+0x19c>
 8004dca:	4b58      	ldr	r3, [pc, #352]	; (8004f2c <main+0x1a0>)
 8004dcc:	791b      	ldrb	r3, [r3, #4]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a9 	beq.w	8004f28 <main+0x19c>

#ifdef PRINT_INSTAND_SWJ
        HAL_Delay(500);
#endif

        get_tick_count(&timestamp);
 8004dd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f00a ffe0 	bl	800fda0 <get_ms_user>
        if (timestamp > hal.next_temp_ms)
 8004de0:	4b52      	ldr	r3, [pc, #328]	; (8004f2c <main+0x1a0>)
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d207      	bcs.n	8004dfa <main+0x6e>
        {
            hal.next_temp_ms = timestamp + TEMP_READ_MS;
 8004dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004df0:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <main+0x1a0>)
 8004df2:	6113      	str	r3, [r2, #16]
            new_temp = 1;
 8004df4:	2301      	movs	r3, #1
 8004df6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }

        if (hal.motion_int_mode)
 8004dfa:	4b4c      	ldr	r3, [pc, #304]	; (8004f2c <main+0x1a0>)
 8004dfc:	795b      	ldrb	r3, [r3, #5]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01b      	beq.n	8004e3a <main+0xae>
        {
            /* Enable motion interrupt. */
            mpu_lp_motion_interrupt(500, 1, 5);
 8004e02:	2205      	movs	r2, #5
 8004e04:	2101      	movs	r1, #1
 8004e06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e0a:	f006 fe5d 	bl	800bac8 <mpu_lp_motion_interrupt>
            /* Notify the MPL that contiguity was broken. */
            inv_accel_was_turned_off();
 8004e0e:	f008 fe29 	bl	800da64 <inv_accel_was_turned_off>
            inv_gyro_was_turned_off();
 8004e12:	f008 fe4b 	bl	800daac <inv_gyro_was_turned_off>
            inv_compass_was_turned_off();
 8004e16:	f008 fe31 	bl	800da7c <inv_compass_was_turned_off>
            inv_quaternion_sensor_was_turned_off();
 8004e1a:	f008 fe3b 	bl	800da94 <inv_quaternion_sensor_was_turned_off>
            /* Wait for the MPU interrupt. */
            while (!hal.new_gyro)
 8004e1e:	bf00      	nop
 8004e20:	4b42      	ldr	r3, [pc, #264]	; (8004f2c <main+0x1a0>)
 8004e22:	791b      	ldrb	r3, [r3, #4]
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0fa      	beq.n	8004e20 <main+0x94>
            {
            }
            /* Restore the previous sensor configuration. */
            mpu_lp_motion_interrupt(0, 0, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	2000      	movs	r0, #0
 8004e30:	f006 fe4a 	bl	800bac8 <mpu_lp_motion_interrupt>
            hal.motion_int_mode = 0;
 8004e34:	4b3d      	ldr	r3, [pc, #244]	; (8004f2c <main+0x1a0>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	715a      	strb	r2, [r3, #5]
        }

        if (hal.new_gyro && hal.dmp_on)
 8004e3a:	4b3c      	ldr	r3, [pc, #240]	; (8004f2c <main+0x1a0>)
 8004e3c:	791b      	ldrb	r3, [r3, #4]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d068      	beq.n	8004f16 <main+0x18a>
 8004e44:	4b39      	ldr	r3, [pc, #228]	; (8004f2c <main+0x1a0>)
 8004e46:	789b      	ldrb	r3, [r3, #2]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d064      	beq.n	8004f16 <main+0x18a>
             * event has occurred; on an event, the application will be notified
             * via a callback (assuming that a callback function was properly
             * registered). The more parameter is non-zero if there are
             * leftover packets in the FIFO.
             */
            dmp_read_fifo(gyro, accel_short, quat, &sensor_timestamp, &sensors, &more);
 8004e4c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004e50:	f107 0208 	add.w	r2, r7, #8
 8004e54:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004e58:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004e5c:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	4623      	mov	r3, r4
 8004e6a:	f007 fc8f 	bl	800c78c <dmp_read_fifo>
            if (!more)
 8004e6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d102      	bne.n	8004e7c <main+0xf0>
                hal.new_gyro = 0;
 8004e76:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <main+0x1a0>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	711a      	strb	r2, [r3, #4]

            if (sensors & INV_WXYZ_QUAT)
 8004e7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <main+0x110>
            {

                inv_build_quat(quat, 0, sensor_timestamp);
 8004e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e8c:	f107 0308 	add.w	r3, r7, #8
 8004e90:	2100      	movs	r1, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	f008 fdbc 	bl	800da10 <inv_build_quat>
                new_data = 1;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	643b      	str	r3, [r7, #64]	; 0x40
            }

            if (sensors & INV_XYZ_GYRO)
 8004e9c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01c      	beq.n	8004ee4 <main+0x158>
            {
                /* Push the new data to the MPL. */
                inv_build_gyro(gyro, sensor_timestamp);
 8004eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f008 fd62 	bl	800d97c <inv_build_gyro>
                new_data = 1;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	643b      	str	r3, [r7, #64]	; 0x40
                if (new_temp)
 8004ebc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00f      	beq.n	8004ee4 <main+0x158>
                {
                    new_temp = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    /* Temperature only used for gyro temp comp. */
                    mpu_get_temperature(&temperature, &sensor_timestamp);
 8004eca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004ece:	1d3b      	adds	r3, r7, #4
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f005 fe78 	bl	800abc8 <mpu_get_temperature>
                    inv_build_temp(temperature, sensor_timestamp);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f008 fd72 	bl	800d9c8 <inv_build_temp>
                }
            }
            if (sensors & INV_XYZ_ACCEL)
 8004ee4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d011      	beq.n	8004f16 <main+0x18a>
            {
                accel[0] = (long)accel_short[0];
 8004ef2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004ef6:	61bb      	str	r3, [r7, #24]
                accel[1] = (long)accel_short[1];
 8004ef8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004efc:	61fb      	str	r3, [r7, #28]
                accel[2] = (long)accel_short[2];
 8004efe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004f02:	623b      	str	r3, [r7, #32]
                inv_build_accel(accel, 0, sensor_timestamp);
 8004f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f06:	f107 0318 	add.w	r3, r7, #24
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f008 fcd3 	bl	800d8b8 <inv_build_accel>
                new_data = 1;
 8004f12:	2301      	movs	r3, #1
 8004f14:	643b      	str	r3, [r7, #64]	; 0x40
            }
            HAL_Delay(100);
        }

#else
        if (new_data)
 8004f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f43f af4f 	beq.w	8004dbc <main+0x30>
        {
            inv_execute_on_data();
 8004f1e:	f008 febd 	bl	800dc9c <inv_execute_on_data>
            /* This function reads bias-compensated sensor data and sensor
             * fusion outputs from the MPL. The outputs are formatted as seen
             * in eMPL_outputs.c. This function only needs to be called at the
             * rate requested by the host.
             */
            read_from_mpl();
 8004f22:	f7ff fd87 	bl	8004a34 <read_from_mpl>
 8004f26:	e749      	b.n	8004dbc <main+0x30>
            continue;
 8004f28:	bf00      	nop
    {
 8004f2a:	e747      	b.n	8004dbc <main+0x30>
 8004f2c:	20000a38 	.word	0x20000a38

08004f30 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b090      	sub	sp, #64	; 0x40
 8004f34:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f36:	f107 0318 	add.w	r3, r7, #24
 8004f3a:	2228      	movs	r2, #40	; 0x28
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f00b fb75 	bl	801062e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f44:	1d3b      	adds	r3, r7, #4
 8004f46:	2200      	movs	r2, #0
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	605a      	str	r2, [r3, #4]
 8004f4c:	609a      	str	r2, [r3, #8]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	611a      	str	r2, [r3, #16]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f52:	2301      	movs	r3, #1
 8004f54:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f5a:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f60:	2301      	movs	r3, #1
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f64:	2302      	movs	r3, #2
 8004f66:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004f6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f74:	f107 0318 	add.w	r3, r7, #24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f004 f913 	bl	80091a4 <HAL_RCC_OscConfig>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <SystemClock_Config+0x58>
    {
        Error_Handler();
 8004f84:	f000 f82c 	bl	8004fe0 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f88:	230f      	movs	r3, #15
 8004f8a:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f98:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004f9e:	1d3b      	adds	r3, r7, #4
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f004 fb7e 	bl	80096a4 <HAL_RCC_ClockConfig>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <SystemClock_Config+0x82>
    {
        Error_Handler();
 8004fae:	f000 f817 	bl	8004fe0 <Error_Handler>
    }
}
 8004fb2:	bf00      	nop
 8004fb4:	3740      	adds	r7, #64	; 0x40
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM7)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8004fce:	f000 fa5d 	bl	800548c <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40001400 	.word	0x40001400

08004fe0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fe4:	b672      	cpsid	i
}
 8004fe6:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8004fe8:	e7fe      	b.n	8004fe8 <Error_Handler+0x8>
	...

08004fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004ff2:	4b18      	ldr	r3, [pc, #96]	; (8005054 <HAL_MspInit+0x68>)
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	4a17      	ldr	r2, [pc, #92]	; (8005054 <HAL_MspInit+0x68>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6193      	str	r3, [r2, #24]
 8004ffe:	4b15      	ldr	r3, [pc, #84]	; (8005054 <HAL_MspInit+0x68>)
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	4b12      	ldr	r3, [pc, #72]	; (8005054 <HAL_MspInit+0x68>)
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	4a11      	ldr	r2, [pc, #68]	; (8005054 <HAL_MspInit+0x68>)
 8005010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005014:	61d3      	str	r3, [r2, #28]
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <HAL_MspInit+0x68>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501e:	607b      	str	r3, [r7, #4]
 8005020:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005022:	2200      	movs	r2, #0
 8005024:	210f      	movs	r1, #15
 8005026:	f06f 0001 	mvn.w	r0, #1
 800502a:	f000 fb48 	bl	80056be <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <HAL_MspInit+0x6c>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	4a04      	ldr	r2, [pc, #16]	; (8005058 <HAL_MspInit+0x6c>)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800504a:	bf00      	nop
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40021000 	.word	0x40021000
 8005058:	40010000 	.word	0x40010000

0800505c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	; 0x30
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 800506c:	2200      	movs	r2, #0
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	2037      	movs	r0, #55	; 0x37
 8005072:	f000 fb24 	bl	80056be <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005076:	2037      	movs	r0, #55	; 0x37
 8005078:	f000 fb3d 	bl	80056f6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800507c:	4b1f      	ldr	r3, [pc, #124]	; (80050fc <HAL_InitTick+0xa0>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <HAL_InitTick+0xa0>)
 8005082:	f043 0320 	orr.w	r3, r3, #32
 8005086:	61d3      	str	r3, [r2, #28]
 8005088:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <HAL_InitTick+0xa0>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005094:	f107 0210 	add.w	r2, r7, #16
 8005098:	f107 0314 	add.w	r3, r7, #20
 800509c:	4611      	mov	r1, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f004 fc7c 	bl	800999c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80050a4:	f004 fc52 	bl	800994c <HAL_RCC_GetPCLK1Freq>
 80050a8:	4603      	mov	r3, r0
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	4a13      	ldr	r2, [pc, #76]	; (8005100 <HAL_InitTick+0xa4>)
 80050b2:	fba2 2303 	umull	r2, r3, r2, r3
 80050b6:	0c9b      	lsrs	r3, r3, #18
 80050b8:	3b01      	subs	r3, #1
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80050bc:	4b11      	ldr	r3, [pc, #68]	; (8005104 <HAL_InitTick+0xa8>)
 80050be:	4a12      	ldr	r2, [pc, #72]	; (8005108 <HAL_InitTick+0xac>)
 80050c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80050c2:	4b10      	ldr	r3, [pc, #64]	; (8005104 <HAL_InitTick+0xa8>)
 80050c4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050c8:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80050ca:	4a0e      	ldr	r2, [pc, #56]	; (8005104 <HAL_InitTick+0xa8>)
 80050cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ce:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80050d0:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_InitTick+0xa8>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050d6:	4b0b      	ldr	r3, [pc, #44]	; (8005104 <HAL_InitTick+0xa8>)
 80050d8:	2200      	movs	r2, #0
 80050da:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 80050dc:	4809      	ldr	r0, [pc, #36]	; (8005104 <HAL_InitTick+0xa8>)
 80050de:	f004 fcab 	bl	8009a38 <HAL_TIM_Base_Init>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d104      	bne.n	80050f2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80050e8:	4806      	ldr	r0, [pc, #24]	; (8005104 <HAL_InitTick+0xa8>)
 80050ea:	f004 fcfd 	bl	8009ae8 <HAL_TIM_Base_Start_IT>
 80050ee:	4603      	mov	r3, r0
 80050f0:	e000      	b.n	80050f4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3730      	adds	r7, #48	; 0x30
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40021000 	.word	0x40021000
 8005100:	431bde83 	.word	0x431bde83
 8005104:	20000fc8 	.word	0x20000fc8
 8005108:	40001400 	.word	0x40001400

0800510c <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8005110:	e7fe      	b.n	8005110 <NMI_Handler+0x4>

08005112 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8005116:	e7fe      	b.n	8005116 <HardFault_Handler+0x4>

08005118 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 800511c:	e7fe      	b.n	800511c <MemManage_Handler+0x4>

0800511e <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800511e:	b480      	push	{r7}
 8005120:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8005122:	e7fe      	b.n	8005122 <BusFault_Handler+0x4>

08005124 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 8005128:	e7fe      	b.n	8005128 <UsageFault_Handler+0x4>

0800512a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800512a:	b480      	push	{r7}
 800512c:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 800512e:	bf00      	nop
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr
	...

08005138 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

    /* USER CODE END DMA1_Channel6_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800513c:	4802      	ldr	r0, [pc, #8]	; (8005148 <DMA1_Channel6_IRQHandler+0x10>)
 800513e:	f000 fd27 	bl	8005b90 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

    /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000eec 	.word	0x20000eec

0800514c <DMA1_Channel7_IRQHandler>:

/**
 * @brief This function handles DMA1 channel7 global interrupt.
 */
void DMA1_Channel7_IRQHandler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

    /* USER CODE END DMA1_Channel7_IRQn 0 */
    HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005150:	4802      	ldr	r0, [pc, #8]	; (800515c <DMA1_Channel7_IRQHandler+0x10>)
 8005152:	f000 fd1d 	bl	8005b90 <HAL_DMA_IRQHandler>
    /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

    /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005156:	bf00      	nop
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000f84 	.word	0x20000f84

08005160 <I2C1_EV_IRQHandler>:

/**
 * @brief This function handles I2C1 event interrupt.
 */
void I2C1_EV_IRQHandler(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_EV_IRQn 0 */

    /* USER CODE END I2C1_EV_IRQn 0 */
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005164:	4802      	ldr	r0, [pc, #8]	; (8005170 <I2C1_EV_IRQHandler+0x10>)
 8005166:	f001 ffe1 	bl	800712c <HAL_I2C_EV_IRQHandler>
    /* USER CODE BEGIN I2C1_EV_IRQn 1 */

    /* USER CODE END I2C1_EV_IRQn 1 */
}
 800516a:	bf00      	nop
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	20000f30 	.word	0x20000f30

08005174 <I2C1_ER_IRQHandler>:

/**
 * @brief This function handles I2C1 error interrupt.
 */
void I2C1_ER_IRQHandler(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_ER_IRQn 0 */

    /* USER CODE END I2C1_ER_IRQn 0 */
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005178:	4802      	ldr	r0, [pc, #8]	; (8005184 <I2C1_ER_IRQHandler+0x10>)
 800517a:	f002 f948 	bl	800740e <HAL_I2C_ER_IRQHandler>
    /* USER CODE BEGIN I2C1_ER_IRQn 1 */

    /* USER CODE END I2C1_ER_IRQn 1 */
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000f30 	.word	0x20000f30

08005188 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN USART1_IRQn 0 */

    /* USER CODE END USART1_IRQn 0 */
    HAL_UART_IRQHandler(&huart1);
 800518c:	4802      	ldr	r0, [pc, #8]	; (8005198 <USART1_IRQHandler+0x10>)
 800518e:	f004 ffa3 	bl	800a0d8 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART1_IRQn 1 */

    /* USER CODE END USART1_IRQn 1 */
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20001010 	.word	0x20001010

0800519c <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN EXTI15_10_IRQn 0 */
    MPU6050_data_ready_cb();
 80051a0:	f00a feec 	bl	800ff7c <MPU6050_data_ready_cb>
    /* USER CODE END EXTI15_10_IRQn 0 */
    HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 80051a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80051a8:	f001 f99a 	bl	80064e0 <HAL_GPIO_EXTI_IRQHandler>
    /* USER CODE BEGIN EXTI15_10_IRQn 1 */

    /* USER CODE END EXTI15_10_IRQn 1 */
}
 80051ac:	bf00      	nop
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM7_IRQn 0 */

    /* USER CODE END TIM7_IRQn 0 */
    HAL_TIM_IRQHandler(&htim7);
 80051b4:	4802      	ldr	r0, [pc, #8]	; (80051c0 <TIM7_IRQHandler+0x10>)
 80051b6:	f004 fcf7 	bl	8009ba8 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM7_IRQn 1 */

    /* USER CODE END TIM7_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000fc8 	.word	0x20000fc8

080051c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
	return 1;
 80051c8:	2301      	movs	r3, #1
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <_kill>:

int _kill(int pid, int sig)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80051dc:	f00b f8ce 	bl	801037c <__errno>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2216      	movs	r2, #22
 80051e4:	601a      	str	r2, [r3, #0]
	return -1;
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <_exit>:

void _exit (int status)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b082      	sub	sp, #8
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051fa:	f04f 31ff 	mov.w	r1, #4294967295
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7ff ffe7 	bl	80051d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005204:	e7fe      	b.n	8005204 <_exit+0x12>

08005206 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b086      	sub	sp, #24
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005212:	2300      	movs	r3, #0
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	e00a      	b.n	800522e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005218:	f3af 8000 	nop.w
 800521c:	4601      	mov	r1, r0
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	60ba      	str	r2, [r7, #8]
 8005224:	b2ca      	uxtb	r2, r1
 8005226:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3301      	adds	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	dbf0      	blt.n	8005218 <_read+0x12>
	}

return len;
 8005236:	687b      	ldr	r3, [r7, #4]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	return -1;
 8005248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	bc80      	pop	{r7}
 8005254:	4770      	bx	lr

08005256 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
 800525e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005266:	605a      	str	r2, [r3, #4]
	return 0;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <_isatty>:

int _isatty(int file)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	return 1;
 800527c:	2301      	movs	r3, #1
}
 800527e:	4618      	mov	r0, r3
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
	return 0;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052a8:	4a14      	ldr	r2, [pc, #80]	; (80052fc <_sbrk+0x5c>)
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <_sbrk+0x60>)
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <_sbrk+0x64>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d102      	bne.n	80052c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052bc:	4b11      	ldr	r3, [pc, #68]	; (8005304 <_sbrk+0x64>)
 80052be:	4a12      	ldr	r2, [pc, #72]	; (8005308 <_sbrk+0x68>)
 80052c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <_sbrk+0x64>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4413      	add	r3, r2
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d207      	bcs.n	80052e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052d0:	f00b f854 	bl	801037c <__errno>
 80052d4:	4603      	mov	r3, r0
 80052d6:	220c      	movs	r2, #12
 80052d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052da:	f04f 33ff 	mov.w	r3, #4294967295
 80052de:	e009      	b.n	80052f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052e0:	4b08      	ldr	r3, [pc, #32]	; (8005304 <_sbrk+0x64>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052e6:	4b07      	ldr	r3, [pc, #28]	; (8005304 <_sbrk+0x64>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4413      	add	r3, r2
 80052ee:	4a05      	ldr	r2, [pc, #20]	; (8005304 <_sbrk+0x64>)
 80052f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052f2:	68fb      	ldr	r3, [r7, #12]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20010000 	.word	0x20010000
 8005300:	00000400 	.word	0x00000400
 8005304:	20000580 	.word	0x20000580
 8005308:	20001598 	.word	0x20001598

0800530c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800531c:	4b11      	ldr	r3, [pc, #68]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800531e:	4a12      	ldr	r2, [pc, #72]	; (8005368 <MX_USART1_UART_Init+0x50>)
 8005320:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005324:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005328:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800532c:	2200      	movs	r2, #0
 800532e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005332:	2200      	movs	r2, #0
 8005334:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005338:	2200      	movs	r2, #0
 800533a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800533e:	220c      	movs	r2, #12
 8005340:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005344:	2200      	movs	r2, #0
 8005346:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005348:	4b06      	ldr	r3, [pc, #24]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 800534a:	2200      	movs	r2, #0
 800534c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800534e:	4805      	ldr	r0, [pc, #20]	; (8005364 <MX_USART1_UART_Init+0x4c>)
 8005350:	f004 fde2 	bl	8009f18 <HAL_UART_Init>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800535a:	f7ff fe41 	bl	8004fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20001010 	.word	0x20001010
 8005368:	40013800 	.word	0x40013800

0800536c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	605a      	str	r2, [r3, #4]
 800537e:	609a      	str	r2, [r3, #8]
 8005380:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a20      	ldr	r2, [pc, #128]	; (8005408 <HAL_UART_MspInit+0x9c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d139      	bne.n	8005400 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800538c:	4b1f      	ldr	r3, [pc, #124]	; (800540c <HAL_UART_MspInit+0xa0>)
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	4a1e      	ldr	r2, [pc, #120]	; (800540c <HAL_UART_MspInit+0xa0>)
 8005392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005396:	6193      	str	r3, [r2, #24]
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <HAL_UART_MspInit+0xa0>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a4:	4b19      	ldr	r3, [pc, #100]	; (800540c <HAL_UART_MspInit+0xa0>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	4a18      	ldr	r2, [pc, #96]	; (800540c <HAL_UART_MspInit+0xa0>)
 80053aa:	f043 0304 	orr.w	r3, r3, #4
 80053ae:	6193      	str	r3, [r2, #24]
 80053b0:	4b16      	ldr	r3, [pc, #88]	; (800540c <HAL_UART_MspInit+0xa0>)
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c2:	2302      	movs	r3, #2
 80053c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053c6:	2303      	movs	r3, #3
 80053c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ca:	f107 0310 	add.w	r3, r7, #16
 80053ce:	4619      	mov	r1, r3
 80053d0:	480f      	ldr	r0, [pc, #60]	; (8005410 <HAL_UART_MspInit+0xa4>)
 80053d2:	f000 fe25 	bl	8006020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053dc:	2300      	movs	r3, #0
 80053de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e4:	f107 0310 	add.w	r3, r7, #16
 80053e8:	4619      	mov	r1, r3
 80053ea:	4809      	ldr	r0, [pc, #36]	; (8005410 <HAL_UART_MspInit+0xa4>)
 80053ec:	f000 fe18 	bl	8006020 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80053f0:	2200      	movs	r2, #0
 80053f2:	2105      	movs	r1, #5
 80053f4:	2025      	movs	r0, #37	; 0x25
 80053f6:	f000 f962 	bl	80056be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053fa:	2025      	movs	r0, #37	; 0x25
 80053fc:	f000 f97b 	bl	80056f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005400:	bf00      	nop
 8005402:	3720      	adds	r7, #32
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40013800 	.word	0x40013800
 800540c:	40021000 	.word	0x40021000
 8005410:	40010800 	.word	0x40010800

08005414 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005414:	480c      	ldr	r0, [pc, #48]	; (8005448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005416:	490d      	ldr	r1, [pc, #52]	; (800544c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005418:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800541a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800541c:	e002      	b.n	8005424 <LoopCopyDataInit>

0800541e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800541e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005422:	3304      	adds	r3, #4

08005424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005428:	d3f9      	bcc.n	800541e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800542a:	4a0a      	ldr	r2, [pc, #40]	; (8005454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800542c:	4c0a      	ldr	r4, [pc, #40]	; (8005458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800542e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005430:	e001      	b.n	8005436 <LoopFillZerobss>

08005432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005434:	3204      	adds	r2, #4

08005436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005438:	d3fb      	bcc.n	8005432 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800543a:	f7ff ff67 	bl	800530c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800543e:	f00b f899 	bl	8010574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005442:	f7ff fca3 	bl	8004d8c <main>
  bx lr
 8005446:	4770      	bx	lr
  ldr r0, =_sdata
 8005448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800544c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8005450:	0801782c 	.word	0x0801782c
  ldr r2, =_sbss
 8005454:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8005458:	20001598 	.word	0x20001598

0800545c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800545c:	e7fe      	b.n	800545c <ADC1_2_IRQHandler>
	...

08005460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <HAL_Init+0x28>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a07      	ldr	r2, [pc, #28]	; (8005488 <HAL_Init+0x28>)
 800546a:	f043 0310 	orr.w	r3, r3, #16
 800546e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005470:	2003      	movs	r0, #3
 8005472:	f000 f919 	bl	80056a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005476:	200f      	movs	r0, #15
 8005478:	f7ff fdf0 	bl	800505c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800547c:	f7ff fdb6 	bl	8004fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	40022000 	.word	0x40022000

0800548c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005490:	4b05      	ldr	r3, [pc, #20]	; (80054a8 <HAL_IncTick+0x1c>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	4b05      	ldr	r3, [pc, #20]	; (80054ac <HAL_IncTick+0x20>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4413      	add	r3, r2
 800549c:	4a03      	ldr	r2, [pc, #12]	; (80054ac <HAL_IncTick+0x20>)
 800549e:	6013      	str	r3, [r2, #0]
}
 80054a0:	bf00      	nop
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	20000008 	.word	0x20000008
 80054ac:	20001054 	.word	0x20001054

080054b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054b0:	b480      	push	{r7}
 80054b2:	af00      	add	r7, sp, #0
  return uwTick;
 80054b4:	4b02      	ldr	r3, [pc, #8]	; (80054c0 <HAL_GetTick+0x10>)
 80054b6:	681b      	ldr	r3, [r3, #0]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr
 80054c0:	20001054 	.word	0x20001054

080054c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054cc:	f7ff fff0 	bl	80054b0 <HAL_GetTick>
 80054d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054dc:	d005      	beq.n	80054ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054de:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <HAL_Delay+0x44>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4413      	add	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054ea:	bf00      	nop
 80054ec:	f7ff ffe0 	bl	80054b0 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d8f7      	bhi.n	80054ec <HAL_Delay+0x28>
  {
  }
}
 80054fc:	bf00      	nop
 80054fe:	bf00      	nop
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000008 	.word	0x20000008

0800550c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f003 0307 	and.w	r3, r3, #7
 800551a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800551c:	4b0c      	ldr	r3, [pc, #48]	; (8005550 <__NVIC_SetPriorityGrouping+0x44>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005528:	4013      	ands	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800553e:	4a04      	ldr	r2, [pc, #16]	; (8005550 <__NVIC_SetPriorityGrouping+0x44>)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	60d3      	str	r3, [r2, #12]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	e000ed00 	.word	0xe000ed00

08005554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005558:	4b04      	ldr	r3, [pc, #16]	; (800556c <__NVIC_GetPriorityGrouping+0x18>)
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	0a1b      	lsrs	r3, r3, #8
 800555e:	f003 0307 	and.w	r3, r3, #7
}
 8005562:	4618      	mov	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800557e:	2b00      	cmp	r3, #0
 8005580:	db0b      	blt.n	800559a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	f003 021f 	and.w	r2, r3, #31
 8005588:	4906      	ldr	r1, [pc, #24]	; (80055a4 <__NVIC_EnableIRQ+0x34>)
 800558a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2001      	movs	r0, #1
 8005592:	fa00 f202 	lsl.w	r2, r0, r2
 8005596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	e000e100 	.word	0xe000e100

080055a8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	db12      	blt.n	80055e0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	f003 021f 	and.w	r2, r3, #31
 80055c0:	490a      	ldr	r1, [pc, #40]	; (80055ec <__NVIC_DisableIRQ+0x44>)
 80055c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2001      	movs	r0, #1
 80055ca:	fa00 f202 	lsl.w	r2, r0, r2
 80055ce:	3320      	adds	r3, #32
 80055d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80055d4:	f3bf 8f4f 	dsb	sy
}
 80055d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80055da:	f3bf 8f6f 	isb	sy
}
 80055de:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	e000e100 	.word	0xe000e100

080055f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	6039      	str	r1, [r7, #0]
 80055fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005600:	2b00      	cmp	r3, #0
 8005602:	db0a      	blt.n	800561a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	490c      	ldr	r1, [pc, #48]	; (800563c <__NVIC_SetPriority+0x4c>)
 800560a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	440b      	add	r3, r1
 8005614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005618:	e00a      	b.n	8005630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	4908      	ldr	r1, [pc, #32]	; (8005640 <__NVIC_SetPriority+0x50>)
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	3b04      	subs	r3, #4
 8005628:	0112      	lsls	r2, r2, #4
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	440b      	add	r3, r1
 800562e:	761a      	strb	r2, [r3, #24]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	e000e100 	.word	0xe000e100
 8005640:	e000ed00 	.word	0xe000ed00

08005644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005644:	b480      	push	{r7}
 8005646:	b089      	sub	sp, #36	; 0x24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 0307 	and.w	r3, r3, #7
 8005656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f1c3 0307 	rsb	r3, r3, #7
 800565e:	2b04      	cmp	r3, #4
 8005660:	bf28      	it	cs
 8005662:	2304      	movcs	r3, #4
 8005664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	3304      	adds	r3, #4
 800566a:	2b06      	cmp	r3, #6
 800566c:	d902      	bls.n	8005674 <NVIC_EncodePriority+0x30>
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3b03      	subs	r3, #3
 8005672:	e000      	b.n	8005676 <NVIC_EncodePriority+0x32>
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005678:	f04f 32ff 	mov.w	r2, #4294967295
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	43da      	mvns	r2, r3
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	401a      	ands	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800568c:	f04f 31ff 	mov.w	r1, #4294967295
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	fa01 f303 	lsl.w	r3, r1, r3
 8005696:	43d9      	mvns	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800569c:	4313      	orrs	r3, r2
         );
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3724      	adds	r7, #36	; 0x24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff ff2b 	bl	800550c <__NVIC_SetPriorityGrouping>
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056be:	b580      	push	{r7, lr}
 80056c0:	b086      	sub	sp, #24
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	4603      	mov	r3, r0
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
 80056ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056d0:	f7ff ff40 	bl	8005554 <__NVIC_GetPriorityGrouping>
 80056d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	6978      	ldr	r0, [r7, #20]
 80056dc:	f7ff ffb2 	bl	8005644 <NVIC_EncodePriority>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056e6:	4611      	mov	r1, r2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ff81 	bl	80055f0 <__NVIC_SetPriority>
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	4603      	mov	r3, r0
 80056fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff33 	bl	8005570 <__NVIC_EnableIRQ>
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	4603      	mov	r3, r0
 800571a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800571c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff ff41 	bl	80055a8 <__NVIC_DisableIRQ>
}
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e059      	b.n	80057fa <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	461a      	mov	r2, r3
 800574c:	4b2d      	ldr	r3, [pc, #180]	; (8005804 <HAL_DMA_Init+0xd4>)
 800574e:	429a      	cmp	r2, r3
 8005750:	d80f      	bhi.n	8005772 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_DMA_Init+0xd8>)
 800575a:	4413      	add	r3, r2
 800575c:	4a2b      	ldr	r2, [pc, #172]	; (800580c <HAL_DMA_Init+0xdc>)
 800575e:	fba2 2303 	umull	r2, r3, r2, r3
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	009a      	lsls	r2, r3, #2
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a28      	ldr	r2, [pc, #160]	; (8005810 <HAL_DMA_Init+0xe0>)
 800576e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005770:	e00e      	b.n	8005790 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	4b26      	ldr	r3, [pc, #152]	; (8005814 <HAL_DMA_Init+0xe4>)
 800577a:	4413      	add	r3, r2
 800577c:	4a23      	ldr	r2, [pc, #140]	; (800580c <HAL_DMA_Init+0xdc>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	009a      	lsls	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a22      	ldr	r2, [pc, #136]	; (8005818 <HAL_DMA_Init+0xe8>)
 800578e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80057a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80057aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr
 8005804:	40020407 	.word	0x40020407
 8005808:	bffdfff8 	.word	0xbffdfff8
 800580c:	cccccccd 	.word	0xcccccccd
 8005810:	40020000 	.word	0x40020000
 8005814:	bffdfbf8 	.word	0xbffdfbf8
 8005818:	40020400 	.word	0x40020400

0800581c <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e05c      	b.n	80058e8 <HAL_DMA_DeInit+0xcc>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2200      	movs	r2, #0
 800584c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2200      	movs	r2, #0
 8005854:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2200      	movs	r2, #0
 800585c:	60da      	str	r2, [r3, #12]

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <HAL_DMA_DeInit+0xd8>)
 8005866:	429a      	cmp	r2, r3
 8005868:	d80f      	bhi.n	800588a <HAL_DMA_DeInit+0x6e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	4b21      	ldr	r3, [pc, #132]	; (80058f8 <HAL_DMA_DeInit+0xdc>)
 8005872:	4413      	add	r3, r2
 8005874:	4a21      	ldr	r2, [pc, #132]	; (80058fc <HAL_DMA_DeInit+0xe0>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	091b      	lsrs	r3, r3, #4
 800587c:	009a      	lsls	r2, r3, #2
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <HAL_DMA_DeInit+0xe4>)
 8005886:	63da      	str	r2, [r3, #60]	; 0x3c
 8005888:	e00e      	b.n	80058a8 <HAL_DMA_DeInit+0x8c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <HAL_DMA_DeInit+0xe8>)
 8005892:	4413      	add	r3, r2
 8005894:	4a19      	ldr	r2, [pc, #100]	; (80058fc <HAL_DMA_DeInit+0xe0>)
 8005896:	fba2 2303 	umull	r2, r3, r2, r3
 800589a:	091b      	lsrs	r3, r3, #4
 800589c:	009a      	lsls	r2, r3, #2
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_DMA_DeInit+0xec>)
 80058a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	2101      	movs	r1, #1
 80058b2:	fa01 f202 	lsl.w	r2, r1, r2
 80058b6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	40020407 	.word	0x40020407
 80058f8:	bffdfff8 	.word	0xbffdfff8
 80058fc:	cccccccd 	.word	0xcccccccd
 8005900:	40020000 	.word	0x40020000
 8005904:	bffdfbf8 	.word	0xbffdfbf8
 8005908:	40020400 	.word	0x40020400

0800590c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800591e:	2b02      	cmp	r3, #2
 8005920:	d008      	beq.n	8005934 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2204      	movs	r2, #4
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e020      	b.n	8005976 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 020e 	bic.w	r2, r2, #14
 8005942:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0201 	bic.w	r2, r2, #1
 8005952:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595c:	2101      	movs	r1, #1
 800595e:	fa01 f202 	lsl.w	r2, r1, r2
 8005962:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005974:	7bfb      	ldrb	r3, [r7, #15]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005988:	2300      	movs	r3, #0
 800598a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005992:	2b02      	cmp	r3, #2
 8005994:	d005      	beq.n	80059a2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2204      	movs	r2, #4
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e0d6      	b.n	8005b50 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 020e 	bic.w	r2, r2, #14
 80059b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0201 	bic.w	r2, r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	4b64      	ldr	r3, [pc, #400]	; (8005b5c <HAL_DMA_Abort_IT+0x1dc>)
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d958      	bls.n	8005a80 <HAL_DMA_Abort_IT+0x100>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a63      	ldr	r2, [pc, #396]	; (8005b60 <HAL_DMA_Abort_IT+0x1e0>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d04f      	beq.n	8005a78 <HAL_DMA_Abort_IT+0xf8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a61      	ldr	r2, [pc, #388]	; (8005b64 <HAL_DMA_Abort_IT+0x1e4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d048      	beq.n	8005a74 <HAL_DMA_Abort_IT+0xf4>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a60      	ldr	r2, [pc, #384]	; (8005b68 <HAL_DMA_Abort_IT+0x1e8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d040      	beq.n	8005a6e <HAL_DMA_Abort_IT+0xee>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a5e      	ldr	r2, [pc, #376]	; (8005b6c <HAL_DMA_Abort_IT+0x1ec>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d038      	beq.n	8005a68 <HAL_DMA_Abort_IT+0xe8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a5d      	ldr	r2, [pc, #372]	; (8005b70 <HAL_DMA_Abort_IT+0x1f0>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d030      	beq.n	8005a62 <HAL_DMA_Abort_IT+0xe2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5b      	ldr	r2, [pc, #364]	; (8005b74 <HAL_DMA_Abort_IT+0x1f4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d028      	beq.n	8005a5c <HAL_DMA_Abort_IT+0xdc>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a53      	ldr	r2, [pc, #332]	; (8005b5c <HAL_DMA_Abort_IT+0x1dc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d020      	beq.n	8005a56 <HAL_DMA_Abort_IT+0xd6>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a57      	ldr	r2, [pc, #348]	; (8005b78 <HAL_DMA_Abort_IT+0x1f8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d019      	beq.n	8005a52 <HAL_DMA_Abort_IT+0xd2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a56      	ldr	r2, [pc, #344]	; (8005b7c <HAL_DMA_Abort_IT+0x1fc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d012      	beq.n	8005a4e <HAL_DMA_Abort_IT+0xce>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a54      	ldr	r2, [pc, #336]	; (8005b80 <HAL_DMA_Abort_IT+0x200>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00a      	beq.n	8005a48 <HAL_DMA_Abort_IT+0xc8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a53      	ldr	r2, [pc, #332]	; (8005b84 <HAL_DMA_Abort_IT+0x204>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d102      	bne.n	8005a42 <HAL_DMA_Abort_IT+0xc2>
 8005a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a40:	e01b      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a46:	e018      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a4c:	e015      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a4e:	2310      	movs	r3, #16
 8005a50:	e013      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e011      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a5a:	e00e      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a60:	e00b      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a66:	e008      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a6c:	e005      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a72:	e002      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a74:	2310      	movs	r3, #16
 8005a76:	e000      	b.n	8005a7a <HAL_DMA_Abort_IT+0xfa>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4a43      	ldr	r2, [pc, #268]	; (8005b88 <HAL_DMA_Abort_IT+0x208>)
 8005a7c:	6053      	str	r3, [r2, #4]
 8005a7e:	e057      	b.n	8005b30 <HAL_DMA_Abort_IT+0x1b0>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a36      	ldr	r2, [pc, #216]	; (8005b60 <HAL_DMA_Abort_IT+0x1e0>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d04f      	beq.n	8005b2a <HAL_DMA_Abort_IT+0x1aa>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a35      	ldr	r2, [pc, #212]	; (8005b64 <HAL_DMA_Abort_IT+0x1e4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d048      	beq.n	8005b26 <HAL_DMA_Abort_IT+0x1a6>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a33      	ldr	r2, [pc, #204]	; (8005b68 <HAL_DMA_Abort_IT+0x1e8>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d040      	beq.n	8005b20 <HAL_DMA_Abort_IT+0x1a0>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a32      	ldr	r2, [pc, #200]	; (8005b6c <HAL_DMA_Abort_IT+0x1ec>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d038      	beq.n	8005b1a <HAL_DMA_Abort_IT+0x19a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a30      	ldr	r2, [pc, #192]	; (8005b70 <HAL_DMA_Abort_IT+0x1f0>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d030      	beq.n	8005b14 <HAL_DMA_Abort_IT+0x194>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a2f      	ldr	r2, [pc, #188]	; (8005b74 <HAL_DMA_Abort_IT+0x1f4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d028      	beq.n	8005b0e <HAL_DMA_Abort_IT+0x18e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <HAL_DMA_Abort_IT+0x1dc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d020      	beq.n	8005b08 <HAL_DMA_Abort_IT+0x188>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a2b      	ldr	r2, [pc, #172]	; (8005b78 <HAL_DMA_Abort_IT+0x1f8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d019      	beq.n	8005b04 <HAL_DMA_Abort_IT+0x184>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a29      	ldr	r2, [pc, #164]	; (8005b7c <HAL_DMA_Abort_IT+0x1fc>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d012      	beq.n	8005b00 <HAL_DMA_Abort_IT+0x180>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a28      	ldr	r2, [pc, #160]	; (8005b80 <HAL_DMA_Abort_IT+0x200>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00a      	beq.n	8005afa <HAL_DMA_Abort_IT+0x17a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a26      	ldr	r2, [pc, #152]	; (8005b84 <HAL_DMA_Abort_IT+0x204>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d102      	bne.n	8005af4 <HAL_DMA_Abort_IT+0x174>
 8005aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005af2:	e01b      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005af4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005af8:	e018      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005afe:	e015      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b00:	2310      	movs	r3, #16
 8005b02:	e013      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e011      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b0c:	e00e      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b12:	e00b      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b18:	e008      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b1e:	e005      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b24:	e002      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b26:	2310      	movs	r3, #16
 8005b28:	e000      	b.n	8005b2c <HAL_DMA_Abort_IT+0x1ac>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <HAL_DMA_Abort_IT+0x20c>)
 8005b2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	4798      	blx	r3
    } 
  }
  return status;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	40020080 	.word	0x40020080
 8005b60:	40020008 	.word	0x40020008
 8005b64:	4002001c 	.word	0x4002001c
 8005b68:	40020030 	.word	0x40020030
 8005b6c:	40020044 	.word	0x40020044
 8005b70:	40020058 	.word	0x40020058
 8005b74:	4002006c 	.word	0x4002006c
 8005b78:	40020408 	.word	0x40020408
 8005b7c:	4002041c 	.word	0x4002041c
 8005b80:	40020430 	.word	0x40020430
 8005b84:	40020444 	.word	0x40020444
 8005b88:	40020400 	.word	0x40020400
 8005b8c:	40020000 	.word	0x40020000

08005b90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	2204      	movs	r2, #4
 8005bae:	409a      	lsls	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80d6 	beq.w	8005d66 <HAL_DMA_IRQHandler+0x1d6>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 80d0 	beq.w	8005d66 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d107      	bne.n	8005be4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0204 	bic.w	r2, r2, #4
 8005be2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	461a      	mov	r2, r3
 8005bea:	4b9b      	ldr	r3, [pc, #620]	; (8005e58 <HAL_DMA_IRQHandler+0x2c8>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d958      	bls.n	8005ca2 <HAL_DMA_IRQHandler+0x112>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a99      	ldr	r2, [pc, #612]	; (8005e5c <HAL_DMA_IRQHandler+0x2cc>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d04f      	beq.n	8005c9a <HAL_DMA_IRQHandler+0x10a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a98      	ldr	r2, [pc, #608]	; (8005e60 <HAL_DMA_IRQHandler+0x2d0>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d048      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x106>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a96      	ldr	r2, [pc, #600]	; (8005e64 <HAL_DMA_IRQHandler+0x2d4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d040      	beq.n	8005c90 <HAL_DMA_IRQHandler+0x100>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a95      	ldr	r2, [pc, #596]	; (8005e68 <HAL_DMA_IRQHandler+0x2d8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d038      	beq.n	8005c8a <HAL_DMA_IRQHandler+0xfa>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a93      	ldr	r2, [pc, #588]	; (8005e6c <HAL_DMA_IRQHandler+0x2dc>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d030      	beq.n	8005c84 <HAL_DMA_IRQHandler+0xf4>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a92      	ldr	r2, [pc, #584]	; (8005e70 <HAL_DMA_IRQHandler+0x2e0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d028      	beq.n	8005c7e <HAL_DMA_IRQHandler+0xee>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a89      	ldr	r2, [pc, #548]	; (8005e58 <HAL_DMA_IRQHandler+0x2c8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d020      	beq.n	8005c78 <HAL_DMA_IRQHandler+0xe8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a8e      	ldr	r2, [pc, #568]	; (8005e74 <HAL_DMA_IRQHandler+0x2e4>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d019      	beq.n	8005c74 <HAL_DMA_IRQHandler+0xe4>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a8c      	ldr	r2, [pc, #560]	; (8005e78 <HAL_DMA_IRQHandler+0x2e8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d012      	beq.n	8005c70 <HAL_DMA_IRQHandler+0xe0>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a8b      	ldr	r2, [pc, #556]	; (8005e7c <HAL_DMA_IRQHandler+0x2ec>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00a      	beq.n	8005c6a <HAL_DMA_IRQHandler+0xda>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a89      	ldr	r2, [pc, #548]	; (8005e80 <HAL_DMA_IRQHandler+0x2f0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d102      	bne.n	8005c64 <HAL_DMA_IRQHandler+0xd4>
 8005c5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c62:	e01b      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c68:	e018      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c6e:	e015      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c70:	2340      	movs	r3, #64	; 0x40
 8005c72:	e013      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c74:	2304      	movs	r3, #4
 8005c76:	e011      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005c7c:	e00e      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c82:	e00b      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005c88:	e008      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c8e:	e005      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c94:	e002      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	e000      	b.n	8005c9c <HAL_DMA_IRQHandler+0x10c>
 8005c9a:	2304      	movs	r3, #4
 8005c9c:	4a79      	ldr	r2, [pc, #484]	; (8005e84 <HAL_DMA_IRQHandler+0x2f4>)
 8005c9e:	6053      	str	r3, [r2, #4]
 8005ca0:	e057      	b.n	8005d52 <HAL_DMA_IRQHandler+0x1c2>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a6d      	ldr	r2, [pc, #436]	; (8005e5c <HAL_DMA_IRQHandler+0x2cc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d04f      	beq.n	8005d4c <HAL_DMA_IRQHandler+0x1bc>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a6b      	ldr	r2, [pc, #428]	; (8005e60 <HAL_DMA_IRQHandler+0x2d0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d048      	beq.n	8005d48 <HAL_DMA_IRQHandler+0x1b8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a6a      	ldr	r2, [pc, #424]	; (8005e64 <HAL_DMA_IRQHandler+0x2d4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d040      	beq.n	8005d42 <HAL_DMA_IRQHandler+0x1b2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a68      	ldr	r2, [pc, #416]	; (8005e68 <HAL_DMA_IRQHandler+0x2d8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d038      	beq.n	8005d3c <HAL_DMA_IRQHandler+0x1ac>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a67      	ldr	r2, [pc, #412]	; (8005e6c <HAL_DMA_IRQHandler+0x2dc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d030      	beq.n	8005d36 <HAL_DMA_IRQHandler+0x1a6>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a65      	ldr	r2, [pc, #404]	; (8005e70 <HAL_DMA_IRQHandler+0x2e0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d028      	beq.n	8005d30 <HAL_DMA_IRQHandler+0x1a0>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a5d      	ldr	r2, [pc, #372]	; (8005e58 <HAL_DMA_IRQHandler+0x2c8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d020      	beq.n	8005d2a <HAL_DMA_IRQHandler+0x19a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a61      	ldr	r2, [pc, #388]	; (8005e74 <HAL_DMA_IRQHandler+0x2e4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d019      	beq.n	8005d26 <HAL_DMA_IRQHandler+0x196>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a60      	ldr	r2, [pc, #384]	; (8005e78 <HAL_DMA_IRQHandler+0x2e8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d012      	beq.n	8005d22 <HAL_DMA_IRQHandler+0x192>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a5e      	ldr	r2, [pc, #376]	; (8005e7c <HAL_DMA_IRQHandler+0x2ec>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00a      	beq.n	8005d1c <HAL_DMA_IRQHandler+0x18c>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a5d      	ldr	r2, [pc, #372]	; (8005e80 <HAL_DMA_IRQHandler+0x2f0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d102      	bne.n	8005d16 <HAL_DMA_IRQHandler+0x186>
 8005d10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d14:	e01b      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d16:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d1a:	e018      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d20:	e015      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	e013      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d26:	2304      	movs	r3, #4
 8005d28:	e011      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005d2e:	e00e      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d34:	e00b      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d3a:	e008      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d40:	e005      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d46:	e002      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d48:	2340      	movs	r3, #64	; 0x40
 8005d4a:	e000      	b.n	8005d4e <HAL_DMA_IRQHandler+0x1be>
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	4a4e      	ldr	r2, [pc, #312]	; (8005e88 <HAL_DMA_IRQHandler+0x2f8>)
 8005d50:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8136 	beq.w	8005fc8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005d64:	e130      	b.n	8005fc8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	2202      	movs	r2, #2
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80f8 	beq.w	8005f68 <HAL_DMA_IRQHandler+0x3d8>
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80f2 	beq.w	8005f68 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 020a 	bic.w	r2, r2, #10
 8005da0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	4b29      	ldr	r3, [pc, #164]	; (8005e58 <HAL_DMA_IRQHandler+0x2c8>)
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d973      	bls.n	8005e9e <HAL_DMA_IRQHandler+0x30e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <HAL_DMA_IRQHandler+0x2cc>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d06a      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x306>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <HAL_DMA_IRQHandler+0x2d0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d063      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x302>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <HAL_DMA_IRQHandler+0x2d4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d05b      	beq.n	8005e8c <HAL_DMA_IRQHandler+0x2fc>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a23      	ldr	r2, [pc, #140]	; (8005e68 <HAL_DMA_IRQHandler+0x2d8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d038      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x2c0>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <HAL_DMA_IRQHandler+0x2dc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d030      	beq.n	8005e4a <HAL_DMA_IRQHandler+0x2ba>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a20      	ldr	r2, [pc, #128]	; (8005e70 <HAL_DMA_IRQHandler+0x2e0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d028      	beq.n	8005e44 <HAL_DMA_IRQHandler+0x2b4>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <HAL_DMA_IRQHandler+0x2c8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d020      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x2ae>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <HAL_DMA_IRQHandler+0x2e4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d019      	beq.n	8005e3a <HAL_DMA_IRQHandler+0x2aa>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	; (8005e78 <HAL_DMA_IRQHandler+0x2e8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d012      	beq.n	8005e36 <HAL_DMA_IRQHandler+0x2a6>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a19      	ldr	r2, [pc, #100]	; (8005e7c <HAL_DMA_IRQHandler+0x2ec>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00a      	beq.n	8005e30 <HAL_DMA_IRQHandler+0x2a0>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a18      	ldr	r2, [pc, #96]	; (8005e80 <HAL_DMA_IRQHandler+0x2f0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d102      	bne.n	8005e2a <HAL_DMA_IRQHandler+0x29a>
 8005e24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e28:	e036      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e2e:	e033      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e34:	e030      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e36:	2320      	movs	r3, #32
 8005e38:	e02e      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e02c      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e42:	e029      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e48:	e026      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e4e:	e023      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e54:	e020      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e56:	bf00      	nop
 8005e58:	40020080 	.word	0x40020080
 8005e5c:	40020008 	.word	0x40020008
 8005e60:	4002001c 	.word	0x4002001c
 8005e64:	40020030 	.word	0x40020030
 8005e68:	40020044 	.word	0x40020044
 8005e6c:	40020058 	.word	0x40020058
 8005e70:	4002006c 	.word	0x4002006c
 8005e74:	40020408 	.word	0x40020408
 8005e78:	4002041c 	.word	0x4002041c
 8005e7c:	40020430 	.word	0x40020430
 8005e80:	40020444 	.word	0x40020444
 8005e84:	40020400 	.word	0x40020400
 8005e88:	40020000 	.word	0x40020000
 8005e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e90:	e002      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e92:	2320      	movs	r3, #32
 8005e94:	e000      	b.n	8005e98 <HAL_DMA_IRQHandler+0x308>
 8005e96:	2302      	movs	r3, #2
 8005e98:	4a4e      	ldr	r2, [pc, #312]	; (8005fd4 <HAL_DMA_IRQHandler+0x444>)
 8005e9a:	6053      	str	r3, [r2, #4]
 8005e9c:	e057      	b.n	8005f4e <HAL_DMA_IRQHandler+0x3be>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a4d      	ldr	r2, [pc, #308]	; (8005fd8 <HAL_DMA_IRQHandler+0x448>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d04f      	beq.n	8005f48 <HAL_DMA_IRQHandler+0x3b8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a4b      	ldr	r2, [pc, #300]	; (8005fdc <HAL_DMA_IRQHandler+0x44c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d048      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x3b4>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a4a      	ldr	r2, [pc, #296]	; (8005fe0 <HAL_DMA_IRQHandler+0x450>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d040      	beq.n	8005f3e <HAL_DMA_IRQHandler+0x3ae>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a48      	ldr	r2, [pc, #288]	; (8005fe4 <HAL_DMA_IRQHandler+0x454>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d038      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x3a8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a47      	ldr	r2, [pc, #284]	; (8005fe8 <HAL_DMA_IRQHandler+0x458>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d030      	beq.n	8005f32 <HAL_DMA_IRQHandler+0x3a2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a45      	ldr	r2, [pc, #276]	; (8005fec <HAL_DMA_IRQHandler+0x45c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d028      	beq.n	8005f2c <HAL_DMA_IRQHandler+0x39c>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a44      	ldr	r2, [pc, #272]	; (8005ff0 <HAL_DMA_IRQHandler+0x460>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d020      	beq.n	8005f26 <HAL_DMA_IRQHandler+0x396>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a42      	ldr	r2, [pc, #264]	; (8005ff4 <HAL_DMA_IRQHandler+0x464>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d019      	beq.n	8005f22 <HAL_DMA_IRQHandler+0x392>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a41      	ldr	r2, [pc, #260]	; (8005ff8 <HAL_DMA_IRQHandler+0x468>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d012      	beq.n	8005f1e <HAL_DMA_IRQHandler+0x38e>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a3f      	ldr	r2, [pc, #252]	; (8005ffc <HAL_DMA_IRQHandler+0x46c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00a      	beq.n	8005f18 <HAL_DMA_IRQHandler+0x388>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a3e      	ldr	r2, [pc, #248]	; (8006000 <HAL_DMA_IRQHandler+0x470>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d102      	bne.n	8005f12 <HAL_DMA_IRQHandler+0x382>
 8005f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f10:	e01b      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f16:	e018      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f1c:	e015      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f1e:	2320      	movs	r3, #32
 8005f20:	e013      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e011      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f2a:	e00e      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f30:	e00b      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f36:	e008      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005f3c:	e005      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f42:	e002      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f44:	2320      	movs	r3, #32
 8005f46:	e000      	b.n	8005f4a <HAL_DMA_IRQHandler+0x3ba>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	4a2e      	ldr	r2, [pc, #184]	; (8006004 <HAL_DMA_IRQHandler+0x474>)
 8005f4c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d034      	beq.n	8005fc8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f66:	e02f      	b.n	8005fc8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d028      	beq.n	8005fca <HAL_DMA_IRQHandler+0x43a>
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d023      	beq.n	8005fca <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 020e 	bic.w	r2, r2, #14
 8005f90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d004      	beq.n	8005fca <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
    }
  }
  return;
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
}
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	40020400 	.word	0x40020400
 8005fd8:	40020008 	.word	0x40020008
 8005fdc:	4002001c 	.word	0x4002001c
 8005fe0:	40020030 	.word	0x40020030
 8005fe4:	40020044 	.word	0x40020044
 8005fe8:	40020058 	.word	0x40020058
 8005fec:	4002006c 	.word	0x4002006c
 8005ff0:	40020080 	.word	0x40020080
 8005ff4:	40020408 	.word	0x40020408
 8005ff8:	4002041c 	.word	0x4002041c
 8005ffc:	40020430 	.word	0x40020430
 8006000:	40020444 	.word	0x40020444
 8006004:	40020000 	.word	0x40020000

08006008 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr

08006020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006020:	b480      	push	{r7}
 8006022:	b08b      	sub	sp, #44	; 0x2c
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800602a:	2300      	movs	r3, #0
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800602e:	2300      	movs	r3, #0
 8006030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006032:	e179      	b.n	8006328 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006034:	2201      	movs	r2, #1
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	fa02 f303 	lsl.w	r3, r2, r3
 800603c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	4013      	ands	r3, r2
 8006046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	429a      	cmp	r2, r3
 800604e:	f040 8168 	bne.w	8006322 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	4aa0      	ldr	r2, [pc, #640]	; (80062d8 <HAL_GPIO_Init+0x2b8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d05e      	beq.n	800611a <HAL_GPIO_Init+0xfa>
 800605c:	4a9e      	ldr	r2, [pc, #632]	; (80062d8 <HAL_GPIO_Init+0x2b8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d875      	bhi.n	800614e <HAL_GPIO_Init+0x12e>
 8006062:	4a9e      	ldr	r2, [pc, #632]	; (80062dc <HAL_GPIO_Init+0x2bc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d058      	beq.n	800611a <HAL_GPIO_Init+0xfa>
 8006068:	4a9c      	ldr	r2, [pc, #624]	; (80062dc <HAL_GPIO_Init+0x2bc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d86f      	bhi.n	800614e <HAL_GPIO_Init+0x12e>
 800606e:	4a9c      	ldr	r2, [pc, #624]	; (80062e0 <HAL_GPIO_Init+0x2c0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d052      	beq.n	800611a <HAL_GPIO_Init+0xfa>
 8006074:	4a9a      	ldr	r2, [pc, #616]	; (80062e0 <HAL_GPIO_Init+0x2c0>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d869      	bhi.n	800614e <HAL_GPIO_Init+0x12e>
 800607a:	4a9a      	ldr	r2, [pc, #616]	; (80062e4 <HAL_GPIO_Init+0x2c4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d04c      	beq.n	800611a <HAL_GPIO_Init+0xfa>
 8006080:	4a98      	ldr	r2, [pc, #608]	; (80062e4 <HAL_GPIO_Init+0x2c4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d863      	bhi.n	800614e <HAL_GPIO_Init+0x12e>
 8006086:	4a98      	ldr	r2, [pc, #608]	; (80062e8 <HAL_GPIO_Init+0x2c8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d046      	beq.n	800611a <HAL_GPIO_Init+0xfa>
 800608c:	4a96      	ldr	r2, [pc, #600]	; (80062e8 <HAL_GPIO_Init+0x2c8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d85d      	bhi.n	800614e <HAL_GPIO_Init+0x12e>
 8006092:	2b12      	cmp	r3, #18
 8006094:	d82a      	bhi.n	80060ec <HAL_GPIO_Init+0xcc>
 8006096:	2b12      	cmp	r3, #18
 8006098:	d859      	bhi.n	800614e <HAL_GPIO_Init+0x12e>
 800609a:	a201      	add	r2, pc, #4	; (adr r2, 80060a0 <HAL_GPIO_Init+0x80>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	0800611b 	.word	0x0800611b
 80060a4:	080060f5 	.word	0x080060f5
 80060a8:	08006107 	.word	0x08006107
 80060ac:	08006149 	.word	0x08006149
 80060b0:	0800614f 	.word	0x0800614f
 80060b4:	0800614f 	.word	0x0800614f
 80060b8:	0800614f 	.word	0x0800614f
 80060bc:	0800614f 	.word	0x0800614f
 80060c0:	0800614f 	.word	0x0800614f
 80060c4:	0800614f 	.word	0x0800614f
 80060c8:	0800614f 	.word	0x0800614f
 80060cc:	0800614f 	.word	0x0800614f
 80060d0:	0800614f 	.word	0x0800614f
 80060d4:	0800614f 	.word	0x0800614f
 80060d8:	0800614f 	.word	0x0800614f
 80060dc:	0800614f 	.word	0x0800614f
 80060e0:	0800614f 	.word	0x0800614f
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006111 	.word	0x08006111
 80060ec:	4a7f      	ldr	r2, [pc, #508]	; (80062ec <HAL_GPIO_Init+0x2cc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80060f2:	e02c      	b.n	800614e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	623b      	str	r3, [r7, #32]
          break;
 80060fa:	e029      	b.n	8006150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	3304      	adds	r3, #4
 8006102:	623b      	str	r3, [r7, #32]
          break;
 8006104:	e024      	b.n	8006150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	3308      	adds	r3, #8
 800610c:	623b      	str	r3, [r7, #32]
          break;
 800610e:	e01f      	b.n	8006150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	330c      	adds	r3, #12
 8006116:	623b      	str	r3, [r7, #32]
          break;
 8006118:	e01a      	b.n	8006150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d102      	bne.n	8006128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006122:	2304      	movs	r3, #4
 8006124:	623b      	str	r3, [r7, #32]
          break;
 8006126:	e013      	b.n	8006150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d105      	bne.n	800613c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006130:	2308      	movs	r3, #8
 8006132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	611a      	str	r2, [r3, #16]
          break;
 800613a:	e009      	b.n	8006150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800613c:	2308      	movs	r3, #8
 800613e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	615a      	str	r2, [r3, #20]
          break;
 8006146:	e003      	b.n	8006150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006148:	2300      	movs	r3, #0
 800614a:	623b      	str	r3, [r7, #32]
          break;
 800614c:	e000      	b.n	8006150 <HAL_GPIO_Init+0x130>
          break;
 800614e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2bff      	cmp	r3, #255	; 0xff
 8006154:	d801      	bhi.n	800615a <HAL_GPIO_Init+0x13a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	e001      	b.n	800615e <HAL_GPIO_Init+0x13e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	2bff      	cmp	r3, #255	; 0xff
 8006164:	d802      	bhi.n	800616c <HAL_GPIO_Init+0x14c>
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	e002      	b.n	8006172 <HAL_GPIO_Init+0x152>
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	3b08      	subs	r3, #8
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	210f      	movs	r1, #15
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	fa01 f303 	lsl.w	r3, r1, r3
 8006180:	43db      	mvns	r3, r3
 8006182:	401a      	ands	r2, r3
 8006184:	6a39      	ldr	r1, [r7, #32]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	431a      	orrs	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80c1 	beq.w	8006322 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80061a0:	4b53      	ldr	r3, [pc, #332]	; (80062f0 <HAL_GPIO_Init+0x2d0>)
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	4a52      	ldr	r2, [pc, #328]	; (80062f0 <HAL_GPIO_Init+0x2d0>)
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6193      	str	r3, [r2, #24]
 80061ac:	4b50      	ldr	r3, [pc, #320]	; (80062f0 <HAL_GPIO_Init+0x2d0>)
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f003 0301 	and.w	r3, r3, #1
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80061b8:	4a4e      	ldr	r2, [pc, #312]	; (80062f4 <HAL_GPIO_Init+0x2d4>)
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	089b      	lsrs	r3, r3, #2
 80061be:	3302      	adds	r3, #2
 80061c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	220f      	movs	r2, #15
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4013      	ands	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a46      	ldr	r2, [pc, #280]	; (80062f8 <HAL_GPIO_Init+0x2d8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d01f      	beq.n	8006224 <HAL_GPIO_Init+0x204>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a45      	ldr	r2, [pc, #276]	; (80062fc <HAL_GPIO_Init+0x2dc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d019      	beq.n	8006220 <HAL_GPIO_Init+0x200>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a44      	ldr	r2, [pc, #272]	; (8006300 <HAL_GPIO_Init+0x2e0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_GPIO_Init+0x1fc>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a43      	ldr	r2, [pc, #268]	; (8006304 <HAL_GPIO_Init+0x2e4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00d      	beq.n	8006218 <HAL_GPIO_Init+0x1f8>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a42      	ldr	r2, [pc, #264]	; (8006308 <HAL_GPIO_Init+0x2e8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <HAL_GPIO_Init+0x1f4>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a41      	ldr	r2, [pc, #260]	; (800630c <HAL_GPIO_Init+0x2ec>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_GPIO_Init+0x1f0>
 800620c:	2305      	movs	r3, #5
 800620e:	e00a      	b.n	8006226 <HAL_GPIO_Init+0x206>
 8006210:	2306      	movs	r3, #6
 8006212:	e008      	b.n	8006226 <HAL_GPIO_Init+0x206>
 8006214:	2304      	movs	r3, #4
 8006216:	e006      	b.n	8006226 <HAL_GPIO_Init+0x206>
 8006218:	2303      	movs	r3, #3
 800621a:	e004      	b.n	8006226 <HAL_GPIO_Init+0x206>
 800621c:	2302      	movs	r3, #2
 800621e:	e002      	b.n	8006226 <HAL_GPIO_Init+0x206>
 8006220:	2301      	movs	r3, #1
 8006222:	e000      	b.n	8006226 <HAL_GPIO_Init+0x206>
 8006224:	2300      	movs	r3, #0
 8006226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006228:	f002 0203 	and.w	r2, r2, #3
 800622c:	0092      	lsls	r2, r2, #2
 800622e:	4093      	lsls	r3, r2
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006236:	492f      	ldr	r1, [pc, #188]	; (80062f4 <HAL_GPIO_Init+0x2d4>)
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	089b      	lsrs	r3, r3, #2
 800623c:	3302      	adds	r3, #2
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d006      	beq.n	800625e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006250:	4b2f      	ldr	r3, [pc, #188]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	492e      	ldr	r1, [pc, #184]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	4313      	orrs	r3, r2
 800625a:	600b      	str	r3, [r1, #0]
 800625c:	e006      	b.n	800626c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800625e:	4b2c      	ldr	r3, [pc, #176]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	43db      	mvns	r3, r3
 8006266:	492a      	ldr	r1, [pc, #168]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006268:	4013      	ands	r3, r2
 800626a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d006      	beq.n	8006286 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006278:	4b25      	ldr	r3, [pc, #148]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4924      	ldr	r1, [pc, #144]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	4313      	orrs	r3, r2
 8006282:	604b      	str	r3, [r1, #4]
 8006284:	e006      	b.n	8006294 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006286:	4b22      	ldr	r3, [pc, #136]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	43db      	mvns	r3, r3
 800628e:	4920      	ldr	r1, [pc, #128]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 8006290:	4013      	ands	r3, r2
 8006292:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d006      	beq.n	80062ae <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80062a0:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	491a      	ldr	r1, [pc, #104]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	608b      	str	r3, [r1, #8]
 80062ac:	e006      	b.n	80062bc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80062ae:	4b18      	ldr	r3, [pc, #96]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	43db      	mvns	r3, r3
 80062b6:	4916      	ldr	r1, [pc, #88]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d025      	beq.n	8006314 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80062c8:	4b11      	ldr	r3, [pc, #68]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062ca:	68da      	ldr	r2, [r3, #12]
 80062cc:	4910      	ldr	r1, [pc, #64]	; (8006310 <HAL_GPIO_Init+0x2f0>)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60cb      	str	r3, [r1, #12]
 80062d4:	e025      	b.n	8006322 <HAL_GPIO_Init+0x302>
 80062d6:	bf00      	nop
 80062d8:	10320000 	.word	0x10320000
 80062dc:	10310000 	.word	0x10310000
 80062e0:	10220000 	.word	0x10220000
 80062e4:	10210000 	.word	0x10210000
 80062e8:	10120000 	.word	0x10120000
 80062ec:	10110000 	.word	0x10110000
 80062f0:	40021000 	.word	0x40021000
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40010800 	.word	0x40010800
 80062fc:	40010c00 	.word	0x40010c00
 8006300:	40011000 	.word	0x40011000
 8006304:	40011400 	.word	0x40011400
 8006308:	40011800 	.word	0x40011800
 800630c:	40011c00 	.word	0x40011c00
 8006310:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_GPIO_Init+0x324>)
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	43db      	mvns	r3, r3
 800631c:	4909      	ldr	r1, [pc, #36]	; (8006344 <HAL_GPIO_Init+0x324>)
 800631e:	4013      	ands	r3, r2
 8006320:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	3301      	adds	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632e:	fa22 f303 	lsr.w	r3, r2, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	f47f ae7e 	bne.w	8006034 <HAL_GPIO_Init+0x14>
  }
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	372c      	adds	r7, #44	; 0x2c
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	40010400 	.word	0x40010400

08006348 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006348:	b480      	push	{r7}
 800634a:	b089      	sub	sp, #36	; 0x24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8006356:	e0a6      	b.n	80064a6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006358:	2201      	movs	r2, #1
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	4013      	ands	r3, r2
 8006364:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8099 	beq.w	80064a0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800636e:	4a54      	ldr	r2, [pc, #336]	; (80064c0 <HAL_GPIO_DeInit+0x178>)
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	089b      	lsrs	r3, r3, #2
 8006374:	3302      	adds	r3, #2
 8006376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	220f      	movs	r2, #15
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4013      	ands	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a4c      	ldr	r2, [pc, #304]	; (80064c4 <HAL_GPIO_DeInit+0x17c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d01f      	beq.n	80063d8 <HAL_GPIO_DeInit+0x90>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a4b      	ldr	r2, [pc, #300]	; (80064c8 <HAL_GPIO_DeInit+0x180>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d019      	beq.n	80063d4 <HAL_GPIO_DeInit+0x8c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a4a      	ldr	r2, [pc, #296]	; (80064cc <HAL_GPIO_DeInit+0x184>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d013      	beq.n	80063d0 <HAL_GPIO_DeInit+0x88>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a49      	ldr	r2, [pc, #292]	; (80064d0 <HAL_GPIO_DeInit+0x188>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00d      	beq.n	80063cc <HAL_GPIO_DeInit+0x84>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a48      	ldr	r2, [pc, #288]	; (80064d4 <HAL_GPIO_DeInit+0x18c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <HAL_GPIO_DeInit+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a47      	ldr	r2, [pc, #284]	; (80064d8 <HAL_GPIO_DeInit+0x190>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d101      	bne.n	80063c4 <HAL_GPIO_DeInit+0x7c>
 80063c0:	2305      	movs	r3, #5
 80063c2:	e00a      	b.n	80063da <HAL_GPIO_DeInit+0x92>
 80063c4:	2306      	movs	r3, #6
 80063c6:	e008      	b.n	80063da <HAL_GPIO_DeInit+0x92>
 80063c8:	2304      	movs	r3, #4
 80063ca:	e006      	b.n	80063da <HAL_GPIO_DeInit+0x92>
 80063cc:	2303      	movs	r3, #3
 80063ce:	e004      	b.n	80063da <HAL_GPIO_DeInit+0x92>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e002      	b.n	80063da <HAL_GPIO_DeInit+0x92>
 80063d4:	2301      	movs	r3, #1
 80063d6:	e000      	b.n	80063da <HAL_GPIO_DeInit+0x92>
 80063d8:	2300      	movs	r3, #0
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	f002 0203 	and.w	r2, r2, #3
 80063e0:	0092      	lsls	r2, r2, #2
 80063e2:	4093      	lsls	r3, r2
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d132      	bne.n	8006450 <HAL_GPIO_DeInit+0x108>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	f003 0303 	and.w	r3, r3, #3
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	220f      	movs	r2, #15
 80063f4:	fa02 f303 	lsl.w	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80063fa:	4a31      	ldr	r2, [pc, #196]	; (80064c0 <HAL_GPIO_DeInit+0x178>)
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	3302      	adds	r3, #2
 8006402:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	43da      	mvns	r2, r3
 800640a:	482d      	ldr	r0, [pc, #180]	; (80064c0 <HAL_GPIO_DeInit+0x178>)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	089b      	lsrs	r3, r3, #2
 8006410:	400a      	ands	r2, r1
 8006412:	3302      	adds	r3, #2
 8006414:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8006418:	4b30      	ldr	r3, [pc, #192]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	43db      	mvns	r3, r3
 8006420:	492e      	ldr	r1, [pc, #184]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 8006422:	4013      	ands	r3, r2
 8006424:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8006426:	4b2d      	ldr	r3, [pc, #180]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	43db      	mvns	r3, r3
 800642e:	492b      	ldr	r1, [pc, #172]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 8006430:	4013      	ands	r3, r2
 8006432:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8006434:	4b29      	ldr	r3, [pc, #164]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	43db      	mvns	r3, r3
 800643c:	4927      	ldr	r1, [pc, #156]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 800643e:	4013      	ands	r3, r2
 8006440:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8006442:	4b26      	ldr	r3, [pc, #152]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	43db      	mvns	r3, r3
 800644a:	4924      	ldr	r1, [pc, #144]	; (80064dc <HAL_GPIO_DeInit+0x194>)
 800644c:	4013      	ands	r3, r2
 800644e:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d801      	bhi.n	800645a <HAL_GPIO_DeInit+0x112>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	e001      	b.n	800645e <HAL_GPIO_DeInit+0x116>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3304      	adds	r3, #4
 800645e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	2bff      	cmp	r3, #255	; 0xff
 8006464:	d802      	bhi.n	800646c <HAL_GPIO_DeInit+0x124>
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	e002      	b.n	8006472 <HAL_GPIO_DeInit+0x12a>
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3b08      	subs	r3, #8
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	210f      	movs	r1, #15
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	fa01 f303 	lsl.w	r3, r1, r3
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	2104      	movs	r1, #4
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	fa01 f303 	lsl.w	r3, r1, r3
 800648c:	431a      	orrs	r2, r3
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	43db      	mvns	r3, r3
 800649a:	401a      	ands	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
    }

    position++;
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	3301      	adds	r3, #1
 80064a4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80064a6:	683a      	ldr	r2, [r7, #0]
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f47f af52 	bne.w	8006358 <HAL_GPIO_DeInit+0x10>
  }
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	3724      	adds	r7, #36	; 0x24
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	40010000 	.word	0x40010000
 80064c4:	40010800 	.word	0x40010800
 80064c8:	40010c00 	.word	0x40010c00
 80064cc:	40011000 	.word	0x40011000
 80064d0:	40011400 	.word	0x40011400
 80064d4:	40011800 	.word	0x40011800
 80064d8:	40011c00 	.word	0x40011c00
 80064dc:	40010400 	.word	0x40010400

080064e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	4013      	ands	r3, r2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d006      	beq.n	8006504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064f6:	4a05      	ldr	r2, [pc, #20]	; (800650c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064f8:	88fb      	ldrh	r3, [r7, #6]
 80064fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064fc:	88fb      	ldrh	r3, [r7, #6]
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 f806 	bl	8006510 <HAL_GPIO_EXTI_Callback>
  }
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	40010400 	.word	0x40010400

08006510 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	bc80      	pop	{r7}
 8006522:	4770      	bx	lr

08006524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e12b      	b.n	800678e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fd fee0 	bl	8004310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2224      	movs	r2, #36	; 0x24
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006576:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006586:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006588:	f003 f9e0 	bl	800994c <HAL_RCC_GetPCLK1Freq>
 800658c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	4a81      	ldr	r2, [pc, #516]	; (8006798 <HAL_I2C_Init+0x274>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d807      	bhi.n	80065a8 <HAL_I2C_Init+0x84>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	4a80      	ldr	r2, [pc, #512]	; (800679c <HAL_I2C_Init+0x278>)
 800659c:	4293      	cmp	r3, r2
 800659e:	bf94      	ite	ls
 80065a0:	2301      	movls	r3, #1
 80065a2:	2300      	movhi	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	e006      	b.n	80065b6 <HAL_I2C_Init+0x92>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4a7d      	ldr	r2, [pc, #500]	; (80067a0 <HAL_I2C_Init+0x27c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bf94      	ite	ls
 80065b0:	2301      	movls	r3, #1
 80065b2:	2300      	movhi	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e0e7      	b.n	800678e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a78      	ldr	r2, [pc, #480]	; (80067a4 <HAL_I2C_Init+0x280>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	0c9b      	lsrs	r3, r3, #18
 80065c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	6a1b      	ldr	r3, [r3, #32]
 80065e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	4a6a      	ldr	r2, [pc, #424]	; (8006798 <HAL_I2C_Init+0x274>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d802      	bhi.n	80065f8 <HAL_I2C_Init+0xd4>
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	3301      	adds	r3, #1
 80065f6:	e009      	b.n	800660c <HAL_I2C_Init+0xe8>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	4a69      	ldr	r2, [pc, #420]	; (80067a8 <HAL_I2C_Init+0x284>)
 8006604:	fba2 2303 	umull	r2, r3, r2, r3
 8006608:	099b      	lsrs	r3, r3, #6
 800660a:	3301      	adds	r3, #1
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	430b      	orrs	r3, r1
 8006612:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800661e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	495c      	ldr	r1, [pc, #368]	; (8006798 <HAL_I2C_Init+0x274>)
 8006628:	428b      	cmp	r3, r1
 800662a:	d819      	bhi.n	8006660 <HAL_I2C_Init+0x13c>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	1e59      	subs	r1, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	fbb1 f3f3 	udiv	r3, r1, r3
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006640:	400b      	ands	r3, r1
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_I2C_Init+0x138>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1e59      	subs	r1, r3, #1
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	005b      	lsls	r3, r3, #1
 8006650:	fbb1 f3f3 	udiv	r3, r1, r3
 8006654:	3301      	adds	r3, #1
 8006656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800665a:	e051      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 800665c:	2304      	movs	r3, #4
 800665e:	e04f      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d111      	bne.n	800668c <HAL_I2C_Init+0x168>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1e58      	subs	r0, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6859      	ldr	r1, [r3, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	440b      	add	r3, r1
 8006676:	fbb0 f3f3 	udiv	r3, r0, r3
 800667a:	3301      	adds	r3, #1
 800667c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	e012      	b.n	80066b2 <HAL_I2C_Init+0x18e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	1e58      	subs	r0, r3, #1
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6859      	ldr	r1, [r3, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	440b      	add	r3, r1
 800669a:	0099      	lsls	r1, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	fbb0 f3f3 	udiv	r3, r0, r3
 80066a2:	3301      	adds	r3, #1
 80066a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <HAL_I2C_Init+0x196>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e022      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10e      	bne.n	80066e0 <HAL_I2C_Init+0x1bc>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1e58      	subs	r0, r3, #1
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6859      	ldr	r1, [r3, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	005b      	lsls	r3, r3, #1
 80066ce:	440b      	add	r3, r1
 80066d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80066d4:	3301      	adds	r3, #1
 80066d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066de:	e00f      	b.n	8006700 <HAL_I2C_Init+0x1dc>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	1e58      	subs	r0, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6859      	ldr	r1, [r3, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	0099      	lsls	r1, r3, #2
 80066f0:	440b      	add	r3, r1
 80066f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066f6:	3301      	adds	r3, #1
 80066f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	6809      	ldr	r1, [r1, #0]
 8006704:	4313      	orrs	r3, r2
 8006706:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69da      	ldr	r2, [r3, #28]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800672e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6911      	ldr	r1, [r2, #16]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68d2      	ldr	r2, [r2, #12]
 800673a:	4311      	orrs	r1, r2
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6812      	ldr	r2, [r2, #0]
 8006740:	430b      	orrs	r3, r1
 8006742:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695a      	ldr	r2, [r3, #20]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0201 	orr.w	r2, r2, #1
 800676e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	000186a0 	.word	0x000186a0
 800679c:	001e847f 	.word	0x001e847f
 80067a0:	003d08ff 	.word	0x003d08ff
 80067a4:	431bde83 	.word	0x431bde83
 80067a8:	10624dd3 	.word	0x10624dd3

080067ac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d101      	bne.n	80067be <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e021      	b.n	8006802 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2224      	movs	r2, #36	; 0x24
 80067c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fd fe40 	bl	800445c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af02      	add	r7, sp, #8
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	4608      	mov	r0, r1
 8006816:	4611      	mov	r1, r2
 8006818:	461a      	mov	r2, r3
 800681a:	4603      	mov	r3, r0
 800681c:	817b      	strh	r3, [r7, #10]
 800681e:	460b      	mov	r3, r1
 8006820:	813b      	strh	r3, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006826:	f7fe fe43 	bl	80054b0 <HAL_GetTick>
 800682a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b20      	cmp	r3, #32
 8006836:	f040 80d9 	bne.w	80069ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	2319      	movs	r3, #25
 8006840:	2201      	movs	r2, #1
 8006842:	496d      	ldr	r1, [pc, #436]	; (80069f8 <HAL_I2C_Mem_Write+0x1ec>)
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f002 fa85 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006850:	2302      	movs	r3, #2
 8006852:	e0cc      	b.n	80069ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_I2C_Mem_Write+0x56>
 800685e:	2302      	movs	r3, #2
 8006860:	e0c5      	b.n	80069ee <HAL_I2C_Mem_Write+0x1e2>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	2b01      	cmp	r3, #1
 8006876:	d007      	beq.n	8006888 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f042 0201 	orr.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2221      	movs	r2, #33	; 0x21
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2240      	movs	r2, #64	; 0x40
 80068a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a3a      	ldr	r2, [r7, #32]
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068be:	b29a      	uxth	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a4d      	ldr	r2, [pc, #308]	; (80069fc <HAL_I2C_Mem_Write+0x1f0>)
 80068c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068ca:	88f8      	ldrh	r0, [r7, #6]
 80068cc:	893a      	ldrh	r2, [r7, #8]
 80068ce:	8979      	ldrh	r1, [r7, #10]
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	4603      	mov	r3, r0
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f002 f814 	bl	8008908 <I2C_RequestMemoryWrite>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d052      	beq.n	800698c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e081      	b.n	80069ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f002 fb06 	bl	8008f00 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00d      	beq.n	8006916 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d107      	bne.n	8006912 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006910:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e06b      	b.n	80069ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006930:	3b01      	subs	r3, #1
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b04      	cmp	r3, #4
 8006952:	d11b      	bne.n	800698c <HAL_I2C_Mem_Write+0x180>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006958:	2b00      	cmp	r3, #0
 800695a:	d017      	beq.n	800698c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	781a      	ldrb	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1aa      	bne.n	80068ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f002 faf2 	bl	8008f82 <I2C_WaitOnBTFFlagUntilTimeout>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00d      	beq.n	80069c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d107      	bne.n	80069bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e016      	b.n	80069ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	e000      	b.n	80069ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80069ec:	2302      	movs	r3, #2
  }
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	00100002 	.word	0x00100002
 80069fc:	ffff0000 	.word	0xffff0000

08006a00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08c      	sub	sp, #48	; 0x30
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4603      	mov	r3, r0
 8006a10:	817b      	strh	r3, [r7, #10]
 8006a12:	460b      	mov	r3, r1
 8006a14:	813b      	strh	r3, [r7, #8]
 8006a16:	4613      	mov	r3, r2
 8006a18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a1e:	f7fe fd47 	bl	80054b0 <HAL_GetTick>
 8006a22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	f040 8244 	bne.w	8006eba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	2319      	movs	r3, #25
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4982      	ldr	r1, [pc, #520]	; (8006c44 <HAL_I2C_Mem_Read+0x244>)
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f002 f989 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006a48:	2302      	movs	r3, #2
 8006a4a:	e237      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d101      	bne.n	8006a5a <HAL_I2C_Mem_Read+0x5a>
 8006a56:	2302      	movs	r3, #2
 8006a58:	e230      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0301 	and.w	r3, r3, #1
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d007      	beq.n	8006a80 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f042 0201 	orr.w	r2, r2, #1
 8006a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2222      	movs	r2, #34	; 0x22
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2240      	movs	r2, #64	; 0x40
 8006a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4a62      	ldr	r2, [pc, #392]	; (8006c48 <HAL_I2C_Mem_Read+0x248>)
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ac2:	88f8      	ldrh	r0, [r7, #6]
 8006ac4:	893a      	ldrh	r2, [r7, #8]
 8006ac6:	8979      	ldrh	r1, [r7, #10]
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 ffae 	bl	8008a34 <I2C_RequestMemoryRead>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e1ec      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d113      	bne.n	8006b12 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aea:	2300      	movs	r3, #0
 8006aec:	61fb      	str	r3, [r7, #28]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	61fb      	str	r3, [r7, #28]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	61fb      	str	r3, [r7, #28]
 8006afe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	e1c0      	b.n	8006e94 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d11e      	bne.n	8006b58 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b2a:	b672      	cpsid	i
}
 8006b2c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006b54:	b662      	cpsie	i
}
 8006b56:	e035      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d11e      	bne.n	8006b9e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b6e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b70:	b672      	cpsid	i
}
 8006b72:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006b9a:	b662      	cpsie	i
}
 8006b9c:	e012      	b.n	8006bc4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006bc4:	e166      	b.n	8006e94 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	f200 811f 	bhi.w	8006e0e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d123      	bne.n	8006c20 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f002 fa43 	bl	8009068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e167      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c1e:	e139      	b.n	8006e94 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d152      	bne.n	8006cce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2e:	2200      	movs	r2, #0
 8006c30:	4906      	ldr	r1, [pc, #24]	; (8006c4c <HAL_I2C_Mem_Read+0x24c>)
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f002 f88e 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e13c      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
 8006c42:	bf00      	nop
 8006c44:	00100002 	.word	0x00100002
 8006c48:	ffff0000 	.word	0xffff0000
 8006c4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006c50:	b672      	cpsid	i
}
 8006c52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	b2d2      	uxtb	r2, r2
 8006c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c80:	3b01      	subs	r3, #1
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006c96:	b662      	cpsie	i
}
 8006c98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691a      	ldr	r2, [r3, #16]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	b2d2      	uxtb	r2, r2
 8006ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ccc:	e0e2      	b.n	8006e94 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	497b      	ldr	r1, [pc, #492]	; (8006ec4 <HAL_I2C_Mem_Read+0x4c4>)
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f002 f83b 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d001      	beq.n	8006ce8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0e9      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006cf8:	b672      	cpsid	i
}
 8006cfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691a      	ldr	r2, [r3, #16]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d2e:	4b66      	ldr	r3, [pc, #408]	; (8006ec8 <HAL_I2C_Mem_Read+0x4c8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	08db      	lsrs	r3, r3, #3
 8006d34:	4a65      	ldr	r2, [pc, #404]	; (8006ecc <HAL_I2C_Mem_Read+0x4cc>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	0a1a      	lsrs	r2, r3, #8
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	00da      	lsls	r2, r3, #3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d118      	bne.n	8006d86 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f043 0220 	orr.w	r2, r3, #32
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006d76:	b662      	cpsie	i
}
 8006d78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e09a      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0304 	and.w	r3, r3, #4
 8006d90:	2b04      	cmp	r3, #4
 8006d92:	d1d9      	bne.n	8006d48 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691a      	ldr	r2, [r3, #16]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006dd6:	b662      	cpsie	i
}
 8006dd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	691a      	ldr	r2, [r3, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e0c:	e042      	b.n	8006e94 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f002 f928 	bl	8009068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e04c      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	b2d2      	uxtb	r2, r2
 8006e2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	f003 0304 	and.w	r3, r3, #4
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d118      	bne.n	8006e94 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f47f ae94 	bne.w	8006bc6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3728      	adds	r7, #40	; 0x28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	00010004 	.word	0x00010004
 8006ec8:	20000000 	.word	0x20000000
 8006ecc:	14f8b589 	.word	0x14f8b589

08006ed0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08a      	sub	sp, #40	; 0x28
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	607a      	str	r2, [r7, #4]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	460b      	mov	r3, r1
 8006ede:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006ee0:	f7fe fae6 	bl	80054b0 <HAL_GetTick>
 8006ee4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	f040 8111 	bne.w	800711a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	2319      	movs	r3, #25
 8006efe:	2201      	movs	r2, #1
 8006f00:	4988      	ldr	r1, [pc, #544]	; (8007124 <HAL_I2C_IsDeviceReady+0x254>)
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f001 ff26 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	e104      	b.n	800711c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_I2C_IsDeviceReady+0x50>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e0fd      	b.n	800711c <HAL_I2C_IsDeviceReady+0x24c>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d007      	beq.n	8006f46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2224      	movs	r2, #36	; 0x24
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	4a70      	ldr	r2, [pc, #448]	; (8007128 <HAL_I2C_IsDeviceReady+0x258>)
 8006f68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 fee4 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00d      	beq.n	8006fae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa0:	d103      	bne.n	8006faa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e0b6      	b.n	800711c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fae:	897b      	ldrh	r3, [r7, #10]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006fbe:	f7fe fa77 	bl	80054b0 <HAL_GetTick>
 8006fc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe8:	bf0c      	ite	eq
 8006fea:	2301      	moveq	r3, #1
 8006fec:	2300      	movne	r3, #0
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006ff2:	e025      	b.n	8007040 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ff4:	f7fe fa5c 	bl	80054b0 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	429a      	cmp	r2, r3
 8007002:	d302      	bcc.n	800700a <HAL_I2C_IsDeviceReady+0x13a>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	22a0      	movs	r2, #160	; 0xa0
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695b      	ldr	r3, [r3, #20]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b02      	cmp	r3, #2
 800701e:	bf0c      	ite	eq
 8007020:	2301      	moveq	r3, #1
 8007022:	2300      	movne	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007036:	bf0c      	ite	eq
 8007038:	2301      	moveq	r3, #1
 800703a:	2300      	movne	r3, #0
 800703c:	b2db      	uxtb	r3, r3
 800703e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2ba0      	cmp	r3, #160	; 0xa0
 800704a:	d005      	beq.n	8007058 <HAL_I2C_IsDeviceReady+0x188>
 800704c:	7dfb      	ldrb	r3, [r7, #23]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <HAL_I2C_IsDeviceReady+0x188>
 8007052:	7dbb      	ldrb	r3, [r7, #22]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0cd      	beq.n	8006ff4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2220      	movs	r2, #32
 800705c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f003 0302 	and.w	r3, r3, #2
 800706a:	2b02      	cmp	r3, #2
 800706c:	d129      	bne.n	80070c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800707c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800707e:	2300      	movs	r3, #0
 8007080:	613b      	str	r3, [r7, #16]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	2319      	movs	r3, #25
 800709a:	2201      	movs	r2, #1
 800709c:	4921      	ldr	r1, [pc, #132]	; (8007124 <HAL_I2C_IsDeviceReady+0x254>)
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 fe58 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e036      	b.n	800711c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	e02c      	b.n	800711c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80070da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	2319      	movs	r3, #25
 80070e2:	2201      	movs	r2, #1
 80070e4:	490f      	ldr	r1, [pc, #60]	; (8007124 <HAL_I2C_IsDeviceReady+0x254>)
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f001 fe34 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e012      	b.n	800711c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	3301      	adds	r3, #1
 80070fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	f4ff af32 	bcc.w	8006f6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	00100002 	.word	0x00100002
 8007128:	ffff0000 	.word	0xffff0000

0800712c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007144:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800714c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007154:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b10      	cmp	r3, #16
 800715a:	d003      	beq.n	8007164 <HAL_I2C_EV_IRQHandler+0x38>
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	f040 80c1 	bne.w	80072e6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10d      	bne.n	800719a <HAL_I2C_EV_IRQHandler+0x6e>
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007184:	d003      	beq.n	800718e <HAL_I2C_EV_IRQHandler+0x62>
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800718c:	d101      	bne.n	8007192 <HAL_I2C_EV_IRQHandler+0x66>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <HAL_I2C_EV_IRQHandler+0x68>
 8007192:	2300      	movs	r3, #0
 8007194:	2b01      	cmp	r3, #1
 8007196:	f000 8132 	beq.w	80073fe <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00c      	beq.n	80071be <HAL_I2C_EV_IRQHandler+0x92>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	0a5b      	lsrs	r3, r3, #9
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d006      	beq.n	80071be <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 ffdd 	bl	8009170 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fd84 	bl	8007cc4 <I2C_Master_SB>
 80071bc:	e092      	b.n	80072e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	08db      	lsrs	r3, r3, #3
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d009      	beq.n	80071de <HAL_I2C_EV_IRQHandler+0xb2>
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	0a5b      	lsrs	r3, r3, #9
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fdf9 	bl	8007dce <I2C_Master_ADD10>
 80071dc:	e082      	b.n	80072e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	085b      	lsrs	r3, r3, #1
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d009      	beq.n	80071fe <HAL_I2C_EV_IRQHandler+0xd2>
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	0a5b      	lsrs	r3, r3, #9
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fe12 	bl	8007e20 <I2C_Master_ADDR>
 80071fc:	e072      	b.n	80072e4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	089b      	lsrs	r3, r3, #2
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d03b      	beq.n	8007282 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007218:	f000 80f3 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	f003 0301 	and.w	r3, r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <HAL_I2C_EV_IRQHandler+0x11c>
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	0a9b      	lsrs	r3, r3, #10
 800722c:	f003 0301 	and.w	r3, r3, #1
 8007230:	2b00      	cmp	r3, #0
 8007232:	d009      	beq.n	8007248 <HAL_I2C_EV_IRQHandler+0x11c>
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	089b      	lsrs	r3, r3, #2
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b00      	cmp	r3, #0
 800723e:	d103      	bne.n	8007248 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f9fe 	bl	8007642 <I2C_MasterTransmit_TXE>
 8007246:	e04d      	b.n	80072e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	089b      	lsrs	r3, r3, #2
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 80d6 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	0a5b      	lsrs	r3, r3, #9
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 80cf 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b21      	cmp	r3, #33	; 0x21
 8007268:	d103      	bne.n	8007272 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa85 	bl	800777a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007270:	e0c7      	b.n	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2b40      	cmp	r3, #64	; 0x40
 8007276:	f040 80c4 	bne.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 faf3 	bl	8007866 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007280:	e0bf      	b.n	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800728c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007290:	f000 80b7 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00f      	beq.n	80072c0 <HAL_I2C_EV_IRQHandler+0x194>
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	0a9b      	lsrs	r3, r3, #10
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <HAL_I2C_EV_IRQHandler+0x194>
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	089b      	lsrs	r3, r3, #2
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fb68 	bl	800798e <I2C_MasterReceive_RXNE>
 80072be:	e011      	b.n	80072e4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	089b      	lsrs	r3, r3, #2
 80072c4:	f003 0301 	and.w	r3, r3, #1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 809a 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	0a5b      	lsrs	r3, r3, #9
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 8093 	beq.w	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc07 	bl	8007af0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072e2:	e08e      	b.n	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
 80072e4:	e08d      	b.n	8007402 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	e007      	b.n	8007308 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	085b      	lsrs	r3, r3, #1
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d012      	beq.n	800733a <HAL_I2C_EV_IRQHandler+0x20e>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	0a5b      	lsrs	r3, r3, #9
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00c      	beq.n	800733a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007330:	69b9      	ldr	r1, [r7, #24]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 ffcb 	bl	80082ce <I2C_Slave_ADDR>
 8007338:	e066      	b.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	091b      	lsrs	r3, r3, #4
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d009      	beq.n	800735a <HAL_I2C_EV_IRQHandler+0x22e>
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	0a5b      	lsrs	r3, r3, #9
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f001 f806 	bl	8008364 <I2C_Slave_STOPF>
 8007358:	e056      	b.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	2b21      	cmp	r3, #33	; 0x21
 800735e:	d002      	beq.n	8007366 <HAL_I2C_EV_IRQHandler+0x23a>
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	2b29      	cmp	r3, #41	; 0x29
 8007364:	d125      	bne.n	80073b2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	09db      	lsrs	r3, r3, #7
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00f      	beq.n	8007392 <HAL_I2C_EV_IRQHandler+0x266>
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	0a9b      	lsrs	r3, r3, #10
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <HAL_I2C_EV_IRQHandler+0x266>
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	089b      	lsrs	r3, r3, #2
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d103      	bne.n	8007392 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fee3 	bl	8008156 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007390:	e039      	b.n	8007406 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	089b      	lsrs	r3, r3, #2
 8007396:	f003 0301 	and.w	r3, r3, #1
 800739a:	2b00      	cmp	r3, #0
 800739c:	d033      	beq.n	8007406 <HAL_I2C_EV_IRQHandler+0x2da>
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	0a5b      	lsrs	r3, r3, #9
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d02d      	beq.n	8007406 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 ff10 	bl	80081d0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073b0:	e029      	b.n	8007406 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	099b      	lsrs	r3, r3, #6
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00f      	beq.n	80073de <HAL_I2C_EV_IRQHandler+0x2b2>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	0a9b      	lsrs	r3, r3, #10
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d009      	beq.n	80073de <HAL_I2C_EV_IRQHandler+0x2b2>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	089b      	lsrs	r3, r3, #2
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d103      	bne.n	80073de <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 ff1a 	bl	8008210 <I2C_SlaveReceive_RXNE>
 80073dc:	e014      	b.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	089b      	lsrs	r3, r3, #2
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00e      	beq.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	0a5b      	lsrs	r3, r3, #9
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d008      	beq.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 ff48 	bl	800828c <I2C_SlaveReceive_BTF>
 80073fc:	e004      	b.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80073fe:	bf00      	nop
 8007400:	e002      	b.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007402:	bf00      	nop
 8007404:	e000      	b.n	8007408 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007406:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007408:	3720      	adds	r7, #32
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b08a      	sub	sp, #40	; 0x28
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
 800741c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007426:	2300      	movs	r3, #0
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007430:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	0a1b      	lsrs	r3, r3, #8
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d016      	beq.n	800746c <HAL_I2C_ER_IRQHandler+0x5e>
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	0a1b      	lsrs	r3, r3, #8
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d010      	beq.n	800746c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	f043 0301 	orr.w	r3, r3, #1
 8007450:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800745a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800746a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	0a5b      	lsrs	r3, r3, #9
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00e      	beq.n	8007496 <HAL_I2C_ER_IRQHandler+0x88>
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	0a1b      	lsrs	r3, r3, #8
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	f043 0302 	orr.w	r3, r3, #2
 800748a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007494:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	0a9b      	lsrs	r3, r3, #10
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d03f      	beq.n	8007522 <HAL_I2C_ER_IRQHandler+0x114>
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d039      	beq.n	8007522 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80074ae:	7efb      	ldrb	r3, [r7, #27]
 80074b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80074c8:	7ebb      	ldrb	r3, [r7, #26]
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d112      	bne.n	80074f4 <HAL_I2C_ER_IRQHandler+0xe6>
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10f      	bne.n	80074f4 <HAL_I2C_ER_IRQHandler+0xe6>
 80074d4:	7cfb      	ldrb	r3, [r7, #19]
 80074d6:	2b21      	cmp	r3, #33	; 0x21
 80074d8:	d008      	beq.n	80074ec <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80074da:	7cfb      	ldrb	r3, [r7, #19]
 80074dc:	2b29      	cmp	r3, #41	; 0x29
 80074de:	d005      	beq.n	80074ec <HAL_I2C_ER_IRQHandler+0xde>
 80074e0:	7cfb      	ldrb	r3, [r7, #19]
 80074e2:	2b28      	cmp	r3, #40	; 0x28
 80074e4:	d106      	bne.n	80074f4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2b21      	cmp	r3, #33	; 0x21
 80074ea:	d103      	bne.n	80074f4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f001 f869 	bl	80085c4 <I2C_Slave_AF>
 80074f2:	e016      	b.n	8007522 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	f043 0304 	orr.w	r3, r3, #4
 8007504:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007506:	7efb      	ldrb	r3, [r7, #27]
 8007508:	2b10      	cmp	r3, #16
 800750a:	d002      	beq.n	8007512 <HAL_I2C_ER_IRQHandler+0x104>
 800750c:	7efb      	ldrb	r3, [r7, #27]
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d107      	bne.n	8007522 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007520:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	0adb      	lsrs	r3, r3, #11
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00e      	beq.n	800754c <HAL_I2C_ER_IRQHandler+0x13e>
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	0a1b      	lsrs	r3, r3, #8
 8007532:	f003 0301 	and.w	r3, r3, #1
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800754a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d008      	beq.n	8007564 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f001 f8a0 	bl	80086a4 <I2C_ITError>
  }
}
 8007564:	bf00      	nop
 8007566:	3728      	adds	r7, #40	; 0x28
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	bc80      	pop	{r7}
 800757c:	4770      	bx	lr

0800757e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	bc80      	pop	{r7}
 800758e:	4770      	bx	lr

08007590 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr

080075a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bc80      	pop	{r7}
 80075b2:	4770      	bx	lr

080075b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	460b      	mov	r3, r1
 80075be:	70fb      	strb	r3, [r7, #3]
 80075c0:	4613      	mov	r3, r2
 80075c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bc80      	pop	{r7}
 80075cc:	4770      	bx	lr

080075ce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80075d6:	bf00      	nop
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr

080075e0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr

08007604 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr

08007616 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007616:	b480      	push	{r7}
 8007618:	b083      	sub	sp, #12
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800761e:	bf00      	nop
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	bc80      	pop	{r7}
 8007626:	4770      	bx	lr

08007628 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007636:	b2db      	uxtb	r3, r3
}
 8007638:	4618      	mov	r0, r3
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr

08007642 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b084      	sub	sp, #16
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007650:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007658:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d150      	bne.n	800770a <I2C_MasterTransmit_TXE+0xc8>
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	2b21      	cmp	r3, #33	; 0x21
 800766c:	d14d      	bne.n	800770a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2b08      	cmp	r3, #8
 8007672:	d01d      	beq.n	80076b0 <I2C_MasterTransmit_TXE+0x6e>
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b20      	cmp	r3, #32
 8007678:	d01a      	beq.n	80076b0 <I2C_MasterTransmit_TXE+0x6e>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007680:	d016      	beq.n	80076b0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007690:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2211      	movs	r2, #17
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2220      	movs	r2, #32
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff ff5f 	bl	800756c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076ae:	e060      	b.n	8007772 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076be:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076ce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	2b40      	cmp	r3, #64	; 0x40
 80076e8:	d107      	bne.n	80076fa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff ff74 	bl	80075e0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80076f8:	e03b      	b.n	8007772 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f7ff ff32 	bl	800756c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007708:	e033      	b.n	8007772 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b21      	cmp	r3, #33	; 0x21
 800770e:	d005      	beq.n	800771c <I2C_MasterTransmit_TXE+0xda>
 8007710:	7bbb      	ldrb	r3, [r7, #14]
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d12d      	bne.n	8007772 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	2b22      	cmp	r3, #34	; 0x22
 800771a:	d12a      	bne.n	8007772 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007720:	b29b      	uxth	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d108      	bne.n	8007738 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007734:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007736:	e01c      	b.n	8007772 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d103      	bne.n	800774c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f88e 	bl	8007866 <I2C_MemoryTransmit_TXE_BTF>
}
 800774a:	e012      	b.n	8007772 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775c:	1c5a      	adds	r2, r3, #1
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	3b01      	subs	r3, #1
 800776a:	b29a      	uxth	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007770:	e7ff      	b.n	8007772 <I2C_MasterTransmit_TXE+0x130>
 8007772:	bf00      	nop
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007786:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778e:	b2db      	uxtb	r3, r3
 8007790:	2b21      	cmp	r3, #33	; 0x21
 8007792:	d164      	bne.n	800785e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d012      	beq.n	80077c4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	781a      	ldrb	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	1c5a      	adds	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80077c2:	e04c      	b.n	800785e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d01d      	beq.n	8007806 <I2C_MasterTransmit_BTF+0x8c>
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d01a      	beq.n	8007806 <I2C_MasterTransmit_BTF+0x8c>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077d6:	d016      	beq.n	8007806 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80077e6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2211      	movs	r2, #17
 80077ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff feb4 	bl	800756c <HAL_I2C_MasterTxCpltCallback>
}
 8007804:	e02b      	b.n	800785e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007814:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007824:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2220      	movs	r2, #32
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d107      	bne.n	8007850 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7ff fec9 	bl	80075e0 <HAL_I2C_MemTxCpltCallback>
}
 800784e:	e006      	b.n	800785e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7ff fe87 	bl	800756c <HAL_I2C_MasterTxCpltCallback>
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007874:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787a:	2b00      	cmp	r3, #0
 800787c:	d11d      	bne.n	80078ba <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d10b      	bne.n	800789e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788a:	b2da      	uxtb	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007896:	1c9a      	adds	r2, r3, #2
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800789c:	e073      	b.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	121b      	asrs	r3, r3, #8
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078b2:	1c5a      	adds	r2, r3, #1
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80078b8:	e065      	b.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d10b      	bne.n	80078da <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80078d8:	e055      	b.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d151      	bne.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
 80078e4:	2b22      	cmp	r3, #34	; 0x22
 80078e6:	d10d      	bne.n	8007904 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078f6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007902:	e040      	b.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007908:	b29b      	uxth	r3, r3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d015      	beq.n	800793a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800790e:	7bfb      	ldrb	r3, [r7, #15]
 8007910:	2b21      	cmp	r3, #33	; 0x21
 8007912:	d112      	bne.n	800793a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007918:	781a      	ldrb	r2, [r3, #0]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007938:	e025      	b.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800793e:	b29b      	uxth	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d120      	bne.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	2b21      	cmp	r3, #33	; 0x21
 8007948:	d11d      	bne.n	8007986 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007958:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007968:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff fe2d 	bl	80075e0 <HAL_I2C_MemTxCpltCallback>
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b22      	cmp	r3, #34	; 0x22
 80079a0:	f040 80a2 	bne.w	8007ae8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d921      	bls.n	80079f6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691a      	ldr	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	b2d2      	uxtb	r2, r2
 80079be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079dc:	b29b      	uxth	r3, r3
 80079de:	2b03      	cmp	r3, #3
 80079e0:	f040 8082 	bne.w	8007ae8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079f2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80079f4:	e078      	b.n	8007ae8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d074      	beq.n	8007ae8 <I2C_MasterReceive_RXNE+0x15a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d002      	beq.n	8007a0a <I2C_MasterReceive_RXNE+0x7c>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d16e      	bne.n	8007ae8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fafa 	bl	8009004 <I2C_WaitOnSTOPRequestThroughIT>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d142      	bne.n	8007a9c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a24:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a34:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	3b01      	subs	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2220      	movs	r2, #32
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d10a      	bne.n	8007a86 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff fdb7 	bl	80075f2 <HAL_I2C_MemRxCpltCallback>
}
 8007a84:	e030      	b.n	8007ae8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2212      	movs	r2, #18
 8007a92:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f7ff fd72 	bl	800757e <HAL_I2C_MasterRxCpltCallback>
}
 8007a9a:	e025      	b.n	8007ae8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007aaa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	691a      	ldr	r2, [r3, #16]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	b2d2      	uxtb	r2, r2
 8007ab8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff fd8e 	bl	8007604 <HAL_I2C_ErrorCallback>
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b04      	cmp	r3, #4
 8007b06:	d11b      	bne.n	8007b40 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b16:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	3b01      	subs	r3, #1
 8007b38:	b29a      	uxth	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007b3e:	e0bd      	b.n	8007cbc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d129      	bne.n	8007b9e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b58:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b04      	cmp	r3, #4
 8007b5e:	d00a      	beq.n	8007b76 <I2C_MasterReceive_BTF+0x86>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d007      	beq.n	8007b76 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b74:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b29a      	uxth	r2, r3
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007b9c:	e08e      	b.n	8007cbc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d176      	bne.n	8007c96 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d002      	beq.n	8007bb4 <I2C_MasterReceive_BTF+0xc4>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d108      	bne.n	8007bc6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e019      	b.n	8007bfa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d002      	beq.n	8007bd2 <I2C_MasterReceive_BTF+0xe2>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d108      	bne.n	8007be4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e00a      	b.n	8007bfa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	d007      	beq.n	8007bfa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c04:	b2d2      	uxtb	r2, r2
 8007c06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	1c5a      	adds	r2, r3, #1
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	b2d2      	uxtb	r2, r2
 8007c2c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	1c5a      	adds	r2, r3, #1
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	b29a      	uxth	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c54:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b40      	cmp	r3, #64	; 0x40
 8007c68:	d10a      	bne.n	8007c80 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f7ff fcba 	bl	80075f2 <HAL_I2C_MemRxCpltCallback>
}
 8007c7e:	e01d      	b.n	8007cbc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2212      	movs	r2, #18
 8007c8c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff fc75 	bl	800757e <HAL_I2C_MasterRxCpltCallback>
}
 8007c94:	e012      	b.n	8007cbc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	b2d2      	uxtb	r2, r2
 8007ca2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007cbc:	bf00      	nop
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b40      	cmp	r3, #64	; 0x40
 8007cd6:	d117      	bne.n	8007d08 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d109      	bne.n	8007cf4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cf0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007cf2:	e067      	b.n	8007dc4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	611a      	str	r2, [r3, #16]
}
 8007d06:	e05d      	b.n	8007dc4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d10:	d133      	bne.n	8007d7a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b21      	cmp	r3, #33	; 0x21
 8007d1c:	d109      	bne.n	8007d32 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d2e:	611a      	str	r2, [r3, #16]
 8007d30:	e008      	b.n	8007d44 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d004      	beq.n	8007d56 <I2C_Master_SB+0x92>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d108      	bne.n	8007d68 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d032      	beq.n	8007dc4 <I2C_Master_SB+0x100>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d02d      	beq.n	8007dc4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d76:	605a      	str	r2, [r3, #4]
}
 8007d78:	e024      	b.n	8007dc4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10e      	bne.n	8007da0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	11db      	asrs	r3, r3, #7
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f003 0306 	and.w	r3, r3, #6
 8007d90:	b2db      	uxtb	r3, r3
 8007d92:	f063 030f 	orn	r3, r3, #15
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	611a      	str	r2, [r3, #16]
}
 8007d9e:	e011      	b.n	8007dc4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d10d      	bne.n	8007dc4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	11db      	asrs	r3, r3, #7
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 0306 	and.w	r3, r3, #6
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f063 030e 	orn	r3, r3, #14
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	611a      	str	r2, [r3, #16]
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr

08007dce <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <I2C_Master_ADD10+0x26>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d108      	bne.n	8007e06 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00c      	beq.n	8007e16 <I2C_Master_ADD10+0x48>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e14:	605a      	str	r2, [r3, #4]
  }
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bc80      	pop	{r7}
 8007e1e:	4770      	bx	lr

08007e20 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b091      	sub	sp, #68	; 0x44
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b22      	cmp	r3, #34	; 0x22
 8007e48:	f040 8174 	bne.w	8008134 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10f      	bne.n	8007e74 <I2C_Master_ADDR+0x54>
 8007e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007e58:	2b40      	cmp	r3, #64	; 0x40
 8007e5a:	d10b      	bne.n	8007e74 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	695b      	ldr	r3, [r3, #20]
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	e16b      	b.n	800814c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d11d      	bne.n	8007eb8 <I2C_Master_ADDR+0x98>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007e84:	d118      	bne.n	8007eb8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e86:	2300      	movs	r3, #0
 8007e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eaa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	651a      	str	r2, [r3, #80]	; 0x50
 8007eb6:	e149      	b.n	800814c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d113      	bne.n	8007eea <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee6:	601a      	str	r2, [r3, #0]
 8007ee8:	e120      	b.n	800812c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	f040 808a 	bne.w	800800a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007efc:	d137      	bne.n	8007f6e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f0c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f1c:	d113      	bne.n	8007f46 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	627b      	str	r3, [r7, #36]	; 0x24
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	e0f2      	b.n	800812c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f46:	2300      	movs	r3, #0
 8007f48:	623b      	str	r3, [r7, #32]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	623b      	str	r3, [r7, #32]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	623b      	str	r3, [r7, #32]
 8007f5a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f6a:	601a      	str	r2, [r3, #0]
 8007f6c:	e0de      	b.n	800812c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d02e      	beq.n	8007fd2 <I2C_Master_ADDR+0x1b2>
 8007f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f76:	2b20      	cmp	r3, #32
 8007f78:	d02b      	beq.n	8007fd2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7c:	2b12      	cmp	r3, #18
 8007f7e:	d102      	bne.n	8007f86 <I2C_Master_ADDR+0x166>
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d125      	bne.n	8007fd2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d00e      	beq.n	8007faa <I2C_Master_ADDR+0x18a>
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d00b      	beq.n	8007faa <I2C_Master_ADDR+0x18a>
 8007f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f94:	2b10      	cmp	r3, #16
 8007f96:	d008      	beq.n	8007faa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	e007      	b.n	8007fba <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fb8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	61fb      	str	r3, [r7, #28]
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	e0ac      	b.n	800812c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61bb      	str	r3, [r7, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	61bb      	str	r3, [r7, #24]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008006:	601a      	str	r2, [r3, #0]
 8008008:	e090      	b.n	800812c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800800e:	b29b      	uxth	r3, r3
 8008010:	2b02      	cmp	r3, #2
 8008012:	d158      	bne.n	80080c6 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	2b04      	cmp	r3, #4
 8008018:	d021      	beq.n	800805e <I2C_Master_ADDR+0x23e>
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	2b02      	cmp	r3, #2
 800801e:	d01e      	beq.n	800805e <I2C_Master_ADDR+0x23e>
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	2b10      	cmp	r3, #16
 8008024:	d01b      	beq.n	800805e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008034:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008036:	2300      	movs	r3, #0
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	695b      	ldr	r3, [r3, #20]
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	617b      	str	r3, [r7, #20]
 800804a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e012      	b.n	8008084 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800806c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800806e:	2300      	movs	r3, #0
 8008070:	613b      	str	r3, [r7, #16]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	695b      	ldr	r3, [r3, #20]
 8008078:	613b      	str	r3, [r7, #16]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	613b      	str	r3, [r7, #16]
 8008082:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800808e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008092:	d14b      	bne.n	800812c <I2C_Master_ADDR+0x30c>
 8008094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008096:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800809a:	d00b      	beq.n	80080b4 <I2C_Master_ADDR+0x294>
 800809c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d008      	beq.n	80080b4 <I2C_Master_ADDR+0x294>
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d005      	beq.n	80080b4 <I2C_Master_ADDR+0x294>
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	2b10      	cmp	r3, #16
 80080ac:	d002      	beq.n	80080b4 <I2C_Master_ADDR+0x294>
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d13b      	bne.n	800812c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080c2:	605a      	str	r2, [r3, #4]
 80080c4:	e032      	b.n	800812c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080d4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e4:	d117      	bne.n	8008116 <I2C_Master_ADDR+0x2f6>
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080ec:	d00b      	beq.n	8008106 <I2C_Master_ADDR+0x2e6>
 80080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d008      	beq.n	8008106 <I2C_Master_ADDR+0x2e6>
 80080f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d005      	beq.n	8008106 <I2C_Master_ADDR+0x2e6>
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	2b10      	cmp	r3, #16
 80080fe:	d002      	beq.n	8008106 <I2C_Master_ADDR+0x2e6>
 8008100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008102:	2b20      	cmp	r3, #32
 8008104:	d107      	bne.n	8008116 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685a      	ldr	r2, [r3, #4]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008114:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008116:	2300      	movs	r3, #0
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008132:	e00b      	b.n	800814c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008134:	2300      	movs	r3, #0
 8008136:	60bb      	str	r3, [r7, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	60bb      	str	r3, [r7, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	60bb      	str	r3, [r7, #8]
 8008148:	68bb      	ldr	r3, [r7, #8]
}
 800814a:	e7ff      	b.n	800814c <I2C_Master_ADDR+0x32c>
 800814c:	bf00      	nop
 800814e:	3744      	adds	r7, #68	; 0x44
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	4770      	bx	lr

08008156 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008164:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800816a:	b29b      	uxth	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d02b      	beq.n	80081c8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008174:	781a      	ldrb	r2, [r3, #0]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	1c5a      	adds	r2, r3, #1
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b01      	subs	r3, #1
 800818e:	b29a      	uxth	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d114      	bne.n	80081c8 <I2C_SlaveTransmit_TXE+0x72>
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	2b29      	cmp	r3, #41	; 0x29
 80081a2:	d111      	bne.n	80081c8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	685a      	ldr	r2, [r3, #4]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2221      	movs	r2, #33	; 0x21
 80081b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2228      	movs	r2, #40	; 0x28
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff f9e4 	bl	8007590 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80081c8:	bf00      	nop
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081dc:	b29b      	uxth	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d011      	beq.n	8008206 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	bc80      	pop	{r7}
 800820e:	4770      	bx	lr

08008210 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008224:	b29b      	uxth	r3, r3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d02c      	beq.n	8008284 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691a      	ldr	r2, [r3, #16]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008234:	b2d2      	uxtb	r2, r2
 8008236:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823c:	1c5a      	adds	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008254:	b29b      	uxth	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d114      	bne.n	8008284 <I2C_SlaveReceive_RXNE+0x74>
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	2b2a      	cmp	r3, #42	; 0x2a
 800825e:	d111      	bne.n	8008284 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800826e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2222      	movs	r2, #34	; 0x22
 8008274:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2228      	movs	r2, #40	; 0x28
 800827a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f7ff f98f 	bl	80075a2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008298:	b29b      	uxth	r3, r3
 800829a:	2b00      	cmp	r3, #0
 800829c:	d012      	beq.n	80082c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	3b01      	subs	r3, #1
 80082be:	b29a      	uxth	r2, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr

080082ce <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80082d8:	2300      	movs	r3, #0
 80082da:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082e8:	2b28      	cmp	r3, #40	; 0x28
 80082ea:	d127      	bne.n	800833c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685a      	ldr	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082fa:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	089b      	lsrs	r3, r3, #2
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b00      	cmp	r3, #0
 8008306:	d101      	bne.n	800830c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	09db      	lsrs	r3, r3, #7
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	81bb      	strh	r3, [r7, #12]
 800831e:	e002      	b.n	8008326 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800832e:	89ba      	ldrh	r2, [r7, #12]
 8008330:	7bfb      	ldrb	r3, [r7, #15]
 8008332:	4619      	mov	r1, r3
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff f93d 	bl	80075b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800833a:	e00e      	b.n	800835a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800833c:	2300      	movs	r3, #0
 800833e:	60bb      	str	r3, [r7, #8]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	60bb      	str	r3, [r7, #8]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	60bb      	str	r3, [r7, #8]
 8008350:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008372:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008382:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008384:	2300      	movs	r3, #0
 8008386:	60bb      	str	r3, [r7, #8]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	60bb      	str	r3, [r7, #8]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0201 	orr.w	r2, r2, #1
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083c0:	d172      	bne.n	80084a8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80083c2:	7bfb      	ldrb	r3, [r7, #15]
 80083c4:	2b22      	cmp	r3, #34	; 0x22
 80083c6:	d002      	beq.n	80083ce <I2C_Slave_STOPF+0x6a>
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	2b2a      	cmp	r3, #42	; 0x2a
 80083cc:	d135      	bne.n	800843a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	f043 0204 	orr.w	r2, r3, #4
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008400:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008406:	4618      	mov	r0, r3
 8008408:	f7fd fdfe 	bl	8006008 <HAL_DMA_GetState>
 800840c:	4603      	mov	r3, r0
 800840e:	2b01      	cmp	r3, #1
 8008410:	d049      	beq.n	80084a6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	4a69      	ldr	r2, [pc, #420]	; (80085bc <I2C_Slave_STOPF+0x258>)
 8008418:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	4618      	mov	r0, r3
 8008420:	f7fd faae 	bl	8005980 <HAL_DMA_Abort_IT>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d03d      	beq.n	80084a6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008434:	4610      	mov	r0, r2
 8008436:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008438:	e035      	b.n	80084a6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	b29a      	uxth	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800844c:	b29b      	uxth	r3, r3
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	f043 0204 	orr.w	r2, r3, #4
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800846c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd fdc8 	bl	8006008 <HAL_DMA_GetState>
 8008478:	4603      	mov	r3, r0
 800847a:	2b01      	cmp	r3, #1
 800847c:	d014      	beq.n	80084a8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	4a4e      	ldr	r2, [pc, #312]	; (80085bc <I2C_Slave_STOPF+0x258>)
 8008484:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848a:	4618      	mov	r0, r3
 800848c:	f7fd fa78 	bl	8005980 <HAL_DMA_Abort_IT>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d008      	beq.n	80084a8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	e000      	b.n	80084a8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084a6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d03e      	beq.n	8008530 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	f003 0304 	and.w	r3, r3, #4
 80084bc:	2b04      	cmp	r3, #4
 80084be:	d112      	bne.n	80084e6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691a      	ldr	r2, [r3, #16]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ca:	b2d2      	uxtb	r2, r2
 80084cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d2:	1c5a      	adds	r2, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084dc:	b29b      	uxth	r3, r3
 80084de:	3b01      	subs	r3, #1
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d112      	bne.n	800851a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fe:	b2d2      	uxtb	r2, r2
 8008500:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	1c5a      	adds	r2, r3, #1
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008510:	b29b      	uxth	r3, r3
 8008512:	3b01      	subs	r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800851e:	b29b      	uxth	r3, r3
 8008520:	2b00      	cmp	r3, #0
 8008522:	d005      	beq.n	8008530 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	f043 0204 	orr.w	r2, r3, #4
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d003      	beq.n	8008540 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f8b3 	bl	80086a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800853e:	e039      	b.n	80085b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008540:	7bfb      	ldrb	r3, [r7, #15]
 8008542:	2b2a      	cmp	r3, #42	; 0x2a
 8008544:	d109      	bne.n	800855a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2228      	movs	r2, #40	; 0x28
 8008550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff f824 	bl	80075a2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b28      	cmp	r3, #40	; 0x28
 8008564:	d111      	bne.n	800858a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <I2C_Slave_STOPF+0x25c>)
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7ff f823 	bl	80075ce <HAL_I2C_ListenCpltCallback>
}
 8008588:	e014      	b.n	80085b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858e:	2b22      	cmp	r3, #34	; 0x22
 8008590:	d002      	beq.n	8008598 <I2C_Slave_STOPF+0x234>
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	2b22      	cmp	r3, #34	; 0x22
 8008596:	d10d      	bne.n	80085b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fe fff7 	bl	80075a2 <HAL_I2C_SlaveRxCpltCallback>
}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	08008c05 	.word	0x08008c05
 80085c0:	ffff0000 	.word	0xffff0000

080085c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d002      	beq.n	80085e6 <I2C_Slave_AF+0x22>
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2b20      	cmp	r3, #32
 80085e4:	d129      	bne.n	800863a <I2C_Slave_AF+0x76>
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	2b28      	cmp	r3, #40	; 0x28
 80085ea:	d126      	bne.n	800863a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a2c      	ldr	r2, [pc, #176]	; (80086a0 <I2C_Slave_AF+0xdc>)
 80085f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685a      	ldr	r2, [r3, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008600:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800860a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800861a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2220      	movs	r2, #32
 8008626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7fe ffcb 	bl	80075ce <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008638:	e02e      	b.n	8008698 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	2b21      	cmp	r3, #33	; 0x21
 800863e:	d126      	bne.n	800868e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a17      	ldr	r2, [pc, #92]	; (80086a0 <I2C_Slave_AF+0xdc>)
 8008644:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2221      	movs	r2, #33	; 0x21
 800864a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800866a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008674:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008684:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fe ff82 	bl	8007590 <HAL_I2C_SlaveTxCpltCallback>
}
 800868c:	e004      	b.n	8008698 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008696:	615a      	str	r2, [r3, #20]
}
 8008698:	bf00      	nop
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}
 80086a0:	ffff0000 	.word	0xffff0000

080086a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80086bc:	7bbb      	ldrb	r3, [r7, #14]
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d002      	beq.n	80086c8 <I2C_ITError+0x24>
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d10a      	bne.n	80086de <I2C_ITError+0x3a>
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	2b22      	cmp	r3, #34	; 0x22
 80086cc:	d107      	bne.n	80086de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80086dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80086e4:	2b28      	cmp	r3, #40	; 0x28
 80086e6:	d107      	bne.n	80086f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2228      	movs	r2, #40	; 0x28
 80086f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80086f6:	e015      	b.n	8008724 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008706:	d00a      	beq.n	800871e <I2C_ITError+0x7a>
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	2b60      	cmp	r3, #96	; 0x60
 800870c:	d007      	beq.n	800871e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800872e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008732:	d161      	bne.n	80087f8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008742:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008748:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800874c:	2b01      	cmp	r3, #1
 800874e:	d020      	beq.n	8008792 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008754:	4a6a      	ldr	r2, [pc, #424]	; (8008900 <I2C_ITError+0x25c>)
 8008756:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800875c:	4618      	mov	r0, r3
 800875e:	f7fd f90f 	bl	8005980 <HAL_DMA_Abort_IT>
 8008762:	4603      	mov	r3, r0
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 8089 	beq.w	800887c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0201 	bic.w	r2, r2, #1
 8008778:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2220      	movs	r2, #32
 800877e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
 8008790:	e074      	b.n	800887c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008796:	4a5a      	ldr	r2, [pc, #360]	; (8008900 <I2C_ITError+0x25c>)
 8008798:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd f8ee 	bl	8005980 <HAL_DMA_Abort_IT>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d068      	beq.n	800887c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b4:	2b40      	cmp	r3, #64	; 0x40
 80087b6:	d10b      	bne.n	80087d0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691a      	ldr	r2, [r3, #16]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c2:	b2d2      	uxtb	r2, r2
 80087c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0201 	bic.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087f2:	4610      	mov	r0, r2
 80087f4:	4798      	blx	r3
 80087f6:	e041      	b.n	800887c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b60      	cmp	r3, #96	; 0x60
 8008802:	d125      	bne.n	8008850 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800881c:	2b40      	cmp	r3, #64	; 0x40
 800881e:	d10b      	bne.n	8008838 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691a      	ldr	r2, [r3, #16]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	b2d2      	uxtb	r2, r2
 800882c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	1c5a      	adds	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0201 	bic.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f7fe fee4 	bl	8007616 <HAL_I2C_AbortCpltCallback>
 800884e:	e015      	b.n	800887c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885a:	2b40      	cmp	r3, #64	; 0x40
 800885c:	d10b      	bne.n	8008876 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	1c5a      	adds	r2, r3, #1
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7fe fec4 	bl	8007604 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10e      	bne.n	80088aa <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800889c:	2b00      	cmp	r3, #0
 800889e:	d104      	bne.n	80088aa <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d007      	beq.n	80088ba <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80088b8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d113      	bne.n	80088f6 <I2C_ITError+0x252>
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	2b28      	cmp	r3, #40	; 0x28
 80088d2:	d110      	bne.n	80088f6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a0b      	ldr	r2, [pc, #44]	; (8008904 <I2C_ITError+0x260>)
 80088d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7fe fe6c 	bl	80075ce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80088f6:	bf00      	nop
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	08008c05 	.word	0x08008c05
 8008904:	ffff0000 	.word	0xffff0000

08008908 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af02      	add	r7, sp, #8
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	461a      	mov	r2, r3
 8008916:	4603      	mov	r3, r0
 8008918:	817b      	strh	r3, [r7, #10]
 800891a:	460b      	mov	r3, r1
 800891c:	813b      	strh	r3, [r7, #8]
 800891e:	4613      	mov	r3, r2
 8008920:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	2200      	movs	r2, #0
 800893a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f000 fa08 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00d      	beq.n	8008966 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008958:	d103      	bne.n	8008962 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008960:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e05f      	b.n	8008a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008966:	897b      	ldrh	r3, [r7, #10]
 8008968:	b2db      	uxtb	r3, r3
 800896a:	461a      	mov	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008974:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	6a3a      	ldr	r2, [r7, #32]
 800897a:	492d      	ldr	r1, [pc, #180]	; (8008a30 <I2C_RequestMemoryWrite+0x128>)
 800897c:	68f8      	ldr	r0, [r7, #12]
 800897e:	f000 fa40 	bl	8008e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008982:	4603      	mov	r3, r0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e04c      	b.n	8008a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800898c:	2300      	movs	r3, #0
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	617b      	str	r3, [r7, #20]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	617b      	str	r3, [r7, #20]
 80089a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a4:	6a39      	ldr	r1, [r7, #32]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 faaa 	bl	8008f00 <I2C_WaitOnTXEFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00d      	beq.n	80089ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	2b04      	cmp	r3, #4
 80089b8:	d107      	bne.n	80089ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e02b      	b.n	8008a26 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d105      	bne.n	80089e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80089d4:	893b      	ldrh	r3, [r7, #8]
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	611a      	str	r2, [r3, #16]
 80089de:	e021      	b.n	8008a24 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80089e0:	893b      	ldrh	r3, [r7, #8]
 80089e2:	0a1b      	lsrs	r3, r3, #8
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089f0:	6a39      	ldr	r1, [r7, #32]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 fa84 	bl	8008f00 <I2C_WaitOnTXEFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00d      	beq.n	8008a1a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	d107      	bne.n	8008a16 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e005      	b.n	8008a26 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a1a:	893b      	ldrh	r3, [r7, #8]
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3718      	adds	r7, #24
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	00010002 	.word	0x00010002

08008a34 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af02      	add	r7, sp, #8
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	461a      	mov	r2, r3
 8008a42:	4603      	mov	r3, r0
 8008a44:	817b      	strh	r3, [r7, #10]
 8008a46:	460b      	mov	r3, r1
 8008a48:	813b      	strh	r3, [r7, #8]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a5c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	6a3b      	ldr	r3, [r7, #32]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f000 f96a 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00d      	beq.n	8008aa2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a94:	d103      	bne.n	8008a9e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	e0aa      	b.n	8008bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008aa2:	897b      	ldrh	r3, [r7, #10]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008ab0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	6a3a      	ldr	r2, [r7, #32]
 8008ab6:	4952      	ldr	r1, [pc, #328]	; (8008c00 <I2C_RequestMemoryRead+0x1cc>)
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 f9a2 	bl	8008e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e097      	b.n	8008bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699b      	ldr	r3, [r3, #24]
 8008ada:	617b      	str	r3, [r7, #20]
 8008adc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ae0:	6a39      	ldr	r1, [r7, #32]
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 fa0c 	bl	8008f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00d      	beq.n	8008b0a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	2b04      	cmp	r3, #4
 8008af4:	d107      	bne.n	8008b06 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e076      	b.n	8008bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d105      	bne.n	8008b1c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b10:	893b      	ldrh	r3, [r7, #8]
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	611a      	str	r2, [r3, #16]
 8008b1a:	e021      	b.n	8008b60 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008b1c:	893b      	ldrh	r3, [r7, #8]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b2c:	6a39      	ldr	r1, [r7, #32]
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 f9e6 	bl	8008f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	d107      	bne.n	8008b52 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e050      	b.n	8008bf8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008b56:	893b      	ldrh	r3, [r7, #8]
 8008b58:	b2da      	uxtb	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b62:	6a39      	ldr	r1, [r7, #32]
 8008b64:	68f8      	ldr	r0, [r7, #12]
 8008b66:	f000 f9cb 	bl	8008f00 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00d      	beq.n	8008b8c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	2b04      	cmp	r3, #4
 8008b76:	d107      	bne.n	8008b88 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b86:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e035      	b.n	8008bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b9a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f000 f8d3 	bl	8008d54 <I2C_WaitOnFlagUntilTimeout>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00d      	beq.n	8008bd0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc2:	d103      	bne.n	8008bcc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e013      	b.n	8008bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008bd0:	897b      	ldrh	r3, [r7, #10]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f043 0301 	orr.w	r3, r3, #1
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	6a3a      	ldr	r2, [r7, #32]
 8008be4:	4906      	ldr	r1, [pc, #24]	; (8008c00 <I2C_RequestMemoryRead+0x1cc>)
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 f90b 	bl	8008e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e000      	b.n	8008bf8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3718      	adds	r7, #24
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	00010002 	.word	0x00010002

08008c04 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008c1e:	4b4b      	ldr	r3, [pc, #300]	; (8008d4c <I2C_DMAAbort+0x148>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	4a4a      	ldr	r2, [pc, #296]	; (8008d50 <I2C_DMAAbort+0x14c>)
 8008c26:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2a:	0a1a      	lsrs	r2, r3, #8
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	00da      	lsls	r2, r3, #3
 8008c34:	1ad3      	subs	r3, r2, r3
 8008c36:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d106      	bne.n	8008c4c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	f043 0220 	orr.w	r2, r3, #32
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008c4a:	e00a      	b.n	8008c62 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c60:	d0ea      	beq.n	8008c38 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6e:	2200      	movs	r2, #0
 8008c70:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7e:	2200      	movs	r2, #0
 8008c80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c90:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	2200      	movs	r2, #0
 8008c96:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0201 	bic.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b60      	cmp	r3, #96	; 0x60
 8008cd2:	d10e      	bne.n	8008cf2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008cea:	6978      	ldr	r0, [r7, #20]
 8008cec:	f7fe fc93 	bl	8007616 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008cf0:	e027      	b.n	8008d42 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008cf2:	7cfb      	ldrb	r3, [r7, #19]
 8008cf4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008cf8:	2b28      	cmp	r3, #40	; 0x28
 8008cfa:	d117      	bne.n	8008d2c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f042 0201 	orr.w	r2, r2, #1
 8008d0a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d1a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	2228      	movs	r2, #40	; 0x28
 8008d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008d2a:	e007      	b.n	8008d3c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	2220      	movs	r2, #32
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008d3c:	6978      	ldr	r0, [r7, #20]
 8008d3e:	f7fe fc61 	bl	8007604 <HAL_I2C_ErrorCallback>
}
 8008d42:	bf00      	nop
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000000 	.word	0x20000000
 8008d50:	14f8b589 	.word	0x14f8b589

08008d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	603b      	str	r3, [r7, #0]
 8008d60:	4613      	mov	r3, r2
 8008d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d64:	e025      	b.n	8008db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6c:	d021      	beq.n	8008db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6e:	f7fc fb9f 	bl	80054b0 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d302      	bcc.n	8008d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d116      	bne.n	8008db2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	f043 0220 	orr.w	r2, r3, #32
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e023      	b.n	8008dfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	0c1b      	lsrs	r3, r3, #16
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d10d      	bne.n	8008dd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	43da      	mvns	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bf0c      	ite	eq
 8008dce:	2301      	moveq	r3, #1
 8008dd0:	2300      	movne	r3, #0
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	e00c      	b.n	8008df2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	43da      	mvns	r2, r3
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	4013      	ands	r3, r2
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	bf0c      	ite	eq
 8008dea:	2301      	moveq	r3, #1
 8008dec:	2300      	movne	r3, #0
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	461a      	mov	r2, r3
 8008df2:	79fb      	ldrb	r3, [r7, #7]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d0b6      	beq.n	8008d66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b084      	sub	sp, #16
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e10:	e051      	b.n	8008eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e20:	d123      	bne.n	8008e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008e3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	f043 0204 	orr.w	r2, r3, #4
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e046      	b.n	8008ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e70:	d021      	beq.n	8008eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e72:	f7fc fb1d 	bl	80054b0 <HAL_GetTick>
 8008e76:	4602      	mov	r2, r0
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d302      	bcc.n	8008e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d116      	bne.n	8008eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea2:	f043 0220 	orr.w	r2, r3, #32
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e020      	b.n	8008ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	0c1b      	lsrs	r3, r3, #16
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d10c      	bne.n	8008eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	43da      	mvns	r2, r3
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	4013      	ands	r3, r2
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bf14      	ite	ne
 8008ed2:	2301      	movne	r3, #1
 8008ed4:	2300      	moveq	r3, #0
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	e00b      	b.n	8008ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	43da      	mvns	r2, r3
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bf14      	ite	ne
 8008eec:	2301      	movne	r3, #1
 8008eee:	2300      	moveq	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d18d      	bne.n	8008e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f0c:	e02d      	b.n	8008f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 f900 	bl	8009114 <I2C_IsAcknowledgeFailed>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e02d      	b.n	8008f7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d021      	beq.n	8008f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f26:	f7fc fac3 	bl	80054b0 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d302      	bcc.n	8008f3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d116      	bne.n	8008f6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2220      	movs	r2, #32
 8008f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	f043 0220 	orr.w	r2, r3, #32
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e007      	b.n	8008f7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	695b      	ldr	r3, [r3, #20]
 8008f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d1ca      	bne.n	8008f0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	60f8      	str	r0, [r7, #12]
 8008f8a:	60b9      	str	r1, [r7, #8]
 8008f8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f8e:	e02d      	b.n	8008fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f8bf 	bl	8009114 <I2C_IsAcknowledgeFailed>
 8008f96:	4603      	mov	r3, r0
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d001      	beq.n	8008fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e02d      	b.n	8008ffc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa6:	d021      	beq.n	8008fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa8:	f7fc fa82 	bl	80054b0 <HAL_GetTick>
 8008fac:	4602      	mov	r2, r0
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d302      	bcc.n	8008fbe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d116      	bne.n	8008fec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2220      	movs	r2, #32
 8008fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	f043 0220 	orr.w	r2, r3, #32
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e007      	b.n	8008ffc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	f003 0304 	and.w	r3, r3, #4
 8008ff6:	2b04      	cmp	r3, #4
 8008ff8:	d1ca      	bne.n	8008f90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009010:	4b13      	ldr	r3, [pc, #76]	; (8009060 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	08db      	lsrs	r3, r3, #3
 8009016:	4a13      	ldr	r2, [pc, #76]	; (8009064 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009018:	fba2 2303 	umull	r2, r3, r2, r3
 800901c:	0a1a      	lsrs	r2, r3, #8
 800901e:	4613      	mov	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	4413      	add	r3, r2
 8009024:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3b01      	subs	r3, #1
 800902a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d107      	bne.n	8009042 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	f043 0220 	orr.w	r2, r3, #32
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e008      	b.n	8009054 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800904c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009050:	d0e9      	beq.n	8009026 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	3714      	adds	r7, #20
 8009058:	46bd      	mov	sp, r7
 800905a:	bc80      	pop	{r7}
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20000000 	.word	0x20000000
 8009064:	14f8b589 	.word	0x14f8b589

08009068 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009074:	e042      	b.n	80090fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	f003 0310 	and.w	r3, r3, #16
 8009080:	2b10      	cmp	r3, #16
 8009082:	d119      	bne.n	80090b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0210 	mvn.w	r2, #16
 800908c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2200      	movs	r2, #0
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e029      	b.n	800910c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090b8:	f7fc f9fa 	bl	80054b0 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d302      	bcc.n	80090ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d116      	bne.n	80090fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2220      	movs	r2, #32
 80090d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e8:	f043 0220 	orr.w	r2, r3, #32
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e007      	b.n	800910c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009106:	2b40      	cmp	r3, #64	; 0x40
 8009108:	d1b5      	bne.n	8009076 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800912a:	d11b      	bne.n	8009164 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009134:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009150:	f043 0204 	orr.w	r2, r3, #4
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009180:	d103      	bne.n	800918a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009188:	e007      	b.n	800919a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009192:	d102      	bne.n	800919a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2208      	movs	r2, #8
 8009198:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr

080091a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d101      	bne.n	80091b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e26c      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8087 	beq.w	80092d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091c4:	4b92      	ldr	r3, [pc, #584]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	f003 030c 	and.w	r3, r3, #12
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d00c      	beq.n	80091ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80091d0:	4b8f      	ldr	r3, [pc, #572]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	f003 030c 	and.w	r3, r3, #12
 80091d8:	2b08      	cmp	r3, #8
 80091da:	d112      	bne.n	8009202 <HAL_RCC_OscConfig+0x5e>
 80091dc:	4b8c      	ldr	r3, [pc, #560]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e8:	d10b      	bne.n	8009202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091ea:	4b89      	ldr	r3, [pc, #548]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d06c      	beq.n	80092d0 <HAL_RCC_OscConfig+0x12c>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d168      	bne.n	80092d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e246      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800920a:	d106      	bne.n	800921a <HAL_RCC_OscConfig+0x76>
 800920c:	4b80      	ldr	r3, [pc, #512]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a7f      	ldr	r2, [pc, #508]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	e02e      	b.n	8009278 <HAL_RCC_OscConfig+0xd4>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d10c      	bne.n	800923c <HAL_RCC_OscConfig+0x98>
 8009222:	4b7b      	ldr	r3, [pc, #492]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a7a      	ldr	r2, [pc, #488]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800922c:	6013      	str	r3, [r2, #0]
 800922e:	4b78      	ldr	r3, [pc, #480]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a77      	ldr	r2, [pc, #476]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	e01d      	b.n	8009278 <HAL_RCC_OscConfig+0xd4>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009244:	d10c      	bne.n	8009260 <HAL_RCC_OscConfig+0xbc>
 8009246:	4b72      	ldr	r3, [pc, #456]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a71      	ldr	r2, [pc, #452]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800924c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	4b6f      	ldr	r3, [pc, #444]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a6e      	ldr	r2, [pc, #440]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	e00b      	b.n	8009278 <HAL_RCC_OscConfig+0xd4>
 8009260:	4b6b      	ldr	r3, [pc, #428]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a6a      	ldr	r2, [pc, #424]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	4b68      	ldr	r3, [pc, #416]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a67      	ldr	r2, [pc, #412]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d013      	beq.n	80092a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009280:	f7fc f916 	bl	80054b0 <HAL_GetTick>
 8009284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009286:	e008      	b.n	800929a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009288:	f7fc f912 	bl	80054b0 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b64      	cmp	r3, #100	; 0x64
 8009294:	d901      	bls.n	800929a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e1fa      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800929a:	4b5d      	ldr	r3, [pc, #372]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0f0      	beq.n	8009288 <HAL_RCC_OscConfig+0xe4>
 80092a6:	e014      	b.n	80092d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092a8:	f7fc f902 	bl	80054b0 <HAL_GetTick>
 80092ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80092b0:	f7fc f8fe 	bl	80054b0 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b64      	cmp	r3, #100	; 0x64
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e1e6      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092c2:	4b53      	ldr	r3, [pc, #332]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1f0      	bne.n	80092b0 <HAL_RCC_OscConfig+0x10c>
 80092ce:	e000      	b.n	80092d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d063      	beq.n	80093a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80092de:	4b4c      	ldr	r3, [pc, #304]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f003 030c 	and.w	r3, r3, #12
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00b      	beq.n	8009302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80092ea:	4b49      	ldr	r3, [pc, #292]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f003 030c 	and.w	r3, r3, #12
 80092f2:	2b08      	cmp	r3, #8
 80092f4:	d11c      	bne.n	8009330 <HAL_RCC_OscConfig+0x18c>
 80092f6:	4b46      	ldr	r3, [pc, #280]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d116      	bne.n	8009330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009302:	4b43      	ldr	r3, [pc, #268]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d005      	beq.n	800931a <HAL_RCC_OscConfig+0x176>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	2b01      	cmp	r3, #1
 8009314:	d001      	beq.n	800931a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e1ba      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800931a:	4b3d      	ldr	r3, [pc, #244]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	4939      	ldr	r1, [pc, #228]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800932a:	4313      	orrs	r3, r2
 800932c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800932e:	e03a      	b.n	80093a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d020      	beq.n	800937a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009338:	4b36      	ldr	r3, [pc, #216]	; (8009414 <HAL_RCC_OscConfig+0x270>)
 800933a:	2201      	movs	r2, #1
 800933c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800933e:	f7fc f8b7 	bl	80054b0 <HAL_GetTick>
 8009342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009344:	e008      	b.n	8009358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009346:	f7fc f8b3 	bl	80054b0 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d901      	bls.n	8009358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e19b      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009358:	4b2d      	ldr	r3, [pc, #180]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0f0      	beq.n	8009346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009364:	4b2a      	ldr	r3, [pc, #168]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	4927      	ldr	r1, [pc, #156]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 8009374:	4313      	orrs	r3, r2
 8009376:	600b      	str	r3, [r1, #0]
 8009378:	e015      	b.n	80093a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800937a:	4b26      	ldr	r3, [pc, #152]	; (8009414 <HAL_RCC_OscConfig+0x270>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009380:	f7fc f896 	bl	80054b0 <HAL_GetTick>
 8009384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009386:	e008      	b.n	800939a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009388:	f7fc f892 	bl	80054b0 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b02      	cmp	r3, #2
 8009394:	d901      	bls.n	800939a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e17a      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800939a:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1f0      	bne.n	8009388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0308 	and.w	r3, r3, #8
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d03a      	beq.n	8009428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d019      	beq.n	80093ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093ba:	4b17      	ldr	r3, [pc, #92]	; (8009418 <HAL_RCC_OscConfig+0x274>)
 80093bc:	2201      	movs	r2, #1
 80093be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093c0:	f7fc f876 	bl	80054b0 <HAL_GetTick>
 80093c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093c6:	e008      	b.n	80093da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093c8:	f7fc f872 	bl	80054b0 <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e15a      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093da:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <HAL_RCC_OscConfig+0x26c>)
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0f0      	beq.n	80093c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80093e6:	2001      	movs	r0, #1
 80093e8:	f000 fb08 	bl	80099fc <RCC_Delay>
 80093ec:	e01c      	b.n	8009428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <HAL_RCC_OscConfig+0x274>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093f4:	f7fc f85c 	bl	80054b0 <HAL_GetTick>
 80093f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093fa:	e00f      	b.n	800941c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80093fc:	f7fc f858 	bl	80054b0 <HAL_GetTick>
 8009400:	4602      	mov	r2, r0
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	2b02      	cmp	r3, #2
 8009408:	d908      	bls.n	800941c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800940a:	2303      	movs	r3, #3
 800940c:	e140      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
 800940e:	bf00      	nop
 8009410:	40021000 	.word	0x40021000
 8009414:	42420000 	.word	0x42420000
 8009418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800941c:	4b9e      	ldr	r3, [pc, #632]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d1e9      	bne.n	80093fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0304 	and.w	r3, r3, #4
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 80a6 	beq.w	8009582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009436:	2300      	movs	r3, #0
 8009438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800943a:	4b97      	ldr	r3, [pc, #604]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800943c:	69db      	ldr	r3, [r3, #28]
 800943e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d10d      	bne.n	8009462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009446:	4b94      	ldr	r3, [pc, #592]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009448:	69db      	ldr	r3, [r3, #28]
 800944a:	4a93      	ldr	r2, [pc, #588]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800944c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009450:	61d3      	str	r3, [r2, #28]
 8009452:	4b91      	ldr	r3, [pc, #580]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800945a:	60bb      	str	r3, [r7, #8]
 800945c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800945e:	2301      	movs	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009462:	4b8e      	ldr	r3, [pc, #568]	; (800969c <HAL_RCC_OscConfig+0x4f8>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946a:	2b00      	cmp	r3, #0
 800946c:	d118      	bne.n	80094a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800946e:	4b8b      	ldr	r3, [pc, #556]	; (800969c <HAL_RCC_OscConfig+0x4f8>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a8a      	ldr	r2, [pc, #552]	; (800969c <HAL_RCC_OscConfig+0x4f8>)
 8009474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800947a:	f7fc f819 	bl	80054b0 <HAL_GetTick>
 800947e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009480:	e008      	b.n	8009494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009482:	f7fc f815 	bl	80054b0 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	2b64      	cmp	r3, #100	; 0x64
 800948e:	d901      	bls.n	8009494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009490:	2303      	movs	r3, #3
 8009492:	e0fd      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009494:	4b81      	ldr	r3, [pc, #516]	; (800969c <HAL_RCC_OscConfig+0x4f8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0f0      	beq.n	8009482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d106      	bne.n	80094b6 <HAL_RCC_OscConfig+0x312>
 80094a8:	4b7b      	ldr	r3, [pc, #492]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	4a7a      	ldr	r2, [pc, #488]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094ae:	f043 0301 	orr.w	r3, r3, #1
 80094b2:	6213      	str	r3, [r2, #32]
 80094b4:	e02d      	b.n	8009512 <HAL_RCC_OscConfig+0x36e>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d10c      	bne.n	80094d8 <HAL_RCC_OscConfig+0x334>
 80094be:	4b76      	ldr	r3, [pc, #472]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094c0:	6a1b      	ldr	r3, [r3, #32]
 80094c2:	4a75      	ldr	r2, [pc, #468]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094c4:	f023 0301 	bic.w	r3, r3, #1
 80094c8:	6213      	str	r3, [r2, #32]
 80094ca:	4b73      	ldr	r3, [pc, #460]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	4a72      	ldr	r2, [pc, #456]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094d0:	f023 0304 	bic.w	r3, r3, #4
 80094d4:	6213      	str	r3, [r2, #32]
 80094d6:	e01c      	b.n	8009512 <HAL_RCC_OscConfig+0x36e>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	2b05      	cmp	r3, #5
 80094de:	d10c      	bne.n	80094fa <HAL_RCC_OscConfig+0x356>
 80094e0:	4b6d      	ldr	r3, [pc, #436]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	4a6c      	ldr	r2, [pc, #432]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094e6:	f043 0304 	orr.w	r3, r3, #4
 80094ea:	6213      	str	r3, [r2, #32]
 80094ec:	4b6a      	ldr	r3, [pc, #424]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	4a69      	ldr	r2, [pc, #420]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094f2:	f043 0301 	orr.w	r3, r3, #1
 80094f6:	6213      	str	r3, [r2, #32]
 80094f8:	e00b      	b.n	8009512 <HAL_RCC_OscConfig+0x36e>
 80094fa:	4b67      	ldr	r3, [pc, #412]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	4a66      	ldr	r2, [pc, #408]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	6213      	str	r3, [r2, #32]
 8009506:	4b64      	ldr	r3, [pc, #400]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009508:	6a1b      	ldr	r3, [r3, #32]
 800950a:	4a63      	ldr	r2, [pc, #396]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800950c:	f023 0304 	bic.w	r3, r3, #4
 8009510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d015      	beq.n	8009546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800951a:	f7fb ffc9 	bl	80054b0 <HAL_GetTick>
 800951e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009520:	e00a      	b.n	8009538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009522:	f7fb ffc5 	bl	80054b0 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009530:	4293      	cmp	r3, r2
 8009532:	d901      	bls.n	8009538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e0ab      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009538:	4b57      	ldr	r3, [pc, #348]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0ee      	beq.n	8009522 <HAL_RCC_OscConfig+0x37e>
 8009544:	e014      	b.n	8009570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009546:	f7fb ffb3 	bl	80054b0 <HAL_GetTick>
 800954a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800954c:	e00a      	b.n	8009564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800954e:	f7fb ffaf 	bl	80054b0 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	f241 3288 	movw	r2, #5000	; 0x1388
 800955c:	4293      	cmp	r3, r2
 800955e:	d901      	bls.n	8009564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e095      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009564:	4b4c      	ldr	r3, [pc, #304]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1ee      	bne.n	800954e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d105      	bne.n	8009582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009576:	4b48      	ldr	r3, [pc, #288]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	4a47      	ldr	r2, [pc, #284]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800957c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 8081 	beq.w	800968e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800958c:	4b42      	ldr	r3, [pc, #264]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	f003 030c 	and.w	r3, r3, #12
 8009594:	2b08      	cmp	r3, #8
 8009596:	d061      	beq.n	800965c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d146      	bne.n	800962e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095a0:	4b3f      	ldr	r3, [pc, #252]	; (80096a0 <HAL_RCC_OscConfig+0x4fc>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a6:	f7fb ff83 	bl	80054b0 <HAL_GetTick>
 80095aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095ac:	e008      	b.n	80095c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ae:	f7fb ff7f 	bl	80054b0 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e067      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095c0:	4b35      	ldr	r3, [pc, #212]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1f0      	bne.n	80095ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a1b      	ldr	r3, [r3, #32]
 80095d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d4:	d108      	bne.n	80095e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80095d6:	4b30      	ldr	r3, [pc, #192]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	492d      	ldr	r1, [pc, #180]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80095e8:	4b2b      	ldr	r3, [pc, #172]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a19      	ldr	r1, [r3, #32]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	430b      	orrs	r3, r1
 80095fa:	4927      	ldr	r1, [pc, #156]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009600:	4b27      	ldr	r3, [pc, #156]	; (80096a0 <HAL_RCC_OscConfig+0x4fc>)
 8009602:	2201      	movs	r2, #1
 8009604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009606:	f7fb ff53 	bl	80054b0 <HAL_GetTick>
 800960a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800960c:	e008      	b.n	8009620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800960e:	f7fb ff4f 	bl	80054b0 <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	2b02      	cmp	r3, #2
 800961a:	d901      	bls.n	8009620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e037      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009620:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0f0      	beq.n	800960e <HAL_RCC_OscConfig+0x46a>
 800962c:	e02f      	b.n	800968e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800962e:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <HAL_RCC_OscConfig+0x4fc>)
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009634:	f7fb ff3c 	bl	80054b0 <HAL_GetTick>
 8009638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800963a:	e008      	b.n	800964e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800963c:	f7fb ff38 	bl	80054b0 <HAL_GetTick>
 8009640:	4602      	mov	r2, r0
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	2b02      	cmp	r3, #2
 8009648:	d901      	bls.n	800964e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e020      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800964e:	4b12      	ldr	r3, [pc, #72]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f0      	bne.n	800963c <HAL_RCC_OscConfig+0x498>
 800965a:	e018      	b.n	800968e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e013      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009668:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <HAL_RCC_OscConfig+0x4f4>)
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a1b      	ldr	r3, [r3, #32]
 8009678:	429a      	cmp	r2, r3
 800967a:	d106      	bne.n	800968a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009686:	429a      	cmp	r2, r3
 8009688:	d001      	beq.n	800968e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e000      	b.n	8009690 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	40021000 	.word	0x40021000
 800969c:	40007000 	.word	0x40007000
 80096a0:	42420060 	.word	0x42420060

080096a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0d0      	b.n	800985a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80096b8:	4b6a      	ldr	r3, [pc, #424]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0307 	and.w	r3, r3, #7
 80096c0:	683a      	ldr	r2, [r7, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d910      	bls.n	80096e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096c6:	4b67      	ldr	r3, [pc, #412]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f023 0207 	bic.w	r2, r3, #7
 80096ce:	4965      	ldr	r1, [pc, #404]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096d6:	4b63      	ldr	r3, [pc, #396]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0307 	and.w	r3, r3, #7
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d001      	beq.n	80096e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e0b8      	b.n	800985a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d020      	beq.n	8009736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0304 	and.w	r3, r3, #4
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009700:	4b59      	ldr	r3, [pc, #356]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	4a58      	ldr	r2, [pc, #352]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800970a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 0308 	and.w	r3, r3, #8
 8009714:	2b00      	cmp	r3, #0
 8009716:	d005      	beq.n	8009724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009718:	4b53      	ldr	r3, [pc, #332]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	4a52      	ldr	r2, [pc, #328]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 800971e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8009722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009724:	4b50      	ldr	r3, [pc, #320]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	494d      	ldr	r1, [pc, #308]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009732:	4313      	orrs	r3, r2
 8009734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d040      	beq.n	80097c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d107      	bne.n	800975a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800974a:	4b47      	ldr	r3, [pc, #284]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d115      	bne.n	8009782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e07f      	b.n	800985a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	2b02      	cmp	r3, #2
 8009760:	d107      	bne.n	8009772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009762:	4b41      	ldr	r3, [pc, #260]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d109      	bne.n	8009782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e073      	b.n	800985a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009772:	4b3d      	ldr	r3, [pc, #244]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0302 	and.w	r3, r3, #2
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e06b      	b.n	800985a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009782:	4b39      	ldr	r3, [pc, #228]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f023 0203 	bic.w	r2, r3, #3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	4936      	ldr	r1, [pc, #216]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009790:	4313      	orrs	r3, r2
 8009792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009794:	f7fb fe8c 	bl	80054b0 <HAL_GetTick>
 8009798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800979a:	e00a      	b.n	80097b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800979c:	f7fb fe88 	bl	80054b0 <HAL_GetTick>
 80097a0:	4602      	mov	r2, r0
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	1ad3      	subs	r3, r2, r3
 80097a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d901      	bls.n	80097b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80097ae:	2303      	movs	r3, #3
 80097b0:	e053      	b.n	800985a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097b2:	4b2d      	ldr	r3, [pc, #180]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	f003 020c 	and.w	r2, r3, #12
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d1eb      	bne.n	800979c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80097c4:	4b27      	ldr	r3, [pc, #156]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f003 0307 	and.w	r3, r3, #7
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d210      	bcs.n	80097f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097d2:	4b24      	ldr	r3, [pc, #144]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f023 0207 	bic.w	r2, r3, #7
 80097da:	4922      	ldr	r1, [pc, #136]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	4313      	orrs	r3, r2
 80097e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097e2:	4b20      	ldr	r3, [pc, #128]	; (8009864 <HAL_RCC_ClockConfig+0x1c0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d001      	beq.n	80097f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e032      	b.n	800985a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d008      	beq.n	8009812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009800:	4b19      	ldr	r3, [pc, #100]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	4916      	ldr	r1, [pc, #88]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 800980e:	4313      	orrs	r3, r2
 8009810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0308 	and.w	r3, r3, #8
 800981a:	2b00      	cmp	r3, #0
 800981c:	d009      	beq.n	8009832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800981e:	4b12      	ldr	r3, [pc, #72]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	490e      	ldr	r1, [pc, #56]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 800982e:	4313      	orrs	r3, r2
 8009830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009832:	f000 f821 	bl	8009878 <HAL_RCC_GetSysClockFreq>
 8009836:	4602      	mov	r2, r0
 8009838:	4b0b      	ldr	r3, [pc, #44]	; (8009868 <HAL_RCC_ClockConfig+0x1c4>)
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	091b      	lsrs	r3, r3, #4
 800983e:	f003 030f 	and.w	r3, r3, #15
 8009842:	490a      	ldr	r1, [pc, #40]	; (800986c <HAL_RCC_ClockConfig+0x1c8>)
 8009844:	5ccb      	ldrb	r3, [r1, r3]
 8009846:	fa22 f303 	lsr.w	r3, r2, r3
 800984a:	4a09      	ldr	r2, [pc, #36]	; (8009870 <HAL_RCC_ClockConfig+0x1cc>)
 800984c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800984e:	4b09      	ldr	r3, [pc, #36]	; (8009874 <HAL_RCC_ClockConfig+0x1d0>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f7fb fc02 	bl	800505c <HAL_InitTick>

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	40022000 	.word	0x40022000
 8009868:	40021000 	.word	0x40021000
 800986c:	080162cc 	.word	0x080162cc
 8009870:	20000000 	.word	0x20000000
 8009874:	20000004 	.word	0x20000004

08009878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009878:	b490      	push	{r4, r7}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800987e:	4b2a      	ldr	r3, [pc, #168]	; (8009928 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009880:	1d3c      	adds	r4, r7, #4
 8009882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009888:	f240 2301 	movw	r3, #513	; 0x201
 800988c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800988e:	2300      	movs	r3, #0
 8009890:	61fb      	str	r3, [r7, #28]
 8009892:	2300      	movs	r3, #0
 8009894:	61bb      	str	r3, [r7, #24]
 8009896:	2300      	movs	r3, #0
 8009898:	627b      	str	r3, [r7, #36]	; 0x24
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80098a2:	4b22      	ldr	r3, [pc, #136]	; (800992c <HAL_RCC_GetSysClockFreq+0xb4>)
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80098a8:	69fb      	ldr	r3, [r7, #28]
 80098aa:	f003 030c 	and.w	r3, r3, #12
 80098ae:	2b04      	cmp	r3, #4
 80098b0:	d002      	beq.n	80098b8 <HAL_RCC_GetSysClockFreq+0x40>
 80098b2:	2b08      	cmp	r3, #8
 80098b4:	d003      	beq.n	80098be <HAL_RCC_GetSysClockFreq+0x46>
 80098b6:	e02d      	b.n	8009914 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80098b8:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098ba:	623b      	str	r3, [r7, #32]
      break;
 80098bc:	e02d      	b.n	800991a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	0c9b      	lsrs	r3, r3, #18
 80098c2:	f003 030f 	and.w	r3, r3, #15
 80098c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80098ca:	4413      	add	r3, r2
 80098cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80098d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d013      	beq.n	8009904 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80098dc:	4b13      	ldr	r3, [pc, #76]	; (800992c <HAL_RCC_GetSysClockFreq+0xb4>)
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	0c5b      	lsrs	r3, r3, #17
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80098ea:	4413      	add	r3, r2
 80098ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80098f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	4a0e      	ldr	r2, [pc, #56]	; (8009930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098f6:	fb02 f203 	mul.w	r2, r2, r3
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
 8009902:	e004      	b.n	800990e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	4a0b      	ldr	r2, [pc, #44]	; (8009934 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009908:	fb02 f303 	mul.w	r3, r2, r3
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	623b      	str	r3, [r7, #32]
      break;
 8009912:	e002      	b.n	800991a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009914:	4b06      	ldr	r3, [pc, #24]	; (8009930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009916:	623b      	str	r3, [r7, #32]
      break;
 8009918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800991a:	6a3b      	ldr	r3, [r7, #32]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3728      	adds	r7, #40	; 0x28
 8009920:	46bd      	mov	sp, r7
 8009922:	bc90      	pop	{r4, r7}
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	08016100 	.word	0x08016100
 800992c:	40021000 	.word	0x40021000
 8009930:	007a1200 	.word	0x007a1200
 8009934:	003d0900 	.word	0x003d0900

08009938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <HAL_RCC_GetHCLKFreq+0x10>)
 800993e:	681b      	ldr	r3, [r3, #0]
}
 8009940:	4618      	mov	r0, r3
 8009942:	46bd      	mov	sp, r7
 8009944:	bc80      	pop	{r7}
 8009946:	4770      	bx	lr
 8009948:	20000000 	.word	0x20000000

0800994c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009950:	f7ff fff2 	bl	8009938 <HAL_RCC_GetHCLKFreq>
 8009954:	4602      	mov	r2, r0
 8009956:	4b05      	ldr	r3, [pc, #20]	; (800996c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	0a1b      	lsrs	r3, r3, #8
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	4903      	ldr	r1, [pc, #12]	; (8009970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009962:	5ccb      	ldrb	r3, [r1, r3]
 8009964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009968:	4618      	mov	r0, r3
 800996a:	bd80      	pop	{r7, pc}
 800996c:	40021000 	.word	0x40021000
 8009970:	080162dc 	.word	0x080162dc

08009974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009978:	f7ff ffde 	bl	8009938 <HAL_RCC_GetHCLKFreq>
 800997c:	4602      	mov	r2, r0
 800997e:	4b05      	ldr	r3, [pc, #20]	; (8009994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	0adb      	lsrs	r3, r3, #11
 8009984:	f003 0307 	and.w	r3, r3, #7
 8009988:	4903      	ldr	r1, [pc, #12]	; (8009998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800998a:	5ccb      	ldrb	r3, [r1, r3]
 800998c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009990:	4618      	mov	r0, r3
 8009992:	bd80      	pop	{r7, pc}
 8009994:	40021000 	.word	0x40021000
 8009998:	080162dc 	.word	0x080162dc

0800999c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	220f      	movs	r2, #15
 80099aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80099ac:	4b11      	ldr	r3, [pc, #68]	; (80099f4 <HAL_RCC_GetClockConfig+0x58>)
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f003 0203 	and.w	r2, r3, #3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80099b8:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <HAL_RCC_GetClockConfig+0x58>)
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80099c4:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <HAL_RCC_GetClockConfig+0x58>)
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80099d0:	4b08      	ldr	r3, [pc, #32]	; (80099f4 <HAL_RCC_GetClockConfig+0x58>)
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	08db      	lsrs	r3, r3, #3
 80099d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80099de:	4b06      	ldr	r3, [pc, #24]	; (80099f8 <HAL_RCC_GetClockConfig+0x5c>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0207 	and.w	r2, r3, #7
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80099ea:	bf00      	nop
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bc80      	pop	{r7}
 80099f2:	4770      	bx	lr
 80099f4:	40021000 	.word	0x40021000
 80099f8:	40022000 	.word	0x40022000

080099fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009a04:	4b0a      	ldr	r3, [pc, #40]	; (8009a30 <RCC_Delay+0x34>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a0a      	ldr	r2, [pc, #40]	; (8009a34 <RCC_Delay+0x38>)
 8009a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0e:	0a5b      	lsrs	r3, r3, #9
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	fb02 f303 	mul.w	r3, r2, r3
 8009a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009a18:	bf00      	nop
  }
  while (Delay --);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	1e5a      	subs	r2, r3, #1
 8009a1e:	60fa      	str	r2, [r7, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f9      	bne.n	8009a18 <RCC_Delay+0x1c>
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bc80      	pop	{r7}
 8009a2e:	4770      	bx	lr
 8009a30:	20000000 	.word	0x20000000
 8009a34:	10624dd3 	.word	0x10624dd3

08009a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e041      	b.n	8009ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d106      	bne.n	8009a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f839 	bl	8009ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2202      	movs	r2, #2
 8009a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4619      	mov	r1, r3
 8009a76:	4610      	mov	r0, r2
 8009a78:	f000 f9c2 	bl	8009e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b083      	sub	sp, #12
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009ade:	bf00      	nop
 8009ae0:	370c      	adds	r7, #12
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d001      	beq.n	8009b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e044      	b.n	8009b8a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f042 0201 	orr.w	r2, r2, #1
 8009b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1d      	ldr	r2, [pc, #116]	; (8009b94 <HAL_TIM_Base_Start_IT+0xac>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d018      	beq.n	8009b54 <HAL_TIM_Base_Start_IT+0x6c>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a1c      	ldr	r2, [pc, #112]	; (8009b98 <HAL_TIM_Base_Start_IT+0xb0>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d013      	beq.n	8009b54 <HAL_TIM_Base_Start_IT+0x6c>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b34:	d00e      	beq.n	8009b54 <HAL_TIM_Base_Start_IT+0x6c>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a18      	ldr	r2, [pc, #96]	; (8009b9c <HAL_TIM_Base_Start_IT+0xb4>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d009      	beq.n	8009b54 <HAL_TIM_Base_Start_IT+0x6c>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a16      	ldr	r2, [pc, #88]	; (8009ba0 <HAL_TIM_Base_Start_IT+0xb8>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d004      	beq.n	8009b54 <HAL_TIM_Base_Start_IT+0x6c>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a15      	ldr	r2, [pc, #84]	; (8009ba4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d111      	bne.n	8009b78 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f003 0307 	and.w	r3, r3, #7
 8009b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2b06      	cmp	r3, #6
 8009b64:	d010      	beq.n	8009b88 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 0201 	orr.w	r2, r2, #1
 8009b74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b76:	e007      	b.n	8009b88 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f042 0201 	orr.w	r2, r2, #1
 8009b86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr
 8009b94:	40012c00 	.word	0x40012c00
 8009b98:	40013400 	.word	0x40013400
 8009b9c:	40000400 	.word	0x40000400
 8009ba0:	40000800 	.word	0x40000800
 8009ba4:	40000c00 	.word	0x40000c00

08009ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	691b      	ldr	r3, [r3, #16]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d122      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f003 0302 	and.w	r3, r3, #2
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	d11b      	bne.n	8009c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f06f 0202 	mvn.w	r2, #2
 8009bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	f003 0303 	and.w	r3, r3, #3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d003      	beq.n	8009bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f8ed 	bl	8009dca <HAL_TIM_IC_CaptureCallback>
 8009bf0:	e005      	b.n	8009bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 f8e0 	bl	8009db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f8ef 	bl	8009ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	691b      	ldr	r3, [r3, #16]
 8009c0a:	f003 0304 	and.w	r3, r3, #4
 8009c0e:	2b04      	cmp	r3, #4
 8009c10:	d122      	bne.n	8009c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d11b      	bne.n	8009c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f06f 0204 	mvn.w	r2, #4
 8009c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d003      	beq.n	8009c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f8c3 	bl	8009dca <HAL_TIM_IC_CaptureCallback>
 8009c44:	e005      	b.n	8009c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f8b6 	bl	8009db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f8c5 	bl	8009ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	f003 0308 	and.w	r3, r3, #8
 8009c62:	2b08      	cmp	r3, #8
 8009c64:	d122      	bne.n	8009cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f003 0308 	and.w	r3, r3, #8
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d11b      	bne.n	8009cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f06f 0208 	mvn.w	r2, #8
 8009c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2204      	movs	r2, #4
 8009c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f899 	bl	8009dca <HAL_TIM_IC_CaptureCallback>
 8009c98:	e005      	b.n	8009ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f88c 	bl	8009db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f89b 	bl	8009ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	f003 0310 	and.w	r3, r3, #16
 8009cb6:	2b10      	cmp	r3, #16
 8009cb8:	d122      	bne.n	8009d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	f003 0310 	and.w	r3, r3, #16
 8009cc4:	2b10      	cmp	r3, #16
 8009cc6:	d11b      	bne.n	8009d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f06f 0210 	mvn.w	r2, #16
 8009cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d003      	beq.n	8009cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 f86f 	bl	8009dca <HAL_TIM_IC_CaptureCallback>
 8009cec:	e005      	b.n	8009cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f862 	bl	8009db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f871 	bl	8009ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d10e      	bne.n	8009d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d107      	bne.n	8009d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f06f 0201 	mvn.w	r2, #1
 8009d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f7fb f948 	bl	8004fbc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d36:	2b80      	cmp	r3, #128	; 0x80
 8009d38:	d10e      	bne.n	8009d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d44:	2b80      	cmp	r3, #128	; 0x80
 8009d46:	d107      	bne.n	8009d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f8d7 	bl	8009f06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d62:	2b40      	cmp	r3, #64	; 0x40
 8009d64:	d10e      	bne.n	8009d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d70:	2b40      	cmp	r3, #64	; 0x40
 8009d72:	d107      	bne.n	8009d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 f835 	bl	8009dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f003 0320 	and.w	r3, r3, #32
 8009d8e:	2b20      	cmp	r3, #32
 8009d90:	d10e      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f003 0320 	and.w	r3, r3, #32
 8009d9c:	2b20      	cmp	r3, #32
 8009d9e:	d107      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f06f 0220 	mvn.w	r2, #32
 8009da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f8a2 	bl	8009ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bc80      	pop	{r7}
 8009dc8:	4770      	bx	lr

08009dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009dd2:	bf00      	nop
 8009dd4:	370c      	adds	r7, #12
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bc80      	pop	{r7}
 8009dda:	4770      	bx	lr

08009ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr

08009dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009df6:	bf00      	nop
 8009df8:	370c      	adds	r7, #12
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bc80      	pop	{r7}
 8009dfe:	4770      	bx	lr

08009e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a33      	ldr	r2, [pc, #204]	; (8009ee0 <TIM_Base_SetConfig+0xe0>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d013      	beq.n	8009e40 <TIM_Base_SetConfig+0x40>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a32      	ldr	r2, [pc, #200]	; (8009ee4 <TIM_Base_SetConfig+0xe4>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00f      	beq.n	8009e40 <TIM_Base_SetConfig+0x40>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e26:	d00b      	beq.n	8009e40 <TIM_Base_SetConfig+0x40>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ee8 <TIM_Base_SetConfig+0xe8>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d007      	beq.n	8009e40 <TIM_Base_SetConfig+0x40>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a2e      	ldr	r2, [pc, #184]	; (8009eec <TIM_Base_SetConfig+0xec>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <TIM_Base_SetConfig+0x40>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a2d      	ldr	r2, [pc, #180]	; (8009ef0 <TIM_Base_SetConfig+0xf0>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d108      	bne.n	8009e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a22      	ldr	r2, [pc, #136]	; (8009ee0 <TIM_Base_SetConfig+0xe0>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d013      	beq.n	8009e82 <TIM_Base_SetConfig+0x82>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a21      	ldr	r2, [pc, #132]	; (8009ee4 <TIM_Base_SetConfig+0xe4>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d00f      	beq.n	8009e82 <TIM_Base_SetConfig+0x82>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e68:	d00b      	beq.n	8009e82 <TIM_Base_SetConfig+0x82>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a1e      	ldr	r2, [pc, #120]	; (8009ee8 <TIM_Base_SetConfig+0xe8>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d007      	beq.n	8009e82 <TIM_Base_SetConfig+0x82>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	4a1d      	ldr	r2, [pc, #116]	; (8009eec <TIM_Base_SetConfig+0xec>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d003      	beq.n	8009e82 <TIM_Base_SetConfig+0x82>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	4a1c      	ldr	r2, [pc, #112]	; (8009ef0 <TIM_Base_SetConfig+0xf0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d108      	bne.n	8009e94 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a09      	ldr	r2, [pc, #36]	; (8009ee0 <TIM_Base_SetConfig+0xe0>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d003      	beq.n	8009ec8 <TIM_Base_SetConfig+0xc8>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a08      	ldr	r2, [pc, #32]	; (8009ee4 <TIM_Base_SetConfig+0xe4>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d103      	bne.n	8009ed0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	691a      	ldr	r2, [r3, #16]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	615a      	str	r2, [r3, #20]
}
 8009ed6:	bf00      	nop
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bc80      	pop	{r7}
 8009ede:	4770      	bx	lr
 8009ee0:	40012c00 	.word	0x40012c00
 8009ee4:	40013400 	.word	0x40013400
 8009ee8:	40000400 	.word	0x40000400
 8009eec:	40000800 	.word	0x40000800
 8009ef0:	40000c00 	.word	0x40000c00

08009ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bc80      	pop	{r7}
 8009f04:	4770      	bx	lr

08009f06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f0e:	bf00      	nop
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bc80      	pop	{r7}
 8009f16:	4770      	bx	lr

08009f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d101      	bne.n	8009f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e03f      	b.n	8009faa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d106      	bne.n	8009f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f7fb fa14 	bl	800536c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2224      	movs	r2, #36	; 0x24
 8009f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fc25 	bl	800a7ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	695a      	ldr	r2, [r3, #20]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2220      	movs	r2, #32
 8009f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2220      	movs	r2, #32
 8009fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b08a      	sub	sp, #40	; 0x28
 8009fb6:	af02      	add	r7, sp, #8
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	603b      	str	r3, [r7, #0]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	d17c      	bne.n	800a0cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d002      	beq.n	8009fde <HAL_UART_Transmit+0x2c>
 8009fd8:	88fb      	ldrh	r3, [r7, #6]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e075      	b.n	800a0ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d101      	bne.n	8009ff0 <HAL_UART_Transmit+0x3e>
 8009fec:	2302      	movs	r3, #2
 8009fee:	e06e      	b.n	800a0ce <HAL_UART_Transmit+0x11c>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2221      	movs	r2, #33	; 0x21
 800a002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a006:	f7fb fa53 	bl	80054b0 <HAL_GetTick>
 800a00a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	88fa      	ldrh	r2, [r7, #6]
 800a010:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	88fa      	ldrh	r2, [r7, #6]
 800a016:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a020:	d108      	bne.n	800a034 <HAL_UART_Transmit+0x82>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	691b      	ldr	r3, [r3, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d104      	bne.n	800a034 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	61bb      	str	r3, [r7, #24]
 800a032:	e003      	b.n	800a03c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a038:	2300      	movs	r3, #0
 800a03a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a044:	e02a      	b.n	800a09c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2200      	movs	r2, #0
 800a04e:	2180      	movs	r1, #128	; 0x80
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fa11 	bl	800a478 <UART_WaitOnFlagUntilTimeout>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e036      	b.n	800a0ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10b      	bne.n	800a07e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	461a      	mov	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a074:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	3302      	adds	r3, #2
 800a07a:	61bb      	str	r3, [r7, #24]
 800a07c:	e007      	b.n	800a08e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	781a      	ldrb	r2, [r3, #0]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	3301      	adds	r3, #1
 800a08c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a092:	b29b      	uxth	r3, r3
 800a094:	3b01      	subs	r3, #1
 800a096:	b29a      	uxth	r2, r3
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1cf      	bne.n	800a046 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2140      	movs	r1, #64	; 0x40
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f9e1 	bl	800a478 <UART_WaitOnFlagUntilTimeout>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e006      	b.n	800a0ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2220      	movs	r2, #32
 800a0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	e000      	b.n	800a0ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a0cc:	2302      	movs	r3, #2
  }
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3720      	adds	r7, #32
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b08a      	sub	sp, #40	; 0x28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10d      	bne.n	800a12a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	f003 0320 	and.w	r3, r3, #32
 800a114:	2b00      	cmp	r3, #0
 800a116:	d008      	beq.n	800a12a <HAL_UART_IRQHandler+0x52>
 800a118:	6a3b      	ldr	r3, [r7, #32]
 800a11a:	f003 0320 	and.w	r3, r3, #32
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d003      	beq.n	800a12a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fa99 	bl	800a65a <UART_Receive_IT>
      return;
 800a128:	e17b      	b.n	800a422 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f000 80b1 	beq.w	800a294 <HAL_UART_IRQHandler+0x1bc>
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	f003 0301 	and.w	r3, r3, #1
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d105      	bne.n	800a148 <HAL_UART_IRQHandler+0x70>
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 80a6 	beq.w	800a294 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00a      	beq.n	800a168 <HAL_UART_IRQHandler+0x90>
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a160:	f043 0201 	orr.w	r2, r3, #1
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	f003 0304 	and.w	r3, r3, #4
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00a      	beq.n	800a188 <HAL_UART_IRQHandler+0xb0>
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	f003 0301 	and.w	r3, r3, #1
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d005      	beq.n	800a188 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a180:	f043 0202 	orr.w	r2, r3, #2
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d00a      	beq.n	800a1a8 <HAL_UART_IRQHandler+0xd0>
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d005      	beq.n	800a1a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a0:	f043 0204 	orr.w	r2, r3, #4
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	f003 0308 	and.w	r3, r3, #8
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00f      	beq.n	800a1d2 <HAL_UART_IRQHandler+0xfa>
 800a1b2:	6a3b      	ldr	r3, [r7, #32]
 800a1b4:	f003 0320 	and.w	r3, r3, #32
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d104      	bne.n	800a1c6 <HAL_UART_IRQHandler+0xee>
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	f043 0208 	orr.w	r2, r3, #8
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 811e 	beq.w	800a418 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	f003 0320 	and.w	r3, r3, #32
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d007      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x11e>
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fa32 	bl	800a65a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	695b      	ldr	r3, [r3, #20]
 800a1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a200:	2b00      	cmp	r3, #0
 800a202:	bf14      	ite	ne
 800a204:	2301      	movne	r3, #1
 800a206:	2300      	moveq	r3, #0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	f003 0308 	and.w	r3, r3, #8
 800a214:	2b00      	cmp	r3, #0
 800a216:	d102      	bne.n	800a21e <HAL_UART_IRQHandler+0x146>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d031      	beq.n	800a282 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f974 	bl	800a50c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	695b      	ldr	r3, [r3, #20]
 800a22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d023      	beq.n	800a27a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	695a      	ldr	r2, [r3, #20]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a240:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a246:	2b00      	cmp	r3, #0
 800a248:	d013      	beq.n	800a272 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24e:	4a76      	ldr	r2, [pc, #472]	; (800a428 <HAL_UART_IRQHandler+0x350>)
 800a250:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a256:	4618      	mov	r0, r3
 800a258:	f7fb fb92 	bl	8005980 <HAL_DMA_Abort_IT>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d016      	beq.n	800a290 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a270:	e00e      	b.n	800a290 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f8ec 	bl	800a450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a278:	e00a      	b.n	800a290 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f8e8 	bl	800a450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a280:	e006      	b.n	800a290 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f8e4 	bl	800a450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a28e:	e0c3      	b.n	800a418 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a290:	bf00      	nop
    return;
 800a292:	e0c1      	b.n	800a418 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a298:	2b01      	cmp	r3, #1
 800a29a:	f040 80a1 	bne.w	800a3e0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 809b 	beq.w	800a3e0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	f003 0310 	and.w	r3, r3, #16
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 8095 	beq.w	800a3e0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	60fb      	str	r3, [r7, #12]
 800a2ca:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d04e      	beq.n	800a378 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800a2e4:	8a3b      	ldrh	r3, [r7, #16]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 8098 	beq.w	800a41c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a2f0:	8a3a      	ldrh	r2, [r7, #16]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	f080 8092 	bcs.w	800a41c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	8a3a      	ldrh	r2, [r7, #16]
 800a2fc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	2b20      	cmp	r3, #32
 800a306:	d02b      	beq.n	800a360 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a316:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	695a      	ldr	r2, [r3, #20]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f022 0201 	bic.w	r2, r2, #1
 800a326:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	695a      	ldr	r2, [r3, #20]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a336:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2220      	movs	r2, #32
 800a33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68da      	ldr	r2, [r3, #12]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0210 	bic.w	r2, r2, #16
 800a354:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fb fad6 	bl	800590c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a368:	b29b      	uxth	r3, r3
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f876 	bl	800a462 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a376:	e051      	b.n	800a41c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a380:	b29b      	uxth	r3, r3
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d047      	beq.n	800a420 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800a390:	8a7b      	ldrh	r3, [r7, #18]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d044      	beq.n	800a420 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3a4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	695a      	ldr	r2, [r3, #20]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 0201 	bic.w	r2, r2, #1
 800a3b4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	68da      	ldr	r2, [r3, #12]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0210 	bic.w	r2, r2, #16
 800a3d2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a3d4:	8a7b      	ldrh	r3, [r7, #18]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 f842 	bl	800a462 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800a3de:	e01f      	b.n	800a420 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d008      	beq.n	800a3fc <HAL_UART_IRQHandler+0x324>
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f8c9 	bl	800a58c <UART_Transmit_IT>
    return;
 800a3fa:	e012      	b.n	800a422 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00d      	beq.n	800a422 <HAL_UART_IRQHandler+0x34a>
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d008      	beq.n	800a422 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f90a 	bl	800a62a <UART_EndTransmit_IT>
    return;
 800a416:	e004      	b.n	800a422 <HAL_UART_IRQHandler+0x34a>
    return;
 800a418:	bf00      	nop
 800a41a:	e002      	b.n	800a422 <HAL_UART_IRQHandler+0x34a>
      return;
 800a41c:	bf00      	nop
 800a41e:	e000      	b.n	800a422 <HAL_UART_IRQHandler+0x34a>
      return;
 800a420:	bf00      	nop
  }
}
 800a422:	3728      	adds	r7, #40	; 0x28
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	0800a565 	.word	0x0800a565

0800a42c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	bc80      	pop	{r7}
 800a43c:	4770      	bx	lr

0800a43e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a43e:	b480      	push	{r7}
 800a440:	b083      	sub	sp, #12
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a446:	bf00      	nop
 800a448:	370c      	adds	r7, #12
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bc80      	pop	{r7}
 800a44e:	4770      	bx	lr

0800a450 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr

0800a462 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a462:	b480      	push	{r7}
 800a464:	b083      	sub	sp, #12
 800a466:	af00      	add	r7, sp, #0
 800a468:	6078      	str	r0, [r7, #4]
 800a46a:	460b      	mov	r3, r1
 800a46c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	bc80      	pop	{r7}
 800a476:	4770      	bx	lr

0800a478 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	4613      	mov	r3, r2
 800a486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a488:	e02c      	b.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a490:	d028      	beq.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d007      	beq.n	800a4a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a498:	f7fb f80a 	bl	80054b0 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	69ba      	ldr	r2, [r7, #24]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d21d      	bcs.n	800a4e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	695a      	ldr	r2, [r3, #20]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0201 	bic.w	r2, r2, #1
 800a4c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2220      	movs	r2, #32
 800a4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e00f      	b.n	800a504 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	bf0c      	ite	eq
 800a4f4:	2301      	moveq	r3, #1
 800a4f6:	2300      	movne	r3, #0
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	79fb      	ldrb	r3, [r7, #7]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d0c3      	beq.n	800a48a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	68da      	ldr	r2, [r3, #12]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a522:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	695a      	ldr	r2, [r3, #20]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f022 0201 	bic.w	r2, r2, #1
 800a532:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d107      	bne.n	800a54c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68da      	ldr	r2, [r3, #12]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f022 0210 	bic.w	r2, r2, #16
 800a54a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2220      	movs	r2, #32
 800a550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a55a:	bf00      	nop
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	bc80      	pop	{r7}
 800a562:	4770      	bx	lr

0800a564 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff ff66 	bl	800a450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a584:	bf00      	nop
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b21      	cmp	r3, #33	; 0x21
 800a59e:	d13e      	bne.n	800a61e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a8:	d114      	bne.n	800a5d4 <UART_Transmit_IT+0x48>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d110      	bne.n	800a5d4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a1b      	ldr	r3, [r3, #32]
 800a5b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	881b      	ldrh	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	1c9a      	adds	r2, r3, #2
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	621a      	str	r2, [r3, #32]
 800a5d2:	e008      	b.n	800a5e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	1c59      	adds	r1, r3, #1
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6211      	str	r1, [r2, #32]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10f      	bne.n	800a61a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	e000      	b.n	800a620 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a61e:	2302      	movs	r3, #2
  }
}
 800a620:	4618      	mov	r0, r3
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	bc80      	pop	{r7}
 800a628:	4770      	bx	lr

0800a62a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b082      	sub	sp, #8
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a640:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2220      	movs	r2, #32
 800a646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f7ff feee 	bl	800a42c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}

0800a65a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b22      	cmp	r3, #34	; 0x22
 800a66c:	f040 8099 	bne.w	800a7a2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a678:	d117      	bne.n	800a6aa <UART_Receive_IT+0x50>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d113      	bne.n	800a6aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	b29b      	uxth	r3, r3
 800a694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a698:	b29a      	uxth	r2, r3
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a2:	1c9a      	adds	r2, r3, #2
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	629a      	str	r2, [r3, #40]	; 0x28
 800a6a8:	e026      	b.n	800a6f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ae:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	689b      	ldr	r3, [r3, #8]
 800a6b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6bc:	d007      	beq.n	800a6ce <UART_Receive_IT+0x74>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10a      	bne.n	800a6dc <UART_Receive_IT+0x82>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	b2da      	uxtb	r2, r3
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	e008      	b.n	800a6ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b29b      	uxth	r3, r3
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	4619      	mov	r1, r3
 800a706:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d148      	bne.n	800a79e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68da      	ldr	r2, [r3, #12]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f022 0220 	bic.w	r2, r2, #32
 800a71a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a72a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	695a      	ldr	r2, [r3, #20]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f022 0201 	bic.w	r2, r2, #1
 800a73a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2220      	movs	r2, #32
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d123      	bne.n	800a794 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0210 	bic.w	r2, r2, #16
 800a760:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f003 0310 	and.w	r3, r3, #16
 800a76c:	2b10      	cmp	r3, #16
 800a76e:	d10a      	bne.n	800a786 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a770:	2300      	movs	r3, #0
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	60fb      	str	r3, [r7, #12]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a78a:	4619      	mov	r1, r3
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f7ff fe68 	bl	800a462 <HAL_UARTEx_RxEventCallback>
 800a792:	e002      	b.n	800a79a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fe52 	bl	800a43e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	e002      	b.n	800a7a4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e000      	b.n	800a7a4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800a7a2:	2302      	movs	r3, #2
  }
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691b      	ldr	r3, [r3, #16]
 800a7ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	689a      	ldr	r2, [r3, #8]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	431a      	orrs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800a7e6:	f023 030c 	bic.w	r3, r3, #12
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	6812      	ldr	r2, [r2, #0]
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	430b      	orrs	r3, r1
 800a7f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	699a      	ldr	r2, [r3, #24]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	430a      	orrs	r2, r1
 800a808:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a2c      	ldr	r2, [pc, #176]	; (800a8c0 <UART_SetConfig+0x114>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d103      	bne.n	800a81c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a814:	f7ff f8ae 	bl	8009974 <HAL_RCC_GetPCLK2Freq>
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	e002      	b.n	800a822 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a81c:	f7ff f896 	bl	800994c <HAL_RCC_GetPCLK1Freq>
 800a820:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	4613      	mov	r3, r2
 800a826:	009b      	lsls	r3, r3, #2
 800a828:	4413      	add	r3, r2
 800a82a:	009a      	lsls	r2, r3, #2
 800a82c:	441a      	add	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	fbb2 f3f3 	udiv	r3, r2, r3
 800a838:	4a22      	ldr	r2, [pc, #136]	; (800a8c4 <UART_SetConfig+0x118>)
 800a83a:	fba2 2303 	umull	r2, r3, r2, r3
 800a83e:	095b      	lsrs	r3, r3, #5
 800a840:	0119      	lsls	r1, r3, #4
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	4613      	mov	r3, r2
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	009a      	lsls	r2, r3, #2
 800a84c:	441a      	add	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	fbb2 f2f3 	udiv	r2, r2, r3
 800a858:	4b1a      	ldr	r3, [pc, #104]	; (800a8c4 <UART_SetConfig+0x118>)
 800a85a:	fba3 0302 	umull	r0, r3, r3, r2
 800a85e:	095b      	lsrs	r3, r3, #5
 800a860:	2064      	movs	r0, #100	; 0x64
 800a862:	fb00 f303 	mul.w	r3, r0, r3
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	011b      	lsls	r3, r3, #4
 800a86a:	3332      	adds	r3, #50	; 0x32
 800a86c:	4a15      	ldr	r2, [pc, #84]	; (800a8c4 <UART_SetConfig+0x118>)
 800a86e:	fba2 2303 	umull	r2, r3, r2, r3
 800a872:	095b      	lsrs	r3, r3, #5
 800a874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a878:	4419      	add	r1, r3
 800a87a:	68fa      	ldr	r2, [r7, #12]
 800a87c:	4613      	mov	r3, r2
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	4413      	add	r3, r2
 800a882:	009a      	lsls	r2, r3, #2
 800a884:	441a      	add	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a890:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <UART_SetConfig+0x118>)
 800a892:	fba3 0302 	umull	r0, r3, r3, r2
 800a896:	095b      	lsrs	r3, r3, #5
 800a898:	2064      	movs	r0, #100	; 0x64
 800a89a:	fb00 f303 	mul.w	r3, r0, r3
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	011b      	lsls	r3, r3, #4
 800a8a2:	3332      	adds	r3, #50	; 0x32
 800a8a4:	4a07      	ldr	r2, [pc, #28]	; (800a8c4 <UART_SetConfig+0x118>)
 800a8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8aa:	095b      	lsrs	r3, r3, #5
 800a8ac:	f003 020f 	and.w	r2, r3, #15
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	440a      	add	r2, r1
 800a8b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a8b8:	bf00      	nop
 800a8ba:	3710      	adds	r7, #16
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	bd80      	pop	{r7, pc}
 800a8c0:	40013800 	.word	0x40013800
 800a8c4:	51eb851f 	.word	0x51eb851f

0800a8c8 <set_int_enable>:
 *  interrupt is used.
 *  @param[in]  enable      1 to enable interrupt.
 *  @return     0 if successful.
 */
static int set_int_enable(unsigned char enable)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.dmp_on)
 800a8d2:	4b29      	ldr	r3, [pc, #164]	; (800a978 <set_int_enable+0xb0>)
 800a8d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d01c      	beq.n	800a916 <set_int_enable+0x4e>
    {
        if (enable)
 800a8dc:	79fb      	ldrb	r3, [r7, #7]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d002      	beq.n	800a8e8 <set_int_enable+0x20>
            tmp = BIT_DMP_INT_EN;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	73fb      	strb	r3, [r7, #15]
 800a8e6:	e001      	b.n	800a8ec <set_int_enable+0x24>
        else
            tmp = 0x00;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800a8ec:	4b22      	ldr	r3, [pc, #136]	; (800a978 <set_int_enable+0xb0>)
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	7818      	ldrb	r0, [r3, #0]
 800a8f2:	4b21      	ldr	r3, [pc, #132]	; (800a978 <set_int_enable+0xb0>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	7c59      	ldrb	r1, [r3, #17]
 800a8f8:	f107 030f 	add.w	r3, r7, #15
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f005 fa05 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <set_int_enable+0x46>
            return -1;
 800a908:	f04f 33ff 	mov.w	r3, #4294967295
 800a90c:	e030      	b.n	800a970 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800a90e:	7bfa      	ldrb	r2, [r7, #15]
 800a910:	4b19      	ldr	r3, [pc, #100]	; (800a978 <set_int_enable+0xb0>)
 800a912:	745a      	strb	r2, [r3, #17]
 800a914:	e02b      	b.n	800a96e <set_int_enable+0xa6>
    }
    else
    {
        if (!st.chip_cfg.sensors)
 800a916:	4b18      	ldr	r3, [pc, #96]	; (800a978 <set_int_enable+0xb0>)
 800a918:	7a9b      	ldrb	r3, [r3, #10]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d102      	bne.n	800a924 <set_int_enable+0x5c>
            return -1;
 800a91e:	f04f 33ff 	mov.w	r3, #4294967295
 800a922:	e025      	b.n	800a970 <set_int_enable+0xa8>
        if (enable && st.chip_cfg.int_enable)
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d005      	beq.n	800a936 <set_int_enable+0x6e>
 800a92a:	4b13      	ldr	r3, [pc, #76]	; (800a978 <set_int_enable+0xb0>)
 800a92c:	7c5b      	ldrb	r3, [r3, #17]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d001      	beq.n	800a936 <set_int_enable+0x6e>
            return 0;
 800a932:	2300      	movs	r3, #0
 800a934:	e01c      	b.n	800a970 <set_int_enable+0xa8>
        if (enable)
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <set_int_enable+0x7a>
            tmp = BIT_DATA_RDY_EN;
 800a93c:	2301      	movs	r3, #1
 800a93e:	73fb      	strb	r3, [r7, #15]
 800a940:	e001      	b.n	800a946 <set_int_enable+0x7e>
        else
            tmp = 0x00;
 800a942:	2300      	movs	r3, #0
 800a944:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &tmp))
 800a946:	4b0c      	ldr	r3, [pc, #48]	; (800a978 <set_int_enable+0xb0>)
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	7818      	ldrb	r0, [r3, #0]
 800a94c:	4b0a      	ldr	r3, [pc, #40]	; (800a978 <set_int_enable+0xb0>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	7c59      	ldrb	r1, [r3, #17]
 800a952:	f107 030f 	add.w	r3, r7, #15
 800a956:	2201      	movs	r2, #1
 800a958:	f005 f9d8 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d002      	beq.n	800a968 <set_int_enable+0xa0>
            return -1;
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	e003      	b.n	800a970 <set_int_enable+0xa8>
        st.chip_cfg.int_enable = tmp;
 800a968:	7bfa      	ldrb	r2, [r7, #15]
 800a96a:	4b03      	ldr	r3, [pc, #12]	; (800a978 <set_int_enable+0xb0>)
 800a96c:	745a      	strb	r2, [r3, #17]
    }
    return 0;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	4618      	mov	r0, r3
 800a972:	3710      	adds	r7, #16
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	2000000c 	.word	0x2000000c

0800a97c <mpu_init>:
 *  Data ready interrupt: Disabled, active low, unlatched.
 *  @param[in]  int_param   Platform-specific parameters to interrupt API.
 *  @return     0 if successful.
 */
int mpu_init(struct int_param_s *int_param)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
    unsigned char data[6];

    /* Reset device. */
    data[0] = BIT_RESET;
 800a984:	2380      	movs	r3, #128	; 0x80
 800a986:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800a988:	4b4f      	ldr	r3, [pc, #316]	; (800aac8 <mpu_init+0x14c>)
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	7818      	ldrb	r0, [r3, #0]
 800a98e:	4b4e      	ldr	r3, [pc, #312]	; (800aac8 <mpu_init+0x14c>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	7d59      	ldrb	r1, [r3, #21]
 800a994:	f107 0308 	add.w	r3, r7, #8
 800a998:	2201      	movs	r2, #1
 800a99a:	f005 f9b7 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <mpu_init+0x2e>
        return -1;
 800a9a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9a8:	e08a      	b.n	800aac0 <mpu_init+0x144>
    delay_ms(100);
 800a9aa:	2064      	movs	r0, #100	; 0x64
 800a9ac:	f7fa fd8a 	bl	80054c4 <HAL_Delay>

    /* Wake up chip. */
    data[0] = 0x00;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	723b      	strb	r3, [r7, #8]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, data))
 800a9b4:	4b44      	ldr	r3, [pc, #272]	; (800aac8 <mpu_init+0x14c>)
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	7818      	ldrb	r0, [r3, #0]
 800a9ba:	4b43      	ldr	r3, [pc, #268]	; (800aac8 <mpu_init+0x14c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	7d59      	ldrb	r1, [r3, #21]
 800a9c0:	f107 0308 	add.w	r3, r7, #8
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f005 f9a1 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d002      	beq.n	800a9d6 <mpu_init+0x5a>
        return -1;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d4:	e074      	b.n	800aac0 <mpu_init+0x144>

    st.chip_cfg.accel_half = 0;
 800a9d6:	4b3c      	ldr	r3, [pc, #240]	; (800aac8 <mpu_init+0x14c>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	74da      	strb	r2, [r3, #19]
    if (i2c_write(st.hw->addr, st.reg->accel_cfg2, 1, data))
        return -1;
#endif

    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.sensors = 0xFF;
 800a9dc:	4b3a      	ldr	r3, [pc, #232]	; (800aac8 <mpu_init+0x14c>)
 800a9de:	22ff      	movs	r2, #255	; 0xff
 800a9e0:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.gyro_fsr = 0xFF;
 800a9e2:	4b39      	ldr	r3, [pc, #228]	; (800aac8 <mpu_init+0x14c>)
 800a9e4:	22ff      	movs	r2, #255	; 0xff
 800a9e6:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800a9e8:	4b37      	ldr	r3, [pc, #220]	; (800aac8 <mpu_init+0x14c>)
 800a9ea:	22ff      	movs	r2, #255	; 0xff
 800a9ec:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800a9ee:	4b36      	ldr	r3, [pc, #216]	; (800aac8 <mpu_init+0x14c>)
 800a9f0:	22ff      	movs	r2, #255	; 0xff
 800a9f2:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800a9f4:	4b34      	ldr	r3, [pc, #208]	; (800aac8 <mpu_init+0x14c>)
 800a9f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9fa:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.fifo_enable = 0xFF;
 800a9fc:	4b32      	ldr	r3, [pc, #200]	; (800aac8 <mpu_init+0x14c>)
 800a9fe:	22ff      	movs	r2, #255	; 0xff
 800aa00:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.bypass_mode = 0xFF;
 800aa02:	4b31      	ldr	r3, [pc, #196]	; (800aac8 <mpu_init+0x14c>)
 800aa04:	22ff      	movs	r2, #255	; 0xff
 800aa06:	749a      	strb	r2, [r3, #18]
#ifdef AK89xx_SECONDARY
    st.chip_cfg.compass_sample_rate = 0xFFFF;
#endif
    /* mpu_set_sensors always preserves this setting. */
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800aa08:	4b2f      	ldr	r3, [pc, #188]	; (800aac8 <mpu_init+0x14c>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	731a      	strb	r2, [r3, #12]
    /* Handled in next call to mpu_set_bypass. */
    st.chip_cfg.active_low_int = 1;
 800aa0e:	4b2e      	ldr	r3, [pc, #184]	; (800aac8 <mpu_init+0x14c>)
 800aa10:	2201      	movs	r2, #1
 800aa12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    st.chip_cfg.latched_int = 0;
 800aa16:	4b2c      	ldr	r3, [pc, #176]	; (800aac8 <mpu_init+0x14c>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    st.chip_cfg.int_motion_only = 0;
 800aa1e:	4b2a      	ldr	r3, [pc, #168]	; (800aac8 <mpu_init+0x14c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	755a      	strb	r2, [r3, #21]
    st.chip_cfg.lp_accel_mode = 0;
 800aa24:	4b28      	ldr	r3, [pc, #160]	; (800aac8 <mpu_init+0x14c>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	751a      	strb	r2, [r3, #20]
    memset(&st.chip_cfg.cache, 0, sizeof(st.chip_cfg.cache));
 800aa2a:	220c      	movs	r2, #12
 800aa2c:	2100      	movs	r1, #0
 800aa2e:	4827      	ldr	r0, [pc, #156]	; (800aacc <mpu_init+0x150>)
 800aa30:	f005 fdfd 	bl	801062e <memset>
    st.chip_cfg.dmp_on = 0;
 800aa34:	4b24      	ldr	r3, [pc, #144]	; (800aac8 <mpu_init+0x14c>)
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    st.chip_cfg.dmp_loaded = 0;
 800aa3c:	4b22      	ldr	r3, [pc, #136]	; (800aac8 <mpu_init+0x14c>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = 0;
 800aa44:	4b20      	ldr	r3, [pc, #128]	; (800aac8 <mpu_init+0x14c>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	84da      	strh	r2, [r3, #38]	; 0x26

    if (mpu_set_gyro_fsr(2000))
 800aa4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800aa4e:	f000 fa57 	bl	800af00 <mpu_set_gyro_fsr>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <mpu_init+0xe2>
        return -1;
 800aa58:	f04f 33ff 	mov.w	r3, #4294967295
 800aa5c:	e030      	b.n	800aac0 <mpu_init+0x144>
    if (mpu_set_accel_fsr(2))
 800aa5e:	2002      	movs	r0, #2
 800aa60:	f000 fadc 	bl	800b01c <mpu_set_accel_fsr>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <mpu_init+0xf4>
        return -1;
 800aa6a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6e:	e027      	b.n	800aac0 <mpu_init+0x144>
    if (mpu_set_lpf(42))
 800aa70:	202a      	movs	r0, #42	; 0x2a
 800aa72:	f000 fb77 	bl	800b164 <mpu_set_lpf>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d002      	beq.n	800aa82 <mpu_init+0x106>
        return -1;
 800aa7c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa80:	e01e      	b.n	800aac0 <mpu_init+0x144>
    if (mpu_set_sample_rate(50))
 800aa82:	2032      	movs	r0, #50	; 0x32
 800aa84:	f000 fbd4 	bl	800b230 <mpu_set_sample_rate>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d002      	beq.n	800aa94 <mpu_init+0x118>
        return -1;
 800aa8e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa92:	e015      	b.n	800aac0 <mpu_init+0x144>
    if (mpu_configure_fifo(0))
 800aa94:	2000      	movs	r0, #0
 800aa96:	f000 fc41 	bl	800b31c <mpu_configure_fifo>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <mpu_init+0x12a>
        return -1;
 800aaa0:	f04f 33ff 	mov.w	r3, #4294967295
 800aaa4:	e00c      	b.n	800aac0 <mpu_init+0x144>
    setup_compass();
    if (mpu_set_compass_sample_rate(10))
        return -1;
#else
    /* Already disabled by setup_compass. */
    if (mpu_set_bypass(0))
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	f000 fd8e 	bl	800b5c8 <mpu_set_bypass>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d002      	beq.n	800aab8 <mpu_init+0x13c>
        return -1;
 800aab2:	f04f 33ff 	mov.w	r3, #4294967295
 800aab6:	e003      	b.n	800aac0 <mpu_init+0x144>
#endif

    mpu_set_sensors(0);
 800aab8:	2000      	movs	r0, #0
 800aaba:	f000 fc81 	bl	800b3c0 <mpu_set_sensors>
    return 0;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	2000000c 	.word	0x2000000c
 800aacc:	20000022 	.word	0x20000022

0800aad0 <mpu_lp_accel_mode>:
 *  @param[in]  rate        Minimum sampling rate, or zero to disable LP
 *                          accel mode.
 *  @return     0 if successful.
 */
int mpu_lp_accel_mode(unsigned short rate)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	4603      	mov	r3, r0
 800aad8:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    if (rate > 40)
 800aada:	88fb      	ldrh	r3, [r7, #6]
 800aadc:	2b28      	cmp	r3, #40	; 0x28
 800aade:	d902      	bls.n	800aae6 <mpu_lp_accel_mode+0x16>
        return -1;
 800aae0:	f04f 33ff 	mov.w	r3, #4294967295
 800aae4:	e06a      	b.n	800abbc <mpu_lp_accel_mode+0xec>

    if (!rate)
 800aae6:	88fb      	ldrh	r3, [r7, #6]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d11c      	bne.n	800ab26 <mpu_lp_accel_mode+0x56>
    {
        mpu_set_int_latched(0);
 800aaec:	2000      	movs	r0, #0
 800aaee:	f000 fe31 	bl	800b754 <mpu_set_int_latched>
        tmp[0] = 0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	733b      	strb	r3, [r7, #12]
        tmp[1] = BIT_STBY_XYZG;
 800aaf6:	2307      	movs	r3, #7
 800aaf8:	737b      	strb	r3, [r7, #13]
        if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800aafa:	4b32      	ldr	r3, [pc, #200]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	7818      	ldrb	r0, [r3, #0]
 800ab00:	4b30      	ldr	r3, [pc, #192]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	7d59      	ldrb	r1, [r3, #21]
 800ab06:	f107 030c 	add.w	r3, r7, #12
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f005 f8fe 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d002      	beq.n	800ab1c <mpu_lp_accel_mode+0x4c>
            return -1;
 800ab16:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1a:	e04f      	b.n	800abbc <mpu_lp_accel_mode+0xec>
        st.chip_cfg.lp_accel_mode = 0;
 800ab1c:	4b29      	ldr	r3, [pc, #164]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	751a      	strb	r2, [r3, #20]
        return 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	e04a      	b.n	800abbc <mpu_lp_accel_mode+0xec>
     * it gets a chance to deassert the interrupt pin; therefore, we shift this
     * responsibility over to the MCU.
     *
     * Any register read will clear the interrupt.
     */
    mpu_set_int_latched(1);
 800ab26:	2001      	movs	r0, #1
 800ab28:	f000 fe14 	bl	800b754 <mpu_set_int_latched>
#if defined MPU6050
    tmp[0] = BIT_LPA_CYCLE;
 800ab2c:	2320      	movs	r3, #32
 800ab2e:	733b      	strb	r3, [r7, #12]
    if (rate == 1)
 800ab30:	88fb      	ldrh	r3, [r7, #6]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d105      	bne.n	800ab42 <mpu_lp_accel_mode+0x72>
    {
        tmp[1] = INV_LPA_1_25HZ;
 800ab36:	2300      	movs	r3, #0
 800ab38:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800ab3a:	2005      	movs	r0, #5
 800ab3c:	f000 fb12 	bl	800b164 <mpu_set_lpf>
 800ab40:	e016      	b.n	800ab70 <mpu_lp_accel_mode+0xa0>
    }
    else if (rate <= 5)
 800ab42:	88fb      	ldrh	r3, [r7, #6]
 800ab44:	2b05      	cmp	r3, #5
 800ab46:	d805      	bhi.n	800ab54 <mpu_lp_accel_mode+0x84>
    {
        tmp[1] = INV_LPA_5HZ;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(5);
 800ab4c:	2005      	movs	r0, #5
 800ab4e:	f000 fb09 	bl	800b164 <mpu_set_lpf>
 800ab52:	e00d      	b.n	800ab70 <mpu_lp_accel_mode+0xa0>
    }
    else if (rate <= 20)
 800ab54:	88fb      	ldrh	r3, [r7, #6]
 800ab56:	2b14      	cmp	r3, #20
 800ab58:	d805      	bhi.n	800ab66 <mpu_lp_accel_mode+0x96>
    {
        tmp[1] = INV_LPA_20HZ;
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(10);
 800ab5e:	200a      	movs	r0, #10
 800ab60:	f000 fb00 	bl	800b164 <mpu_set_lpf>
 800ab64:	e004      	b.n	800ab70 <mpu_lp_accel_mode+0xa0>
    }
    else
    {
        tmp[1] = INV_LPA_40HZ;
 800ab66:	2303      	movs	r3, #3
 800ab68:	737b      	strb	r3, [r7, #13]
        mpu_set_lpf(20);
 800ab6a:	2014      	movs	r0, #20
 800ab6c:	f000 fafa 	bl	800b164 <mpu_set_lpf>
    }
    tmp[1] = (tmp[1] << 6) | BIT_STBY_XYZG;
 800ab70:	7b7b      	ldrb	r3, [r7, #13]
 800ab72:	019b      	lsls	r3, r3, #6
 800ab74:	b25b      	sxtb	r3, r3
 800ab76:	f043 0307 	orr.w	r3, r3, #7
 800ab7a:	b25b      	sxtb	r3, r3
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	737b      	strb	r3, [r7, #13]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 2, tmp))
 800ab80:	4b10      	ldr	r3, [pc, #64]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	7818      	ldrb	r0, [r3, #0]
 800ab86:	4b0f      	ldr	r3, [pc, #60]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	7d59      	ldrb	r1, [r3, #21]
 800ab8c:	f107 030c 	add.w	r3, r7, #12
 800ab90:	2202      	movs	r2, #2
 800ab92:	f005 f8bb 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <mpu_lp_accel_mode+0xd2>
        return -1;
 800ab9c:	f04f 33ff 	mov.w	r3, #4294967295
 800aba0:	e00c      	b.n	800abbc <mpu_lp_accel_mode+0xec>
        return -1;
    tmp[0] = BIT_LPA_CYCLE;
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, tmp))
        return -1;
#endif
    st.chip_cfg.sensors = INV_XYZ_ACCEL;
 800aba2:	4b08      	ldr	r3, [pc, #32]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800aba4:	2208      	movs	r2, #8
 800aba6:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.clk_src = 0;
 800aba8:	4b06      	ldr	r3, [pc, #24]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800abaa:	2200      	movs	r2, #0
 800abac:	731a      	strb	r2, [r3, #12]
    st.chip_cfg.lp_accel_mode = 1;
 800abae:	4b05      	ldr	r3, [pc, #20]	; (800abc4 <mpu_lp_accel_mode+0xf4>)
 800abb0:	2201      	movs	r2, #1
 800abb2:	751a      	strb	r2, [r3, #20]
    mpu_configure_fifo(0);
 800abb4:	2000      	movs	r0, #0
 800abb6:	f000 fbb1 	bl	800b31c <mpu_configure_fifo>

    return 0;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	2000000c 	.word	0x2000000c

0800abc8 <mpu_get_temperature>:
 *  @param[out] data        Data in q16 format.
 *  @param[out] timestamp   Timestamp in milliseconds. Null if not needed.
 *  @return     0 if successful.
 */
int mpu_get_temperature(long *data, unsigned long *timestamp)
{
 800abc8:	b590      	push	{r4, r7, lr}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
    unsigned char tmp[2];
    short raw;

    if (!(st.chip_cfg.sensors))
 800abd2:	4b2d      	ldr	r3, [pc, #180]	; (800ac88 <mpu_get_temperature+0xc0>)
 800abd4:	7a9b      	ldrb	r3, [r3, #10]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d102      	bne.n	800abe0 <mpu_get_temperature+0x18>
        return -1;
 800abda:	f04f 33ff 	mov.w	r3, #4294967295
 800abde:	e04f      	b.n	800ac80 <mpu_get_temperature+0xb8>

    if (i2c_read(st.hw->addr, st.reg->temp, 2, tmp))
 800abe0:	4b29      	ldr	r3, [pc, #164]	; (800ac88 <mpu_get_temperature+0xc0>)
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	7818      	ldrb	r0, [r3, #0]
 800abe6:	4b28      	ldr	r3, [pc, #160]	; (800ac88 <mpu_get_temperature+0xc0>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	7c19      	ldrb	r1, [r3, #16]
 800abec:	f107 030c 	add.w	r3, r7, #12
 800abf0:	2202      	movs	r2, #2
 800abf2:	f005 f841 	bl	800fc78 <Sensors_I2C_ReadRegister>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <mpu_get_temperature+0x3a>
        return -1;
 800abfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ac00:	e03e      	b.n	800ac80 <mpu_get_temperature+0xb8>
    raw = (tmp[0] << 8) | tmp[1];
 800ac02:	7b3b      	ldrb	r3, [r7, #12]
 800ac04:	021b      	lsls	r3, r3, #8
 800ac06:	b21a      	sxth	r2, r3
 800ac08:	7b7b      	ldrb	r3, [r7, #13]
 800ac0a:	b21b      	sxth	r3, r3
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	81fb      	strh	r3, [r7, #14]
    if (timestamp)
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <mpu_get_temperature+0x54>
        get_ms(timestamp);
 800ac16:	6838      	ldr	r0, [r7, #0]
 800ac18:	f005 f8c2 	bl	800fda0 <get_ms_user>

    data[0] = (long)((35 + ((raw - (float)st.hw->temp_offset) / st.hw->temp_sens)) * 65536L);
 800ac1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7f8 fe33 	bl	800388c <__aeabi_i2f>
 800ac26:	4604      	mov	r4, r0
 800ac28:	4b17      	ldr	r3, [pc, #92]	; (800ac88 <mpu_get_temperature+0xc0>)
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7f8 fe2b 	bl	800388c <__aeabi_i2f>
 800ac36:	4603      	mov	r3, r0
 800ac38:	4619      	mov	r1, r3
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f7f8 fd70 	bl	8003720 <__aeabi_fsub>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461c      	mov	r4, r3
 800ac44:	4b10      	ldr	r3, [pc, #64]	; (800ac88 <mpu_get_temperature+0xc0>)
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	88db      	ldrh	r3, [r3, #6]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7f8 fe1e 	bl	800388c <__aeabi_i2f>
 800ac50:	4603      	mov	r3, r0
 800ac52:	4619      	mov	r1, r3
 800ac54:	4620      	mov	r0, r4
 800ac56:	f7f8 ff21 	bl	8003a9c <__aeabi_fdiv>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	490b      	ldr	r1, [pc, #44]	; (800ac8c <mpu_get_temperature+0xc4>)
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7f8 fd60 	bl	8003724 <__addsf3>
 800ac64:	4603      	mov	r3, r0
 800ac66:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7f8 fe62 	bl	8003934 <__aeabi_fmul>
 800ac70:	4603      	mov	r3, r0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7f9 f83a 	bl	8003cec <__aeabi_f2iz>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	601a      	str	r2, [r3, #0]
    return 0;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd90      	pop	{r4, r7, pc}
 800ac88:	2000000c 	.word	0x2000000c
 800ac8c:	420c0000 	.word	0x420c0000

0800ac90 <mpu_reset_fifo>:
/**
 *  @brief  Reset FIFO read/write pointers.
 *  @return 0 if successful.
 */
int mpu_reset_fifo(void)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800ac96:	4b7e      	ldr	r3, [pc, #504]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ac98:	7a9b      	ldrb	r3, [r3, #10]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <mpu_reset_fifo+0x14>
        return -1;
 800ac9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aca2:	e0f1      	b.n	800ae88 <mpu_reset_fifo+0x1f8>

    data = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	71fb      	strb	r3, [r7, #7]
    if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800aca8:	4b79      	ldr	r3, [pc, #484]	; (800ae90 <mpu_reset_fifo+0x200>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	7818      	ldrb	r0, [r3, #0]
 800acae:	4b78      	ldr	r3, [pc, #480]	; (800ae90 <mpu_reset_fifo+0x200>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	7c59      	ldrb	r1, [r3, #17]
 800acb4:	1dfb      	adds	r3, r7, #7
 800acb6:	2201      	movs	r2, #1
 800acb8:	f005 f828 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <mpu_reset_fifo+0x38>
        return -1;
 800acc2:	f04f 33ff 	mov.w	r3, #4294967295
 800acc6:	e0df      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800acc8:	4b71      	ldr	r3, [pc, #452]	; (800ae90 <mpu_reset_fifo+0x200>)
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	7818      	ldrb	r0, [r3, #0]
 800acce:	4b70      	ldr	r3, [pc, #448]	; (800ae90 <mpu_reset_fifo+0x200>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	7959      	ldrb	r1, [r3, #5]
 800acd4:	1dfb      	adds	r3, r7, #7
 800acd6:	2201      	movs	r2, #1
 800acd8:	f005 f818 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d002      	beq.n	800ace8 <mpu_reset_fifo+0x58>
        return -1;
 800ace2:	f04f 33ff 	mov.w	r3, #4294967295
 800ace6:	e0cf      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800ace8:	4b69      	ldr	r3, [pc, #420]	; (800ae90 <mpu_reset_fifo+0x200>)
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	7818      	ldrb	r0, [r3, #0]
 800acee:	4b68      	ldr	r3, [pc, #416]	; (800ae90 <mpu_reset_fifo+0x200>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	7919      	ldrb	r1, [r3, #4]
 800acf4:	1dfb      	adds	r3, r7, #7
 800acf6:	2201      	movs	r2, #1
 800acf8:	f005 f808 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <mpu_reset_fifo+0x78>
        return -1;
 800ad02:	f04f 33ff 	mov.w	r3, #4294967295
 800ad06:	e0bf      	b.n	800ae88 <mpu_reset_fifo+0x1f8>

    if (st.chip_cfg.dmp_on)
 800ad08:	4b61      	ldr	r3, [pc, #388]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d05c      	beq.n	800adcc <mpu_reset_fifo+0x13c>
    {
        data = BIT_FIFO_RST | BIT_DMP_RST;
 800ad12:	230c      	movs	r3, #12
 800ad14:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800ad16:	4b5e      	ldr	r3, [pc, #376]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	7818      	ldrb	r0, [r3, #0]
 800ad1c:	4b5c      	ldr	r3, [pc, #368]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	7919      	ldrb	r1, [r3, #4]
 800ad22:	1dfb      	adds	r3, r7, #7
 800ad24:	2201      	movs	r2, #1
 800ad26:	f004 fff1 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <mpu_reset_fifo+0xa6>
            return -1;
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	e0a8      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800ad36:	2032      	movs	r0, #50	; 0x32
 800ad38:	f7fa fbc4 	bl	80054c4 <HAL_Delay>
        data = BIT_DMP_EN | BIT_FIFO_EN;
 800ad3c:	23c0      	movs	r3, #192	; 0xc0
 800ad3e:	71fb      	strb	r3, [r7, #7]
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800ad40:	4b53      	ldr	r3, [pc, #332]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad42:	7a9b      	ldrb	r3, [r3, #10]
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d004      	beq.n	800ad56 <mpu_reset_fifo+0xc6>
            data |= BIT_AUX_IF_EN;
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	f043 0320 	orr.w	r3, r3, #32
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800ad56:	4b4e      	ldr	r3, [pc, #312]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	7818      	ldrb	r0, [r3, #0]
 800ad5c:	4b4c      	ldr	r3, [pc, #304]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	7919      	ldrb	r1, [r3, #4]
 800ad62:	1dfb      	adds	r3, r7, #7
 800ad64:	2201      	movs	r2, #1
 800ad66:	f004 ffd1 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <mpu_reset_fifo+0xe6>
            return -1;
 800ad70:	f04f 33ff 	mov.w	r3, #4294967295
 800ad74:	e088      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.int_enable)
 800ad76:	4b46      	ldr	r3, [pc, #280]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad78:	7c5b      	ldrb	r3, [r3, #17]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d002      	beq.n	800ad84 <mpu_reset_fifo+0xf4>
            data = BIT_DMP_INT_EN;
 800ad7e:	2302      	movs	r3, #2
 800ad80:	71fb      	strb	r3, [r7, #7]
 800ad82:	e001      	b.n	800ad88 <mpu_reset_fifo+0xf8>
        else
            data = 0;
 800ad84:	2300      	movs	r3, #0
 800ad86:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800ad88:	4b41      	ldr	r3, [pc, #260]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	7818      	ldrb	r0, [r3, #0]
 800ad8e:	4b40      	ldr	r3, [pc, #256]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	7c59      	ldrb	r1, [r3, #17]
 800ad94:	1dfb      	adds	r3, r7, #7
 800ad96:	2201      	movs	r2, #1
 800ad98:	f004 ffb8 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <mpu_reset_fifo+0x118>
            return -1;
 800ada2:	f04f 33ff 	mov.w	r3, #4294967295
 800ada6:	e06f      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
        data = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &data))
 800adac:	4b38      	ldr	r3, [pc, #224]	; (800ae90 <mpu_reset_fifo+0x200>)
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	7818      	ldrb	r0, [r3, #0]
 800adb2:	4b37      	ldr	r3, [pc, #220]	; (800ae90 <mpu_reset_fifo+0x200>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	7959      	ldrb	r1, [r3, #5]
 800adb8:	1dfb      	adds	r3, r7, #7
 800adba:	2201      	movs	r2, #1
 800adbc:	f004 ffa6 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d05f      	beq.n	800ae86 <mpu_reset_fifo+0x1f6>
            return -1;
 800adc6:	f04f 33ff 	mov.w	r3, #4294967295
 800adca:	e05d      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
    }
    else
    {
        data = BIT_FIFO_RST;
 800adcc:	2304      	movs	r3, #4
 800adce:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800add0:	4b2f      	ldr	r3, [pc, #188]	; (800ae90 <mpu_reset_fifo+0x200>)
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	7818      	ldrb	r0, [r3, #0]
 800add6:	4b2e      	ldr	r3, [pc, #184]	; (800ae90 <mpu_reset_fifo+0x200>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	7919      	ldrb	r1, [r3, #4]
 800addc:	1dfb      	adds	r3, r7, #7
 800adde:	2201      	movs	r2, #1
 800ade0:	f004 ff94 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d002      	beq.n	800adf0 <mpu_reset_fifo+0x160>
            return -1;
 800adea:	f04f 33ff 	mov.w	r3, #4294967295
 800adee:	e04b      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
        if (st.chip_cfg.bypass_mode || !(st.chip_cfg.sensors & INV_XYZ_COMPASS))
 800adf0:	4b27      	ldr	r3, [pc, #156]	; (800ae90 <mpu_reset_fifo+0x200>)
 800adf2:	7c9b      	ldrb	r3, [r3, #18]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d105      	bne.n	800ae04 <mpu_reset_fifo+0x174>
 800adf8:	4b25      	ldr	r3, [pc, #148]	; (800ae90 <mpu_reset_fifo+0x200>)
 800adfa:	7a9b      	ldrb	r3, [r3, #10]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d102      	bne.n	800ae0a <mpu_reset_fifo+0x17a>
            data = BIT_FIFO_EN;
 800ae04:	2340      	movs	r3, #64	; 0x40
 800ae06:	71fb      	strb	r3, [r7, #7]
 800ae08:	e001      	b.n	800ae0e <mpu_reset_fifo+0x17e>
        else
            data = BIT_FIFO_EN | BIT_AUX_IF_EN;
 800ae0a:	2360      	movs	r3, #96	; 0x60
 800ae0c:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &data))
 800ae0e:	4b20      	ldr	r3, [pc, #128]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	7818      	ldrb	r0, [r3, #0]
 800ae14:	4b1e      	ldr	r3, [pc, #120]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	7919      	ldrb	r1, [r3, #4]
 800ae1a:	1dfb      	adds	r3, r7, #7
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f004 ff75 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <mpu_reset_fifo+0x19e>
            return -1;
 800ae28:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2c:	e02c      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
        delay_ms(50);
 800ae2e:	2032      	movs	r0, #50	; 0x32
 800ae30:	f7fa fb48 	bl	80054c4 <HAL_Delay>
        if (st.chip_cfg.int_enable)
 800ae34:	4b16      	ldr	r3, [pc, #88]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ae36:	7c5b      	ldrb	r3, [r3, #17]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d002      	beq.n	800ae42 <mpu_reset_fifo+0x1b2>
            data = BIT_DATA_RDY_EN;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	71fb      	strb	r3, [r7, #7]
 800ae40:	e001      	b.n	800ae46 <mpu_reset_fifo+0x1b6>
        else
            data = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	71fb      	strb	r3, [r7, #7]
        if (i2c_write(st.hw->addr, st.reg->int_enable, 1, &data))
 800ae46:	4b12      	ldr	r3, [pc, #72]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ae48:	685b      	ldr	r3, [r3, #4]
 800ae4a:	7818      	ldrb	r0, [r3, #0]
 800ae4c:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	7c59      	ldrb	r1, [r3, #17]
 800ae52:	1dfb      	adds	r3, r7, #7
 800ae54:	2201      	movs	r2, #1
 800ae56:	f004 ff59 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <mpu_reset_fifo+0x1d6>
            return -1;
 800ae60:	f04f 33ff 	mov.w	r3, #4294967295
 800ae64:	e010      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
        if (i2c_write(st.hw->addr, st.reg->fifo_en, 1, &st.chip_cfg.fifo_enable))
 800ae66:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	7818      	ldrb	r0, [r3, #0]
 800ae6c:	4b08      	ldr	r3, [pc, #32]	; (800ae90 <mpu_reset_fifo+0x200>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	7959      	ldrb	r1, [r3, #5]
 800ae72:	4b08      	ldr	r3, [pc, #32]	; (800ae94 <mpu_reset_fifo+0x204>)
 800ae74:	2201      	movs	r2, #1
 800ae76:	f004 ff49 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d002      	beq.n	800ae86 <mpu_reset_fifo+0x1f6>
            return -1;
 800ae80:	f04f 33ff 	mov.w	r3, #4294967295
 800ae84:	e000      	b.n	800ae88 <mpu_reset_fifo+0x1f8>
    }
    return 0;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	2000000c 	.word	0x2000000c
 800ae94:	2000001c 	.word	0x2000001c

0800ae98 <mpu_get_gyro_fsr>:
 *  @brief      Get the gyro full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_gyro_fsr(unsigned short *fsr)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.gyro_fsr)
 800aea0:	4b16      	ldr	r3, [pc, #88]	; (800aefc <mpu_get_gyro_fsr+0x64>)
 800aea2:	7a1b      	ldrb	r3, [r3, #8]
 800aea4:	2b03      	cmp	r3, #3
 800aea6:	d81e      	bhi.n	800aee6 <mpu_get_gyro_fsr+0x4e>
 800aea8:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <mpu_get_gyro_fsr+0x18>)
 800aeaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeae:	bf00      	nop
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800aec9 	.word	0x0800aec9
 800aeb8:	0800aed3 	.word	0x0800aed3
 800aebc:	0800aedd 	.word	0x0800aedd
    {
    case INV_FSR_250DPS:
        fsr[0] = 250;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	22fa      	movs	r2, #250	; 0xfa
 800aec4:	801a      	strh	r2, [r3, #0]
        break;
 800aec6:	e012      	b.n	800aeee <mpu_get_gyro_fsr+0x56>
    case INV_FSR_500DPS:
        fsr[0] = 500;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800aece:	801a      	strh	r2, [r3, #0]
        break;
 800aed0:	e00d      	b.n	800aeee <mpu_get_gyro_fsr+0x56>
    case INV_FSR_1000DPS:
        fsr[0] = 1000;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aed8:	801a      	strh	r2, [r3, #0]
        break;
 800aeda:	e008      	b.n	800aeee <mpu_get_gyro_fsr+0x56>
    case INV_FSR_2000DPS:
        fsr[0] = 2000;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800aee2:	801a      	strh	r2, [r3, #0]
        break;
 800aee4:	e003      	b.n	800aeee <mpu_get_gyro_fsr+0x56>
    default:
        fsr[0] = 0;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	801a      	strh	r2, [r3, #0]
        break;
 800aeec:	bf00      	nop
    }
    return 0;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bc80      	pop	{r7}
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	2000000c 	.word	0x2000000c

0800af00 <mpu_set_gyro_fsr>:
 *  @brief      Set the gyro full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_gyro_fsr(unsigned short fsr)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800af0a:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <mpu_set_gyro_fsr+0xa4>)
 800af0c:	7a9b      	ldrb	r3, [r3, #10]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d102      	bne.n	800af18 <mpu_set_gyro_fsr+0x18>
        return -1;
 800af12:	f04f 33ff 	mov.w	r3, #4294967295
 800af16:	e041      	b.n	800af9c <mpu_set_gyro_fsr+0x9c>

    switch (fsr)
 800af18:	88fb      	ldrh	r3, [r7, #6]
 800af1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800af1e:	d017      	beq.n	800af50 <mpu_set_gyro_fsr+0x50>
 800af20:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800af24:	dc17      	bgt.n	800af56 <mpu_set_gyro_fsr+0x56>
 800af26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af2a:	d00e      	beq.n	800af4a <mpu_set_gyro_fsr+0x4a>
 800af2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af30:	dc11      	bgt.n	800af56 <mpu_set_gyro_fsr+0x56>
 800af32:	2bfa      	cmp	r3, #250	; 0xfa
 800af34:	d003      	beq.n	800af3e <mpu_set_gyro_fsr+0x3e>
 800af36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800af3a:	d003      	beq.n	800af44 <mpu_set_gyro_fsr+0x44>
 800af3c:	e00b      	b.n	800af56 <mpu_set_gyro_fsr+0x56>
    {
    case 250:
        data = INV_FSR_250DPS << 3;
 800af3e:	2300      	movs	r3, #0
 800af40:	73fb      	strb	r3, [r7, #15]
        break;
 800af42:	e00b      	b.n	800af5c <mpu_set_gyro_fsr+0x5c>
    case 500:
        data = INV_FSR_500DPS << 3;
 800af44:	2308      	movs	r3, #8
 800af46:	73fb      	strb	r3, [r7, #15]
        break;
 800af48:	e008      	b.n	800af5c <mpu_set_gyro_fsr+0x5c>
    case 1000:
        data = INV_FSR_1000DPS << 3;
 800af4a:	2310      	movs	r3, #16
 800af4c:	73fb      	strb	r3, [r7, #15]
        break;
 800af4e:	e005      	b.n	800af5c <mpu_set_gyro_fsr+0x5c>
    case 2000:
        data = INV_FSR_2000DPS << 3;
 800af50:	2318      	movs	r3, #24
 800af52:	73fb      	strb	r3, [r7, #15]
        break;
 800af54:	e002      	b.n	800af5c <mpu_set_gyro_fsr+0x5c>
    default:
        return -1;
 800af56:	f04f 33ff 	mov.w	r3, #4294967295
 800af5a:	e01f      	b.n	800af9c <mpu_set_gyro_fsr+0x9c>
    }

    if (st.chip_cfg.gyro_fsr == (data >> 3))
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <mpu_set_gyro_fsr+0xa4>)
 800af5e:	7a1a      	ldrb	r2, [r3, #8]
 800af60:	7bfb      	ldrb	r3, [r7, #15]
 800af62:	08db      	lsrs	r3, r3, #3
 800af64:	b2db      	uxtb	r3, r3
 800af66:	429a      	cmp	r2, r3
 800af68:	d101      	bne.n	800af6e <mpu_set_gyro_fsr+0x6e>
        return 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	e016      	b.n	800af9c <mpu_set_gyro_fsr+0x9c>
    if (i2c_write(st.hw->addr, st.reg->gyro_cfg, 1, &data))
 800af6e:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <mpu_set_gyro_fsr+0xa4>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	7818      	ldrb	r0, [r3, #0]
 800af74:	4b0b      	ldr	r3, [pc, #44]	; (800afa4 <mpu_set_gyro_fsr+0xa4>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	7999      	ldrb	r1, [r3, #6]
 800af7a:	f107 030f 	add.w	r3, r7, #15
 800af7e:	2201      	movs	r2, #1
 800af80:	f004 fec4 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <mpu_set_gyro_fsr+0x90>
        return -1;
 800af8a:	f04f 33ff 	mov.w	r3, #4294967295
 800af8e:	e005      	b.n	800af9c <mpu_set_gyro_fsr+0x9c>
    st.chip_cfg.gyro_fsr = data >> 3;
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	08db      	lsrs	r3, r3, #3
 800af94:	b2da      	uxtb	r2, r3
 800af96:	4b03      	ldr	r3, [pc, #12]	; (800afa4 <mpu_set_gyro_fsr+0xa4>)
 800af98:	721a      	strb	r2, [r3, #8]
    return 0;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	2000000c 	.word	0x2000000c

0800afa8 <mpu_get_accel_fsr>:
 *  @brief      Get the accel full-scale range.
 *  @param[out] fsr Current full-scale range.
 *  @return     0 if successful.
 */
int mpu_get_accel_fsr(unsigned char *fsr)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.accel_fsr)
 800afb0:	4b19      	ldr	r3, [pc, #100]	; (800b018 <mpu_get_accel_fsr+0x70>)
 800afb2:	7a5b      	ldrb	r3, [r3, #9]
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d81b      	bhi.n	800aff0 <mpu_get_accel_fsr+0x48>
 800afb8:	a201      	add	r2, pc, #4	; (adr r2, 800afc0 <mpu_get_accel_fsr+0x18>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800afd1 	.word	0x0800afd1
 800afc4:	0800afd9 	.word	0x0800afd9
 800afc8:	0800afe1 	.word	0x0800afe1
 800afcc:	0800afe9 	.word	0x0800afe9
    {
    case INV_FSR_2G:
        fsr[0] = 2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	701a      	strb	r2, [r3, #0]
        break;
 800afd6:	e00e      	b.n	800aff6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_4G:
        fsr[0] = 4;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2204      	movs	r2, #4
 800afdc:	701a      	strb	r2, [r3, #0]
        break;
 800afde:	e00a      	b.n	800aff6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_8G:
        fsr[0] = 8;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2208      	movs	r2, #8
 800afe4:	701a      	strb	r2, [r3, #0]
        break;
 800afe6:	e006      	b.n	800aff6 <mpu_get_accel_fsr+0x4e>
    case INV_FSR_16G:
        fsr[0] = 16;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2210      	movs	r2, #16
 800afec:	701a      	strb	r2, [r3, #0]
        break;
 800afee:	e002      	b.n	800aff6 <mpu_get_accel_fsr+0x4e>
    default:
        return -1;
 800aff0:	f04f 33ff 	mov.w	r3, #4294967295
 800aff4:	e00a      	b.n	800b00c <mpu_get_accel_fsr+0x64>
    }
    if (st.chip_cfg.accel_half)
 800aff6:	4b08      	ldr	r3, [pc, #32]	; (800b018 <mpu_get_accel_fsr+0x70>)
 800aff8:	7cdb      	ldrb	r3, [r3, #19]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d005      	beq.n	800b00a <mpu_get_accel_fsr+0x62>
        fsr[0] <<= 1;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	b2da      	uxtb	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	701a      	strb	r2, [r3, #0]
    return 0;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	bc80      	pop	{r7}
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	2000000c 	.word	0x2000000c

0800b01c <mpu_set_accel_fsr>:
 *  @brief      Set the accel full-scale range.
 *  @param[in]  fsr Desired full-scale range.
 *  @return     0 if successful.
 */
int mpu_set_accel_fsr(unsigned char fsr)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	4603      	mov	r3, r0
 800b024:	71fb      	strb	r3, [r7, #7]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b026:	4b30      	ldr	r3, [pc, #192]	; (800b0e8 <mpu_set_accel_fsr+0xcc>)
 800b028:	7a9b      	ldrb	r3, [r3, #10]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d102      	bne.n	800b034 <mpu_set_accel_fsr+0x18>
        return -1;
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
 800b032:	e054      	b.n	800b0de <mpu_set_accel_fsr+0xc2>

    switch (fsr)
 800b034:	79fb      	ldrb	r3, [r7, #7]
 800b036:	3b02      	subs	r3, #2
 800b038:	2b0e      	cmp	r3, #14
 800b03a:	d82d      	bhi.n	800b098 <mpu_set_accel_fsr+0x7c>
 800b03c:	a201      	add	r2, pc, #4	; (adr r2, 800b044 <mpu_set_accel_fsr+0x28>)
 800b03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b042:	bf00      	nop
 800b044:	0800b081 	.word	0x0800b081
 800b048:	0800b099 	.word	0x0800b099
 800b04c:	0800b087 	.word	0x0800b087
 800b050:	0800b099 	.word	0x0800b099
 800b054:	0800b099 	.word	0x0800b099
 800b058:	0800b099 	.word	0x0800b099
 800b05c:	0800b08d 	.word	0x0800b08d
 800b060:	0800b099 	.word	0x0800b099
 800b064:	0800b099 	.word	0x0800b099
 800b068:	0800b099 	.word	0x0800b099
 800b06c:	0800b099 	.word	0x0800b099
 800b070:	0800b099 	.word	0x0800b099
 800b074:	0800b099 	.word	0x0800b099
 800b078:	0800b099 	.word	0x0800b099
 800b07c:	0800b093 	.word	0x0800b093
    {
    case 2:
        data = INV_FSR_2G << 3;
 800b080:	2300      	movs	r3, #0
 800b082:	73fb      	strb	r3, [r7, #15]
        break;
 800b084:	e00b      	b.n	800b09e <mpu_set_accel_fsr+0x82>
    case 4:
        data = INV_FSR_4G << 3;
 800b086:	2308      	movs	r3, #8
 800b088:	73fb      	strb	r3, [r7, #15]
        break;
 800b08a:	e008      	b.n	800b09e <mpu_set_accel_fsr+0x82>
    case 8:
        data = INV_FSR_8G << 3;
 800b08c:	2310      	movs	r3, #16
 800b08e:	73fb      	strb	r3, [r7, #15]
        break;
 800b090:	e005      	b.n	800b09e <mpu_set_accel_fsr+0x82>
    case 16:
        data = INV_FSR_16G << 3;
 800b092:	2318      	movs	r3, #24
 800b094:	73fb      	strb	r3, [r7, #15]
        break;
 800b096:	e002      	b.n	800b09e <mpu_set_accel_fsr+0x82>
    default:
        return -1;
 800b098:	f04f 33ff 	mov.w	r3, #4294967295
 800b09c:	e01f      	b.n	800b0de <mpu_set_accel_fsr+0xc2>
    }

    if (st.chip_cfg.accel_fsr == (data >> 3))
 800b09e:	4b12      	ldr	r3, [pc, #72]	; (800b0e8 <mpu_set_accel_fsr+0xcc>)
 800b0a0:	7a5a      	ldrb	r2, [r3, #9]
 800b0a2:	7bfb      	ldrb	r3, [r7, #15]
 800b0a4:	08db      	lsrs	r3, r3, #3
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d101      	bne.n	800b0b0 <mpu_set_accel_fsr+0x94>
        return 0;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	e016      	b.n	800b0de <mpu_set_accel_fsr+0xc2>
    if (i2c_write(st.hw->addr, st.reg->accel_cfg, 1, &data))
 800b0b0:	4b0d      	ldr	r3, [pc, #52]	; (800b0e8 <mpu_set_accel_fsr+0xcc>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	7818      	ldrb	r0, [r3, #0]
 800b0b6:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <mpu_set_accel_fsr+0xcc>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	79d9      	ldrb	r1, [r3, #7]
 800b0bc:	f107 030f 	add.w	r3, r7, #15
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f004 fe23 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <mpu_set_accel_fsr+0xb6>
        return -1;
 800b0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b0d0:	e005      	b.n	800b0de <mpu_set_accel_fsr+0xc2>
    st.chip_cfg.accel_fsr = data >> 3;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
 800b0d4:	08db      	lsrs	r3, r3, #3
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <mpu_set_accel_fsr+0xcc>)
 800b0da:	725a      	strb	r2, [r3, #9]
    return 0;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	2000000c 	.word	0x2000000c

0800b0ec <mpu_get_lpf>:
 *  @brief      Get the current DLPF setting.
 *  @param[out] lpf Current LPF setting.
 *  0 if successful.
 */
int mpu_get_lpf(unsigned short *lpf)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
    switch (st.chip_cfg.lpf)
 800b0f4:	4b1a      	ldr	r3, [pc, #104]	; (800b160 <mpu_get_lpf+0x74>)
 800b0f6:	7adb      	ldrb	r3, [r3, #11]
 800b0f8:	3b01      	subs	r3, #1
 800b0fa:	2b05      	cmp	r3, #5
 800b0fc:	d826      	bhi.n	800b14c <mpu_get_lpf+0x60>
 800b0fe:	a201      	add	r2, pc, #4	; (adr r2, 800b104 <mpu_get_lpf+0x18>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b11d 	.word	0x0800b11d
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	0800b12d 	.word	0x0800b12d
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b145 	.word	0x0800b145
    {
    case INV_FILTER_188HZ:
        lpf[0] = 188;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	22bc      	movs	r2, #188	; 0xbc
 800b120:	801a      	strh	r2, [r3, #0]
        break;
 800b122:	e017      	b.n	800b154 <mpu_get_lpf+0x68>
    case INV_FILTER_98HZ:
        lpf[0] = 98;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2262      	movs	r2, #98	; 0x62
 800b128:	801a      	strh	r2, [r3, #0]
        break;
 800b12a:	e013      	b.n	800b154 <mpu_get_lpf+0x68>
    case INV_FILTER_42HZ:
        lpf[0] = 42;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	222a      	movs	r2, #42	; 0x2a
 800b130:	801a      	strh	r2, [r3, #0]
        break;
 800b132:	e00f      	b.n	800b154 <mpu_get_lpf+0x68>
    case INV_FILTER_20HZ:
        lpf[0] = 20;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2214      	movs	r2, #20
 800b138:	801a      	strh	r2, [r3, #0]
        break;
 800b13a:	e00b      	b.n	800b154 <mpu_get_lpf+0x68>
    case INV_FILTER_10HZ:
        lpf[0] = 10;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	220a      	movs	r2, #10
 800b140:	801a      	strh	r2, [r3, #0]
        break;
 800b142:	e007      	b.n	800b154 <mpu_get_lpf+0x68>
    case INV_FILTER_5HZ:
        lpf[0] = 5;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2205      	movs	r2, #5
 800b148:	801a      	strh	r2, [r3, #0]
        break;
 800b14a:	e003      	b.n	800b154 <mpu_get_lpf+0x68>
    case INV_FILTER_256HZ_NOLPF2:
    case INV_FILTER_2100HZ_NOLPF:
    default:
        lpf[0] = 0;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	801a      	strh	r2, [r3, #0]
        break;
 800b152:	bf00      	nop
    }
    return 0;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr
 800b160:	2000000c 	.word	0x2000000c

0800b164 <mpu_set_lpf>:
 *  The following LPF settings are supported: 188, 98, 42, 20, 10, 5.
 *  @param[in]  lpf Desired LPF setting.
 *  @return     0 if successful.
 */
int mpu_set_lpf(unsigned short lpf)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	4603      	mov	r3, r0
 800b16c:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b16e:	4b23      	ldr	r3, [pc, #140]	; (800b1fc <mpu_set_lpf+0x98>)
 800b170:	7a9b      	ldrb	r3, [r3, #10]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d102      	bne.n	800b17c <mpu_set_lpf+0x18>
        return -1;
 800b176:	f04f 33ff 	mov.w	r3, #4294967295
 800b17a:	e03b      	b.n	800b1f4 <mpu_set_lpf+0x90>

    if (lpf >= 188)
 800b17c:	88fb      	ldrh	r3, [r7, #6]
 800b17e:	2bbb      	cmp	r3, #187	; 0xbb
 800b180:	d902      	bls.n	800b188 <mpu_set_lpf+0x24>
        data = INV_FILTER_188HZ;
 800b182:	2301      	movs	r3, #1
 800b184:	73fb      	strb	r3, [r7, #15]
 800b186:	e019      	b.n	800b1bc <mpu_set_lpf+0x58>
    else if (lpf >= 98)
 800b188:	88fb      	ldrh	r3, [r7, #6]
 800b18a:	2b61      	cmp	r3, #97	; 0x61
 800b18c:	d902      	bls.n	800b194 <mpu_set_lpf+0x30>
        data = INV_FILTER_98HZ;
 800b18e:	2302      	movs	r3, #2
 800b190:	73fb      	strb	r3, [r7, #15]
 800b192:	e013      	b.n	800b1bc <mpu_set_lpf+0x58>
    else if (lpf >= 42)
 800b194:	88fb      	ldrh	r3, [r7, #6]
 800b196:	2b29      	cmp	r3, #41	; 0x29
 800b198:	d902      	bls.n	800b1a0 <mpu_set_lpf+0x3c>
        data = INV_FILTER_42HZ;
 800b19a:	2303      	movs	r3, #3
 800b19c:	73fb      	strb	r3, [r7, #15]
 800b19e:	e00d      	b.n	800b1bc <mpu_set_lpf+0x58>
    else if (lpf >= 20)
 800b1a0:	88fb      	ldrh	r3, [r7, #6]
 800b1a2:	2b13      	cmp	r3, #19
 800b1a4:	d902      	bls.n	800b1ac <mpu_set_lpf+0x48>
        data = INV_FILTER_20HZ;
 800b1a6:	2304      	movs	r3, #4
 800b1a8:	73fb      	strb	r3, [r7, #15]
 800b1aa:	e007      	b.n	800b1bc <mpu_set_lpf+0x58>
    else if (lpf >= 10)
 800b1ac:	88fb      	ldrh	r3, [r7, #6]
 800b1ae:	2b09      	cmp	r3, #9
 800b1b0:	d902      	bls.n	800b1b8 <mpu_set_lpf+0x54>
        data = INV_FILTER_10HZ;
 800b1b2:	2305      	movs	r3, #5
 800b1b4:	73fb      	strb	r3, [r7, #15]
 800b1b6:	e001      	b.n	800b1bc <mpu_set_lpf+0x58>
    else
        data = INV_FILTER_5HZ;
 800b1b8:	2306      	movs	r3, #6
 800b1ba:	73fb      	strb	r3, [r7, #15]

    if (st.chip_cfg.lpf == data)
 800b1bc:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <mpu_set_lpf+0x98>)
 800b1be:	7ada      	ldrb	r2, [r3, #11]
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d101      	bne.n	800b1ca <mpu_set_lpf+0x66>
        return 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	e014      	b.n	800b1f4 <mpu_set_lpf+0x90>
    if (i2c_write(st.hw->addr, st.reg->lpf, 1, &data))
 800b1ca:	4b0c      	ldr	r3, [pc, #48]	; (800b1fc <mpu_set_lpf+0x98>)
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	7818      	ldrb	r0, [r3, #0]
 800b1d0:	4b0a      	ldr	r3, [pc, #40]	; (800b1fc <mpu_set_lpf+0x98>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	7899      	ldrb	r1, [r3, #2]
 800b1d6:	f107 030f 	add.w	r3, r7, #15
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f004 fd96 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d002      	beq.n	800b1ec <mpu_set_lpf+0x88>
        return -1;
 800b1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ea:	e003      	b.n	800b1f4 <mpu_set_lpf+0x90>
    st.chip_cfg.lpf = data;
 800b1ec:	7bfa      	ldrb	r2, [r7, #15]
 800b1ee:	4b03      	ldr	r3, [pc, #12]	; (800b1fc <mpu_set_lpf+0x98>)
 800b1f0:	72da      	strb	r2, [r3, #11]
    return 0;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	2000000c 	.word	0x2000000c

0800b200 <mpu_get_sample_rate>:
 *  @brief      Get sampling rate.
 *  @param[out] rate    Current sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_get_sample_rate(unsigned short *rate)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
    if (st.chip_cfg.dmp_on)
 800b208:	4b08      	ldr	r3, [pc, #32]	; (800b22c <mpu_get_sample_rate+0x2c>)
 800b20a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <mpu_get_sample_rate+0x18>
        return -1;
 800b212:	f04f 33ff 	mov.w	r3, #4294967295
 800b216:	e004      	b.n	800b222 <mpu_get_sample_rate+0x22>
    else
        rate[0] = st.chip_cfg.sample_rate;
 800b218:	4b04      	ldr	r3, [pc, #16]	; (800b22c <mpu_get_sample_rate+0x2c>)
 800b21a:	89da      	ldrh	r2, [r3, #14]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	801a      	strh	r2, [r3, #0]
    return 0;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	bc80      	pop	{r7}
 800b22a:	4770      	bx	lr
 800b22c:	2000000c 	.word	0x2000000c

0800b230 <mpu_set_sample_rate>:
 *  Sampling rate must be between 4Hz and 1kHz.
 *  @param[in]  rate    Desired sampling rate (Hz).
 *  @return     0 if successful.
 */
int mpu_set_sample_rate(unsigned short rate)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	4603      	mov	r3, r0
 800b238:	80fb      	strh	r3, [r7, #6]
    unsigned char data;

    if (!(st.chip_cfg.sensors))
 800b23a:	4b2f      	ldr	r3, [pc, #188]	; (800b2f8 <mpu_set_sample_rate+0xc8>)
 800b23c:	7a9b      	ldrb	r3, [r3, #10]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d102      	bne.n	800b248 <mpu_set_sample_rate+0x18>
        return -1;
 800b242:	f04f 33ff 	mov.w	r3, #4294967295
 800b246:	e052      	b.n	800b2ee <mpu_set_sample_rate+0xbe>

    if (st.chip_cfg.dmp_on)
 800b248:	4b2b      	ldr	r3, [pc, #172]	; (800b2f8 <mpu_set_sample_rate+0xc8>)
 800b24a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d002      	beq.n	800b258 <mpu_set_sample_rate+0x28>
        return -1;
 800b252:	f04f 33ff 	mov.w	r3, #4294967295
 800b256:	e04a      	b.n	800b2ee <mpu_set_sample_rate+0xbe>
    else
    {
        if (st.chip_cfg.lp_accel_mode)
 800b258:	4b27      	ldr	r3, [pc, #156]	; (800b2f8 <mpu_set_sample_rate+0xc8>)
 800b25a:	7d1b      	ldrb	r3, [r3, #20]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00e      	beq.n	800b27e <mpu_set_sample_rate+0x4e>
        {
            if (rate && (rate <= 40))
 800b260:	88fb      	ldrh	r3, [r7, #6]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d008      	beq.n	800b278 <mpu_set_sample_rate+0x48>
 800b266:	88fb      	ldrh	r3, [r7, #6]
 800b268:	2b28      	cmp	r3, #40	; 0x28
 800b26a:	d805      	bhi.n	800b278 <mpu_set_sample_rate+0x48>
            {
                /* Just stay in low-power accel mode. */
                mpu_lp_accel_mode(rate);
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff fc2e 	bl	800aad0 <mpu_lp_accel_mode>
                return 0;
 800b274:	2300      	movs	r3, #0
 800b276:	e03a      	b.n	800b2ee <mpu_set_sample_rate+0xbe>
            }
            /* Requested rate exceeds the allowed frequencies in LP accel mode,
             * switch back to full-power mode.
             */
            mpu_lp_accel_mode(0);
 800b278:	2000      	movs	r0, #0
 800b27a:	f7ff fc29 	bl	800aad0 <mpu_lp_accel_mode>
        }
        if (rate < 4)
 800b27e:	88fb      	ldrh	r3, [r7, #6]
 800b280:	2b03      	cmp	r3, #3
 800b282:	d802      	bhi.n	800b28a <mpu_set_sample_rate+0x5a>
            rate = 4;
 800b284:	2304      	movs	r3, #4
 800b286:	80fb      	strh	r3, [r7, #6]
 800b288:	e006      	b.n	800b298 <mpu_set_sample_rate+0x68>
        else if (rate > 1000)
 800b28a:	88fb      	ldrh	r3, [r7, #6]
 800b28c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b290:	d902      	bls.n	800b298 <mpu_set_sample_rate+0x68>
            rate = 1000;
 800b292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b296:	80fb      	strh	r3, [r7, #6]

        data = 1000 / rate - 1;
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b29e:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->rate_div, 1, &data))
 800b2aa:	4b13      	ldr	r3, [pc, #76]	; (800b2f8 <mpu_set_sample_rate+0xc8>)
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	7818      	ldrb	r0, [r3, #0]
 800b2b0:	4b11      	ldr	r3, [pc, #68]	; (800b2f8 <mpu_set_sample_rate+0xc8>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	7859      	ldrb	r1, [r3, #1]
 800b2b6:	f107 030f 	add.w	r3, r7, #15
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f004 fd26 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d002      	beq.n	800b2cc <mpu_set_sample_rate+0x9c>
            return -1;
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ca:	e010      	b.n	800b2ee <mpu_set_sample_rate+0xbe>

        st.chip_cfg.sample_rate = 1000 / (1 + data);
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b2d4:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	4b07      	ldr	r3, [pc, #28]	; (800b2f8 <mpu_set_sample_rate+0xc8>)
 800b2dc:	81da      	strh	r2, [r3, #14]
#ifdef AK89xx_SECONDARY
        mpu_set_compass_sample_rate(min(st.chip_cfg.compass_sample_rate, MAX_COMPASS_SAMPLE_RATE));
#endif

        /* Automatically set LPF to 1/2 sampling rate. */
        mpu_set_lpf(st.chip_cfg.sample_rate >> 1);
 800b2de:	4b06      	ldr	r3, [pc, #24]	; (800b2f8 <mpu_set_sample_rate+0xc8>)
 800b2e0:	89db      	ldrh	r3, [r3, #14]
 800b2e2:	085b      	lsrs	r3, r3, #1
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7ff ff3c 	bl	800b164 <mpu_set_lpf>
        return 0;
 800b2ec:	2300      	movs	r3, #0
    }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3710      	adds	r7, #16
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	2000000c 	.word	0x2000000c

0800b2fc <mpu_get_fifo_config>:
 *  \n INV_XYZ_ACCEL
 *  @param[out] sensors Mask of sensors in FIFO.
 *  @return     0 if successful.
 */
int mpu_get_fifo_config(unsigned char *sensors)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
    sensors[0] = st.chip_cfg.fifo_enable;
 800b304:	4b04      	ldr	r3, [pc, #16]	; (800b318 <mpu_get_fifo_config+0x1c>)
 800b306:	7c1a      	ldrb	r2, [r3, #16]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	701a      	strb	r2, [r3, #0]
    return 0;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	bc80      	pop	{r7}
 800b316:	4770      	bx	lr
 800b318:	2000000c 	.word	0x2000000c

0800b31c <mpu_configure_fifo>:
 *  \n INV_XYZ_ACCEL
 *  @param[in]  sensors Mask of sensors to push to FIFO.
 *  @return     0 if successful.
 */
int mpu_configure_fifo(unsigned char sensors)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	4603      	mov	r3, r0
 800b324:	71fb      	strb	r3, [r7, #7]
    unsigned char prev;
    int result = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	60fb      	str	r3, [r7, #12]

    /* Compass data isn't going into the FIFO. Stop trying. */
    sensors &= ~INV_XYZ_COMPASS;
 800b32a:	79fb      	ldrb	r3, [r7, #7]
 800b32c:	f023 0301 	bic.w	r3, r3, #1
 800b330:	71fb      	strb	r3, [r7, #7]

    if (st.chip_cfg.dmp_on)
 800b332:	4b22      	ldr	r3, [pc, #136]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d001      	beq.n	800b340 <mpu_configure_fifo+0x24>
        return 0;
 800b33c:	2300      	movs	r3, #0
 800b33e:	e038      	b.n	800b3b2 <mpu_configure_fifo+0x96>
    else
    {
        if (!(st.chip_cfg.sensors))
 800b340:	4b1e      	ldr	r3, [pc, #120]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b342:	7a9b      	ldrb	r3, [r3, #10]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d102      	bne.n	800b34e <mpu_configure_fifo+0x32>
            return -1;
 800b348:	f04f 33ff 	mov.w	r3, #4294967295
 800b34c:	e031      	b.n	800b3b2 <mpu_configure_fifo+0x96>
        prev = st.chip_cfg.fifo_enable;
 800b34e:	4b1b      	ldr	r3, [pc, #108]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b350:	7c1b      	ldrb	r3, [r3, #16]
 800b352:	72fb      	strb	r3, [r7, #11]
        st.chip_cfg.fifo_enable = sensors & st.chip_cfg.sensors;
 800b354:	4b19      	ldr	r3, [pc, #100]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b356:	7a9a      	ldrb	r2, [r3, #10]
 800b358:	79fb      	ldrb	r3, [r7, #7]
 800b35a:	4013      	ands	r3, r2
 800b35c:	b2da      	uxtb	r2, r3
 800b35e:	4b17      	ldr	r3, [pc, #92]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b360:	741a      	strb	r2, [r3, #16]
        if (st.chip_cfg.fifo_enable != sensors)
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b364:	7c1b      	ldrb	r3, [r3, #16]
 800b366:	79fa      	ldrb	r2, [r7, #7]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d003      	beq.n	800b374 <mpu_configure_fifo+0x58>
            /* You're not getting what you asked for. Some sensors are
             * asleep.
             */
            result = -1;
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295
 800b370:	60fb      	str	r3, [r7, #12]
 800b372:	e001      	b.n	800b378 <mpu_configure_fifo+0x5c>
        else
            result = 0;
 800b374:	2300      	movs	r3, #0
 800b376:	60fb      	str	r3, [r7, #12]
        if (sensors || st.chip_cfg.lp_accel_mode)
 800b378:	79fb      	ldrb	r3, [r7, #7]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d103      	bne.n	800b386 <mpu_configure_fifo+0x6a>
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b380:	7d1b      	ldrb	r3, [r3, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <mpu_configure_fifo+0x72>
            set_int_enable(1);
 800b386:	2001      	movs	r0, #1
 800b388:	f7ff fa9e 	bl	800a8c8 <set_int_enable>
 800b38c:	e002      	b.n	800b394 <mpu_configure_fifo+0x78>
        else
            set_int_enable(0);
 800b38e:	2000      	movs	r0, #0
 800b390:	f7ff fa9a 	bl	800a8c8 <set_int_enable>
        if (sensors)
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <mpu_configure_fifo+0x94>
        {
            if (mpu_reset_fifo())
 800b39a:	f7ff fc79 	bl	800ac90 <mpu_reset_fifo>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d005      	beq.n	800b3b0 <mpu_configure_fifo+0x94>
            {
                st.chip_cfg.fifo_enable = prev;
 800b3a4:	4a05      	ldr	r2, [pc, #20]	; (800b3bc <mpu_configure_fifo+0xa0>)
 800b3a6:	7afb      	ldrb	r3, [r7, #11]
 800b3a8:	7413      	strb	r3, [r2, #16]
                return -1;
 800b3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b3ae:	e000      	b.n	800b3b2 <mpu_configure_fifo+0x96>
            }
        }
    }

    return result;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	2000000c 	.word	0x2000000c

0800b3c0 <mpu_set_sensors>:
 *  \n INV_XYZ_COMPASS
 *  @param[in]  sensors    Mask of sensors to wake.
 *  @return     0 if successful.
 */
int mpu_set_sensors(unsigned char sensors)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b084      	sub	sp, #16
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	71fb      	strb	r3, [r7, #7]
    unsigned char data;
#ifdef AK89xx_SECONDARY
    unsigned char user_ctrl;
#endif

    if (sensors & INV_XYZ_GYRO)
 800b3ca:	79fb      	ldrb	r3, [r7, #7]
 800b3cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <mpu_set_sensors+0x1a>
        data = INV_CLK_PLL;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	73fb      	strb	r3, [r7, #15]
 800b3d8:	e007      	b.n	800b3ea <mpu_set_sensors+0x2a>
    else if (sensors)
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <mpu_set_sensors+0x26>
        data = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	73fb      	strb	r3, [r7, #15]
 800b3e4:	e001      	b.n	800b3ea <mpu_set_sensors+0x2a>
    else
        data = BIT_SLEEP;
 800b3e6:	2340      	movs	r3, #64	; 0x40
 800b3e8:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_1, 1, &data))
 800b3ea:	4b37      	ldr	r3, [pc, #220]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	7818      	ldrb	r0, [r3, #0]
 800b3f0:	4b35      	ldr	r3, [pc, #212]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	7d59      	ldrb	r1, [r3, #21]
 800b3f6:	f107 030f 	add.w	r3, r7, #15
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f004 fc86 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d005      	beq.n	800b412 <mpu_set_sensors+0x52>
    {
        st.chip_cfg.sensors = 0;
 800b406:	4b30      	ldr	r3, [pc, #192]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b408:	2200      	movs	r2, #0
 800b40a:	729a      	strb	r2, [r3, #10]
        return -1;
 800b40c:	f04f 33ff 	mov.w	r3, #4294967295
 800b410:	e056      	b.n	800b4c0 <mpu_set_sensors+0x100>
    }
    st.chip_cfg.clk_src = data & ~BIT_SLEEP;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
 800b414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	4b2b      	ldr	r3, [pc, #172]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b41c:	731a      	strb	r2, [r3, #12]

    data = 0;
 800b41e:	2300      	movs	r3, #0
 800b420:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_X_GYRO))
 800b422:	79fb      	ldrb	r3, [r7, #7]
 800b424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d104      	bne.n	800b436 <mpu_set_sensors+0x76>
        data |= BIT_STBY_XG;
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	f043 0304 	orr.w	r3, r3, #4
 800b432:	b2db      	uxtb	r3, r3
 800b434:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Y_GYRO))
 800b436:	79fb      	ldrb	r3, [r7, #7]
 800b438:	f003 0320 	and.w	r3, r3, #32
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d104      	bne.n	800b44a <mpu_set_sensors+0x8a>
        data |= BIT_STBY_YG;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
 800b442:	f043 0302 	orr.w	r3, r3, #2
 800b446:	b2db      	uxtb	r3, r3
 800b448:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_Z_GYRO))
 800b44a:	79fb      	ldrb	r3, [r7, #7]
 800b44c:	f003 0310 	and.w	r3, r3, #16
 800b450:	2b00      	cmp	r3, #0
 800b452:	d104      	bne.n	800b45e <mpu_set_sensors+0x9e>
        data |= BIT_STBY_ZG;
 800b454:	7bfb      	ldrb	r3, [r7, #15]
 800b456:	f043 0301 	orr.w	r3, r3, #1
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	73fb      	strb	r3, [r7, #15]
    if (!(sensors & INV_XYZ_ACCEL))
 800b45e:	79fb      	ldrb	r3, [r7, #7]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d104      	bne.n	800b472 <mpu_set_sensors+0xb2>
        data |= BIT_STBY_XYZA;
 800b468:	7bfb      	ldrb	r3, [r7, #15]
 800b46a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->pwr_mgmt_2, 1, &data))
 800b472:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	7818      	ldrb	r0, [r3, #0]
 800b478:	4b13      	ldr	r3, [pc, #76]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	7d99      	ldrb	r1, [r3, #22]
 800b47e:	f107 030f 	add.w	r3, r7, #15
 800b482:	2201      	movs	r2, #1
 800b484:	f004 fc42 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <mpu_set_sensors+0xda>
    {
        st.chip_cfg.sensors = 0;
 800b48e:	4b0e      	ldr	r3, [pc, #56]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b490:	2200      	movs	r2, #0
 800b492:	729a      	strb	r2, [r3, #10]
        return -1;
 800b494:	f04f 33ff 	mov.w	r3, #4294967295
 800b498:	e012      	b.n	800b4c0 <mpu_set_sensors+0x100>
    }

    if (sensors && (sensors != INV_XYZ_ACCEL))
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <mpu_set_sensors+0xec>
 800b4a0:	79fb      	ldrb	r3, [r7, #7]
 800b4a2:	2b08      	cmp	r3, #8
 800b4a4:	d002      	beq.n	800b4ac <mpu_set_sensors+0xec>
        /* Latched interrupts only used in LP accel mode. */
        mpu_set_int_latched(0);
 800b4a6:	2000      	movs	r0, #0
 800b4a8:	f000 f954 	bl	800b754 <mpu_set_int_latched>
    if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &user_ctrl))
        return -1;
#endif
#endif

    st.chip_cfg.sensors = sensors;
 800b4ac:	4a06      	ldr	r2, [pc, #24]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	7293      	strb	r3, [r2, #10]
    st.chip_cfg.lp_accel_mode = 0;
 800b4b2:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <mpu_set_sensors+0x108>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	751a      	strb	r2, [r3, #20]
    delay_ms(50);
 800b4b8:	2032      	movs	r0, #50	; 0x32
 800b4ba:	f7fa f803 	bl	80054c4 <HAL_Delay>
    return 0;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	2000000c 	.word	0x2000000c

0800b4cc <mpu_read_fifo_stream>:
 *  @param[in]  length  Length of one FIFO packet.
 *  @param[in]  data    FIFO packet.
 *  @param[in]  more    Number of remaining packets.
 */
int mpu_read_fifo_stream(unsigned short length, unsigned char *data, unsigned char *more)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	81fb      	strh	r3, [r7, #14]
    unsigned char tmp[2];
    unsigned short fifo_count;
    if (!st.chip_cfg.dmp_on)
 800b4da:	4b3a      	ldr	r3, [pc, #232]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b4dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <mpu_read_fifo_stream+0x1e>
        return -1;
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4e8:	e067      	b.n	800b5ba <mpu_read_fifo_stream+0xee>
    if (!st.chip_cfg.sensors)
 800b4ea:	4b36      	ldr	r3, [pc, #216]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b4ec:	7a9b      	ldrb	r3, [r3, #10]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d102      	bne.n	800b4f8 <mpu_read_fifo_stream+0x2c>
        return -1;
 800b4f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4f6:	e060      	b.n	800b5ba <mpu_read_fifo_stream+0xee>

    if (i2c_read(st.hw->addr, st.reg->fifo_count_h, 2, tmp))
 800b4f8:	4b32      	ldr	r3, [pc, #200]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	7818      	ldrb	r0, [r3, #0]
 800b4fe:	4b31      	ldr	r3, [pc, #196]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	7b19      	ldrb	r1, [r3, #12]
 800b504:	f107 0314 	add.w	r3, r7, #20
 800b508:	2202      	movs	r2, #2
 800b50a:	f004 fbb5 	bl	800fc78 <Sensors_I2C_ReadRegister>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <mpu_read_fifo_stream+0x4e>
        return -1;
 800b514:	f04f 33ff 	mov.w	r3, #4294967295
 800b518:	e04f      	b.n	800b5ba <mpu_read_fifo_stream+0xee>
    fifo_count = (tmp[0] << 8) | tmp[1];
 800b51a:	7d3b      	ldrb	r3, [r7, #20]
 800b51c:	021b      	lsls	r3, r3, #8
 800b51e:	b21a      	sxth	r2, r3
 800b520:	7d7b      	ldrb	r3, [r7, #21]
 800b522:	b21b      	sxth	r3, r3
 800b524:	4313      	orrs	r3, r2
 800b526:	b21b      	sxth	r3, r3
 800b528:	82fb      	strh	r3, [r7, #22]
    if (fifo_count < length)
 800b52a:	8afa      	ldrh	r2, [r7, #22]
 800b52c:	89fb      	ldrh	r3, [r7, #14]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d205      	bcs.n	800b53e <mpu_read_fifo_stream+0x72>
    {
        more[0] = 0;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	701a      	strb	r2, [r3, #0]
        return -1;
 800b538:	f04f 33ff 	mov.w	r3, #4294967295
 800b53c:	e03d      	b.n	800b5ba <mpu_read_fifo_stream+0xee>
    }
    if (fifo_count > (st.hw->max_fifo >> 1))
 800b53e:	4b21      	ldr	r3, [pc, #132]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	885b      	ldrh	r3, [r3, #2]
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	b29b      	uxth	r3, r3
 800b548:	8afa      	ldrh	r2, [r7, #22]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d91a      	bls.n	800b584 <mpu_read_fifo_stream+0xb8>
    {
        /* FIFO is 50% full, better check overflow bit. */
        if (i2c_read(st.hw->addr, st.reg->int_status, 1, tmp))
 800b54e:	4b1d      	ldr	r3, [pc, #116]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	7818      	ldrb	r0, [r3, #0]
 800b554:	4b1b      	ldr	r3, [pc, #108]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	7cd9      	ldrb	r1, [r3, #19]
 800b55a:	f107 0314 	add.w	r3, r7, #20
 800b55e:	2201      	movs	r2, #1
 800b560:	f004 fb8a 	bl	800fc78 <Sensors_I2C_ReadRegister>
 800b564:	4603      	mov	r3, r0
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <mpu_read_fifo_stream+0xa4>
            return -1;
 800b56a:	f04f 33ff 	mov.w	r3, #4294967295
 800b56e:	e024      	b.n	800b5ba <mpu_read_fifo_stream+0xee>
        if (tmp[0] & BIT_FIFO_OVERFLOW)
 800b570:	7d3b      	ldrb	r3, [r7, #20]
 800b572:	f003 0310 	and.w	r3, r3, #16
 800b576:	2b00      	cmp	r3, #0
 800b578:	d004      	beq.n	800b584 <mpu_read_fifo_stream+0xb8>
        {
            mpu_reset_fifo();
 800b57a:	f7ff fb89 	bl	800ac90 <mpu_reset_fifo>
            return -2;
 800b57e:	f06f 0301 	mvn.w	r3, #1
 800b582:	e01a      	b.n	800b5ba <mpu_read_fifo_stream+0xee>
        }
    }

    if (i2c_read(st.hw->addr, st.reg->fifo_r_w, length, data))
 800b584:	4b0f      	ldr	r3, [pc, #60]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	7818      	ldrb	r0, [r3, #0]
 800b58a:	4b0e      	ldr	r3, [pc, #56]	; (800b5c4 <mpu_read_fifo_stream+0xf8>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	7b59      	ldrb	r1, [r3, #13]
 800b590:	89fa      	ldrh	r2, [r7, #14]
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f004 fb70 	bl	800fc78 <Sensors_I2C_ReadRegister>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d002      	beq.n	800b5a4 <mpu_read_fifo_stream+0xd8>
        return -1;
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	e00a      	b.n	800b5ba <mpu_read_fifo_stream+0xee>
    more[0] = fifo_count / length - 1;
 800b5a4:	8afa      	ldrh	r2, [r7, #22]
 800b5a6:	89fb      	ldrh	r3, [r7, #14]
 800b5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	b2db      	uxtb	r3, r3
 800b5b0:	3b01      	subs	r3, #1
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	701a      	strb	r2, [r3, #0]
    return 0;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	2000000c 	.word	0x2000000c

0800b5c8 <mpu_set_bypass>:
 *  @brief      Set device to bypass mode.
 *  @param[in]  bypass_on   1 to enable bypass mode.
 *  @return     0 if successful.
 */
int mpu_set_bypass(unsigned char bypass_on)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (st.chip_cfg.bypass_mode == bypass_on)
 800b5d2:	4b5f      	ldr	r3, [pc, #380]	; (800b750 <mpu_set_bypass+0x188>)
 800b5d4:	7c9b      	ldrb	r3, [r3, #18]
 800b5d6:	79fa      	ldrb	r2, [r7, #7]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d101      	bne.n	800b5e0 <mpu_set_bypass+0x18>
        return 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e0b2      	b.n	800b746 <mpu_set_bypass+0x17e>

    if (bypass_on)
 800b5e0:	79fb      	ldrb	r3, [r7, #7]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d050      	beq.n	800b688 <mpu_set_bypass+0xc0>
    {
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800b5e6:	4b5a      	ldr	r3, [pc, #360]	; (800b750 <mpu_set_bypass+0x188>)
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	7818      	ldrb	r0, [r3, #0]
 800b5ec:	4b58      	ldr	r3, [pc, #352]	; (800b750 <mpu_set_bypass+0x188>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	7919      	ldrb	r1, [r3, #4]
 800b5f2:	f107 030f 	add.w	r3, r7, #15
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f004 fb3e 	bl	800fc78 <Sensors_I2C_ReadRegister>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <mpu_set_bypass+0x40>
            return -1;
 800b602:	f04f 33ff 	mov.w	r3, #4294967295
 800b606:	e09e      	b.n	800b746 <mpu_set_bypass+0x17e>
        tmp &= ~BIT_AUX_IF_EN;
 800b608:	7bfb      	ldrb	r3, [r7, #15]
 800b60a:	f023 0320 	bic.w	r3, r3, #32
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800b612:	4b4f      	ldr	r3, [pc, #316]	; (800b750 <mpu_set_bypass+0x188>)
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	7818      	ldrb	r0, [r3, #0]
 800b618:	4b4d      	ldr	r3, [pc, #308]	; (800b750 <mpu_set_bypass+0x188>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	7919      	ldrb	r1, [r3, #4]
 800b61e:	f107 030f 	add.w	r3, r7, #15
 800b622:	2201      	movs	r2, #1
 800b624:	f004 fb72 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <mpu_set_bypass+0x6c>
            return -1;
 800b62e:	f04f 33ff 	mov.w	r3, #4294967295
 800b632:	e088      	b.n	800b746 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800b634:	2003      	movs	r0, #3
 800b636:	f7f9 ff45 	bl	80054c4 <HAL_Delay>
        tmp = BIT_BYPASS_EN;
 800b63a:	2302      	movs	r3, #2
 800b63c:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.active_low_int)
 800b63e:	4b44      	ldr	r3, [pc, #272]	; (800b750 <mpu_set_bypass+0x188>)
 800b640:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b644:	2b00      	cmp	r3, #0
 800b646:	d004      	beq.n	800b652 <mpu_set_bypass+0x8a>
            tmp |= BIT_ACTL;
 800b648:	7bfb      	ldrb	r3, [r7, #15]
 800b64a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800b652:	4b3f      	ldr	r3, [pc, #252]	; (800b750 <mpu_set_bypass+0x188>)
 800b654:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d004      	beq.n	800b666 <mpu_set_bypass+0x9e>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800b662:	b2db      	uxtb	r3, r3
 800b664:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800b666:	4b3a      	ldr	r3, [pc, #232]	; (800b750 <mpu_set_bypass+0x188>)
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	7818      	ldrb	r0, [r3, #0]
 800b66c:	4b38      	ldr	r3, [pc, #224]	; (800b750 <mpu_set_bypass+0x188>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	7dd9      	ldrb	r1, [r3, #23]
 800b672:	f107 030f 	add.w	r3, r7, #15
 800b676:	2201      	movs	r2, #1
 800b678:	f004 fb48 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d05d      	beq.n	800b73e <mpu_set_bypass+0x176>
            return -1;
 800b682:	f04f 33ff 	mov.w	r3, #4294967295
 800b686:	e05e      	b.n	800b746 <mpu_set_bypass+0x17e>
    }
    else
    {
        /* Enable I2C master mode if compass is being used. */
        if (i2c_read(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800b688:	4b31      	ldr	r3, [pc, #196]	; (800b750 <mpu_set_bypass+0x188>)
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	7818      	ldrb	r0, [r3, #0]
 800b68e:	4b30      	ldr	r3, [pc, #192]	; (800b750 <mpu_set_bypass+0x188>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	7919      	ldrb	r1, [r3, #4]
 800b694:	f107 030f 	add.w	r3, r7, #15
 800b698:	2201      	movs	r2, #1
 800b69a:	f004 faed 	bl	800fc78 <Sensors_I2C_ReadRegister>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <mpu_set_bypass+0xe2>
            return -1;
 800b6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a8:	e04d      	b.n	800b746 <mpu_set_bypass+0x17e>
        if (st.chip_cfg.sensors & INV_XYZ_COMPASS)
 800b6aa:	4b29      	ldr	r3, [pc, #164]	; (800b750 <mpu_set_bypass+0x188>)
 800b6ac:	7a9b      	ldrb	r3, [r3, #10]
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d005      	beq.n	800b6c2 <mpu_set_bypass+0xfa>
            tmp |= BIT_AUX_IF_EN;
 800b6b6:	7bfb      	ldrb	r3, [r7, #15]
 800b6b8:	f043 0320 	orr.w	r3, r3, #32
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	73fb      	strb	r3, [r7, #15]
 800b6c0:	e004      	b.n	800b6cc <mpu_set_bypass+0x104>
        else
            tmp &= ~BIT_AUX_IF_EN;
 800b6c2:	7bfb      	ldrb	r3, [r7, #15]
 800b6c4:	f023 0320 	bic.w	r3, r3, #32
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->user_ctrl, 1, &tmp))
 800b6cc:	4b20      	ldr	r3, [pc, #128]	; (800b750 <mpu_set_bypass+0x188>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	7818      	ldrb	r0, [r3, #0]
 800b6d2:	4b1f      	ldr	r3, [pc, #124]	; (800b750 <mpu_set_bypass+0x188>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	7919      	ldrb	r1, [r3, #4]
 800b6d8:	f107 030f 	add.w	r3, r7, #15
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f004 fb15 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d002      	beq.n	800b6ee <mpu_set_bypass+0x126>
            return -1;
 800b6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ec:	e02b      	b.n	800b746 <mpu_set_bypass+0x17e>
        delay_ms(3);
 800b6ee:	2003      	movs	r0, #3
 800b6f0:	f7f9 fee8 	bl	80054c4 <HAL_Delay>
        if (st.chip_cfg.active_low_int)
 800b6f4:	4b16      	ldr	r3, [pc, #88]	; (800b750 <mpu_set_bypass+0x188>)
 800b6f6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <mpu_set_bypass+0x13c>
            tmp = BIT_ACTL;
 800b6fe:	2380      	movs	r3, #128	; 0x80
 800b700:	73fb      	strb	r3, [r7, #15]
 800b702:	e001      	b.n	800b708 <mpu_set_bypass+0x140>
        else
            tmp = 0;
 800b704:	2300      	movs	r3, #0
 800b706:	73fb      	strb	r3, [r7, #15]
        if (st.chip_cfg.latched_int)
 800b708:	4b11      	ldr	r3, [pc, #68]	; (800b750 <mpu_set_bypass+0x188>)
 800b70a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d004      	beq.n	800b71c <mpu_set_bypass+0x154>
            tmp |= BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	73fb      	strb	r3, [r7, #15]
        if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800b71c:	4b0c      	ldr	r3, [pc, #48]	; (800b750 <mpu_set_bypass+0x188>)
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	7818      	ldrb	r0, [r3, #0]
 800b722:	4b0b      	ldr	r3, [pc, #44]	; (800b750 <mpu_set_bypass+0x188>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	7dd9      	ldrb	r1, [r3, #23]
 800b728:	f107 030f 	add.w	r3, r7, #15
 800b72c:	2201      	movs	r2, #1
 800b72e:	f004 faed 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <mpu_set_bypass+0x176>
            return -1;
 800b738:	f04f 33ff 	mov.w	r3, #4294967295
 800b73c:	e003      	b.n	800b746 <mpu_set_bypass+0x17e>
    }
    st.chip_cfg.bypass_mode = bypass_on;
 800b73e:	4a04      	ldr	r2, [pc, #16]	; (800b750 <mpu_set_bypass+0x188>)
 800b740:	79fb      	ldrb	r3, [r7, #7]
 800b742:	7493      	strb	r3, [r2, #18]
    return 0;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	2000000c 	.word	0x2000000c

0800b754 <mpu_set_int_latched>:
 *  Any MPU register will clear the interrupt.
 *  @param[in]  enable  1 to enable, 0 to disable.
 *  @return     0 if successful.
 */
int mpu_set_int_latched(unsigned char enable)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.latched_int == enable)
 800b75e:	4b1e      	ldr	r3, [pc, #120]	; (800b7d8 <mpu_set_int_latched+0x84>)
 800b760:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b764:	79fa      	ldrb	r2, [r7, #7]
 800b766:	429a      	cmp	r2, r3
 800b768:	d101      	bne.n	800b76e <mpu_set_int_latched+0x1a>
        return 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	e030      	b.n	800b7d0 <mpu_set_int_latched+0x7c>

    if (enable)
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d002      	beq.n	800b77a <mpu_set_int_latched+0x26>
        tmp = BIT_LATCH_EN | BIT_ANY_RD_CLR;
 800b774:	2330      	movs	r3, #48	; 0x30
 800b776:	73fb      	strb	r3, [r7, #15]
 800b778:	e001      	b.n	800b77e <mpu_set_int_latched+0x2a>
    else
        tmp = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.bypass_mode)
 800b77e:	4b16      	ldr	r3, [pc, #88]	; (800b7d8 <mpu_set_int_latched+0x84>)
 800b780:	7c9b      	ldrb	r3, [r3, #18]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d004      	beq.n	800b790 <mpu_set_int_latched+0x3c>
        tmp |= BIT_BYPASS_EN;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
 800b788:	f043 0302 	orr.w	r3, r3, #2
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	73fb      	strb	r3, [r7, #15]
    if (st.chip_cfg.active_low_int)
 800b790:	4b11      	ldr	r3, [pc, #68]	; (800b7d8 <mpu_set_int_latched+0x84>)
 800b792:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b796:	2b00      	cmp	r3, #0
 800b798:	d004      	beq.n	800b7a4 <mpu_set_int_latched+0x50>
        tmp |= BIT_ACTL;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	73fb      	strb	r3, [r7, #15]
    if (i2c_write(st.hw->addr, st.reg->int_pin_cfg, 1, &tmp))
 800b7a4:	4b0c      	ldr	r3, [pc, #48]	; (800b7d8 <mpu_set_int_latched+0x84>)
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	7818      	ldrb	r0, [r3, #0]
 800b7aa:	4b0b      	ldr	r3, [pc, #44]	; (800b7d8 <mpu_set_int_latched+0x84>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	7dd9      	ldrb	r1, [r3, #23]
 800b7b0:	f107 030f 	add.w	r3, r7, #15
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f004 faa9 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <mpu_set_int_latched+0x72>
        return -1;
 800b7c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7c4:	e004      	b.n	800b7d0 <mpu_set_int_latched+0x7c>
    st.chip_cfg.latched_int = enable;
 800b7c6:	4a04      	ldr	r2, [pc, #16]	; (800b7d8 <mpu_set_int_latched+0x84>)
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
    return 0;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	2000000c 	.word	0x2000000c

0800b7dc <mpu_write_mem>:
 *  @param[in]  length      Number of bytes to write.
 *  @param[in]  data        Bytes to write to memory.
 *  @return     0 if successful.
 */
int mpu_write_mem(unsigned short mem_addr, unsigned short length, unsigned char *data)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	603a      	str	r2, [r7, #0]
 800b7e6:	80fb      	strh	r3, [r7, #6]
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d102      	bne.n	800b7f8 <mpu_write_mem+0x1c>
        return -1;
 800b7f2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f6:	e03c      	b.n	800b872 <mpu_write_mem+0x96>
    if (!st.chip_cfg.sensors)
 800b7f8:	4b20      	ldr	r3, [pc, #128]	; (800b87c <mpu_write_mem+0xa0>)
 800b7fa:	7a9b      	ldrb	r3, [r3, #10]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d102      	bne.n	800b806 <mpu_write_mem+0x2a>
        return -1;
 800b800:	f04f 33ff 	mov.w	r3, #4294967295
 800b804:	e035      	b.n	800b872 <mpu_write_mem+0x96>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800b806:	88fb      	ldrh	r3, [r7, #6]
 800b808:	0a1b      	lsrs	r3, r3, #8
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800b810:	88fb      	ldrh	r3, [r7, #6]
 800b812:	b2db      	uxtb	r3, r3
 800b814:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800b816:	7b7b      	ldrb	r3, [r7, #13]
 800b818:	461a      	mov	r2, r3
 800b81a:	88bb      	ldrh	r3, [r7, #4]
 800b81c:	4413      	add	r3, r2
 800b81e:	4a17      	ldr	r2, [pc, #92]	; (800b87c <mpu_write_mem+0xa0>)
 800b820:	6852      	ldr	r2, [r2, #4]
 800b822:	8952      	ldrh	r2, [r2, #10]
 800b824:	4293      	cmp	r3, r2
 800b826:	dd02      	ble.n	800b82e <mpu_write_mem+0x52>
        return -1;
 800b828:	f04f 33ff 	mov.w	r3, #4294967295
 800b82c:	e021      	b.n	800b872 <mpu_write_mem+0x96>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800b82e:	4b13      	ldr	r3, [pc, #76]	; (800b87c <mpu_write_mem+0xa0>)
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	7818      	ldrb	r0, [r3, #0]
 800b834:	4b11      	ldr	r3, [pc, #68]	; (800b87c <mpu_write_mem+0xa0>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	7ed9      	ldrb	r1, [r3, #27]
 800b83a:	f107 030c 	add.w	r3, r7, #12
 800b83e:	2202      	movs	r2, #2
 800b840:	f004 fa64 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d002      	beq.n	800b850 <mpu_write_mem+0x74>
        return -1;
 800b84a:	f04f 33ff 	mov.w	r3, #4294967295
 800b84e:	e010      	b.n	800b872 <mpu_write_mem+0x96>
    if (i2c_write(st.hw->addr, st.reg->mem_r_w, length, data))
 800b850:	4b0a      	ldr	r3, [pc, #40]	; (800b87c <mpu_write_mem+0xa0>)
 800b852:	685b      	ldr	r3, [r3, #4]
 800b854:	7818      	ldrb	r0, [r3, #0]
 800b856:	4b09      	ldr	r3, [pc, #36]	; (800b87c <mpu_write_mem+0xa0>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	7e19      	ldrb	r1, [r3, #24]
 800b85c:	88ba      	ldrh	r2, [r7, #4]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	f004 fa54 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b864:	4603      	mov	r3, r0
 800b866:	2b00      	cmp	r3, #0
 800b868:	d002      	beq.n	800b870 <mpu_write_mem+0x94>
        return -1;
 800b86a:	f04f 33ff 	mov.w	r3, #4294967295
 800b86e:	e000      	b.n	800b872 <mpu_write_mem+0x96>
    return 0;
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	2000000c 	.word	0x2000000c

0800b880 <mpu_read_mem>:
 *  @param[in]  length      Number of bytes to read.
 *  @param[out] data        Bytes read from memory.
 *  @return     0 if successful.
 */
int mpu_read_mem(unsigned short mem_addr, unsigned short length, unsigned char *data)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	603a      	str	r2, [r7, #0]
 800b88a:	80fb      	strh	r3, [r7, #6]
 800b88c:	460b      	mov	r3, r1
 800b88e:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[2];

    if (!data)
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d102      	bne.n	800b89c <mpu_read_mem+0x1c>
        return -1;
 800b896:	f04f 33ff 	mov.w	r3, #4294967295
 800b89a:	e03c      	b.n	800b916 <mpu_read_mem+0x96>
    if (!st.chip_cfg.sensors)
 800b89c:	4b20      	ldr	r3, [pc, #128]	; (800b920 <mpu_read_mem+0xa0>)
 800b89e:	7a9b      	ldrb	r3, [r3, #10]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d102      	bne.n	800b8aa <mpu_read_mem+0x2a>
        return -1;
 800b8a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8a8:	e035      	b.n	800b916 <mpu_read_mem+0x96>

    tmp[0] = (unsigned char)(mem_addr >> 8);
 800b8aa:	88fb      	ldrh	r3, [r7, #6]
 800b8ac:	0a1b      	lsrs	r3, r3, #8
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(mem_addr & 0xFF);
 800b8b4:	88fb      	ldrh	r3, [r7, #6]
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	737b      	strb	r3, [r7, #13]

    /* Check bank boundaries. */
    if (tmp[1] + length > st.hw->bank_size)
 800b8ba:	7b7b      	ldrb	r3, [r7, #13]
 800b8bc:	461a      	mov	r2, r3
 800b8be:	88bb      	ldrh	r3, [r7, #4]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	4a17      	ldr	r2, [pc, #92]	; (800b920 <mpu_read_mem+0xa0>)
 800b8c4:	6852      	ldr	r2, [r2, #4]
 800b8c6:	8952      	ldrh	r2, [r2, #10]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	dd02      	ble.n	800b8d2 <mpu_read_mem+0x52>
        return -1;
 800b8cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d0:	e021      	b.n	800b916 <mpu_read_mem+0x96>

    if (i2c_write(st.hw->addr, st.reg->bank_sel, 2, tmp))
 800b8d2:	4b13      	ldr	r3, [pc, #76]	; (800b920 <mpu_read_mem+0xa0>)
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	7818      	ldrb	r0, [r3, #0]
 800b8d8:	4b11      	ldr	r3, [pc, #68]	; (800b920 <mpu_read_mem+0xa0>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	7ed9      	ldrb	r1, [r3, #27]
 800b8de:	f107 030c 	add.w	r3, r7, #12
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	f004 fa12 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d002      	beq.n	800b8f4 <mpu_read_mem+0x74>
        return -1;
 800b8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f2:	e010      	b.n	800b916 <mpu_read_mem+0x96>
    if (i2c_read(st.hw->addr, st.reg->mem_r_w, length, data))
 800b8f4:	4b0a      	ldr	r3, [pc, #40]	; (800b920 <mpu_read_mem+0xa0>)
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	7818      	ldrb	r0, [r3, #0]
 800b8fa:	4b09      	ldr	r3, [pc, #36]	; (800b920 <mpu_read_mem+0xa0>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	7e19      	ldrb	r1, [r3, #24]
 800b900:	88ba      	ldrh	r2, [r7, #4]
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	f004 f9b8 	bl	800fc78 <Sensors_I2C_ReadRegister>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <mpu_read_mem+0x94>
        return -1;
 800b90e:	f04f 33ff 	mov.w	r3, #4294967295
 800b912:	e000      	b.n	800b916 <mpu_read_mem+0x96>
    return 0;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	2000000c 	.word	0x2000000c

0800b924 <mpu_load_firmware>:
 *  @param[in]  sample_rate Fixed sampling rate used when DMP is enabled.
 *  @return     0 if successful.
 */
int mpu_load_firmware(unsigned short length, const unsigned char *firmware, unsigned short start_addr,
                      unsigned short sample_rate)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b08a      	sub	sp, #40	; 0x28
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60b9      	str	r1, [r7, #8]
 800b92c:	4611      	mov	r1, r2
 800b92e:	461a      	mov	r2, r3
 800b930:	4603      	mov	r3, r0
 800b932:	81fb      	strh	r3, [r7, #14]
 800b934:	460b      	mov	r3, r1
 800b936:	81bb      	strh	r3, [r7, #12]
 800b938:	4613      	mov	r3, r2
 800b93a:	80fb      	strh	r3, [r7, #6]
    unsigned short this_write;
    /* Must divide evenly into st.hw->bank_size to avoid bank crossings. */
#define LOAD_CHUNK (16)
    unsigned char cur[LOAD_CHUNK], tmp[2];

    if (st.chip_cfg.dmp_loaded)
 800b93c:	4b37      	ldr	r3, [pc, #220]	; (800ba1c <mpu_load_firmware+0xf8>)
 800b93e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b942:	2b00      	cmp	r3, #0
 800b944:	d002      	beq.n	800b94c <mpu_load_firmware+0x28>
        /* DMP should only be loaded once. */
        return -1;
 800b946:	f04f 33ff 	mov.w	r3, #4294967295
 800b94a:	e062      	b.n	800ba12 <mpu_load_firmware+0xee>

    if (!firmware)
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d102      	bne.n	800b958 <mpu_load_firmware+0x34>
        return -1;
 800b952:	f04f 33ff 	mov.w	r3, #4294967295
 800b956:	e05c      	b.n	800ba12 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write)
 800b958:	2300      	movs	r3, #0
 800b95a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b95c:	e034      	b.n	800b9c8 <mpu_load_firmware+0xa4>
    {
        this_write = min(LOAD_CHUNK, length - ii);
 800b95e:	89fa      	ldrh	r2, [r7, #14]
 800b960:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	2b10      	cmp	r3, #16
 800b966:	bfa8      	it	ge
 800b968:	2310      	movge	r3, #16
 800b96a:	84bb      	strh	r3, [r7, #36]	; 0x24
        if (mpu_write_mem(ii, this_write, (unsigned char *)&firmware[ii]))
 800b96c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b96e:	68ba      	ldr	r2, [r7, #8]
 800b970:	441a      	add	r2, r3
 800b972:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b974:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b976:	4618      	mov	r0, r3
 800b978:	f7ff ff30 	bl	800b7dc <mpu_write_mem>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d002      	beq.n	800b988 <mpu_load_firmware+0x64>
            return -1;
 800b982:	f04f 33ff 	mov.w	r3, #4294967295
 800b986:	e044      	b.n	800ba12 <mpu_load_firmware+0xee>
        if (mpu_read_mem(ii, this_write, cur))
 800b988:	f107 0214 	add.w	r2, r7, #20
 800b98c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b98e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff ff75 	bl	800b880 <mpu_read_mem>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d002      	beq.n	800b9a2 <mpu_load_firmware+0x7e>
            return -1;
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a0:	e037      	b.n	800ba12 <mpu_load_firmware+0xee>
        if (memcmp(firmware + ii, cur, this_write))
 800b9a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b9aa:	f107 0114 	add.w	r1, r7, #20
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f004 fe07 	bl	80105c2 <memcmp>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d002      	beq.n	800b9c0 <mpu_load_firmware+0x9c>
            return -2;
 800b9ba:	f06f 0301 	mvn.w	r3, #1
 800b9be:	e028      	b.n	800ba12 <mpu_load_firmware+0xee>
    for (ii = 0; ii < length; ii += this_write)
 800b9c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b9c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9c4:	4413      	add	r3, r2
 800b9c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b9c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b9ca:	89fb      	ldrh	r3, [r7, #14]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d3c6      	bcc.n	800b95e <mpu_load_firmware+0x3a>
    }

    /* Set program start address. */
    tmp[0] = start_addr >> 8;
 800b9d0:	89bb      	ldrh	r3, [r7, #12]
 800b9d2:	0a1b      	lsrs	r3, r3, #8
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	743b      	strb	r3, [r7, #16]
    tmp[1] = start_addr & 0xFF;
 800b9da:	89bb      	ldrh	r3, [r7, #12]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	747b      	strb	r3, [r7, #17]
    if (i2c_write(st.hw->addr, st.reg->prgm_start_h, 2, tmp))
 800b9e0:	4b0e      	ldr	r3, [pc, #56]	; (800ba1c <mpu_load_firmware+0xf8>)
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	7818      	ldrb	r0, [r3, #0]
 800b9e6:	4b0d      	ldr	r3, [pc, #52]	; (800ba1c <mpu_load_firmware+0xf8>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	7f59      	ldrb	r1, [r3, #29]
 800b9ec:	f107 0310 	add.w	r3, r7, #16
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	f004 f98b 	bl	800fd0c <Sensors_I2C_WriteRegister>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d002      	beq.n	800ba02 <mpu_load_firmware+0xde>
        return -1;
 800b9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ba00:	e007      	b.n	800ba12 <mpu_load_firmware+0xee>

    st.chip_cfg.dmp_loaded = 1;
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <mpu_load_firmware+0xf8>)
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    st.chip_cfg.dmp_sample_rate = sample_rate;
 800ba0a:	4a04      	ldr	r2, [pc, #16]	; (800ba1c <mpu_load_firmware+0xf8>)
 800ba0c:	88fb      	ldrh	r3, [r7, #6]
 800ba0e:	84d3      	strh	r3, [r2, #38]	; 0x26
    return 0;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3728      	adds	r7, #40	; 0x28
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	2000000c 	.word	0x2000000c

0800ba20 <mpu_set_dmp_state>:
 *  @brief      Enable/disable DMP support.
 *  @param[in]  enable  1 to turn on the DMP.
 *  @return     0 if successful.
 */
int mpu_set_dmp_state(unsigned char enable)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	4603      	mov	r3, r0
 800ba28:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;
    if (st.chip_cfg.dmp_on == enable)
 800ba2a:	4b26      	ldr	r3, [pc, #152]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800ba2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba30:	79fa      	ldrb	r2, [r7, #7]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d101      	bne.n	800ba3a <mpu_set_dmp_state+0x1a>
        return 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	e040      	b.n	800babc <mpu_set_dmp_state+0x9c>

    if (enable)
 800ba3a:	79fb      	ldrb	r3, [r7, #7]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d027      	beq.n	800ba90 <mpu_set_dmp_state+0x70>
    {
        if (!st.chip_cfg.dmp_loaded)
 800ba40:	4b20      	ldr	r3, [pc, #128]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800ba42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <mpu_set_dmp_state+0x30>
            return -1;
 800ba4a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba4e:	e035      	b.n	800babc <mpu_set_dmp_state+0x9c>
        /* Disable data ready interrupt. */
        set_int_enable(0);
 800ba50:	2000      	movs	r0, #0
 800ba52:	f7fe ff39 	bl	800a8c8 <set_int_enable>
        /* Disable bypass mode. */
        mpu_set_bypass(0);
 800ba56:	2000      	movs	r0, #0
 800ba58:	f7ff fdb6 	bl	800b5c8 <mpu_set_bypass>
        /* Keep constant sample rate, FIFO rate controlled by DMP. */
        mpu_set_sample_rate(st.chip_cfg.dmp_sample_rate);
 800ba5c:	4b19      	ldr	r3, [pc, #100]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800ba5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7ff fbe5 	bl	800b230 <mpu_set_sample_rate>
        /* Remove FIFO elements. */
        tmp = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800ba6a:	4b16      	ldr	r3, [pc, #88]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800ba6c:	685b      	ldr	r3, [r3, #4]
 800ba6e:	7818      	ldrb	r0, [r3, #0]
 800ba70:	f107 030f 	add.w	r3, r7, #15
 800ba74:	2201      	movs	r2, #1
 800ba76:	2123      	movs	r1, #35	; 0x23
 800ba78:	f004 f948 	bl	800fd0c <Sensors_I2C_WriteRegister>
        st.chip_cfg.dmp_on = 1;
 800ba7c:	4b11      	ldr	r3, [pc, #68]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        /* Enable DMP interrupt. */
        set_int_enable(1);
 800ba84:	2001      	movs	r0, #1
 800ba86:	f7fe ff1f 	bl	800a8c8 <set_int_enable>
        mpu_reset_fifo();
 800ba8a:	f7ff f901 	bl	800ac90 <mpu_reset_fifo>
 800ba8e:	e014      	b.n	800baba <mpu_set_dmp_state+0x9a>
    }
    else
    {
        /* Disable DMP interrupt. */
        set_int_enable(0);
 800ba90:	2000      	movs	r0, #0
 800ba92:	f7fe ff19 	bl	800a8c8 <set_int_enable>
        /* Restore FIFO settings. */
        tmp = st.chip_cfg.fifo_enable;
 800ba96:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800ba98:	7c1b      	ldrb	r3, [r3, #16]
 800ba9a:	73fb      	strb	r3, [r7, #15]
        i2c_write(st.hw->addr, 0x23, 1, &tmp);
 800ba9c:	4b09      	ldr	r3, [pc, #36]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	7818      	ldrb	r0, [r3, #0]
 800baa2:	f107 030f 	add.w	r3, r7, #15
 800baa6:	2201      	movs	r2, #1
 800baa8:	2123      	movs	r1, #35	; 0x23
 800baaa:	f004 f92f 	bl	800fd0c <Sensors_I2C_WriteRegister>
        st.chip_cfg.dmp_on = 0;
 800baae:	4b05      	ldr	r3, [pc, #20]	; (800bac4 <mpu_set_dmp_state+0xa4>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        mpu_reset_fifo();
 800bab6:	f7ff f8eb 	bl	800ac90 <mpu_reset_fifo>
    }
    return 0;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	2000000c 	.word	0x2000000c

0800bac8 <mpu_lp_motion_interrupt>:
 *                          exceed @e thresh before motion is reported.
 *  @param[in]  lpa_freq    Minimum sampling rate, or zero to disable.
 *  @return     0 if successful.
 */
int mpu_lp_motion_interrupt(unsigned short thresh, unsigned char time, unsigned short lpa_freq)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	4603      	mov	r3, r0
 800bad0:	80fb      	strh	r3, [r7, #6]
 800bad2:	460b      	mov	r3, r1
 800bad4:	717b      	strb	r3, [r7, #5]
 800bad6:	4613      	mov	r3, r2
 800bad8:	807b      	strh	r3, [r7, #2]

#if defined MPU6500
    unsigned char data[3];
#endif
    if (lpa_freq)
 800bada:	887b      	ldrh	r3, [r7, #2]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d02d      	beq.n	800bb3c <mpu_lp_motion_interrupt+0x74>
            thresh_hw = 1;
        else
            thresh_hw = thresh >> 2;
#endif

        if (!time)
 800bae0:	797b      	ldrb	r3, [r7, #5]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d101      	bne.n	800baea <mpu_lp_motion_interrupt+0x22>
            /* Minimum duration must be 1ms. */
            time = 1;
 800bae6:	2301      	movs	r3, #1
 800bae8:	717b      	strb	r3, [r7, #5]
             * function can safely exit.
             */
            return -1;
#endif

        if (!st.chip_cfg.int_motion_only)
 800baea:	4b41      	ldr	r3, [pc, #260]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800baec:	7d5b      	ldrb	r3, [r3, #21]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d139      	bne.n	800bb66 <mpu_lp_motion_interrupt+0x9e>
        {
            /* Store current settings for later. */
            if (st.chip_cfg.dmp_on)
 800baf2:	4b3f      	ldr	r3, [pc, #252]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800baf4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <mpu_lp_motion_interrupt+0x44>
            {
                mpu_set_dmp_state(0);
 800bafc:	2000      	movs	r0, #0
 800bafe:	f7ff ff8f 	bl	800ba20 <mpu_set_dmp_state>
                st.chip_cfg.cache.dmp_on = 1;
 800bb02:	4b3b      	ldr	r3, [pc, #236]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2020 	strb.w	r2, [r3, #32]
 800bb0a:	e003      	b.n	800bb14 <mpu_lp_motion_interrupt+0x4c>
            }
            else
                st.chip_cfg.cache.dmp_on = 0;
 800bb0c:	4b38      	ldr	r3, [pc, #224]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb0e:	2200      	movs	r2, #0
 800bb10:	f883 2020 	strb.w	r2, [r3, #32]
            mpu_get_gyro_fsr(&st.chip_cfg.cache.gyro_fsr);
 800bb14:	4837      	ldr	r0, [pc, #220]	; (800bbf4 <mpu_lp_motion_interrupt+0x12c>)
 800bb16:	f7ff f9bf 	bl	800ae98 <mpu_get_gyro_fsr>
            mpu_get_accel_fsr(&st.chip_cfg.cache.accel_fsr);
 800bb1a:	4837      	ldr	r0, [pc, #220]	; (800bbf8 <mpu_lp_motion_interrupt+0x130>)
 800bb1c:	f7ff fa44 	bl	800afa8 <mpu_get_accel_fsr>
            mpu_get_lpf(&st.chip_cfg.cache.lpf);
 800bb20:	4836      	ldr	r0, [pc, #216]	; (800bbfc <mpu_lp_motion_interrupt+0x134>)
 800bb22:	f7ff fae3 	bl	800b0ec <mpu_get_lpf>
            mpu_get_sample_rate(&st.chip_cfg.cache.sample_rate);
 800bb26:	4836      	ldr	r0, [pc, #216]	; (800bc00 <mpu_lp_motion_interrupt+0x138>)
 800bb28:	f7ff fb6a 	bl	800b200 <mpu_get_sample_rate>
            st.chip_cfg.cache.sensors_on = st.chip_cfg.sensors;
 800bb2c:	4b30      	ldr	r3, [pc, #192]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb2e:	7a9a      	ldrb	r2, [r3, #10]
 800bb30:	4b2f      	ldr	r3, [pc, #188]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb32:	779a      	strb	r2, [r3, #30]
            mpu_get_fifo_config(&st.chip_cfg.cache.fifo_sensors);
 800bb34:	4833      	ldr	r0, [pc, #204]	; (800bc04 <mpu_lp_motion_interrupt+0x13c>)
 800bb36:	f7ff fbe1 	bl	800b2fc <mpu_get_fifo_config>
 800bb3a:	e014      	b.n	800bb66 <mpu_lp_motion_interrupt+0x9e>
    }
    else
    {
        /* Don't "restore" the previous state if no state has been saved. */
        unsigned int ii;
        char *cache_ptr = (char *)&st.chip_cfg.cache;
 800bb3c:	4b2d      	ldr	r3, [pc, #180]	; (800bbf4 <mpu_lp_motion_interrupt+0x12c>)
 800bb3e:	60bb      	str	r3, [r7, #8]
        for (ii = 0; ii < sizeof(st.chip_cfg.cache); ii++)
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]
 800bb44:	e008      	b.n	800bb58 <mpu_lp_motion_interrupt+0x90>
        {
            if (cache_ptr[ii] != 0)
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d108      	bne.n	800bb64 <mpu_lp_motion_interrupt+0x9c>
        for (ii = 0; ii < sizeof(st.chip_cfg.cache); ii++)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	3301      	adds	r3, #1
 800bb56:	60fb      	str	r3, [r7, #12]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b0b      	cmp	r3, #11
 800bb5c:	d9f3      	bls.n	800bb46 <mpu_lp_motion_interrupt+0x7e>
                goto lp_int_restore;
        }
        /* If we reach this point, motion interrupt mode hasn't been used yet. */
        return -1;
 800bb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb62:	e040      	b.n	800bbe6 <mpu_lp_motion_interrupt+0x11e>
                goto lp_int_restore;
 800bb64:	bf00      	nop
    }
lp_int_restore:
    /* Set to invalid values to ensure no I2C writes are skipped. */
    st.chip_cfg.gyro_fsr = 0xFF;
 800bb66:	4b22      	ldr	r3, [pc, #136]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb68:	22ff      	movs	r2, #255	; 0xff
 800bb6a:	721a      	strb	r2, [r3, #8]
    st.chip_cfg.accel_fsr = 0xFF;
 800bb6c:	4b20      	ldr	r3, [pc, #128]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb6e:	22ff      	movs	r2, #255	; 0xff
 800bb70:	725a      	strb	r2, [r3, #9]
    st.chip_cfg.lpf = 0xFF;
 800bb72:	4b1f      	ldr	r3, [pc, #124]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb74:	22ff      	movs	r2, #255	; 0xff
 800bb76:	72da      	strb	r2, [r3, #11]
    st.chip_cfg.sample_rate = 0xFFFF;
 800bb78:	4b1d      	ldr	r3, [pc, #116]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb7e:	81da      	strh	r2, [r3, #14]
    st.chip_cfg.sensors = 0xFF;
 800bb80:	4b1b      	ldr	r3, [pc, #108]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb82:	22ff      	movs	r2, #255	; 0xff
 800bb84:	729a      	strb	r2, [r3, #10]
    st.chip_cfg.fifo_enable = 0xFF;
 800bb86:	4b1a      	ldr	r3, [pc, #104]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb88:	22ff      	movs	r2, #255	; 0xff
 800bb8a:	741a      	strb	r2, [r3, #16]
    st.chip_cfg.clk_src = INV_CLK_PLL;
 800bb8c:	4b18      	ldr	r3, [pc, #96]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb8e:	2201      	movs	r2, #1
 800bb90:	731a      	strb	r2, [r3, #12]
    mpu_set_sensors(st.chip_cfg.cache.sensors_on);
 800bb92:	4b17      	ldr	r3, [pc, #92]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb94:	7f9b      	ldrb	r3, [r3, #30]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff fc12 	bl	800b3c0 <mpu_set_sensors>
    mpu_set_gyro_fsr(st.chip_cfg.cache.gyro_fsr);
 800bb9c:	4b14      	ldr	r3, [pc, #80]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bb9e:	8adb      	ldrh	r3, [r3, #22]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff f9ad 	bl	800af00 <mpu_set_gyro_fsr>
    mpu_set_accel_fsr(st.chip_cfg.cache.accel_fsr);
 800bba6:	4b12      	ldr	r3, [pc, #72]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bba8:	7e1b      	ldrb	r3, [r3, #24]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f7ff fa36 	bl	800b01c <mpu_set_accel_fsr>
    mpu_set_lpf(st.chip_cfg.cache.lpf);
 800bbb0:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bbb2:	8b5b      	ldrh	r3, [r3, #26]
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7ff fad5 	bl	800b164 <mpu_set_lpf>
    mpu_set_sample_rate(st.chip_cfg.cache.sample_rate);
 800bbba:	4b0d      	ldr	r3, [pc, #52]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bbbc:	8b9b      	ldrh	r3, [r3, #28]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff fb36 	bl	800b230 <mpu_set_sample_rate>
    mpu_configure_fifo(st.chip_cfg.cache.fifo_sensors);
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bbc6:	7fdb      	ldrb	r3, [r3, #31]
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff fba7 	bl	800b31c <mpu_configure_fifo>

    if (st.chip_cfg.cache.dmp_on)
 800bbce:	4b08      	ldr	r3, [pc, #32]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bbd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d002      	beq.n	800bbde <mpu_lp_motion_interrupt+0x116>
        mpu_set_dmp_state(1);
 800bbd8:	2001      	movs	r0, #1
 800bbda:	f7ff ff21 	bl	800ba20 <mpu_set_dmp_state>
    data[0] = 0;
    if (i2c_write(st.hw->addr, st.reg->accel_intel, 1, data))
        goto lp_int_restore;
#endif

    st.chip_cfg.int_motion_only = 0;
 800bbde:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <mpu_lp_motion_interrupt+0x128>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	755a      	strb	r2, [r3, #21]
    return 0;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	2000000c 	.word	0x2000000c
 800bbf4:	20000022 	.word	0x20000022
 800bbf8:	20000024 	.word	0x20000024
 800bbfc:	20000026 	.word	0x20000026
 800bc00:	20000028 	.word	0x20000028
 800bc04:	2000002b 	.word	0x2000002b

0800bc08 <dmp_load_motion_driver_firmware>:
/**
 *  @brief  Load the DMP with this image.
 *  @return 0 if successful.
 */
int dmp_load_motion_driver_firmware(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
    return mpu_load_firmware(DMP_CODE_SIZE, dmp_memory, sStartAddress, DMP_SAMPLE_RATE);
 800bc0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bc10:	23c8      	movs	r3, #200	; 0xc8
 800bc12:	4904      	ldr	r1, [pc, #16]	; (800bc24 <dmp_load_motion_driver_firmware+0x1c>)
 800bc14:	f640 30f6 	movw	r0, #3062	; 0xbf6
 800bc18:	f7ff fe84 	bl	800b924 <mpu_load_firmware>
 800bc1c:	4603      	mov	r3, r0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	08016338 	.word	0x08016338

0800bc28 <dmp_set_orientation>:
 *  @e inv_orientation_matrix_to_scalar.
 *  @param[in]  orient  Gyro and accel orientation in body frame.
 *  @return     0 if successful.
 */
int dmp_set_orientation(unsigned short orient)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	80fb      	strh	r3, [r7, #6]
    unsigned char gyro_regs[3], accel_regs[3];
    const unsigned char gyro_axes[3] = {DINA4C, DINACD, DINA6C};
 800bc32:	4a71      	ldr	r2, [pc, #452]	; (800bdf8 <dmp_set_orientation+0x1d0>)
 800bc34:	f107 0314 	add.w	r3, r7, #20
 800bc38:	6812      	ldr	r2, [r2, #0]
 800bc3a:	4611      	mov	r1, r2
 800bc3c:	8019      	strh	r1, [r3, #0]
 800bc3e:	3302      	adds	r3, #2
 800bc40:	0c12      	lsrs	r2, r2, #16
 800bc42:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_axes[3] = {DINA0C, DINAC9, DINA2C};
 800bc44:	4a6d      	ldr	r2, [pc, #436]	; (800bdfc <dmp_set_orientation+0x1d4>)
 800bc46:	f107 0310 	add.w	r3, r7, #16
 800bc4a:	6812      	ldr	r2, [r2, #0]
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	8019      	strh	r1, [r3, #0]
 800bc50:	3302      	adds	r3, #2
 800bc52:	0c12      	lsrs	r2, r2, #16
 800bc54:	701a      	strb	r2, [r3, #0]
    const unsigned char gyro_sign[3] = {DINA36, DINA56, DINA76};
 800bc56:	4a6a      	ldr	r2, [pc, #424]	; (800be00 <dmp_set_orientation+0x1d8>)
 800bc58:	f107 030c 	add.w	r3, r7, #12
 800bc5c:	6812      	ldr	r2, [r2, #0]
 800bc5e:	4611      	mov	r1, r2
 800bc60:	8019      	strh	r1, [r3, #0]
 800bc62:	3302      	adds	r3, #2
 800bc64:	0c12      	lsrs	r2, r2, #16
 800bc66:	701a      	strb	r2, [r3, #0]
    const unsigned char accel_sign[3] = {DINA26, DINA46, DINA66};
 800bc68:	4a66      	ldr	r2, [pc, #408]	; (800be04 <dmp_set_orientation+0x1dc>)
 800bc6a:	f107 0308 	add.w	r3, r7, #8
 800bc6e:	6812      	ldr	r2, [r2, #0]
 800bc70:	4611      	mov	r1, r2
 800bc72:	8019      	strh	r1, [r3, #0]
 800bc74:	3302      	adds	r3, #2
 800bc76:	0c12      	lsrs	r2, r2, #16
 800bc78:	701a      	strb	r2, [r3, #0]

    gyro_regs[0] = gyro_axes[orient & 3];
 800bc7a:	88fb      	ldrh	r3, [r7, #6]
 800bc7c:	f003 0303 	and.w	r3, r3, #3
 800bc80:	f107 0220 	add.w	r2, r7, #32
 800bc84:	4413      	add	r3, r2
 800bc86:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bc8a:	773b      	strb	r3, [r7, #28]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];
 800bc8c:	88fb      	ldrh	r3, [r7, #6]
 800bc8e:	08db      	lsrs	r3, r3, #3
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	f003 0303 	and.w	r3, r3, #3
 800bc96:	f107 0220 	add.w	r2, r7, #32
 800bc9a:	4413      	add	r3, r2
 800bc9c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bca0:	777b      	strb	r3, [r7, #29]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	099b      	lsrs	r3, r3, #6
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	f107 0220 	add.w	r2, r7, #32
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800bcb6:	77bb      	strb	r3, [r7, #30]
    accel_regs[0] = accel_axes[orient & 3];
 800bcb8:	88fb      	ldrh	r3, [r7, #6]
 800bcba:	f003 0303 	and.w	r3, r3, #3
 800bcbe:	f107 0220 	add.w	r2, r7, #32
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bcc8:	763b      	strb	r3, [r7, #24]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];
 800bcca:	88fb      	ldrh	r3, [r7, #6]
 800bccc:	08db      	lsrs	r3, r3, #3
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	f107 0220 	add.w	r2, r7, #32
 800bcd8:	4413      	add	r3, r2
 800bcda:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bcde:	767b      	strb	r3, [r7, #25]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];
 800bce0:	88fb      	ldrh	r3, [r7, #6]
 800bce2:	099b      	lsrs	r3, r3, #6
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	f003 0303 	and.w	r3, r3, #3
 800bcea:	f107 0220 	add.w	r2, r7, #32
 800bcee:	4413      	add	r3, r2
 800bcf0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800bcf4:	76bb      	strb	r3, [r7, #26]

    /* Chip-to-body, axes only. */
    if (mpu_write_mem(FCFG_1, 3, gyro_regs))
 800bcf6:	f107 031c 	add.w	r3, r7, #28
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2103      	movs	r1, #3
 800bcfe:	f240 4026 	movw	r0, #1062	; 0x426
 800bd02:	f7ff fd6b 	bl	800b7dc <mpu_write_mem>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d002      	beq.n	800bd12 <dmp_set_orientation+0xea>
        return -1;
 800bd0c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd10:	e06e      	b.n	800bdf0 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_2, 3, accel_regs))
 800bd12:	f107 0318 	add.w	r3, r7, #24
 800bd16:	461a      	mov	r2, r3
 800bd18:	2103      	movs	r1, #3
 800bd1a:	f240 402a 	movw	r0, #1066	; 0x42a
 800bd1e:	f7ff fd5d 	bl	800b7dc <mpu_write_mem>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <dmp_set_orientation+0x106>
        return -1;
 800bd28:	f04f 33ff 	mov.w	r3, #4294967295
 800bd2c:	e060      	b.n	800bdf0 <dmp_set_orientation+0x1c8>

    memcpy(gyro_regs, gyro_sign, 3);
 800bd2e:	f107 031c 	add.w	r3, r7, #28
 800bd32:	f107 020c 	add.w	r2, r7, #12
 800bd36:	6812      	ldr	r2, [r2, #0]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	8019      	strh	r1, [r3, #0]
 800bd3c:	3302      	adds	r3, #2
 800bd3e:	0c12      	lsrs	r2, r2, #16
 800bd40:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);
 800bd42:	f107 0318 	add.w	r3, r7, #24
 800bd46:	f107 0208 	add.w	r2, r7, #8
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	4611      	mov	r1, r2
 800bd4e:	8019      	strh	r1, [r3, #0]
 800bd50:	3302      	adds	r3, #2
 800bd52:	0c12      	lsrs	r2, r2, #16
 800bd54:	701a      	strb	r2, [r3, #0]
    if (orient & 4)
 800bd56:	88fb      	ldrh	r3, [r7, #6]
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d009      	beq.n	800bd74 <dmp_set_orientation+0x14c>
    {
        gyro_regs[0] |= 1;
 800bd60:	7f3b      	ldrb	r3, [r7, #28]
 800bd62:	f043 0301 	orr.w	r3, r3, #1
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	773b      	strb	r3, [r7, #28]
        accel_regs[0] |= 1;
 800bd6a:	7e3b      	ldrb	r3, [r7, #24]
 800bd6c:	f043 0301 	orr.w	r3, r3, #1
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	763b      	strb	r3, [r7, #24]
    }
    if (orient & 0x20)
 800bd74:	88fb      	ldrh	r3, [r7, #6]
 800bd76:	f003 0320 	and.w	r3, r3, #32
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d009      	beq.n	800bd92 <dmp_set_orientation+0x16a>
    {
        gyro_regs[1] |= 1;
 800bd7e:	7f7b      	ldrb	r3, [r7, #29]
 800bd80:	f043 0301 	orr.w	r3, r3, #1
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	777b      	strb	r3, [r7, #29]
        accel_regs[1] |= 1;
 800bd88:	7e7b      	ldrb	r3, [r7, #25]
 800bd8a:	f043 0301 	orr.w	r3, r3, #1
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	767b      	strb	r3, [r7, #25]
    }
    if (orient & 0x100)
 800bd92:	88fb      	ldrh	r3, [r7, #6]
 800bd94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d009      	beq.n	800bdb0 <dmp_set_orientation+0x188>
    {
        gyro_regs[2] |= 1;
 800bd9c:	7fbb      	ldrb	r3, [r7, #30]
 800bd9e:	f043 0301 	orr.w	r3, r3, #1
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	77bb      	strb	r3, [r7, #30]
        accel_regs[2] |= 1;
 800bda6:	7ebb      	ldrb	r3, [r7, #26]
 800bda8:	f043 0301 	orr.w	r3, r3, #1
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	76bb      	strb	r3, [r7, #26]
    }

    /* Chip-to-body, sign only. */
    if (mpu_write_mem(FCFG_3, 3, gyro_regs))
 800bdb0:	f107 031c 	add.w	r3, r7, #28
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	2103      	movs	r1, #3
 800bdb8:	f44f 6088 	mov.w	r0, #1088	; 0x440
 800bdbc:	f7ff fd0e 	bl	800b7dc <mpu_write_mem>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <dmp_set_orientation+0x1a4>
        return -1;
 800bdc6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdca:	e011      	b.n	800bdf0 <dmp_set_orientation+0x1c8>
    if (mpu_write_mem(FCFG_7, 3, accel_regs))
 800bdcc:	f107 0318 	add.w	r3, r7, #24
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	2103      	movs	r1, #3
 800bdd4:	f240 4031 	movw	r0, #1073	; 0x431
 800bdd8:	f7ff fd00 	bl	800b7dc <mpu_write_mem>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d002      	beq.n	800bde8 <dmp_set_orientation+0x1c0>
        return -1;
 800bde2:	f04f 33ff 	mov.w	r3, #4294967295
 800bde6:	e003      	b.n	800bdf0 <dmp_set_orientation+0x1c8>
    dmp.orient = orient;
 800bde8:	4a07      	ldr	r2, [pc, #28]	; (800be08 <dmp_set_orientation+0x1e0>)
 800bdea:	88fb      	ldrh	r3, [r7, #6]
 800bdec:	8113      	strh	r3, [r2, #8]
    return 0;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3720      	adds	r7, #32
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	08016110 	.word	0x08016110
 800bdfc:	08016114 	.word	0x08016114
 800be00:	08016118 	.word	0x08016118
 800be04:	0801611c 	.word	0x0801611c
 800be08:	20000584 	.word	0x20000584

0800be0c <dmp_set_fifo_rate>:
 *  Only used when DMP is on.
 *  @param[in]  rate    Desired fifo rate (Hz).
 *  @return     0 if successful.
 */
int dmp_set_fifo_rate(unsigned short rate)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b088      	sub	sp, #32
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	80fb      	strh	r3, [r7, #6]
    const unsigned char regs_end[12] = {DINAFE, DINAF2, DINAAB, 0xc4, DINAAA, DINAF1,
 800be16:	4a1f      	ldr	r2, [pc, #124]	; (800be94 <dmp_set_fifo_rate+0x88>)
 800be18:	f107 0310 	add.w	r3, r7, #16
 800be1c:	ca07      	ldmia	r2, {r0, r1, r2}
 800be1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                        DINADF, DINADF, 0xBB,   0xAF, DINADF, DINADF};
    unsigned short div;
    unsigned char tmp[8];

    if (rate > DMP_SAMPLE_RATE)
 800be22:	88fb      	ldrh	r3, [r7, #6]
 800be24:	2bc8      	cmp	r3, #200	; 0xc8
 800be26:	d902      	bls.n	800be2e <dmp_set_fifo_rate+0x22>
        return -1;
 800be28:	f04f 33ff 	mov.w	r3, #4294967295
 800be2c:	e02e      	b.n	800be8c <dmp_set_fifo_rate+0x80>
    div = DMP_SAMPLE_RATE / rate - 1;
 800be2e:	88fb      	ldrh	r3, [r7, #6]
 800be30:	22c8      	movs	r2, #200	; 0xc8
 800be32:	fb92 f3f3 	sdiv	r3, r2, r3
 800be36:	b29b      	uxth	r3, r3
 800be38:	3b01      	subs	r3, #1
 800be3a:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (unsigned char)((div >> 8) & 0xFF);
 800be3c:	8bfb      	ldrh	r3, [r7, #30]
 800be3e:	0a1b      	lsrs	r3, r3, #8
 800be40:	b29b      	uxth	r3, r3
 800be42:	b2db      	uxtb	r3, r3
 800be44:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(div & 0xFF);
 800be46:	8bfb      	ldrh	r3, [r7, #30]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	727b      	strb	r3, [r7, #9]
    if (mpu_write_mem(D_0_22, 2, tmp))
 800be4c:	f107 0308 	add.w	r3, r7, #8
 800be50:	461a      	mov	r2, r3
 800be52:	2102      	movs	r1, #2
 800be54:	f240 2016 	movw	r0, #534	; 0x216
 800be58:	f7ff fcc0 	bl	800b7dc <mpu_write_mem>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d002      	beq.n	800be68 <dmp_set_fifo_rate+0x5c>
        return -1;
 800be62:	f04f 33ff 	mov.w	r3, #4294967295
 800be66:	e011      	b.n	800be8c <dmp_set_fifo_rate+0x80>
    if (mpu_write_mem(CFG_6, 12, (unsigned char *)regs_end))
 800be68:	f107 0310 	add.w	r3, r7, #16
 800be6c:	461a      	mov	r2, r3
 800be6e:	210c      	movs	r1, #12
 800be70:	f640 20c1 	movw	r0, #2753	; 0xac1
 800be74:	f7ff fcb2 	bl	800b7dc <mpu_write_mem>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d002      	beq.n	800be84 <dmp_set_fifo_rate+0x78>
        return -1;
 800be7e:	f04f 33ff 	mov.w	r3, #4294967295
 800be82:	e003      	b.n	800be8c <dmp_set_fifo_rate+0x80>

    dmp.fifo_rate = rate;
 800be84:	4a04      	ldr	r2, [pc, #16]	; (800be98 <dmp_set_fifo_rate+0x8c>)
 800be86:	88fb      	ldrh	r3, [r7, #6]
 800be88:	8193      	strh	r3, [r2, #12]
    return 0;
 800be8a:	2300      	movs	r3, #0
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3720      	adds	r7, #32
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	08016120 	.word	0x08016120
 800be98:	20000584 	.word	0x20000584

0800be9c <dmp_set_tap_thresh>:
 *  @param[in]  axis    1, 2, and 4 for XYZ accel, respectively.
 *  @param[in]  thresh  Tap threshold, in mg/ms.
 *  @return     0 if successful.
 */
int dmp_set_tap_thresh(unsigned char axis, unsigned short thresh)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	460a      	mov	r2, r1
 800bea6:	71fb      	strb	r3, [r7, #7]
 800bea8:	4613      	mov	r3, r2
 800beaa:	80bb      	strh	r3, [r7, #4]
    unsigned char tmp[4], accel_fsr;
    float scaled_thresh;
    unsigned short dmp_thresh, dmp_thresh_2;
    if (!(axis & TAP_XYZ) || thresh > 1600)
 800beac:	79fb      	ldrb	r3, [r7, #7]
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <dmp_set_tap_thresh+0x22>
 800beb6:	88bb      	ldrh	r3, [r7, #4]
 800beb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bebc:	d902      	bls.n	800bec4 <dmp_set_tap_thresh+0x28>
        return -1;
 800bebe:	f04f 33ff 	mov.w	r3, #4294967295
 800bec2:	e107      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>

    scaled_thresh = (float)thresh / DMP_SAMPLE_RATE;
 800bec4:	88bb      	ldrh	r3, [r7, #4]
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f7 fcdc 	bl	8003884 <__aeabi_ui2f>
 800becc:	4603      	mov	r3, r0
 800bece:	4983      	ldr	r1, [pc, #524]	; (800c0dc <dmp_set_tap_thresh+0x240>)
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7f7 fde3 	bl	8003a9c <__aeabi_fdiv>
 800bed6:	4603      	mov	r3, r0
 800bed8:	613b      	str	r3, [r7, #16]

    mpu_get_accel_fsr(&accel_fsr);
 800beda:	f107 030b 	add.w	r3, r7, #11
 800bede:	4618      	mov	r0, r3
 800bee0:	f7ff f862 	bl	800afa8 <mpu_get_accel_fsr>
    switch (accel_fsr)
 800bee4:	7afb      	ldrb	r3, [r7, #11]
 800bee6:	3b02      	subs	r3, #2
 800bee8:	2b0e      	cmp	r3, #14
 800beea:	d879      	bhi.n	800bfe0 <dmp_set_tap_thresh+0x144>
 800beec:	a201      	add	r2, pc, #4	; (adr r2, 800bef4 <dmp_set_tap_thresh+0x58>)
 800beee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef2:	bf00      	nop
 800bef4:	0800bf31 	.word	0x0800bf31
 800bef8:	0800bfe1 	.word	0x0800bfe1
 800befc:	0800bf5d 	.word	0x0800bf5d
 800bf00:	0800bfe1 	.word	0x0800bfe1
 800bf04:	0800bfe1 	.word	0x0800bfe1
 800bf08:	0800bfe1 	.word	0x0800bfe1
 800bf0c:	0800bf89 	.word	0x0800bf89
 800bf10:	0800bfe1 	.word	0x0800bfe1
 800bf14:	0800bfe1 	.word	0x0800bfe1
 800bf18:	0800bfe1 	.word	0x0800bfe1
 800bf1c:	0800bfe1 	.word	0x0800bfe1
 800bf20:	0800bfe1 	.word	0x0800bfe1
 800bf24:	0800bfe1 	.word	0x0800bfe1
 800bf28:	0800bfe1 	.word	0x0800bfe1
 800bf2c:	0800bfb5 	.word	0x0800bfb5
    {
    case 2:
        dmp_thresh = (unsigned short)(scaled_thresh * 16384);
 800bf30:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 800bf34:	6938      	ldr	r0, [r7, #16]
 800bf36:	f7f7 fcfd 	bl	8003934 <__aeabi_fmul>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7f7 fefb 	bl	8003d38 <__aeabi_f2uiz>
 800bf42:	4603      	mov	r3, r0
 800bf44:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 12288);
 800bf46:	4966      	ldr	r1, [pc, #408]	; (800c0e0 <dmp_set_tap_thresh+0x244>)
 800bf48:	6938      	ldr	r0, [r7, #16]
 800bf4a:	f7f7 fcf3 	bl	8003934 <__aeabi_fmul>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f7 fef1 	bl	8003d38 <__aeabi_f2uiz>
 800bf56:	4603      	mov	r3, r0
 800bf58:	82bb      	strh	r3, [r7, #20]
        break;
 800bf5a:	e044      	b.n	800bfe6 <dmp_set_tap_thresh+0x14a>
    case 4:
        dmp_thresh = (unsigned short)(scaled_thresh * 8192);
 800bf5c:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800bf60:	6938      	ldr	r0, [r7, #16]
 800bf62:	f7f7 fce7 	bl	8003934 <__aeabi_fmul>
 800bf66:	4603      	mov	r3, r0
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7f7 fee5 	bl	8003d38 <__aeabi_f2uiz>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 6144);
 800bf72:	495c      	ldr	r1, [pc, #368]	; (800c0e4 <dmp_set_tap_thresh+0x248>)
 800bf74:	6938      	ldr	r0, [r7, #16]
 800bf76:	f7f7 fcdd 	bl	8003934 <__aeabi_fmul>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f7 fedb 	bl	8003d38 <__aeabi_f2uiz>
 800bf82:	4603      	mov	r3, r0
 800bf84:	82bb      	strh	r3, [r7, #20]
        break;
 800bf86:	e02e      	b.n	800bfe6 <dmp_set_tap_thresh+0x14a>
    case 8:
        dmp_thresh = (unsigned short)(scaled_thresh * 4096);
 800bf88:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800bf8c:	6938      	ldr	r0, [r7, #16]
 800bf8e:	f7f7 fcd1 	bl	8003934 <__aeabi_fmul>
 800bf92:	4603      	mov	r3, r0
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7f7 fecf 	bl	8003d38 <__aeabi_f2uiz>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 3072);
 800bf9e:	4952      	ldr	r1, [pc, #328]	; (800c0e8 <dmp_set_tap_thresh+0x24c>)
 800bfa0:	6938      	ldr	r0, [r7, #16]
 800bfa2:	f7f7 fcc7 	bl	8003934 <__aeabi_fmul>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7f7 fec5 	bl	8003d38 <__aeabi_f2uiz>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	82bb      	strh	r3, [r7, #20]
        break;
 800bfb2:	e018      	b.n	800bfe6 <dmp_set_tap_thresh+0x14a>
    case 16:
        dmp_thresh = (unsigned short)(scaled_thresh * 2048);
 800bfb4:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
 800bfb8:	6938      	ldr	r0, [r7, #16]
 800bfba:	f7f7 fcbb 	bl	8003934 <__aeabi_fmul>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7f7 feb9 	bl	8003d38 <__aeabi_f2uiz>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	82fb      	strh	r3, [r7, #22]
        /* dmp_thresh * 0.75 */
        dmp_thresh_2 = (unsigned short)(scaled_thresh * 1536);
 800bfca:	4948      	ldr	r1, [pc, #288]	; (800c0ec <dmp_set_tap_thresh+0x250>)
 800bfcc:	6938      	ldr	r0, [r7, #16]
 800bfce:	f7f7 fcb1 	bl	8003934 <__aeabi_fmul>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f7f7 feaf 	bl	8003d38 <__aeabi_f2uiz>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	82bb      	strh	r3, [r7, #20]
        break;
 800bfde:	e002      	b.n	800bfe6 <dmp_set_tap_thresh+0x14a>
    default:
        return -1;
 800bfe0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfe4:	e076      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>
    }
    tmp[0] = (unsigned char)(dmp_thresh >> 8);
 800bfe6:	8afb      	ldrh	r3, [r7, #22]
 800bfe8:	0a1b      	lsrs	r3, r3, #8
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_thresh & 0xFF);
 800bff0:	8afb      	ldrh	r3, [r7, #22]
 800bff2:	b2db      	uxtb	r3, r3
 800bff4:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)(dmp_thresh_2 >> 8);
 800bff6:	8abb      	ldrh	r3, [r7, #20]
 800bff8:	0a1b      	lsrs	r3, r3, #8
 800bffa:	b29b      	uxth	r3, r3
 800bffc:	b2db      	uxtb	r3, r3
 800bffe:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(dmp_thresh_2 & 0xFF);
 800c000:	8abb      	ldrh	r3, [r7, #20]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	f003 0301 	and.w	r3, r3, #1
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d01c      	beq.n	800c04a <dmp_set_tap_thresh+0x1ae>
    {
        if (mpu_write_mem(DMP_TAP_THX, 2, tmp))
 800c010:	f107 030c 	add.w	r3, r7, #12
 800c014:	461a      	mov	r2, r3
 800c016:	2102      	movs	r1, #2
 800c018:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800c01c:	f7ff fbde 	bl	800b7dc <mpu_write_mem>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d002      	beq.n	800c02c <dmp_set_tap_thresh+0x190>
            return -1;
 800c026:	f04f 33ff 	mov.w	r3, #4294967295
 800c02a:	e053      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_36, 2, tmp + 2))
 800c02c:	f107 030c 	add.w	r3, r7, #12
 800c030:	3302      	adds	r3, #2
 800c032:	461a      	mov	r2, r3
 800c034:	2102      	movs	r1, #2
 800c036:	f44f 7092 	mov.w	r0, #292	; 0x124
 800c03a:	f7ff fbcf 	bl	800b7dc <mpu_write_mem>
 800c03e:	4603      	mov	r3, r0
 800c040:	2b00      	cmp	r3, #0
 800c042:	d002      	beq.n	800c04a <dmp_set_tap_thresh+0x1ae>
            return -1;
 800c044:	f04f 33ff 	mov.w	r3, #4294967295
 800c048:	e044      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Y)
 800c04a:	79fb      	ldrb	r3, [r7, #7]
 800c04c:	f003 0302 	and.w	r3, r3, #2
 800c050:	2b00      	cmp	r3, #0
 800c052:	d01c      	beq.n	800c08e <dmp_set_tap_thresh+0x1f2>
    {
        if (mpu_write_mem(DMP_TAP_THY, 2, tmp))
 800c054:	f107 030c 	add.w	r3, r7, #12
 800c058:	461a      	mov	r2, r3
 800c05a:	2102      	movs	r1, #2
 800c05c:	f44f 70ec 	mov.w	r0, #472	; 0x1d8
 800c060:	f7ff fbbc 	bl	800b7dc <mpu_write_mem>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d002      	beq.n	800c070 <dmp_set_tap_thresh+0x1d4>
            return -1;
 800c06a:	f04f 33ff 	mov.w	r3, #4294967295
 800c06e:	e031      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_40, 2, tmp + 2))
 800c070:	f107 030c 	add.w	r3, r7, #12
 800c074:	3302      	adds	r3, #2
 800c076:	461a      	mov	r2, r3
 800c078:	2102      	movs	r1, #2
 800c07a:	f44f 7094 	mov.w	r0, #296	; 0x128
 800c07e:	f7ff fbad 	bl	800b7dc <mpu_write_mem>
 800c082:	4603      	mov	r3, r0
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <dmp_set_tap_thresh+0x1f2>
            return -1;
 800c088:	f04f 33ff 	mov.w	r3, #4294967295
 800c08c:	e022      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>
    }
    if (axis & TAP_Z)
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	f003 0304 	and.w	r3, r3, #4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01c      	beq.n	800c0d2 <dmp_set_tap_thresh+0x236>
    {
        if (mpu_write_mem(DMP_TAP_THZ, 2, tmp))
 800c098:	f107 030c 	add.w	r3, r7, #12
 800c09c:	461a      	mov	r2, r3
 800c09e:	2102      	movs	r1, #2
 800c0a0:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 800c0a4:	f7ff fb9a 	bl	800b7dc <mpu_write_mem>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <dmp_set_tap_thresh+0x218>
            return -1;
 800c0ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c0b2:	e00f      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>
        if (mpu_write_mem(D_1_44, 2, tmp + 2))
 800c0b4:	f107 030c 	add.w	r3, r7, #12
 800c0b8:	3302      	adds	r3, #2
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	2102      	movs	r1, #2
 800c0be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800c0c2:	f7ff fb8b 	bl	800b7dc <mpu_write_mem>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <dmp_set_tap_thresh+0x236>
            return -1;
 800c0cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d0:	e000      	b.n	800c0d4 <dmp_set_tap_thresh+0x238>
    }
    return 0;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	43480000 	.word	0x43480000
 800c0e0:	46400000 	.word	0x46400000
 800c0e4:	45c00000 	.word	0x45c00000
 800c0e8:	45400000 	.word	0x45400000
 800c0ec:	44c00000 	.word	0x44c00000

0800c0f0 <dmp_set_tap_axes>:
 *  @brief      Set which axes will register a tap.
 *  @param[in]  axis    1, 2, and 4 for XYZ, respectively.
 *  @return     0 if successful.
 */
int dmp_set_tap_axes(unsigned char axis)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp = 0;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	73fb      	strb	r3, [r7, #15]

    if (axis & TAP_X)
 800c0fe:	79fb      	ldrb	r3, [r7, #7]
 800c100:	f003 0301 	and.w	r3, r3, #1
 800c104:	2b00      	cmp	r3, #0
 800c106:	d004      	beq.n	800c112 <dmp_set_tap_axes+0x22>
        tmp |= 0x30;
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Y)
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	f003 0302 	and.w	r3, r3, #2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d004      	beq.n	800c126 <dmp_set_tap_axes+0x36>
        tmp |= 0x0C;
 800c11c:	7bfb      	ldrb	r3, [r7, #15]
 800c11e:	f043 030c 	orr.w	r3, r3, #12
 800c122:	b2db      	uxtb	r3, r3
 800c124:	73fb      	strb	r3, [r7, #15]
    if (axis & TAP_Z)
 800c126:	79fb      	ldrb	r3, [r7, #7]
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d004      	beq.n	800c13a <dmp_set_tap_axes+0x4a>
        tmp |= 0x03;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	f043 0303 	orr.w	r3, r3, #3
 800c136:	b2db      	uxtb	r3, r3
 800c138:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_72, 1, &tmp);
 800c13a:	f107 030f 	add.w	r3, r7, #15
 800c13e:	461a      	mov	r2, r3
 800c140:	2101      	movs	r1, #1
 800c142:	f44f 70a4 	mov.w	r0, #328	; 0x148
 800c146:	f7ff fb49 	bl	800b7dc <mpu_write_mem>
 800c14a:	4603      	mov	r3, r0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3710      	adds	r7, #16
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <dmp_set_tap_count>:
 *  @brief      Set minimum number of taps needed for an interrupt.
 *  @param[in]  min_taps    Minimum consecutive taps (1-4).
 *  @return     0 if successful.
 */
int dmp_set_tap_count(unsigned char min_taps)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	71fb      	strb	r3, [r7, #7]
    unsigned char tmp;

    if (min_taps < 1)
 800c15e:	79fb      	ldrb	r3, [r7, #7]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <dmp_set_tap_count+0x16>
        min_taps = 1;
 800c164:	2301      	movs	r3, #1
 800c166:	71fb      	strb	r3, [r7, #7]
 800c168:	e004      	b.n	800c174 <dmp_set_tap_count+0x20>
    else if (min_taps > 4)
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	d901      	bls.n	800c174 <dmp_set_tap_count+0x20>
        min_taps = 4;
 800c170:	2304      	movs	r3, #4
 800c172:	71fb      	strb	r3, [r7, #7]

    tmp = min_taps - 1;
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	3b01      	subs	r3, #1
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	73fb      	strb	r3, [r7, #15]
    return mpu_write_mem(D_1_79, 1, &tmp);
 800c17c:	f107 030f 	add.w	r3, r7, #15
 800c180:	461a      	mov	r2, r3
 800c182:	2101      	movs	r1, #1
 800c184:	f240 104f 	movw	r0, #335	; 0x14f
 800c188:	f7ff fb28 	bl	800b7dc <mpu_write_mem>
 800c18c:	4603      	mov	r3, r0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <dmp_set_tap_time>:
 *  @brief      Set length between valid taps.
 *  @param[in]  time    Milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time(unsigned short time)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b084      	sub	sp, #16
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800c1a2:	88fb      	ldrh	r3, [r7, #6]
 800c1a4:	4a0c      	ldr	r2, [pc, #48]	; (800c1d8 <dmp_set_tap_time+0x40>)
 800c1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c1aa:	089b      	lsrs	r3, r3, #2
 800c1ac:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800c1ae:	89fb      	ldrh	r3, [r7, #14]
 800c1b0:	0a1b      	lsrs	r3, r3, #8
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800c1b8:	89fb      	ldrh	r3, [r7, #14]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(DMP_TAPW_MIN, 2, tmp);
 800c1be:	f107 030c 	add.w	r3, r7, #12
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	2102      	movs	r1, #2
 800c1c6:	f44f 70ef 	mov.w	r0, #478	; 0x1de
 800c1ca:	f7ff fb07 	bl	800b7dc <mpu_write_mem>
 800c1ce:	4603      	mov	r3, r0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	cccccccd 	.word	0xcccccccd

0800c1dc <dmp_set_tap_time_multi>:
 *  @brief      Set max time between taps to register as a multi-tap.
 *  @param[in]  time    Max milliseconds between taps.
 *  @return     0 if successful.
 */
int dmp_set_tap_time_multi(unsigned short time)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	80fb      	strh	r3, [r7, #6]
    unsigned short dmp_time;
    unsigned char tmp[2];

    dmp_time = time / (1000 / DMP_SAMPLE_RATE);
 800c1e6:	88fb      	ldrh	r3, [r7, #6]
 800c1e8:	4a0c      	ldr	r2, [pc, #48]	; (800c21c <dmp_set_tap_time_multi+0x40>)
 800c1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c1ee:	089b      	lsrs	r3, r3, #2
 800c1f0:	81fb      	strh	r3, [r7, #14]
    tmp[0] = (unsigned char)(dmp_time >> 8);
 800c1f2:	89fb      	ldrh	r3, [r7, #14]
 800c1f4:	0a1b      	lsrs	r3, r3, #8
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)(dmp_time & 0xFF);
 800c1fc:	89fb      	ldrh	r3, [r7, #14]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_218, 2, tmp);
 800c202:	f107 030c 	add.w	r3, r7, #12
 800c206:	461a      	mov	r2, r3
 800c208:	2102      	movs	r1, #2
 800c20a:	f44f 70ed 	mov.w	r0, #474	; 0x1da
 800c20e:	f7ff fae5 	bl	800b7dc <mpu_write_mem>
 800c212:	4603      	mov	r3, r0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	cccccccd 	.word	0xcccccccd

0800c220 <dmp_set_shake_reject_thresh>:
 *  @param[in]  sf      Gyro scale factor.
 *  @param[in]  thresh  Gyro threshold in dps.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_thresh(long sf, unsigned short thresh)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	807b      	strh	r3, [r7, #2]
    unsigned char tmp[4];
    long thresh_scaled = sf / 1000 * thresh;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a13      	ldr	r2, [pc, #76]	; (800c27c <dmp_set_shake_reject_thresh+0x5c>)
 800c230:	fb82 1203 	smull	r1, r2, r2, r3
 800c234:	1192      	asrs	r2, r2, #6
 800c236:	17db      	asrs	r3, r3, #31
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	887a      	ldrh	r2, [r7, #2]
 800c23c:	fb02 f303 	mul.w	r3, r2, r3
 800c240:	60fb      	str	r3, [r7, #12]
    tmp[0] = (unsigned char)(((long)thresh_scaled >> 24) & 0xFF);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	161b      	asrs	r3, r3, #24
 800c246:	b2db      	uxtb	r3, r3
 800c248:	723b      	strb	r3, [r7, #8]
    tmp[1] = (unsigned char)(((long)thresh_scaled >> 16) & 0xFF);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	141b      	asrs	r3, r3, #16
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	727b      	strb	r3, [r7, #9]
    tmp[2] = (unsigned char)(((long)thresh_scaled >> 8) & 0xFF);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	121b      	asrs	r3, r3, #8
 800c256:	b2db      	uxtb	r3, r3
 800c258:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (unsigned char)((long)thresh_scaled & 0xFF);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	72fb      	strb	r3, [r7, #11]
    return mpu_write_mem(D_1_92, 4, tmp);
 800c260:	f107 0308 	add.w	r3, r7, #8
 800c264:	461a      	mov	r2, r3
 800c266:	2104      	movs	r1, #4
 800c268:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800c26c:	f7ff fab6 	bl	800b7dc <mpu_write_mem>
 800c270:	4603      	mov	r3, r0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	10624dd3 	.word	0x10624dd3

0800c280 <dmp_set_shake_reject_time>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_time(unsigned short time)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	4a0c      	ldr	r2, [pc, #48]	; (800c2c0 <dmp_set_shake_reject_time+0x40>)
 800c28e:	fba2 2303 	umull	r2, r3, r2, r3
 800c292:	089b      	lsrs	r3, r3, #2
 800c294:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800c296:	88fb      	ldrh	r3, [r7, #6]
 800c298:	0a1b      	lsrs	r3, r3, #8
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800c2a0:	88fb      	ldrh	r3, [r7, #6]
 800c2a2:	b2db      	uxtb	r3, r3
 800c2a4:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_90, 2, tmp);
 800c2a6:	f107 030c 	add.w	r3, r7, #12
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	f44f 70ad 	mov.w	r0, #346	; 0x15a
 800c2b2:	f7ff fa93 	bl	800b7dc <mpu_write_mem>
 800c2b6:	4603      	mov	r3, r0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	cccccccd 	.word	0xcccccccd

0800c2c4 <dmp_set_shake_reject_timeout>:
 *  60 ms is added to this parameter.
 *  @param[in]  time    Time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_set_shake_reject_timeout(unsigned short time)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	80fb      	strh	r3, [r7, #6]
    unsigned char tmp[2];

    time /= (1000 / DMP_SAMPLE_RATE);
 800c2ce:	88fb      	ldrh	r3, [r7, #6]
 800c2d0:	4a0c      	ldr	r2, [pc, #48]	; (800c304 <dmp_set_shake_reject_timeout+0x40>)
 800c2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d6:	089b      	lsrs	r3, r3, #2
 800c2d8:	80fb      	strh	r3, [r7, #6]
    tmp[0] = time >> 8;
 800c2da:	88fb      	ldrh	r3, [r7, #6]
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	733b      	strb	r3, [r7, #12]
    tmp[1] = time & 0xFF;
 800c2e4:	88fb      	ldrh	r3, [r7, #6]
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	737b      	strb	r3, [r7, #13]
    return mpu_write_mem(D_1_88, 2, tmp);
 800c2ea:	f107 030c 	add.w	r3, r7, #12
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	2102      	movs	r1, #2
 800c2f2:	f44f 70ac 	mov.w	r0, #344	; 0x158
 800c2f6:	f7ff fa71 	bl	800b7dc <mpu_write_mem>
 800c2fa:	4603      	mov	r3, r0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	cccccccd 	.word	0xcccccccd

0800c308 <dmp_get_pedometer_step_count>:
 *  @brief      Get current step count.
 *  @param[out] count   Number of steps detected.
 *  @return     0 if successful.
 */
int dmp_get_pedometer_step_count(unsigned long *count)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4];
    if (!count)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d102      	bne.n	800c31c <dmp_get_pedometer_step_count+0x14>
        return -1;
 800c316:	f04f 33ff 	mov.w	r3, #4294967295
 800c31a:	e01a      	b.n	800c352 <dmp_get_pedometer_step_count+0x4a>

    if (mpu_read_mem(D_PEDSTD_STEPCTR, 4, tmp))
 800c31c:	f107 030c 	add.w	r3, r7, #12
 800c320:	461a      	mov	r2, r3
 800c322:	2104      	movs	r1, #4
 800c324:	f44f 7058 	mov.w	r0, #864	; 0x360
 800c328:	f7ff faaa 	bl	800b880 <mpu_read_mem>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d002      	beq.n	800c338 <dmp_get_pedometer_step_count+0x30>
        return -1;
 800c332:	f04f 33ff 	mov.w	r3, #4294967295
 800c336:	e00c      	b.n	800c352 <dmp_get_pedometer_step_count+0x4a>

    count[0] = ((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) | ((unsigned long)tmp[2] << 8) | tmp[3];
 800c338:	7b3b      	ldrb	r3, [r7, #12]
 800c33a:	061a      	lsls	r2, r3, #24
 800c33c:	7b7b      	ldrb	r3, [r7, #13]
 800c33e:	041b      	lsls	r3, r3, #16
 800c340:	431a      	orrs	r2, r3
 800c342:	7bbb      	ldrb	r3, [r7, #14]
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	4313      	orrs	r3, r2
 800c348:	7bfa      	ldrb	r2, [r7, #15]
 800c34a:	431a      	orrs	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	601a      	str	r2, [r3, #0]
    return 0;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <dmp_get_pedometer_walk_time>:
 *  @brief      Get duration of walking time.
 *  @param[in]  time    Walk time in milliseconds.
 *  @return     0 if successful.
 */
int dmp_get_pedometer_walk_time(unsigned long *time)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b084      	sub	sp, #16
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
    unsigned char tmp[4];
    if (!time)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d102      	bne.n	800c36e <dmp_get_pedometer_walk_time+0x14>
        return -1;
 800c368:	f04f 33ff 	mov.w	r3, #4294967295
 800c36c:	e01f      	b.n	800c3ae <dmp_get_pedometer_walk_time+0x54>

    if (mpu_read_mem(D_PEDSTD_TIMECTR, 4, tmp))
 800c36e:	f107 030c 	add.w	r3, r7, #12
 800c372:	461a      	mov	r2, r3
 800c374:	2104      	movs	r1, #4
 800c376:	f44f 7071 	mov.w	r0, #964	; 0x3c4
 800c37a:	f7ff fa81 	bl	800b880 <mpu_read_mem>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d002      	beq.n	800c38a <dmp_get_pedometer_walk_time+0x30>
        return -1;
 800c384:	f04f 33ff 	mov.w	r3, #4294967295
 800c388:	e011      	b.n	800c3ae <dmp_get_pedometer_walk_time+0x54>

    time[0] =
        (((unsigned long)tmp[0] << 24) | ((unsigned long)tmp[1] << 16) | ((unsigned long)tmp[2] << 8) | tmp[3]) * 20;
 800c38a:	7b3b      	ldrb	r3, [r7, #12]
 800c38c:	061a      	lsls	r2, r3, #24
 800c38e:	7b7b      	ldrb	r3, [r7, #13]
 800c390:	041b      	lsls	r3, r3, #16
 800c392:	431a      	orrs	r2, r3
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	021b      	lsls	r3, r3, #8
 800c398:	4313      	orrs	r3, r2
 800c39a:	7bfa      	ldrb	r2, [r7, #15]
 800c39c:	431a      	orrs	r2, r3
 800c39e:	4613      	mov	r3, r2
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	461a      	mov	r2, r3
    time[0] =
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	601a      	str	r2, [r3, #0]
    return 0;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
	...

0800c3b8 <dmp_enable_feature>:
 *  mutually exclusive.
 *  @param[in]  mask    Mask of features to enable.
 *  @return     0 if successful.
 */
int dmp_enable_feature(unsigned short mask)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	4603      	mov	r3, r0
 800c3c0:	80fb      	strh	r3, [r7, #6]

    /* TODO: All of these settings can probably be integrated into the default
     * DMP image.
     */
    /* Set integration scale factor. */
    tmp[0] = (unsigned char)((GYRO_SF >> 24) & 0xFF);
 800c3c2:	2302      	movs	r3, #2
 800c3c4:	733b      	strb	r3, [r7, #12]
    tmp[1] = (unsigned char)((GYRO_SF >> 16) & 0xFF);
 800c3c6:	23ca      	movs	r3, #202	; 0xca
 800c3c8:	737b      	strb	r3, [r7, #13]
    tmp[2] = (unsigned char)((GYRO_SF >> 8) & 0xFF);
 800c3ca:	23e3      	movs	r3, #227	; 0xe3
 800c3cc:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (unsigned char)(GYRO_SF & 0xFF);
 800c3ce:	2309      	movs	r3, #9
 800c3d0:	73fb      	strb	r3, [r7, #15]
    mpu_write_mem(D_0_104, 4, tmp);
 800c3d2:	f107 030c 	add.w	r3, r7, #12
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	2104      	movs	r1, #4
 800c3da:	2068      	movs	r0, #104	; 0x68
 800c3dc:	f7ff f9fe 	bl	800b7dc <mpu_write_mem>

    /* Send sensor data to the FIFO. */
    tmp[0] = 0xA3;
 800c3e0:	23a3      	movs	r3, #163	; 0xa3
 800c3e2:	733b      	strb	r3, [r7, #12]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800c3e4:	88fb      	ldrh	r3, [r7, #6]
 800c3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d006      	beq.n	800c3fc <dmp_enable_feature+0x44>
    {
        tmp[1] = 0xC0;
 800c3ee:	23c0      	movs	r3, #192	; 0xc0
 800c3f0:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xC8;
 800c3f2:	23c8      	movs	r3, #200	; 0xc8
 800c3f4:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xC2;
 800c3f6:	23c2      	movs	r3, #194	; 0xc2
 800c3f8:	73fb      	strb	r3, [r7, #15]
 800c3fa:	e005      	b.n	800c408 <dmp_enable_feature+0x50>
    }
    else
    {
        tmp[1] = 0xA3;
 800c3fc:	23a3      	movs	r3, #163	; 0xa3
 800c3fe:	737b      	strb	r3, [r7, #13]
        tmp[2] = 0xA3;
 800c400:	23a3      	movs	r3, #163	; 0xa3
 800c402:	73bb      	strb	r3, [r7, #14]
        tmp[3] = 0xA3;
 800c404:	23a3      	movs	r3, #163	; 0xa3
 800c406:	73fb      	strb	r3, [r7, #15]
    }
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800c408:	88fb      	ldrh	r3, [r7, #6]
 800c40a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d006      	beq.n	800c420 <dmp_enable_feature+0x68>
    {
        tmp[4] = 0xC4;
 800c412:	23c4      	movs	r3, #196	; 0xc4
 800c414:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xCC;
 800c416:	23cc      	movs	r3, #204	; 0xcc
 800c418:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xC6;
 800c41a:	23c6      	movs	r3, #198	; 0xc6
 800c41c:	74bb      	strb	r3, [r7, #18]
 800c41e:	e005      	b.n	800c42c <dmp_enable_feature+0x74>
    }
    else
    {
        tmp[4] = 0xA3;
 800c420:	23a3      	movs	r3, #163	; 0xa3
 800c422:	743b      	strb	r3, [r7, #16]
        tmp[5] = 0xA3;
 800c424:	23a3      	movs	r3, #163	; 0xa3
 800c426:	747b      	strb	r3, [r7, #17]
        tmp[6] = 0xA3;
 800c428:	23a3      	movs	r3, #163	; 0xa3
 800c42a:	74bb      	strb	r3, [r7, #18]
    }
    tmp[7] = 0xA3;
 800c42c:	23a3      	movs	r3, #163	; 0xa3
 800c42e:	74fb      	strb	r3, [r7, #19]
    tmp[8] = 0xA3;
 800c430:	23a3      	movs	r3, #163	; 0xa3
 800c432:	753b      	strb	r3, [r7, #20]
    tmp[9] = 0xA3;
 800c434:	23a3      	movs	r3, #163	; 0xa3
 800c436:	757b      	strb	r3, [r7, #21]
    mpu_write_mem(CFG_15, 10, tmp);
 800c438:	f107 030c 	add.w	r3, r7, #12
 800c43c:	461a      	mov	r2, r3
 800c43e:	210a      	movs	r1, #10
 800c440:	f640 20a7 	movw	r0, #2727	; 0xaa7
 800c444:	f7ff f9ca 	bl	800b7dc <mpu_write_mem>

    /* Send gesture data to the FIFO. */
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800c448:	88fb      	ldrh	r3, [r7, #6]
 800c44a:	f003 0303 	and.w	r3, r3, #3
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <dmp_enable_feature+0xa0>
        tmp[0] = DINA20;
 800c452:	2320      	movs	r3, #32
 800c454:	733b      	strb	r3, [r7, #12]
 800c456:	e001      	b.n	800c45c <dmp_enable_feature+0xa4>
    else
        tmp[0] = 0xD8;
 800c458:	23d8      	movs	r3, #216	; 0xd8
 800c45a:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_27, 1, tmp);
 800c45c:	f107 030c 	add.w	r3, r7, #12
 800c460:	461a      	mov	r2, r3
 800c462:	2101      	movs	r1, #1
 800c464:	f640 20b6 	movw	r0, #2742	; 0xab6
 800c468:	f7ff f9b8 	bl	800b7dc <mpu_write_mem>

    if (mask & DMP_FEATURE_GYRO_CAL)
 800c46c:	88fb      	ldrh	r3, [r7, #6]
 800c46e:	f003 0320 	and.w	r3, r3, #32
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <dmp_enable_feature+0xc6>
        dmp_enable_gyro_cal(1);
 800c476:	2001      	movs	r0, #1
 800c478:	f000 f8c6 	bl	800c608 <dmp_enable_gyro_cal>
 800c47c:	e002      	b.n	800c484 <dmp_enable_feature+0xcc>
    else
        dmp_enable_gyro_cal(0);
 800c47e:	2000      	movs	r0, #0
 800c480:	f000 f8c2 	bl	800c608 <dmp_enable_gyro_cal>

    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800c484:	88fb      	ldrh	r3, [r7, #6]
 800c486:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d01d      	beq.n	800c4ca <dmp_enable_feature+0x112>
    {
        if (mask & DMP_FEATURE_SEND_CAL_GYRO)
 800c48e:	88fb      	ldrh	r3, [r7, #6]
 800c490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c494:	2b00      	cmp	r3, #0
 800c496:	d008      	beq.n	800c4aa <dmp_enable_feature+0xf2>
        {
            tmp[0] = 0xB2;
 800c498:	23b2      	movs	r3, #178	; 0xb2
 800c49a:	733b      	strb	r3, [r7, #12]
            tmp[1] = 0x8B;
 800c49c:	238b      	movs	r3, #139	; 0x8b
 800c49e:	737b      	strb	r3, [r7, #13]
            tmp[2] = 0xB6;
 800c4a0:	23b6      	movs	r3, #182	; 0xb6
 800c4a2:	73bb      	strb	r3, [r7, #14]
            tmp[3] = 0x9B;
 800c4a4:	239b      	movs	r3, #155	; 0x9b
 800c4a6:	73fb      	strb	r3, [r7, #15]
 800c4a8:	e007      	b.n	800c4ba <dmp_enable_feature+0x102>
        }
        else
        {
            tmp[0] = DINAC0;
 800c4aa:	23b0      	movs	r3, #176	; 0xb0
 800c4ac:	733b      	strb	r3, [r7, #12]
            tmp[1] = DINA80;
 800c4ae:	2380      	movs	r3, #128	; 0x80
 800c4b0:	737b      	strb	r3, [r7, #13]
            tmp[2] = DINAC2;
 800c4b2:	23b4      	movs	r3, #180	; 0xb4
 800c4b4:	73bb      	strb	r3, [r7, #14]
            tmp[3] = DINA90;
 800c4b6:	2390      	movs	r3, #144	; 0x90
 800c4b8:	73fb      	strb	r3, [r7, #15]
        }
        mpu_write_mem(CFG_GYRO_RAW_DATA, 4, tmp);
 800c4ba:	f107 030c 	add.w	r3, r7, #12
 800c4be:	461a      	mov	r2, r3
 800c4c0:	2104      	movs	r1, #4
 800c4c2:	f640 20a2 	movw	r0, #2722	; 0xaa2
 800c4c6:	f7ff f989 	bl	800b7dc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_TAP)
 800c4ca:	88fb      	ldrh	r3, [r7, #6]
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d025      	beq.n	800c520 <dmp_enable_feature+0x168>
    {
        /* Enable tap. */
        tmp[0] = 0xF8;
 800c4d4:	23f8      	movs	r3, #248	; 0xf8
 800c4d6:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800c4d8:	f107 030c 	add.w	r3, r7, #12
 800c4dc:	461a      	mov	r2, r3
 800c4de:	2101      	movs	r1, #1
 800c4e0:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800c4e4:	f7ff f97a 	bl	800b7dc <mpu_write_mem>
        dmp_set_tap_thresh(TAP_XYZ, 250);
 800c4e8:	21fa      	movs	r1, #250	; 0xfa
 800c4ea:	2007      	movs	r0, #7
 800c4ec:	f7ff fcd6 	bl	800be9c <dmp_set_tap_thresh>
        dmp_set_tap_axes(TAP_XYZ);
 800c4f0:	2007      	movs	r0, #7
 800c4f2:	f7ff fdfd 	bl	800c0f0 <dmp_set_tap_axes>
        dmp_set_tap_count(1);
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	f7ff fe2c 	bl	800c154 <dmp_set_tap_count>
        dmp_set_tap_time(100);
 800c4fc:	2064      	movs	r0, #100	; 0x64
 800c4fe:	f7ff fe4b 	bl	800c198 <dmp_set_tap_time>
        dmp_set_tap_time_multi(500);
 800c502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c506:	f7ff fe69 	bl	800c1dc <dmp_set_tap_time_multi>

        dmp_set_shake_reject_thresh(GYRO_SF, 200);
 800c50a:	21c8      	movs	r1, #200	; 0xc8
 800c50c:	483c      	ldr	r0, [pc, #240]	; (800c600 <dmp_enable_feature+0x248>)
 800c50e:	f7ff fe87 	bl	800c220 <dmp_set_shake_reject_thresh>
        dmp_set_shake_reject_time(40);
 800c512:	2028      	movs	r0, #40	; 0x28
 800c514:	f7ff feb4 	bl	800c280 <dmp_set_shake_reject_time>
        dmp_set_shake_reject_timeout(10);
 800c518:	200a      	movs	r0, #10
 800c51a:	f7ff fed3 	bl	800c2c4 <dmp_set_shake_reject_timeout>
 800c51e:	e009      	b.n	800c534 <dmp_enable_feature+0x17c>
    }
    else
    {
        tmp[0] = 0xD8;
 800c520:	23d8      	movs	r3, #216	; 0xd8
 800c522:	733b      	strb	r3, [r7, #12]
        mpu_write_mem(CFG_20, 1, tmp);
 800c524:	f107 030c 	add.w	r3, r7, #12
 800c528:	461a      	mov	r2, r3
 800c52a:	2101      	movs	r1, #1
 800c52c:	f44f 600b 	mov.w	r0, #2224	; 0x8b0
 800c530:	f7ff f954 	bl	800b7dc <mpu_write_mem>
    }

    if (mask & DMP_FEATURE_ANDROID_ORIENT)
 800c534:	88fb      	ldrh	r3, [r7, #6]
 800c536:	f003 0302 	and.w	r3, r3, #2
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d002      	beq.n	800c544 <dmp_enable_feature+0x18c>
    {
        tmp[0] = 0xD9;
 800c53e:	23d9      	movs	r3, #217	; 0xd9
 800c540:	733b      	strb	r3, [r7, #12]
 800c542:	e001      	b.n	800c548 <dmp_enable_feature+0x190>
    }
    else
        tmp[0] = 0xD8;
 800c544:	23d8      	movs	r3, #216	; 0xd8
 800c546:	733b      	strb	r3, [r7, #12]
    mpu_write_mem(CFG_ANDROID_ORIENT_INT, 1, tmp);
 800c548:	f107 030c 	add.w	r3, r7, #12
 800c54c:	461a      	mov	r2, r3
 800c54e:	2101      	movs	r1, #1
 800c550:	f240 703d 	movw	r0, #1853	; 0x73d
 800c554:	f7ff f942 	bl	800b7dc <mpu_write_mem>

    if (mask & DMP_FEATURE_LP_QUAT)
 800c558:	88fb      	ldrh	r3, [r7, #6]
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d003      	beq.n	800c56a <dmp_enable_feature+0x1b2>
        dmp_enable_lp_quat(1);
 800c562:	2001      	movs	r0, #1
 800c564:	f000 f880 	bl	800c668 <dmp_enable_lp_quat>
 800c568:	e002      	b.n	800c570 <dmp_enable_feature+0x1b8>
    else
        dmp_enable_lp_quat(0);
 800c56a:	2000      	movs	r0, #0
 800c56c:	f000 f87c 	bl	800c668 <dmp_enable_lp_quat>

    if (mask & DMP_FEATURE_6X_LP_QUAT)
 800c570:	88fb      	ldrh	r3, [r7, #6]
 800c572:	f003 0310 	and.w	r3, r3, #16
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <dmp_enable_feature+0x1ca>
        dmp_enable_6x_lp_quat(1);
 800c57a:	2001      	movs	r0, #1
 800c57c:	f000 f89b 	bl	800c6b6 <dmp_enable_6x_lp_quat>
 800c580:	e002      	b.n	800c588 <dmp_enable_feature+0x1d0>
    else
        dmp_enable_6x_lp_quat(0);
 800c582:	2000      	movs	r0, #0
 800c584:	f000 f897 	bl	800c6b6 <dmp_enable_6x_lp_quat>

    /* Pedometer is always enabled. */
    dmp.feature_mask = mask | DMP_FEATURE_PEDOMETER;
 800c588:	88fb      	ldrh	r3, [r7, #6]
 800c58a:	f043 0308 	orr.w	r3, r3, #8
 800c58e:	b29a      	uxth	r2, r3
 800c590:	4b1c      	ldr	r3, [pc, #112]	; (800c604 <dmp_enable_feature+0x24c>)
 800c592:	815a      	strh	r2, [r3, #10]
    mpu_reset_fifo();
 800c594:	f7fe fb7c 	bl	800ac90 <mpu_reset_fifo>

    dmp.packet_length = 0;
 800c598:	4b1a      	ldr	r3, [pc, #104]	; (800c604 <dmp_enable_feature+0x24c>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800c59e:	88fb      	ldrh	r3, [r7, #6]
 800c5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d005      	beq.n	800c5b4 <dmp_enable_feature+0x1fc>
        dmp.packet_length += 6;
 800c5a8:	4b16      	ldr	r3, [pc, #88]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5aa:	7b9b      	ldrb	r3, [r3, #14]
 800c5ac:	3306      	adds	r3, #6
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	4b14      	ldr	r3, [pc, #80]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5b2:	739a      	strb	r2, [r3, #14]
    if (mask & DMP_FEATURE_SEND_ANY_GYRO)
 800c5b4:	88fb      	ldrh	r3, [r7, #6]
 800c5b6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d005      	beq.n	800c5ca <dmp_enable_feature+0x212>
        dmp.packet_length += 6;
 800c5be:	4b11      	ldr	r3, [pc, #68]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5c0:	7b9b      	ldrb	r3, [r3, #14]
 800c5c2:	3306      	adds	r3, #6
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	4b0f      	ldr	r3, [pc, #60]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5c8:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800c5ca:	88fb      	ldrh	r3, [r7, #6]
 800c5cc:	f003 0314 	and.w	r3, r3, #20
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d005      	beq.n	800c5e0 <dmp_enable_feature+0x228>
        dmp.packet_length += 16;
 800c5d4:	4b0b      	ldr	r3, [pc, #44]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5d6:	7b9b      	ldrb	r3, [r3, #14]
 800c5d8:	3310      	adds	r3, #16
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	4b09      	ldr	r3, [pc, #36]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5de:	739a      	strb	r2, [r3, #14]
    if (mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800c5e0:	88fb      	ldrh	r3, [r7, #6]
 800c5e2:	f003 0303 	and.w	r3, r3, #3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d005      	beq.n	800c5f6 <dmp_enable_feature+0x23e>
        dmp.packet_length += 4;
 800c5ea:	4b06      	ldr	r3, [pc, #24]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5ec:	7b9b      	ldrb	r3, [r3, #14]
 800c5ee:	3304      	adds	r3, #4
 800c5f0:	b2da      	uxtb	r2, r3
 800c5f2:	4b04      	ldr	r3, [pc, #16]	; (800c604 <dmp_enable_feature+0x24c>)
 800c5f4:	739a      	strb	r2, [r3, #14]

    return 0;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}
 800c600:	02cae309 	.word	0x02cae309
 800c604:	20000584 	.word	0x20000584

0800c608 <dmp_enable_gyro_cal>:
 *  subtracted from the gyro output.
 *  @param[in]  enable  1 to enable gyro calibration.
 *  @return     0 if successful.
 */
int dmp_enable_gyro_cal(unsigned char enable)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b088      	sub	sp, #32
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	71fb      	strb	r3, [r7, #7]
    if (enable)
 800c612:	79fb      	ldrb	r3, [r7, #7]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00f      	beq.n	800c638 <dmp_enable_gyro_cal+0x30>
    {
        unsigned char regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 800c618:	4a11      	ldr	r2, [pc, #68]	; (800c660 <dmp_enable_gyro_cal+0x58>)
 800c61a:	f107 0314 	add.w	r3, r7, #20
 800c61e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c620:	c303      	stmia	r3!, {r0, r1}
 800c622:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800c624:	f107 0314 	add.w	r3, r7, #20
 800c628:	461a      	mov	r2, r3
 800c62a:	2109      	movs	r1, #9
 800c62c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800c630:	f7ff f8d4 	bl	800b7dc <mpu_write_mem>
 800c634:	4603      	mov	r3, r0
 800c636:	e00e      	b.n	800c656 <dmp_enable_gyro_cal+0x4e>
    }
    else
    {
        unsigned char regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 800c638:	4a0a      	ldr	r2, [pc, #40]	; (800c664 <dmp_enable_gyro_cal+0x5c>)
 800c63a:	f107 0308 	add.w	r3, r7, #8
 800c63e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c640:	c303      	stmia	r3!, {r0, r1}
 800c642:	701a      	strb	r2, [r3, #0]
        return mpu_write_mem(CFG_MOTION_BIAS, 9, regs);
 800c644:	f107 0308 	add.w	r3, r7, #8
 800c648:	461a      	mov	r2, r3
 800c64a:	2109      	movs	r1, #9
 800c64c:	f44f 6097 	mov.w	r0, #1208	; 0x4b8
 800c650:	f7ff f8c4 	bl	800b7dc <mpu_write_mem>
 800c654:	4603      	mov	r3, r0
    }
}
 800c656:	4618      	mov	r0, r3
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	0801612c 	.word	0x0801612c
 800c664:	08016138 	.word	0x08016138

0800c668 <dmp_enable_lp_quat>:
 *  exclusive.
 *  @param[in]  enable  1 to enable 3-axis quaternion.
 *  @return     0 if successful.
 */
int dmp_enable_lp_quat(unsigned char enable)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	4603      	mov	r3, r0
 800c670:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable)
 800c672:	79fb      	ldrb	r3, [r7, #7]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d008      	beq.n	800c68a <dmp_enable_lp_quat+0x22>
    {
        regs[0] = DINBC0;
 800c678:	23c0      	movs	r3, #192	; 0xc0
 800c67a:	733b      	strb	r3, [r7, #12]
        regs[1] = DINBC2;
 800c67c:	23c2      	movs	r3, #194	; 0xc2
 800c67e:	737b      	strb	r3, [r7, #13]
        regs[2] = DINBC4;
 800c680:	23c4      	movs	r3, #196	; 0xc4
 800c682:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINBC6;
 800c684:	23c6      	movs	r3, #198	; 0xc6
 800c686:	73fb      	strb	r3, [r7, #15]
 800c688:	e006      	b.n	800c698 <dmp_enable_lp_quat+0x30>
    }
    else
        memset(regs, 0x8B, 4);
 800c68a:	f107 030c 	add.w	r3, r7, #12
 800c68e:	2204      	movs	r2, #4
 800c690:	218b      	movs	r1, #139	; 0x8b
 800c692:	4618      	mov	r0, r3
 800c694:	f003 ffcb 	bl	801062e <memset>

    mpu_write_mem(CFG_LP_QUAT, 4, regs);
 800c698:	f107 030c 	add.w	r3, r7, #12
 800c69c:	461a      	mov	r2, r3
 800c69e:	2104      	movs	r1, #4
 800c6a0:	f640 2098 	movw	r0, #2712	; 0xa98
 800c6a4:	f7ff f89a 	bl	800b7dc <mpu_write_mem>

    return mpu_reset_fifo();
 800c6a8:	f7fe faf2 	bl	800ac90 <mpu_reset_fifo>
 800c6ac:	4603      	mov	r3, r0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <dmp_enable_6x_lp_quat>:
 *  exclusive.
 *  @param[in]   enable  1 to enable 6-axis quaternion.
 *  @return      0 if successful.
 */
int dmp_enable_6x_lp_quat(unsigned char enable)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b084      	sub	sp, #16
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	4603      	mov	r3, r0
 800c6be:	71fb      	strb	r3, [r7, #7]
    unsigned char regs[4];
    if (enable)
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d008      	beq.n	800c6d8 <dmp_enable_6x_lp_quat+0x22>
    {
        regs[0] = DINA20;
 800c6c6:	2320      	movs	r3, #32
 800c6c8:	733b      	strb	r3, [r7, #12]
        regs[1] = DINA28;
 800c6ca:	2328      	movs	r3, #40	; 0x28
 800c6cc:	737b      	strb	r3, [r7, #13]
        regs[2] = DINA30;
 800c6ce:	2330      	movs	r3, #48	; 0x30
 800c6d0:	73bb      	strb	r3, [r7, #14]
        regs[3] = DINA38;
 800c6d2:	2338      	movs	r3, #56	; 0x38
 800c6d4:	73fb      	strb	r3, [r7, #15]
 800c6d6:	e006      	b.n	800c6e6 <dmp_enable_6x_lp_quat+0x30>
    }
    else
        memset(regs, 0xA3, 4);
 800c6d8:	f107 030c 	add.w	r3, r7, #12
 800c6dc:	2204      	movs	r2, #4
 800c6de:	21a3      	movs	r1, #163	; 0xa3
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f003 ffa4 	bl	801062e <memset>

    mpu_write_mem(CFG_8, 4, regs);
 800c6e6:	f107 030c 	add.w	r3, r7, #12
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	2104      	movs	r1, #4
 800c6ee:	f640 209e 	movw	r0, #2718	; 0xa9e
 800c6f2:	f7ff f873 	bl	800b7dc <mpu_write_mem>

    return mpu_reset_fifo();
 800c6f6:	f7fe facb 	bl	800ac90 <mpu_reset_fifo>
 800c6fa:	4603      	mov	r3, r0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3710      	adds	r7, #16
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <decode_gesture>:
 *  @brief      Decode the four-byte gesture data and execute any callbacks.
 *  @param[in]  gesture Gesture data from DMP packet.
 *  @return     0 if successful.
 */
static int decode_gesture(unsigned char *gesture)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b084      	sub	sp, #16
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
    unsigned char tap, android_orient;

    android_orient = gesture[3] & 0xC0;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3303      	adds	r3, #3
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800c716:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	3303      	adds	r3, #3
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c722:	73bb      	strb	r3, [r7, #14]

    if (gesture[1] & INT_SRC_TAP)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	3301      	adds	r3, #1
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d012      	beq.n	800c758 <decode_gesture+0x54>
    {
        unsigned char direction, count;
        direction = tap >> 3;
 800c732:	7bbb      	ldrb	r3, [r7, #14]
 800c734:	08db      	lsrs	r3, r3, #3
 800c736:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;
 800c738:	7bbb      	ldrb	r3, [r7, #14]
 800c73a:	f003 0307 	and.w	r3, r3, #7
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	3301      	adds	r3, #1
 800c742:	733b      	strb	r3, [r7, #12]
        if (dmp.tap_cb)
 800c744:	4b10      	ldr	r3, [pc, #64]	; (800c788 <decode_gesture+0x84>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d005      	beq.n	800c758 <decode_gesture+0x54>
            dmp.tap_cb(direction, count);
 800c74c:	4b0e      	ldr	r3, [pc, #56]	; (800c788 <decode_gesture+0x84>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	7b39      	ldrb	r1, [r7, #12]
 800c752:	7b7a      	ldrb	r2, [r7, #13]
 800c754:	4610      	mov	r0, r2
 800c756:	4798      	blx	r3
    }

    if (gesture[1] & INT_SRC_ANDROID_ORIENT)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3301      	adds	r3, #1
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	f003 0308 	and.w	r3, r3, #8
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <decode_gesture+0x78>
    {
        if (dmp.android_orient_cb)
 800c766:	4b08      	ldr	r3, [pc, #32]	; (800c788 <decode_gesture+0x84>)
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d006      	beq.n	800c77c <decode_gesture+0x78>
            dmp.android_orient_cb(android_orient >> 6);
 800c76e:	4b06      	ldr	r3, [pc, #24]	; (800c788 <decode_gesture+0x84>)
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	7bfa      	ldrb	r2, [r7, #15]
 800c774:	0992      	lsrs	r2, r2, #6
 800c776:	b2d2      	uxtb	r2, r2
 800c778:	4610      	mov	r0, r2
 800c77a:	4798      	blx	r3
    }

    return 0;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	20000584 	.word	0x20000584

0800c78c <dmp_read_fifo>:
 *  @param[out] sensors     Mask of sensors read from FIFO.
 *  @param[out] more        Number of remaining packets.
 *  @return     0 if successful.
 */
int dmp_read_fifo(short *gyro, short *accel, long *quat, unsigned long *timestamp, short *sensors, unsigned char *more)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b092      	sub	sp, #72	; 0x48
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
    unsigned char fifo_data[MAX_PACKET_LENGTH];
    unsigned char ii = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* TODO: sensors[0] only changes when dmp_enable_feature is called. We can
     * cache this value and save some cycles.
     */
    sensors[0] = 0;
 800c7a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	801a      	strh	r2, [r3, #0]

    /* Get a packet. */
    if (mpu_read_fifo_stream(dmp.packet_length, fifo_data, more))
 800c7a6:	4bb4      	ldr	r3, [pc, #720]	; (800ca78 <dmp_read_fifo+0x2ec>)
 800c7a8:	7b9b      	ldrb	r3, [r3, #14]
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	f107 0120 	add.w	r1, r7, #32
 800c7b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe fe8a 	bl	800b4cc <mpu_read_fifo_stream>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <dmp_read_fifo+0x38>
        return -1;
 800c7be:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c2:	e154      	b.n	800ca6e <dmp_read_fifo+0x2e2>

    /* Parse DMP packet. */
    if (dmp.feature_mask & (DMP_FEATURE_LP_QUAT | DMP_FEATURE_6X_LP_QUAT))
 800c7c4:	4bac      	ldr	r3, [pc, #688]	; (800ca78 <dmp_read_fifo+0x2ec>)
 800c7c6:	895b      	ldrh	r3, [r3, #10]
 800c7c8:	f003 0314 	and.w	r3, r3, #20
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 808a 	beq.w	800c8e6 <dmp_read_fifo+0x15a>
    {
#ifdef FIFO_CORRUPTION_CHECK
        long quat_q14[4], quat_mag_sq;
#endif
        quat[0] = ((long)fifo_data[0] << 24) | ((long)fifo_data[1] << 16) | ((long)fifo_data[2] << 8) | fifo_data[3];
 800c7d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c7d6:	061a      	lsls	r2, r3, #24
 800c7d8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c7dc:	041b      	lsls	r3, r3, #16
 800c7de:	431a      	orrs	r2, r3
 800c7e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c7e4:	021b      	lsls	r3, r3, #8
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	601a      	str	r2, [r3, #0]
        quat[1] = ((long)fifo_data[4] << 24) | ((long)fifo_data[5] << 16) | ((long)fifo_data[6] << 8) | fifo_data[7];
 800c7f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c7f6:	061a      	lsls	r2, r3, #24
 800c7f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c7fc:	041b      	lsls	r3, r3, #16
 800c7fe:	431a      	orrs	r2, r3
 800c800:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c804:	021b      	lsls	r3, r3, #8
 800c806:	431a      	orrs	r2, r3
 800c808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c80c:	4619      	mov	r1, r3
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3304      	adds	r3, #4
 800c812:	430a      	orrs	r2, r1
 800c814:	601a      	str	r2, [r3, #0]
        quat[2] = ((long)fifo_data[8] << 24) | ((long)fifo_data[9] << 16) | ((long)fifo_data[10] << 8) | fifo_data[11];
 800c816:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c81a:	061a      	lsls	r2, r3, #24
 800c81c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c820:	041b      	lsls	r3, r3, #16
 800c822:	431a      	orrs	r2, r3
 800c824:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	431a      	orrs	r2, r3
 800c82c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c830:	4619      	mov	r1, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	3308      	adds	r3, #8
 800c836:	430a      	orrs	r2, r1
 800c838:	601a      	str	r2, [r3, #0]
        quat[3] =
            ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) | ((long)fifo_data[14] << 8) | fifo_data[15];
 800c83a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c83e:	061a      	lsls	r2, r3, #24
 800c840:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c844:	041b      	lsls	r3, r3, #16
 800c846:	431a      	orrs	r2, r3
 800c848:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c84c:	021b      	lsls	r3, r3, #8
 800c84e:	431a      	orrs	r2, r3
 800c850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c854:	4619      	mov	r1, r3
        quat[3] =
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	330c      	adds	r3, #12
            ((long)fifo_data[12] << 24) | ((long)fifo_data[13] << 16) | ((long)fifo_data[14] << 8) | fifo_data[15];
 800c85a:	430a      	orrs	r2, r1
        quat[3] =
 800c85c:	601a      	str	r2, [r3, #0]
        ii += 16;
 800c85e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c862:	3310      	adds	r3, #16
 800c864:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
         * the FIFO reads might become misaligned.
         *
         * Let's start by scaling down the quaternion data to avoid long long
         * math.
         */
        quat_q14[0] = quat[0] >> 16;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	141b      	asrs	r3, r3, #16
 800c86e:	613b      	str	r3, [r7, #16]
        quat_q14[1] = quat[1] >> 16;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3304      	adds	r3, #4
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	141b      	asrs	r3, r3, #16
 800c878:	617b      	str	r3, [r7, #20]
        quat_q14[2] = quat[2] >> 16;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3308      	adds	r3, #8
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	141b      	asrs	r3, r3, #16
 800c882:	61bb      	str	r3, [r7, #24]
        quat_q14[3] = quat[3] >> 16;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	330c      	adds	r3, #12
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	141b      	asrs	r3, r3, #16
 800c88c:	61fb      	str	r3, [r7, #28]
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] + quat_q14[2] * quat_q14[2] +
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	fb02 f203 	mul.w	r2, r2, r3
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	6979      	ldr	r1, [r7, #20]
 800c89a:	fb01 f303 	mul.w	r3, r1, r3
 800c89e:	441a      	add	r2, r3
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	69b9      	ldr	r1, [r7, #24]
 800c8a4:	fb01 f303 	mul.w	r3, r1, r3
 800c8a8:	441a      	add	r2, r3
                      quat_q14[3] * quat_q14[3];
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	69f9      	ldr	r1, [r7, #28]
 800c8ae:	fb01 f303 	mul.w	r3, r1, r3
        quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] + quat_q14[2] * quat_q14[2] +
 800c8b2:	4413      	add	r3, r2
 800c8b4:	643b      	str	r3, [r7, #64]	; 0x40
        if ((quat_mag_sq < QUAT_MAG_SQ_MIN) || (quat_mag_sq > QUAT_MAG_SQ_MAX))
 800c8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800c8bc:	db03      	blt.n	800c8c6 <dmp_read_fifo+0x13a>
 800c8be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8c0:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 800c8c4:	dd07      	ble.n	800c8d6 <dmp_read_fifo+0x14a>
        {
            /* Quaternion is outside of the acceptable threshold. */
            mpu_reset_fifo();
 800c8c6:	f7fe f9e3 	bl	800ac90 <mpu_reset_fifo>
            sensors[0] = 0;
 800c8ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	801a      	strh	r2, [r3, #0]
            return -1;
 800c8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d4:	e0cb      	b.n	800ca6e <dmp_read_fifo+0x2e2>
        }
        sensors[0] |= INV_WXYZ_QUAT;
 800c8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c8dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8e0:	b21a      	sxth	r2, r3
 800c8e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8e4:	801a      	strh	r2, [r3, #0]
#endif
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_RAW_ACCEL)
 800c8e6:	4b64      	ldr	r3, [pc, #400]	; (800ca78 <dmp_read_fifo+0x2ec>)
 800c8e8:	895b      	ldrh	r3, [r3, #10]
 800c8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d052      	beq.n	800c998 <dmp_read_fifo+0x20c>
    {
        accel[0] = ((short)fifo_data[ii + 0] << 8) | fifo_data[ii + 1];
 800c8f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c8f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c900:	021b      	lsls	r3, r3, #8
 800c902:	b21a      	sxth	r2, r3
 800c904:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c908:	3301      	adds	r3, #1
 800c90a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800c90e:	440b      	add	r3, r1
 800c910:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c914:	b21b      	sxth	r3, r3
 800c916:	4313      	orrs	r3, r2
 800c918:	b21a      	sxth	r2, r3
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	801a      	strh	r2, [r3, #0]
        accel[1] = ((short)fifo_data[ii + 2] << 8) | fifo_data[ii + 3];
 800c91e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c922:	3302      	adds	r3, #2
 800c924:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c928:	4413      	add	r3, r2
 800c92a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	b219      	sxth	r1, r3
 800c932:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c936:	3303      	adds	r3, #3
 800c938:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c93c:	4413      	add	r3, r2
 800c93e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c942:	b21a      	sxth	r2, r3
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	3302      	adds	r3, #2
 800c948:	430a      	orrs	r2, r1
 800c94a:	b212      	sxth	r2, r2
 800c94c:	801a      	strh	r2, [r3, #0]
        accel[2] = ((short)fifo_data[ii + 4] << 8) | fifo_data[ii + 5];
 800c94e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c952:	3304      	adds	r3, #4
 800c954:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c958:	4413      	add	r3, r2
 800c95a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c95e:	021b      	lsls	r3, r3, #8
 800c960:	b219      	sxth	r1, r3
 800c962:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c966:	3305      	adds	r3, #5
 800c968:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c96c:	4413      	add	r3, r2
 800c96e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c972:	b21a      	sxth	r2, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	3304      	adds	r3, #4
 800c978:	430a      	orrs	r2, r1
 800c97a:	b212      	sxth	r2, r2
 800c97c:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800c97e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c982:	3306      	adds	r3, #6
 800c984:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_ACCEL;
 800c988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c98a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c98e:	f043 0308 	orr.w	r3, r3, #8
 800c992:	b21a      	sxth	r2, r3
 800c994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c996:	801a      	strh	r2, [r3, #0]
    }

    if (dmp.feature_mask & DMP_FEATURE_SEND_ANY_GYRO)
 800c998:	4b37      	ldr	r3, [pc, #220]	; (800ca78 <dmp_read_fifo+0x2ec>)
 800c99a:	895b      	ldrh	r3, [r3, #10]
 800c99c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d052      	beq.n	800ca4a <dmp_read_fifo+0x2be>
    {
        gyro[0] = ((short)fifo_data[ii + 0] << 8) | fifo_data[ii + 1];
 800c9a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c9a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c9b2:	021b      	lsls	r3, r3, #8
 800c9b4:	b21a      	sxth	r2, r3
 800c9b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800c9c0:	440b      	add	r3, r1
 800c9c2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c9c6:	b21b      	sxth	r3, r3
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	b21a      	sxth	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	801a      	strh	r2, [r3, #0]
        gyro[1] = ((short)fifo_data[ii + 2] << 8) | fifo_data[ii + 3];
 800c9d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c9d4:	3302      	adds	r3, #2
 800c9d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c9da:	4413      	add	r3, r2
 800c9dc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c9e0:	021b      	lsls	r3, r3, #8
 800c9e2:	b219      	sxth	r1, r3
 800c9e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c9e8:	3303      	adds	r3, #3
 800c9ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800c9f4:	b21a      	sxth	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	3302      	adds	r3, #2
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	b212      	sxth	r2, r2
 800c9fe:	801a      	strh	r2, [r3, #0]
        gyro[2] = ((short)fifo_data[ii + 4] << 8) | fifo_data[ii + 5];
 800ca00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca04:	3304      	adds	r3, #4
 800ca06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ca10:	021b      	lsls	r3, r3, #8
 800ca12:	b219      	sxth	r1, r3
 800ca14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca18:	3305      	adds	r3, #5
 800ca1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca1e:	4413      	add	r3, r2
 800ca20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800ca24:	b21a      	sxth	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	b212      	sxth	r2, r2
 800ca2e:	801a      	strh	r2, [r3, #0]
        ii += 6;
 800ca30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca34:	3306      	adds	r3, #6
 800ca36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        sensors[0] |= INV_XYZ_GYRO;
 800ca3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca40:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800ca44:	b21a      	sxth	r2, r3
 800ca46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca48:	801a      	strh	r2, [r3, #0]
    }

    /* Gesture data is at the end of the DMP packet. Parse it and call
     * the gesture callbacks (if registered).
     */
    if (dmp.feature_mask & (DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT))
 800ca4a:	4b0b      	ldr	r3, [pc, #44]	; (800ca78 <dmp_read_fifo+0x2ec>)
 800ca4c:	895b      	ldrh	r3, [r3, #10]
 800ca4e:	f003 0303 	and.w	r3, r3, #3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d007      	beq.n	800ca66 <dmp_read_fifo+0x2da>
        decode_gesture(fifo_data + ii);
 800ca56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ca5a:	f107 0220 	add.w	r2, r7, #32
 800ca5e:	4413      	add	r3, r2
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7ff fe4f 	bl	800c704 <decode_gesture>

    get_ms(timestamp);
 800ca66:	6838      	ldr	r0, [r7, #0]
 800ca68:	f003 f99a 	bl	800fda0 <get_ms_user>
    return 0;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3748      	adds	r7, #72	; 0x48
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20000584 	.word	0x20000584

0800ca7c <eMPL_send_quat>:

    return 0;
}

void eMPL_send_quat(long *quat)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b08a      	sub	sp, #40	; 0x28
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
    char out[PACKET_LENGTH];
    int i;
    if (!quat)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d07b      	beq.n	800cb82 <eMPL_send_quat+0x106>
        return;
    memset(out, 0, PACKET_LENGTH);
 800ca8a:	f107 030c 	add.w	r3, r7, #12
 800ca8e:	2217      	movs	r2, #23
 800ca90:	2100      	movs	r1, #0
 800ca92:	4618      	mov	r0, r3
 800ca94:	f003 fdcb 	bl	801062e <memset>
    out[0] = '$';
 800ca98:	2324      	movs	r3, #36	; 0x24
 800ca9a:	733b      	strb	r3, [r7, #12]
    out[1] = PACKET_QUAT;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	737b      	strb	r3, [r7, #13]
    out[3] = (char)(quat[0] >> 24);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	161b      	asrs	r3, r3, #24
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	73fb      	strb	r3, [r7, #15]
    out[4] = (char)(quat[0] >> 16);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	141b      	asrs	r3, r3, #16
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	743b      	strb	r3, [r7, #16]
    out[5] = (char)(quat[0] >> 8);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	121b      	asrs	r3, r3, #8
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	747b      	strb	r3, [r7, #17]
    out[6] = (char)quat[0];
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	74bb      	strb	r3, [r7, #18]
    out[7] = (char)(quat[1] >> 24);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3304      	adds	r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	161b      	asrs	r3, r3, #24
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	74fb      	strb	r3, [r7, #19]
    out[8] = (char)(quat[1] >> 16);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	3304      	adds	r3, #4
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	141b      	asrs	r3, r3, #16
 800cada:	b2db      	uxtb	r3, r3
 800cadc:	753b      	strb	r3, [r7, #20]
    out[9] = (char)(quat[1] >> 8);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3304      	adds	r3, #4
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	121b      	asrs	r3, r3, #8
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	757b      	strb	r3, [r7, #21]
    out[10] = (char)quat[1];
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3304      	adds	r3, #4
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	75bb      	strb	r3, [r7, #22]
    out[11] = (char)(quat[2] >> 24);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	3308      	adds	r3, #8
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	161b      	asrs	r3, r3, #24
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	75fb      	strb	r3, [r7, #23]
    out[12] = (char)(quat[2] >> 16);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3308      	adds	r3, #8
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	141b      	asrs	r3, r3, #16
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	763b      	strb	r3, [r7, #24]
    out[13] = (char)(quat[2] >> 8);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3308      	adds	r3, #8
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	121b      	asrs	r3, r3, #8
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	767b      	strb	r3, [r7, #25]
    out[14] = (char)quat[2];
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3308      	adds	r3, #8
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	76bb      	strb	r3, [r7, #26]
    out[15] = (char)(quat[3] >> 24);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	330c      	adds	r3, #12
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	161b      	asrs	r3, r3, #24
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	76fb      	strb	r3, [r7, #27]
    out[16] = (char)(quat[3] >> 16);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	330c      	adds	r3, #12
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	141b      	asrs	r3, r3, #16
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	773b      	strb	r3, [r7, #28]
    out[17] = (char)(quat[3] >> 8);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	330c      	adds	r3, #12
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	121b      	asrs	r3, r3, #8
 800cb42:	b2db      	uxtb	r3, r3
 800cb44:	777b      	strb	r3, [r7, #29]
    out[18] = (char)quat[3];
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	330c      	adds	r3, #12
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	77bb      	strb	r3, [r7, #30]
    out[21] = '\r';
 800cb50:	230d      	movs	r3, #13
 800cb52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    out[22] = '\n';
 800cb56:	230a      	movs	r3, #10
 800cb58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    for (i = 0; i < PACKET_LENGTH; i++)
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	627b      	str	r3, [r7, #36]	; 0x24
 800cb60:	e00b      	b.n	800cb7a <eMPL_send_quat+0xfe>
    {
        // fputc(out[i]);
		HAL_UART_Transmit(&PRINT_UART_HANDLE, (uint8_t*) out + i, 1, 0x10);
 800cb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb64:	f107 020c 	add.w	r2, r7, #12
 800cb68:	18d1      	adds	r1, r2, r3
 800cb6a:	2310      	movs	r3, #16
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	4807      	ldr	r0, [pc, #28]	; (800cb8c <eMPL_send_quat+0x110>)
 800cb70:	f7fd fa1f 	bl	8009fb2 <HAL_UART_Transmit>
    for (i = 0; i < PACKET_LENGTH; i++)
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	3301      	adds	r3, #1
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	2b16      	cmp	r3, #22
 800cb7e:	ddf0      	ble.n	800cb62 <eMPL_send_quat+0xe6>
 800cb80:	e000      	b.n	800cb84 <eMPL_send_quat+0x108>
        return;
 800cb82:	bf00      	nop
    }
}
 800cb84:	3728      	adds	r7, #40	; 0x28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	20001010 	.word	0x20001010

0800cb90 <eMPL_send_data>:

void eMPL_send_data(unsigned char type, long *data)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b08a      	sub	sp, #40	; 0x28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	4603      	mov	r3, r0
 800cb98:	6039      	str	r1, [r7, #0]
 800cb9a:	71fb      	strb	r3, [r7, #7]
    char out[PACKET_LENGTH];
    int i;
    if (!data)
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 8114 	beq.w	800cdcc <eMPL_send_data+0x23c>
        return;
    memset(out, 0, PACKET_LENGTH);
 800cba4:	f107 030c 	add.w	r3, r7, #12
 800cba8:	2217      	movs	r2, #23
 800cbaa:	2100      	movs	r1, #0
 800cbac:	4618      	mov	r0, r3
 800cbae:	f003 fd3e 	bl	801062e <memset>
    out[0] = '$';
 800cbb2:	2324      	movs	r3, #36	; 0x24
 800cbb4:	733b      	strb	r3, [r7, #12]
    out[1] = PACKET_DATA;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	737b      	strb	r3, [r7, #13]
    out[2] = type;
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	73bb      	strb	r3, [r7, #14]
    out[21] = '\r';
 800cbbe:	230d      	movs	r3, #13
 800cbc0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    out[22] = '\n';
 800cbc4:	230a      	movs	r3, #10
 800cbc6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    switch (type)
 800cbca:	79fb      	ldrb	r3, [r7, #7]
 800cbcc:	2b06      	cmp	r3, #6
 800cbce:	f200 80ff 	bhi.w	800cdd0 <eMPL_send_data+0x240>
 800cbd2:	a201      	add	r2, pc, #4	; (adr r2, 800cbd8 <eMPL_send_data+0x48>)
 800cbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd8:	0800ccfb 	.word	0x0800ccfb
 800cbdc:	0800ccfb 	.word	0x0800ccfb
 800cbe0:	0800ccfb 	.word	0x0800ccfb
 800cbe4:	0800cccd 	.word	0x0800cccd
 800cbe8:	0800ccfb 	.word	0x0800ccfb
 800cbec:	0800cbf5 	.word	0x0800cbf5
 800cbf0:	0800cd7f 	.word	0x0800cd7f
    {
    /* Two bytes per-element. */
    case PACKET_DATA_ROT:
        out[3] = (char)(data[0] >> 24);
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	161b      	asrs	r3, r3, #24
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	73fb      	strb	r3, [r7, #15]
        out[4] = (char)(data[0] >> 16);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	141b      	asrs	r3, r3, #16
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	743b      	strb	r3, [r7, #16]
        out[5] = (char)(data[1] >> 24);
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	3304      	adds	r3, #4
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	161b      	asrs	r3, r3, #24
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	747b      	strb	r3, [r7, #17]
        out[6] = (char)(data[1] >> 16);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3304      	adds	r3, #4
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	141b      	asrs	r3, r3, #16
 800cc1c:	b2db      	uxtb	r3, r3
 800cc1e:	74bb      	strb	r3, [r7, #18]
        out[7] = (char)(data[2] >> 24);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	3308      	adds	r3, #8
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	161b      	asrs	r3, r3, #24
 800cc28:	b2db      	uxtb	r3, r3
 800cc2a:	74fb      	strb	r3, [r7, #19]
        out[8] = (char)(data[2] >> 16);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	3308      	adds	r3, #8
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	141b      	asrs	r3, r3, #16
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	753b      	strb	r3, [r7, #20]
        out[9] = (char)(data[3] >> 24);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	330c      	adds	r3, #12
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	161b      	asrs	r3, r3, #24
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	757b      	strb	r3, [r7, #21]
        out[10] = (char)(data[3] >> 16);
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	330c      	adds	r3, #12
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	141b      	asrs	r3, r3, #16
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	75bb      	strb	r3, [r7, #22]
        out[11] = (char)(data[4] >> 24);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	3310      	adds	r3, #16
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	161b      	asrs	r3, r3, #24
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	75fb      	strb	r3, [r7, #23]
        out[12] = (char)(data[4] >> 16);
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	3310      	adds	r3, #16
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	141b      	asrs	r3, r3, #16
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	763b      	strb	r3, [r7, #24]
        out[13] = (char)(data[5] >> 24);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	3314      	adds	r3, #20
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	161b      	asrs	r3, r3, #24
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	767b      	strb	r3, [r7, #25]
        out[14] = (char)(data[5] >> 16);
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	3314      	adds	r3, #20
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	141b      	asrs	r3, r3, #16
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	76bb      	strb	r3, [r7, #26]
        out[15] = (char)(data[6] >> 24);
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	3318      	adds	r3, #24
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	161b      	asrs	r3, r3, #24
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	76fb      	strb	r3, [r7, #27]
        out[16] = (char)(data[6] >> 16);
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	3318      	adds	r3, #24
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	141b      	asrs	r3, r3, #16
 800cc94:	b2db      	uxtb	r3, r3
 800cc96:	773b      	strb	r3, [r7, #28]
        out[17] = (char)(data[7] >> 24);
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	331c      	adds	r3, #28
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	161b      	asrs	r3, r3, #24
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	777b      	strb	r3, [r7, #29]
        out[18] = (char)(data[7] >> 16);
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	331c      	adds	r3, #28
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	141b      	asrs	r3, r3, #16
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	77bb      	strb	r3, [r7, #30]
        out[19] = (char)(data[8] >> 24);
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	3320      	adds	r3, #32
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	161b      	asrs	r3, r3, #24
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	77fb      	strb	r3, [r7, #31]
        out[20] = (char)(data[8] >> 16);
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	3320      	adds	r3, #32
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	141b      	asrs	r3, r3, #16
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	f887 3020 	strb.w	r3, [r7, #32]
        break;
 800ccca:	e06c      	b.n	800cda6 <eMPL_send_data+0x216>
    /* Four bytes per-element. */
    /* Four elements. */
    case PACKET_DATA_QUAT:
        out[15] = (char)(data[3] >> 24);
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	330c      	adds	r3, #12
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	161b      	asrs	r3, r3, #24
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	76fb      	strb	r3, [r7, #27]
        out[16] = (char)(data[3] >> 16);
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	330c      	adds	r3, #12
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	141b      	asrs	r3, r3, #16
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	773b      	strb	r3, [r7, #28]
        out[17] = (char)(data[3] >> 8);
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	330c      	adds	r3, #12
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	121b      	asrs	r3, r3, #8
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	777b      	strb	r3, [r7, #29]
        out[18] = (char)data[3];
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	330c      	adds	r3, #12
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	b2db      	uxtb	r3, r3
 800ccf8:	77bb      	strb	r3, [r7, #30]
    /* Three elements. */
    case PACKET_DATA_ACCEL:
    case PACKET_DATA_GYRO:
    case PACKET_DATA_COMPASS:
    case PACKET_DATA_EULER:
        out[3] = (char)(data[0] >> 24);
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	161b      	asrs	r3, r3, #24
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	73fb      	strb	r3, [r7, #15]
        out[4] = (char)(data[0] >> 16);
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	141b      	asrs	r3, r3, #16
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	743b      	strb	r3, [r7, #16]
        out[5] = (char)(data[0] >> 8);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	121b      	asrs	r3, r3, #8
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	747b      	strb	r3, [r7, #17]
        out[6] = (char)data[0];
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	74bb      	strb	r3, [r7, #18]
        out[7] = (char)(data[1] >> 24);
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	3304      	adds	r3, #4
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	161b      	asrs	r3, r3, #24
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	74fb      	strb	r3, [r7, #19]
        out[8] = (char)(data[1] >> 16);
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	3304      	adds	r3, #4
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	141b      	asrs	r3, r3, #16
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	753b      	strb	r3, [r7, #20]
        out[9] = (char)(data[1] >> 8);
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	3304      	adds	r3, #4
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	121b      	asrs	r3, r3, #8
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	757b      	strb	r3, [r7, #21]
        out[10] = (char)data[1];
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	3304      	adds	r3, #4
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	75bb      	strb	r3, [r7, #22]
        out[11] = (char)(data[2] >> 24);
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	3308      	adds	r3, #8
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	161b      	asrs	r3, r3, #24
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	75fb      	strb	r3, [r7, #23]
        out[12] = (char)(data[2] >> 16);
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	3308      	adds	r3, #8
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	141b      	asrs	r3, r3, #16
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	763b      	strb	r3, [r7, #24]
        out[13] = (char)(data[2] >> 8);
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	3308      	adds	r3, #8
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	121b      	asrs	r3, r3, #8
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	767b      	strb	r3, [r7, #25]
        out[14] = (char)data[2];
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	3308      	adds	r3, #8
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	76bb      	strb	r3, [r7, #26]
        break;
 800cd7c:	e013      	b.n	800cda6 <eMPL_send_data+0x216>
    case PACKET_DATA_HEADING:
        out[3] = (char)(data[0] >> 24);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	161b      	asrs	r3, r3, #24
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	73fb      	strb	r3, [r7, #15]
        out[4] = (char)(data[0] >> 16);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	141b      	asrs	r3, r3, #16
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	743b      	strb	r3, [r7, #16]
        out[5] = (char)(data[0] >> 8);
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	121b      	asrs	r3, r3, #8
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	747b      	strb	r3, [r7, #17]
        out[6] = (char)data[0];
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	74bb      	strb	r3, [r7, #18]
        break;
 800cda4:	bf00      	nop
    default:
        return;
    }
    for (i = 0; i < PACKET_LENGTH; i++)
 800cda6:	2300      	movs	r3, #0
 800cda8:	627b      	str	r3, [r7, #36]	; 0x24
 800cdaa:	e00b      	b.n	800cdc4 <eMPL_send_data+0x234>
    {
        // fputc(out[i]);
		HAL_UART_Transmit(&PRINT_UART_HANDLE, (uint8_t*) out + i, 1, 0x10);
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	f107 020c 	add.w	r2, r7, #12
 800cdb2:	18d1      	adds	r1, r2, r3
 800cdb4:	2310      	movs	r3, #16
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	4807      	ldr	r0, [pc, #28]	; (800cdd8 <eMPL_send_data+0x248>)
 800cdba:	f7fd f8fa 	bl	8009fb2 <HAL_UART_Transmit>
    for (i = 0; i < PACKET_LENGTH; i++)
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	627b      	str	r3, [r7, #36]	; 0x24
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	2b16      	cmp	r3, #22
 800cdc8:	ddf0      	ble.n	800cdac <eMPL_send_data+0x21c>
 800cdca:	e002      	b.n	800cdd2 <eMPL_send_data+0x242>
        return;
 800cdcc:	bf00      	nop
 800cdce:	e000      	b.n	800cdd2 <eMPL_send_data+0x242>
        return;
 800cdd0:	bf00      	nop
    }
}
 800cdd2:	3728      	adds	r7, #40	; 0x28
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}
 800cdd8:	20001010 	.word	0x20001010

0800cddc <inv_get_sensor_type_accel>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_accel(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
    inv_get_accel_set(data, accuracy, timestamp);
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	68b9      	ldr	r1, [r7, #8]
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f001 f861 	bl	800deb4 <inv_get_accel_set>
    if (eMPL_out.accel_status & INV_NEW_DATA)
 800cdf2:	4b06      	ldr	r3, [pc, #24]	; (800ce0c <inv_get_sensor_type_accel+0x30>)
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <inv_get_sensor_type_accel+0x26>
        return 1;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e000      	b.n	800ce04 <inv_get_sensor_type_accel+0x28>
    else
        return 0;
 800ce02:	2300      	movs	r3, #0
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3710      	adds	r7, #16
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	20000594 	.word	0x20000594

0800ce10 <inv_get_sensor_type_gyro>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_gyro(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
    inv_get_gyro_set(data, accuracy, timestamp);
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	68b9      	ldr	r1, [r7, #8]
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f001 f86d 	bl	800df00 <inv_get_gyro_set>
    if (eMPL_out.gyro_status & INV_NEW_DATA)
 800ce26:	4b06      	ldr	r3, [pc, #24]	; (800ce40 <inv_get_sensor_type_gyro+0x30>)
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d001      	beq.n	800ce36 <inv_get_sensor_type_gyro+0x26>
        return 1;
 800ce32:	2301      	movs	r3, #1
 800ce34:	e000      	b.n	800ce38 <inv_get_sensor_type_gyro+0x28>
    else
        return 0;
 800ce36:	2300      	movs	r3, #0
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3710      	adds	r7, #16
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	20000594 	.word	0x20000594

0800ce44 <inv_get_sensor_type_quat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_quat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	607a      	str	r2, [r7, #4]
    memcpy(data, eMPL_out.quat, sizeof(eMPL_out.quat));
 800ce50:	2210      	movs	r2, #16
 800ce52:	4909      	ldr	r1, [pc, #36]	; (800ce78 <inv_get_sensor_type_quat+0x34>)
 800ce54:	68f8      	ldr	r0, [r7, #12]
 800ce56:	f003 fbc2 	bl	80105de <memcpy>
    accuracy[0] = eMPL_out.quat_accuracy;
 800ce5a:	4b07      	ldr	r3, [pc, #28]	; (800ce78 <inv_get_sensor_type_quat+0x34>)
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	b25a      	sxtb	r2, r3
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800ce64:	4b04      	ldr	r3, [pc, #16]	; (800ce78 <inv_get_sensor_type_quat+0x34>)
 800ce66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800ce6c:	4b02      	ldr	r3, [pc, #8]	; (800ce78 <inv_get_sensor_type_quat+0x34>)
 800ce6e:	6a1b      	ldr	r3, [r3, #32]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20000594 	.word	0x20000594

0800ce7c <inv_get_sensor_type_heading>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_heading(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800ce7c:	b590      	push	{r4, r7, lr}
 800ce7e:	b08d      	sub	sp, #52	; 0x34
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	607a      	str	r2, [r7, #4]
    long t1, t2, q00, q03, q12, q22;
    float fdata;

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
 800ce88:	4b37      	ldr	r3, [pc, #220]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a36      	ldr	r2, [pc, #216]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800ce8e:	6812      	ldr	r2, [r2, #0]
 800ce90:	4611      	mov	r1, r2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f001 fc2a 	bl	800e6ec <inv_q29_mult>
 800ce98:	62b8      	str	r0, [r7, #40]	; 0x28
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
 800ce9a:	4b33      	ldr	r3, [pc, #204]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	4a32      	ldr	r2, [pc, #200]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800cea0:	68d2      	ldr	r2, [r2, #12]
 800cea2:	4611      	mov	r1, r2
 800cea4:	4618      	mov	r0, r3
 800cea6:	f001 fc21 	bl	800e6ec <inv_q29_mult>
 800ceaa:	6278      	str	r0, [r7, #36]	; 0x24
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
 800ceac:	4b2e      	ldr	r3, [pc, #184]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	4a2d      	ldr	r2, [pc, #180]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800ceb2:	6892      	ldr	r2, [r2, #8]
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f001 fc18 	bl	800e6ec <inv_q29_mult>
 800cebc:	6238      	str	r0, [r7, #32]
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
 800cebe:	4b2a      	ldr	r3, [pc, #168]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800cec0:	689b      	ldr	r3, [r3, #8]
 800cec2:	4a29      	ldr	r2, [pc, #164]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800cec4:	6892      	ldr	r2, [r2, #8]
 800cec6:	4611      	mov	r1, r2
 800cec8:	4618      	mov	r0, r3
 800ceca:	f001 fc0f 	bl	800e6ec <inv_q29_mult>
 800cece:	61f8      	str	r0, [r7, #28]

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
 800ced0:	6a3a      	ldr	r2, [r7, #32]
 800ced2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	61bb      	str	r3, [r7, #24]

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
 800ced8:	69fa      	ldr	r2, [r7, #28]
 800ceda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cedc:	4413      	add	r3, r2
 800cede:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800cee2:	617b      	str	r3, [r7, #20]
    fdata = atan2f((float)t1, (float)t2) * 180.f / (float)M_PI;
 800cee4:	69b8      	ldr	r0, [r7, #24]
 800cee6:	f7f6 fcd1 	bl	800388c <__aeabi_i2f>
 800ceea:	4604      	mov	r4, r0
 800ceec:	6978      	ldr	r0, [r7, #20]
 800ceee:	f7f6 fccd 	bl	800388c <__aeabi_i2f>
 800cef2:	4603      	mov	r3, r0
 800cef4:	4619      	mov	r1, r3
 800cef6:	4620      	mov	r0, r4
 800cef8:	f007 ffa8 	bl	8014e4c <atan2f>
 800cefc:	4603      	mov	r3, r0
 800cefe:	491b      	ldr	r1, [pc, #108]	; (800cf6c <inv_get_sensor_type_heading+0xf0>)
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7f6 fd17 	bl	8003934 <__aeabi_fmul>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4919      	ldr	r1, [pc, #100]	; (800cf70 <inv_get_sensor_type_heading+0xf4>)
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7f6 fdc6 	bl	8003a9c <__aeabi_fdiv>
 800cf10:	4603      	mov	r3, r0
 800cf12:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (fdata < 0.f)
 800cf14:	f04f 0100 	mov.w	r1, #0
 800cf18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf1a:	f7f6 fea9 	bl	8003c70 <__aeabi_fcmplt>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d005      	beq.n	800cf30 <inv_get_sensor_type_heading+0xb4>
        fdata += 360.f;
 800cf24:	4913      	ldr	r1, [pc, #76]	; (800cf74 <inv_get_sensor_type_heading+0xf8>)
 800cf26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf28:	f7f6 fbfc 	bl	8003724 <__addsf3>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    data[0] = (long)(fdata * 65536.f);
 800cf30:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800cf34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf36:	f7f6 fcfd 	bl	8003934 <__aeabi_fmul>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7f6 fed5 	bl	8003cec <__aeabi_f2iz>
 800cf42:	4602      	mov	r2, r0
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	601a      	str	r2, [r3, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
 800cf48:	4b07      	ldr	r3, [pc, #28]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800cf4a:	691b      	ldr	r3, [r3, #16]
 800cf4c:	b25a      	sxtb	r2, r3
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800cf54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800cf5a:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <inv_get_sensor_type_heading+0xec>)
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3734      	adds	r7, #52	; 0x34
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd90      	pop	{r4, r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20000594 	.word	0x20000594
 800cf6c:	43340000 	.word	0x43340000
 800cf70:	40490fdb 	.word	0x40490fdb
 800cf74:	43b40000 	.word	0x43b40000

0800cf78 <inv_get_sensor_type_euler>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_euler(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800cf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf7a:	b095      	sub	sp, #84	; 0x54
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
    long t1, t2, t3;
    long q00, q01, q02, q03, q11, q12, q13, q22, q23, q33;
    float values[3];

    q00 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[0]);
 800cf84:	4b69      	ldr	r3, [pc, #420]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a68      	ldr	r2, [pc, #416]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cf8a:	6812      	ldr	r2, [r2, #0]
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f001 fbac 	bl	800e6ec <inv_q29_mult>
 800cf94:	64f8      	str	r0, [r7, #76]	; 0x4c
    q01 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[1]);
 800cf96:	4b65      	ldr	r3, [pc, #404]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4a64      	ldr	r2, [pc, #400]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cf9c:	6852      	ldr	r2, [r2, #4]
 800cf9e:	4611      	mov	r1, r2
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f001 fba3 	bl	800e6ec <inv_q29_mult>
 800cfa6:	64b8      	str	r0, [r7, #72]	; 0x48
    q02 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[2]);
 800cfa8:	4b60      	ldr	r3, [pc, #384]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a5f      	ldr	r2, [pc, #380]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfae:	6892      	ldr	r2, [r2, #8]
 800cfb0:	4611      	mov	r1, r2
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f001 fb9a 	bl	800e6ec <inv_q29_mult>
 800cfb8:	6478      	str	r0, [r7, #68]	; 0x44
    q03 = inv_q29_mult(eMPL_out.quat[0], eMPL_out.quat[3]);
 800cfba:	4b5c      	ldr	r3, [pc, #368]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a5b      	ldr	r2, [pc, #364]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfc0:	68d2      	ldr	r2, [r2, #12]
 800cfc2:	4611      	mov	r1, r2
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f001 fb91 	bl	800e6ec <inv_q29_mult>
 800cfca:	6438      	str	r0, [r7, #64]	; 0x40
    q11 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[1]);
 800cfcc:	4b57      	ldr	r3, [pc, #348]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	4a56      	ldr	r2, [pc, #344]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfd2:	6852      	ldr	r2, [r2, #4]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f001 fb88 	bl	800e6ec <inv_q29_mult>
 800cfdc:	63f8      	str	r0, [r7, #60]	; 0x3c
    q12 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[2]);
 800cfde:	4b53      	ldr	r3, [pc, #332]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	4a52      	ldr	r2, [pc, #328]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cfe4:	6892      	ldr	r2, [r2, #8]
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f001 fb7f 	bl	800e6ec <inv_q29_mult>
 800cfee:	63b8      	str	r0, [r7, #56]	; 0x38
    q13 = inv_q29_mult(eMPL_out.quat[1], eMPL_out.quat[3]);
 800cff0:	4b4e      	ldr	r3, [pc, #312]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	4a4d      	ldr	r2, [pc, #308]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800cff6:	68d2      	ldr	r2, [r2, #12]
 800cff8:	4611      	mov	r1, r2
 800cffa:	4618      	mov	r0, r3
 800cffc:	f001 fb76 	bl	800e6ec <inv_q29_mult>
 800d000:	6378      	str	r0, [r7, #52]	; 0x34
    q22 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[2]);
 800d002:	4b4a      	ldr	r3, [pc, #296]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	4a49      	ldr	r2, [pc, #292]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800d008:	6892      	ldr	r2, [r2, #8]
 800d00a:	4611      	mov	r1, r2
 800d00c:	4618      	mov	r0, r3
 800d00e:	f001 fb6d 	bl	800e6ec <inv_q29_mult>
 800d012:	6338      	str	r0, [r7, #48]	; 0x30
    q23 = inv_q29_mult(eMPL_out.quat[2], eMPL_out.quat[3]);
 800d014:	4b45      	ldr	r3, [pc, #276]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	4a44      	ldr	r2, [pc, #272]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800d01a:	68d2      	ldr	r2, [r2, #12]
 800d01c:	4611      	mov	r1, r2
 800d01e:	4618      	mov	r0, r3
 800d020:	f001 fb64 	bl	800e6ec <inv_q29_mult>
 800d024:	62f8      	str	r0, [r7, #44]	; 0x2c
    q33 = inv_q29_mult(eMPL_out.quat[3], eMPL_out.quat[3]);
 800d026:	4b41      	ldr	r3, [pc, #260]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	4a40      	ldr	r2, [pc, #256]	; (800d12c <inv_get_sensor_type_euler+0x1b4>)
 800d02c:	68d2      	ldr	r2, [r2, #12]
 800d02e:	4611      	mov	r1, r2
 800d030:	4618      	mov	r0, r3
 800d032:	f001 fb5b 	bl	800e6ec <inv_q29_mult>
 800d036:	62b8      	str	r0, [r7, #40]	; 0x28

    /* X component of the Ybody axis in World frame */
    t1 = q12 - q03;
 800d038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d03a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Y component of the Ybody axis in World frame */
    t2 = q22 + q00 - (1L << 30);
 800d040:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d044:	4413      	add	r3, r2
 800d046:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d04a:	623b      	str	r3, [r7, #32]
    values[2] = -atan2f((float)t1, (float)t2) * 180.f / (float)M_PI;
 800d04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d04e:	f7f6 fc1d 	bl	800388c <__aeabi_i2f>
 800d052:	4604      	mov	r4, r0
 800d054:	6a38      	ldr	r0, [r7, #32]
 800d056:	f7f6 fc19 	bl	800388c <__aeabi_i2f>
 800d05a:	4603      	mov	r3, r0
 800d05c:	4619      	mov	r1, r3
 800d05e:	4620      	mov	r0, r4
 800d060:	f007 fef4 	bl	8014e4c <atan2f>
 800d064:	4603      	mov	r3, r0
 800d066:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d06a:	4931      	ldr	r1, [pc, #196]	; (800d130 <inv_get_sensor_type_euler+0x1b8>)
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7f6 fc61 	bl	8003934 <__aeabi_fmul>
 800d072:	4603      	mov	r3, r0
 800d074:	492f      	ldr	r1, [pc, #188]	; (800d134 <inv_get_sensor_type_euler+0x1bc>)
 800d076:	4618      	mov	r0, r3
 800d078:	f7f6 fd10 	bl	8003a9c <__aeabi_fdiv>
 800d07c:	4603      	mov	r3, r0
 800d07e:	61bb      	str	r3, [r7, #24]

    /* Z component of the Ybody axis in World frame */
    t3 = q23 + q01;
 800d080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d084:	4413      	add	r3, r2
 800d086:	61fb      	str	r3, [r7, #28]
    values[0] = atan2f((float)t3, sqrtf((float)t1 * t1 + (float)t2 * t2)) * 180.f / (float)M_PI;
 800d088:	69f8      	ldr	r0, [r7, #28]
 800d08a:	f7f6 fbff 	bl	800388c <__aeabi_i2f>
 800d08e:	4604      	mov	r4, r0
 800d090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d092:	f7f6 fbfb 	bl	800388c <__aeabi_i2f>
 800d096:	4605      	mov	r5, r0
 800d098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d09a:	f7f6 fbf7 	bl	800388c <__aeabi_i2f>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7f6 fc46 	bl	8003934 <__aeabi_fmul>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461e      	mov	r6, r3
 800d0ac:	6a38      	ldr	r0, [r7, #32]
 800d0ae:	f7f6 fbed 	bl	800388c <__aeabi_i2f>
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	6a38      	ldr	r0, [r7, #32]
 800d0b6:	f7f6 fbe9 	bl	800388c <__aeabi_i2f>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	4619      	mov	r1, r3
 800d0be:	4628      	mov	r0, r5
 800d0c0:	f7f6 fc38 	bl	8003934 <__aeabi_fmul>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	f7f6 fb2b 	bl	8003724 <__addsf3>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f007 febd 	bl	8014e50 <sqrtf>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	4619      	mov	r1, r3
 800d0da:	4620      	mov	r0, r4
 800d0dc:	f007 feb6 	bl	8014e4c <atan2f>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	4913      	ldr	r1, [pc, #76]	; (800d130 <inv_get_sensor_type_euler+0x1b8>)
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7f6 fc25 	bl	8003934 <__aeabi_fmul>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	4911      	ldr	r1, [pc, #68]	; (800d134 <inv_get_sensor_type_euler+0x1bc>)
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7f6 fcd4 	bl	8003a9c <__aeabi_fdiv>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	613b      	str	r3, [r7, #16]
    /* Z component of the Zbody axis in World frame */
    t2 = q33 + q00 - (1L << 30);
 800d0f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0fc:	4413      	add	r3, r2
 800d0fe:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d102:	623b      	str	r3, [r7, #32]
    if (t2 < 0)
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	2b00      	cmp	r3, #0
 800d108:	da1d      	bge.n	800d146 <inv_get_sensor_type_euler+0x1ce>
    {
        if (values[0] >= 0)
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	f04f 0100 	mov.w	r1, #0
 800d110:	4618      	mov	r0, r3
 800d112:	f7f6 fdc1 	bl	8003c98 <__aeabi_fcmpge>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d00d      	beq.n	800d138 <inv_get_sensor_type_euler+0x1c0>
            values[0] = 180.f - values[0];
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	4619      	mov	r1, r3
 800d120:	4803      	ldr	r0, [pc, #12]	; (800d130 <inv_get_sensor_type_euler+0x1b8>)
 800d122:	f7f6 fafd 	bl	8003720 <__aeabi_fsub>
 800d126:	4603      	mov	r3, r0
 800d128:	613b      	str	r3, [r7, #16]
 800d12a:	e00c      	b.n	800d146 <inv_get_sensor_type_euler+0x1ce>
 800d12c:	20000594 	.word	0x20000594
 800d130:	43340000 	.word	0x43340000
 800d134:	40490fdb 	.word	0x40490fdb
        else
            values[0] = -180.f - values[0];
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	4619      	mov	r1, r3
 800d13c:	4848      	ldr	r0, [pc, #288]	; (800d260 <inv_get_sensor_type_euler+0x2e8>)
 800d13e:	f7f6 faef 	bl	8003720 <__aeabi_fsub>
 800d142:	4603      	mov	r3, r0
 800d144:	613b      	str	r3, [r7, #16]
    }

    /* X component of the Xbody axis in World frame */
    t1 = q11 + q00 - (1L << 30);
 800d146:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d14a:	4413      	add	r3, r2
 800d14c:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d150:	627b      	str	r3, [r7, #36]	; 0x24
    /* Y component of the Xbody axis in World frame */
    t2 = q12 + q03;
 800d152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d156:	4413      	add	r3, r2
 800d158:	623b      	str	r3, [r7, #32]
    /* Z component of the Xbody axis in World frame */
    t3 = q13 - q02;
 800d15a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	61fb      	str	r3, [r7, #28]

    values[1] = (atan2f((float)(q33 + q00 - (1L << 30)), (float)(q13 - q02)) * 180.f / (float)M_PI - 90);
 800d162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d166:	4413      	add	r3, r2
 800d168:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7f6 fb8d 	bl	800388c <__aeabi_i2f>
 800d172:	4604      	mov	r4, r0
 800d174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7f6 fb86 	bl	800388c <__aeabi_i2f>
 800d180:	4603      	mov	r3, r0
 800d182:	4619      	mov	r1, r3
 800d184:	4620      	mov	r0, r4
 800d186:	f007 fe61 	bl	8014e4c <atan2f>
 800d18a:	4603      	mov	r3, r0
 800d18c:	4935      	ldr	r1, [pc, #212]	; (800d264 <inv_get_sensor_type_euler+0x2ec>)
 800d18e:	4618      	mov	r0, r3
 800d190:	f7f6 fbd0 	bl	8003934 <__aeabi_fmul>
 800d194:	4603      	mov	r3, r0
 800d196:	4934      	ldr	r1, [pc, #208]	; (800d268 <inv_get_sensor_type_euler+0x2f0>)
 800d198:	4618      	mov	r0, r3
 800d19a:	f7f6 fc7f 	bl	8003a9c <__aeabi_fdiv>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	4932      	ldr	r1, [pc, #200]	; (800d26c <inv_get_sensor_type_euler+0x2f4>)
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f7f6 fabc 	bl	8003720 <__aeabi_fsub>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	617b      	str	r3, [r7, #20]
    if (values[1] >= 90)
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	492f      	ldr	r1, [pc, #188]	; (800d26c <inv_get_sensor_type_euler+0x2f4>)
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7f6 fd71 	bl	8003c98 <__aeabi_fcmpge>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d006      	beq.n	800d1ca <inv_get_sensor_type_euler+0x252>
        values[1] = 180 - values[1];
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	4619      	mov	r1, r3
 800d1c0:	4828      	ldr	r0, [pc, #160]	; (800d264 <inv_get_sensor_type_euler+0x2ec>)
 800d1c2:	f7f6 faad 	bl	8003720 <__aeabi_fsub>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	617b      	str	r3, [r7, #20]

    if (values[1] < -90)
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	4928      	ldr	r1, [pc, #160]	; (800d270 <inv_get_sensor_type_euler+0x2f8>)
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7f6 fd4e 	bl	8003c70 <__aeabi_fcmplt>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d006      	beq.n	800d1e8 <inv_get_sensor_type_euler+0x270>
        values[1] = -180 - values[1];
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	4820      	ldr	r0, [pc, #128]	; (800d260 <inv_get_sensor_type_euler+0x2e8>)
 800d1e0:	f7f6 fa9e 	bl	8003720 <__aeabi_fsub>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	617b      	str	r3, [r7, #20]
    data[0] = (long)(values[0] * 65536.f);
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7f6 fba0 	bl	8003934 <__aeabi_fmul>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f6 fd78 	bl	8003cec <__aeabi_f2iz>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	601a      	str	r2, [r3, #0]
    data[1] = (long)(values[1] * 65536.f);
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800d208:	4618      	mov	r0, r3
 800d20a:	f7f6 fb93 	bl	8003934 <__aeabi_fmul>
 800d20e:	4603      	mov	r3, r0
 800d210:	461a      	mov	r2, r3
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	1d1c      	adds	r4, r3, #4
 800d216:	4610      	mov	r0, r2
 800d218:	f7f6 fd68 	bl	8003cec <__aeabi_f2iz>
 800d21c:	4603      	mov	r3, r0
 800d21e:	6023      	str	r3, [r4, #0]
    data[2] = (long)(values[2] * 65536.f);
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 800d226:	4618      	mov	r0, r3
 800d228:	f7f6 fb84 	bl	8003934 <__aeabi_fmul>
 800d22c:	4603      	mov	r3, r0
 800d22e:	461a      	mov	r2, r3
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f103 0408 	add.w	r4, r3, #8
 800d236:	4610      	mov	r0, r2
 800d238:	f7f6 fd58 	bl	8003cec <__aeabi_f2iz>
 800d23c:	4603      	mov	r3, r0
 800d23e:	6023      	str	r3, [r4, #0]

    accuracy[0] = eMPL_out.quat_accuracy;
 800d240:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <inv_get_sensor_type_euler+0x2fc>)
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	b25a      	sxtb	r2, r3
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800d24a:	4b0a      	ldr	r3, [pc, #40]	; (800d274 <inv_get_sensor_type_euler+0x2fc>)
 800d24c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800d252:	4b08      	ldr	r3, [pc, #32]	; (800d274 <inv_get_sensor_type_euler+0x2fc>)
 800d254:	6a1b      	ldr	r3, [r3, #32]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3754      	adds	r7, #84	; 0x54
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d25e:	bf00      	nop
 800d260:	c3340000 	.word	0xc3340000
 800d264:	43340000 	.word	0x43340000
 800d268:	40490fdb 	.word	0x40490fdb
 800d26c:	42b40000 	.word	0x42b40000
 800d270:	c2b40000 	.word	0xc2b40000
 800d274:	20000594 	.word	0x20000594

0800d278 <inv_get_sensor_type_rot_mat>:
 *                          to 3 (most accurate).
 *  @param[out] timestamp   The time in milliseconds when this sensor was read.
 *  @return     1 if data was updated.
 */
int inv_get_sensor_type_rot_mat(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
    inv_quaternion_to_rotation(eMPL_out.quat, data);
 800d284:	68f9      	ldr	r1, [r7, #12]
 800d286:	4809      	ldr	r0, [pc, #36]	; (800d2ac <inv_get_sensor_type_rot_mat+0x34>)
 800d288:	f001 ff09 	bl	800f09e <inv_quaternion_to_rotation>
    accuracy[0] = eMPL_out.quat_accuracy;
 800d28c:	4b07      	ldr	r3, [pc, #28]	; (800d2ac <inv_get_sensor_type_rot_mat+0x34>)
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	b25a      	sxtb	r2, r3
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	701a      	strb	r2, [r3, #0]
    timestamp[0] = eMPL_out.nine_axis_timestamp;
 800d296:	4b05      	ldr	r3, [pc, #20]	; (800d2ac <inv_get_sensor_type_rot_mat+0x34>)
 800d298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	601a      	str	r2, [r3, #0]
    return eMPL_out.nine_axis_status;
 800d29e:	4b03      	ldr	r3, [pc, #12]	; (800d2ac <inv_get_sensor_type_rot_mat+0x34>)
 800d2a0:	6a1b      	ldr	r3, [r3, #32]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	20000594 	.word	0x20000594

0800d2b0 <inv_generate_eMPL_outputs>:

static inv_error_t inv_generate_eMPL_outputs(struct inv_sensor_cal_t *sensor_cal)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    int use_sensor;
    long sr = 1000;
 800d2b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d2bc:	60bb      	str	r3, [r7, #8]
    inv_get_quaternion_set(eMPL_out.quat, &eMPL_out.quat_accuracy, &eMPL_out.nine_axis_timestamp);
 800d2be:	4a4c      	ldr	r2, [pc, #304]	; (800d3f0 <inv_generate_eMPL_outputs+0x140>)
 800d2c0:	494c      	ldr	r1, [pc, #304]	; (800d3f4 <inv_generate_eMPL_outputs+0x144>)
 800d2c2:	484d      	ldr	r0, [pc, #308]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d2c4:	f002 faec 	bl	800f8a0 <inv_get_quaternion_set>
    eMPL_out.gyro_status = sensor_cal->gyro.status;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2cc:	4a4a      	ldr	r2, [pc, #296]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d2ce:	6153      	str	r3, [r2, #20]
    eMPL_out.accel_status = sensor_cal->accel.status;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2d4:	4a48      	ldr	r2, [pc, #288]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d2d6:	6193      	str	r3, [r2, #24]
    eMPL_out.compass_status = sensor_cal->compass.status;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d2de:	4a46      	ldr	r2, [pc, #280]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d2e0:	61d3      	str	r3, [r2, #28]

    /* Find the highest sample rate and tie sensor fusion timestamps to that one. */
    if (sensor_cal->gyro.status & INV_SENSOR_ON)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d004      	beq.n	800d2f8 <inv_generate_eMPL_outputs+0x48>
    {
        sr = sensor_cal->gyro.sample_rate_ms;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f2:	60bb      	str	r3, [r7, #8]
        use_sensor = 0;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms))
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d300:	2b00      	cmp	r3, #0
 800d302:	d009      	beq.n	800d318 <inv_generate_eMPL_outputs+0x68>
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	429a      	cmp	r2, r3
 800d30c:	dd04      	ble.n	800d318 <inv_generate_eMPL_outputs+0x68>
    {
        sr = sensor_cal->accel.sample_rate_ms;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d312:	60bb      	str	r3, [r7, #8]
        use_sensor = 1;
 800d314:	2301      	movs	r3, #1
 800d316:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms))
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00b      	beq.n	800d33e <inv_generate_eMPL_outputs+0x8e>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	429a      	cmp	r2, r3
 800d330:	dd05      	ble.n	800d33e <inv_generate_eMPL_outputs+0x8e>
    {
        sr = sensor_cal->compass.sample_rate_ms;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d338:	60bb      	str	r3, [r7, #8]
        use_sensor = 2;
 800d33a:	2302      	movs	r3, #2
 800d33c:	60fb      	str	r3, [r7, #12]
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d00b      	beq.n	800d364 <inv_generate_eMPL_outputs+0xb4>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d352:	68ba      	ldr	r2, [r7, #8]
 800d354:	429a      	cmp	r2, r3
 800d356:	dd05      	ble.n	800d364 <inv_generate_eMPL_outputs+0xb4>
    {
        sr = sensor_cal->quat.sample_rate_ms;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800d35e:	60bb      	str	r3, [r7, #8]
        use_sensor = 3;
 800d360:	2303      	movs	r3, #3
 800d362:	60fb      	str	r3, [r7, #12]
    }

    switch (use_sensor)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2b03      	cmp	r3, #3
 800d368:	d02e      	beq.n	800d3c8 <inv_generate_eMPL_outputs+0x118>
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	dc05      	bgt.n	800d37c <inv_generate_eMPL_outputs+0xcc>
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d00e      	beq.n	800d394 <inv_generate_eMPL_outputs+0xe4>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b02      	cmp	r3, #2
 800d37a:	d017      	beq.n	800d3ac <inv_generate_eMPL_outputs+0xfc>
    {
    default:
    case 0:
        eMPL_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d380:	119b      	asrs	r3, r3, #6
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	4a1c      	ldr	r2, [pc, #112]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d388:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->gyro.timestamp;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38e:	4a1a      	ldr	r2, [pc, #104]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d390:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800d392:	e027      	b.n	800d3e4 <inv_generate_eMPL_outputs+0x134>
    case 1:
        eMPL_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d398:	119b      	asrs	r3, r3, #6
 800d39a:	f003 0301 	and.w	r3, r3, #1
 800d39e:	4a16      	ldr	r2, [pc, #88]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d3a0:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->accel.timestamp;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3a6:	4a14      	ldr	r2, [pc, #80]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d3a8:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800d3aa:	e01b      	b.n	800d3e4 <inv_generate_eMPL_outputs+0x134>
    case 2:
        eMPL_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d3b2:	119b      	asrs	r3, r3, #6
 800d3b4:	f003 0301 	and.w	r3, r3, #1
 800d3b8:	4a0f      	ldr	r2, [pc, #60]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d3ba:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->compass.timestamp;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d3c2:	4a0d      	ldr	r2, [pc, #52]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d3c4:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800d3c6:	e00d      	b.n	800d3e4 <inv_generate_eMPL_outputs+0x134>
    case 3:
        eMPL_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800d3ce:	119b      	asrs	r3, r3, #6
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	4a08      	ldr	r2, [pc, #32]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d3d6:	6213      	str	r3, [r2, #32]
        eMPL_out.nine_axis_timestamp = sensor_cal->quat.timestamp;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800d3de:	4a06      	ldr	r2, [pc, #24]	; (800d3f8 <inv_generate_eMPL_outputs+0x148>)
 800d3e0:	6253      	str	r3, [r2, #36]	; 0x24
        break;
 800d3e2:	bf00      	nop
    }

    return INV_SUCCESS;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	200005b8 	.word	0x200005b8
 800d3f4:	200005a4 	.word	0x200005a4
 800d3f8:	20000594 	.word	0x20000594

0800d3fc <inv_start_eMPL_outputs>:

inv_error_t inv_start_eMPL_outputs(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	af00      	add	r7, sp, #0
    return inv_register_data_cb(inv_generate_eMPL_outputs, INV_PRIORITY_EMPL_OUTPUTS,
 800d400:	2207      	movs	r2, #7
 800d402:	f240 3183 	movw	r1, #899	; 0x383
 800d406:	4803      	ldr	r0, [pc, #12]	; (800d414 <inv_start_eMPL_outputs+0x18>)
 800d408:	f000 fb5c 	bl	800dac4 <inv_register_data_cb>
 800d40c:	4603      	mov	r3, r0
                                INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);

}
 800d40e:	4618      	mov	r0, r3
 800d410:	bd80      	pop	{r7, pc}
 800d412:	bf00      	nop
 800d414:	0800d2b1 	.word	0x0800d2b1

0800d418 <inv_init_eMPL_outputs>:
{
    return inv_unregister_data_cb(inv_generate_eMPL_outputs);
}

static inv_error_t inv_init_eMPL_outputs(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
    memset(&eMPL_out, 0, sizeof(eMPL_out));
 800d41c:	2228      	movs	r2, #40	; 0x28
 800d41e:	2100      	movs	r1, #0
 800d420:	4802      	ldr	r0, [pc, #8]	; (800d42c <inv_init_eMPL_outputs+0x14>)
 800d422:	f003 f904 	bl	801062e <memset>
    return INV_SUCCESS;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	20000594 	.word	0x20000594

0800d430 <inv_enable_eMPL_outputs>:

/**
 *  @brief  Turns on creation and storage of HAL type results.
 */
inv_error_t inv_enable_eMPL_outputs(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_eMPL_outputs();
 800d436:	f7ff ffef 	bl	800d418 <inv_init_eMPL_outputs>
 800d43a:	6078      	str	r0, [r7, #4]
    if (result)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d001      	beq.n	800d446 <inv_enable_eMPL_outputs+0x16>
        return result;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	e003      	b.n	800d44e <inv_enable_eMPL_outputs+0x1e>
    return inv_register_mpl_start_notification(inv_start_eMPL_outputs);
 800d446:	4804      	ldr	r0, [pc, #16]	; (800d458 <inv_enable_eMPL_outputs+0x28>)
 800d448:	f002 fb54 	bl	800faf4 <inv_register_mpl_start_notification>
 800d44c:	4603      	mov	r3, r0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3708      	adds	r7, #8
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	0800d3fd 	.word	0x0800d3fd

0800d45c <inv_db_load_func>:
}
#endif

/** This function receives the data that was stored in non-volatile memory between power off */
static inv_error_t inv_db_load_func(const unsigned char *data)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
    memcpy(&inv_data_builder.save, data, sizeof(inv_data_builder.save));
 800d464:	2248      	movs	r2, #72	; 0x48
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	480f      	ldr	r0, [pc, #60]	; (800d4a8 <inv_db_load_func+0x4c>)
 800d46a:	f003 f8b8 	bl	80105de <memcpy>
    // copy in the saved accuracy in the actual sensors accuracy
    sensors.gyro.accuracy = inv_data_builder.save.gyro_accuracy;
 800d46e:	4b0f      	ldr	r3, [pc, #60]	; (800d4ac <inv_db_load_func+0x50>)
 800d470:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800d474:	4a0e      	ldr	r2, [pc, #56]	; (800d4b0 <inv_db_load_func+0x54>)
 800d476:	6353      	str	r3, [r2, #52]	; 0x34
    sensors.accel.accuracy = inv_data_builder.save.accel_accuracy;
 800d478:	4b0c      	ldr	r3, [pc, #48]	; (800d4ac <inv_db_load_func+0x50>)
 800d47a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800d47e:	4a0c      	ldr	r2, [pc, #48]	; (800d4b0 <inv_db_load_func+0x54>)
 800d480:	6793      	str	r3, [r2, #120]	; 0x78
    sensors.compass.accuracy = inv_data_builder.save.compass_accuracy;
 800d482:	4b0a      	ldr	r3, [pc, #40]	; (800d4ac <inv_db_load_func+0x50>)
 800d484:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800d488:	4a09      	ldr	r2, [pc, #36]	; (800d4b0 <inv_db_load_func+0x54>)
 800d48a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
    // TODO
    if (sensors.compass.accuracy == 3)
 800d48e:	4b08      	ldr	r3, [pc, #32]	; (800d4b0 <inv_db_load_func+0x54>)
 800d490:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d494:	2b03      	cmp	r3, #3
 800d496:	d102      	bne.n	800d49e <inv_db_load_func+0x42>
    {
        inv_set_compass_bias_found(1);
 800d498:	2001      	movs	r0, #1
 800d49a:	f002 fa9f 	bl	800f9dc <inv_set_compass_bias_found>
    }
    return INV_SUCCESS;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}
 800d4a8:	200006b0 	.word	0x200006b0
 800d4ac:	200005bc 	.word	0x200005bc
 800d4b0:	20001058 	.word	0x20001058

0800d4b4 <inv_db_save_func>:

/** This function returns the data to be stored in non-volatile memory between power off */
static inv_error_t inv_db_save_func(unsigned char *data)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
    memcpy(data, &inv_data_builder.save, sizeof(inv_data_builder.save));
 800d4bc:	2248      	movs	r2, #72	; 0x48
 800d4be:	4904      	ldr	r1, [pc, #16]	; (800d4d0 <inv_db_save_func+0x1c>)
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f003 f88c 	bl	80105de <memcpy>
    return INV_SUCCESS;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	200006b0 	.word	0x200006b0

0800d4d4 <inv_init_data_builder>:

/** Initialize the data builder
 */
inv_error_t inv_init_data_builder(void)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	af00      	add	r7, sp, #0
    /* TODO: Hardcode temperature scale/offset here. */
    memset(&inv_data_builder, 0, sizeof(inv_data_builder));
 800d4d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d4dc:	2100      	movs	r1, #0
 800d4de:	480a      	ldr	r0, [pc, #40]	; (800d508 <inv_init_data_builder+0x34>)
 800d4e0:	f003 f8a5 	bl	801062e <memset>
    memset(&sensors, 0, sizeof(sensors));
 800d4e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	4808      	ldr	r0, [pc, #32]	; (800d50c <inv_init_data_builder+0x38>)
 800d4ec:	f003 f89f 	bl	801062e <memset>

    // disable the soft iron transform process
    inv_reset_compass_soft_iron_matrix();
 800d4f0:	f000 fd90 	bl	800e014 <inv_reset_compass_soft_iron_matrix>

    return inv_register_load_store(inv_db_load_func, inv_db_save_func, sizeof(inv_data_builder.save), INV_DB_SAVE_KEY);
 800d4f4:	f24d 0393 	movw	r3, #53395	; 0xd093
 800d4f8:	2248      	movs	r2, #72	; 0x48
 800d4fa:	4905      	ldr	r1, [pc, #20]	; (800d510 <inv_init_data_builder+0x3c>)
 800d4fc:	4805      	ldr	r0, [pc, #20]	; (800d514 <inv_init_data_builder+0x40>)
 800d4fe:	f002 fb4d 	bl	800fb9c <inv_register_load_store>
 800d502:	4603      	mov	r3, r0
}
 800d504:	4618      	mov	r0, r3
 800d506:	bd80      	pop	{r7, pc}
 800d508:	200005bc 	.word	0x200005bc
 800d50c:	20001058 	.word	0x20001058
 800d510:	0800d4b5 	.word	0x0800d4b5
 800d514:	0800d45d 	.word	0x0800d45d

0800d518 <set_sensor_orientation_and_scale>:
 * @param[in] orientation Orientation description of how part is mounted.
 * @param[in] sensitivity A Scale factor to convert from hardware units to
 *            standard units (dps, uT, g).
 */
void set_sensor_orientation_and_scale(struct inv_single_sensor_t *sensor, int orientation, long sensitivity)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
    sensor->sensitivity = sensitivity;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	625a      	str	r2, [r3, #36]	; 0x24
    sensor->orientation = orientation;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	601a      	str	r2, [r3, #0]
}
 800d530:	bf00      	nop
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	bc80      	pop	{r7}
 800d538:	4770      	bx	lr
	...

0800d53c <inv_set_gyro_orientation_and_scale>:
 * @param[in] sensitivity A scale factor to convert device units to degrees per second scaled by 2^16
 *            such that degrees_per_second  = device_units * sensitivity / 2^30. Typically
 *            it works out to be the maximum rate * 2^15.
 */
void inv_set_gyro_orientation_and_scale(int orientation, long sensitivity)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.gyro, orientation, sensitivity);
 800d546:	683a      	ldr	r2, [r7, #0]
 800d548:	6879      	ldr	r1, [r7, #4]
 800d54a:	4803      	ldr	r0, [pc, #12]	; (800d558 <inv_set_gyro_orientation_and_scale+0x1c>)
 800d54c:	f7ff ffe4 	bl	800d518 <set_sensor_orientation_and_scale>
}
 800d550:	bf00      	nop
 800d552:	3708      	adds	r7, #8
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	20001058 	.word	0x20001058

0800d55c <inv_set_gyro_sample_rate>:

/** Set Gyro Sample rate in micro seconds.
 * @param[in] sample_rate_us Set Gyro Sample rate in us
 */
void inv_set_gyro_sample_rate(long sample_rate_us)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_G_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.gyro.sample_rate_us = sample_rate_us;
 800d564:	4a0d      	ldr	r2, [pc, #52]	; (800d59c <inv_set_gyro_sample_rate+0x40>)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6293      	str	r3, [r2, #40]	; 0x28
    sensors.gyro.sample_rate_ms = sample_rate_us / 1000;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4a0c      	ldr	r2, [pc, #48]	; (800d5a0 <inv_set_gyro_sample_rate+0x44>)
 800d56e:	fb82 1203 	smull	r1, r2, r2, r3
 800d572:	1192      	asrs	r2, r2, #6
 800d574:	17db      	asrs	r3, r3, #31
 800d576:	1ad3      	subs	r3, r2, r3
 800d578:	4a08      	ldr	r2, [pc, #32]	; (800d59c <inv_set_gyro_sample_rate+0x40>)
 800d57a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (sensors.gyro.bandwidth == 0)
 800d57c:	4b07      	ldr	r3, [pc, #28]	; (800d59c <inv_set_gyro_sample_rate+0x40>)
 800d57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d580:	2b00      	cmp	r3, #0
 800d582:	d105      	bne.n	800d590 <inv_set_gyro_sample_rate+0x34>
    {
        sensors.gyro.bandwidth = (int)(1000000L / sample_rate_us);
 800d584:	4a07      	ldr	r2, [pc, #28]	; (800d5a4 <inv_set_gyro_sample_rate+0x48>)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	fb92 f3f3 	sdiv	r3, r2, r3
 800d58c:	4a03      	ldr	r2, [pc, #12]	; (800d59c <inv_set_gyro_sample_rate+0x40>)
 800d58e:	6413      	str	r3, [r2, #64]	; 0x40
    }
}
 800d590:	bf00      	nop
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	bc80      	pop	{r7}
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	20001058 	.word	0x20001058
 800d5a0:	10624dd3 	.word	0x10624dd3
 800d5a4:	000f4240 	.word	0x000f4240

0800d5a8 <inv_set_accel_sample_rate>:

/** Set Accel Sample rate in micro seconds.
 * @param[in] sample_rate_us Set Accel Sample rate in us
 */
void inv_set_accel_sample_rate(long sample_rate_us)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
        int type = PLAYBACK_DBG_TYPE_A_SAMPLE_RATE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&sample_rate_us, sizeof(sample_rate_us), 1, inv_data_builder.file);
    }
#endif
    sensors.accel.sample_rate_us = sample_rate_us;
 800d5b0:	4a0e      	ldr	r2, [pc, #56]	; (800d5ec <inv_set_accel_sample_rate+0x44>)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	66d3      	str	r3, [r2, #108]	; 0x6c
    sensors.accel.sample_rate_ms = sample_rate_us / 1000;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	4a0d      	ldr	r2, [pc, #52]	; (800d5f0 <inv_set_accel_sample_rate+0x48>)
 800d5ba:	fb82 1203 	smull	r1, r2, r2, r3
 800d5be:	1192      	asrs	r2, r2, #6
 800d5c0:	17db      	asrs	r3, r3, #31
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	4a09      	ldr	r2, [pc, #36]	; (800d5ec <inv_set_accel_sample_rate+0x44>)
 800d5c6:	6713      	str	r3, [r2, #112]	; 0x70
    if (sensors.accel.bandwidth == 0)
 800d5c8:	4b08      	ldr	r3, [pc, #32]	; (800d5ec <inv_set_accel_sample_rate+0x44>)
 800d5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <inv_set_accel_sample_rate+0x38>
    {
        sensors.accel.bandwidth = (int)(1000000L / sample_rate_us);
 800d5d2:	4a08      	ldr	r2, [pc, #32]	; (800d5f4 <inv_set_accel_sample_rate+0x4c>)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	fb92 f3f3 	sdiv	r3, r2, r3
 800d5da:	4a04      	ldr	r2, [pc, #16]	; (800d5ec <inv_set_accel_sample_rate+0x44>)
 800d5dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }
}
 800d5e0:	bf00      	nop
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bc80      	pop	{r7}
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	20001058 	.word	0x20001058
 800d5f0:	10624dd3 	.word	0x10624dd3
 800d5f4:	000f4240 	.word	0x000f4240

0800d5f8 <inv_get_compass_on>:

/** Helper function stating whether the compass is on or off.
 * @return TRUE if compass if on, 0 if compass if off
 */
int inv_get_compass_on()
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0
    return (sensors.compass.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800d5fc:	4b06      	ldr	r3, [pc, #24]	; (800d618 <inv_get_compass_on+0x20>)
 800d5fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d606:	2b00      	cmp	r3, #0
 800d608:	bf14      	ite	ne
 800d60a:	2301      	movne	r3, #1
 800d60c:	2300      	moveq	r3, #0
 800d60e:	b2db      	uxtb	r3, r3
}
 800d610:	4618      	mov	r0, r3
 800d612:	46bd      	mov	sp, r7
 800d614:	bc80      	pop	{r7}
 800d616:	4770      	bx	lr
 800d618:	20001058 	.word	0x20001058

0800d61c <inv_get_gyro_on>:

/** Helper function stating whether the gyro is on or off.
 * @return TRUE if gyro if on, 0 if gyro if off
 */
int inv_get_gyro_on()
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0
    return (sensors.gyro.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800d620:	4b06      	ldr	r3, [pc, #24]	; (800d63c <inv_get_gyro_on+0x20>)
 800d622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d628:	2b00      	cmp	r3, #0
 800d62a:	bf14      	ite	ne
 800d62c:	2301      	movne	r3, #1
 800d62e:	2300      	moveq	r3, #0
 800d630:	b2db      	uxtb	r3, r3
}
 800d632:	4618      	mov	r0, r3
 800d634:	46bd      	mov	sp, r7
 800d636:	bc80      	pop	{r7}
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	20001058 	.word	0x20001058

0800d640 <inv_get_accel_on>:

/** Helper function stating whether the acceleromter is on or off.
 * @return TRUE if accel if on, 0 if accel if off
 */
int inv_get_accel_on()
{
 800d640:	b480      	push	{r7}
 800d642:	af00      	add	r7, sp, #0
    return (sensors.accel.status & INV_SENSOR_ON) == INV_SENSOR_ON;
 800d644:	4b06      	ldr	r3, [pc, #24]	; (800d660 <inv_get_accel_on+0x20>)
 800d646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	bf14      	ite	ne
 800d650:	2301      	movne	r3, #1
 800d652:	2300      	moveq	r3, #0
 800d654:	b2db      	uxtb	r3, r3
}
 800d656:	4618      	mov	r0, r3
 800d658:	46bd      	mov	sp, r7
 800d65a:	bc80      	pop	{r7}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	20001058 	.word	0x20001058

0800d664 <inv_get_last_timestamp>:
/** Get last timestamp across all 3 sensors that are on.
 * This find out which timestamp has the largest value for sensors that are on.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_time_t inv_get_last_timestamp()
{
 800d664:	b480      	push	{r7}
 800d666:	b083      	sub	sp, #12
 800d668:	af00      	add	r7, sp, #0
    inv_time_t timestamp = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_SENSOR_ON)
 800d66e:	4b1f      	ldr	r3, [pc, #124]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d676:	2b00      	cmp	r3, #0
 800d678:	d002      	beq.n	800d680 <inv_get_last_timestamp+0x1c>
    {
        timestamp = sensors.accel.timestamp;
 800d67a:	4b1c      	ldr	r3, [pc, #112]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d67e:	607b      	str	r3, [r7, #4]
    }
    if (sensors.gyro.status & INV_SENSOR_ON)
 800d680:	4b1a      	ldr	r3, [pc, #104]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d007      	beq.n	800d69c <inv_get_last_timestamp+0x38>
    {
        if (timestamp < sensors.gyro.timestamp)
 800d68c:	4b17      	ldr	r3, [pc, #92]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d68e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	429a      	cmp	r2, r3
 800d694:	d202      	bcs.n	800d69c <inv_get_last_timestamp+0x38>
        {
            timestamp = sensors.gyro.timestamp;
 800d696:	4b15      	ldr	r3, [pc, #84]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69a:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.compass.status & INV_SENSOR_ON)
 800d69c:	4b13      	ldr	r3, [pc, #76]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d69e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d6a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d009      	beq.n	800d6be <inv_get_last_timestamp+0x5a>
    {
        if (timestamp < sensors.compass.timestamp)
 800d6aa:	4b10      	ldr	r3, [pc, #64]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d6ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d203      	bcs.n	800d6be <inv_get_last_timestamp+0x5a>
        {
            timestamp = sensors.compass.timestamp;
 800d6b6:	4b0d      	ldr	r3, [pc, #52]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d6b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800d6bc:	607b      	str	r3, [r7, #4]
        }
    }
    if (sensors.temp.status & INV_SENSOR_ON)
 800d6be:	4b0b      	ldr	r3, [pc, #44]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d6c0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d009      	beq.n	800d6e0 <inv_get_last_timestamp+0x7c>
    {
        if (timestamp < sensors.temp.timestamp)
 800d6cc:	4b07      	ldr	r3, [pc, #28]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d6ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	429a      	cmp	r2, r3
 800d6d6:	d203      	bcs.n	800d6e0 <inv_get_last_timestamp+0x7c>
            timestamp = sensors.temp.timestamp;
 800d6d8:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <inv_get_last_timestamp+0x88>)
 800d6da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d6de:	607b      	str	r3, [r7, #4]
    }
    return timestamp;
 800d6e0:	687b      	ldr	r3, [r7, #4]
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	370c      	adds	r7, #12
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bc80      	pop	{r7}
 800d6ea:	4770      	bx	lr
 800d6ec:	20001058 	.word	0x20001058

0800d6f0 <inv_set_accel_orientation_and_scale>:
 * @param[in] sensitivity A scale factor to convert device units to g's
 *            such that g's = device_units * sensitivity / 2^30. Typically
 *            it works out to be the maximum g_value * 2^15.
 */
void inv_set_accel_orientation_and_scale(int orientation, long sensitivity)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&orientation, sizeof(orientation), 1, inv_data_builder.file);
        fwrite(&sensitivity, sizeof(sensitivity), 1, inv_data_builder.file);
    }
#endif
    set_sensor_orientation_and_scale(&sensors.accel, orientation, sensitivity);
 800d6fa:	683a      	ldr	r2, [r7, #0]
 800d6fc:	6879      	ldr	r1, [r7, #4]
 800d6fe:	4803      	ldr	r0, [pc, #12]	; (800d70c <inv_set_accel_orientation_and_scale+0x1c>)
 800d700:	f7ff ff0a 	bl	800d518 <set_sensor_orientation_and_scale>
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	2000109c 	.word	0x2000109c

0800d710 <inv_apply_calibration>:
 * @param[in,out] sensor structure to modify
 * @param[in] bias bias in the mounting frame, in hardware units scaled by
 *                 2^16. Length 3.
 */
void inv_apply_calibration(struct inv_single_sensor_t *sensor, const long *bias)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
    long raw32[3];

    // Convert raw to calibrated
    raw32[0] = (long)sensor->raw[0] << 15;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d720:	03db      	lsls	r3, r3, #15
 800d722:	60fb      	str	r3, [r7, #12]
    raw32[1] = (long)sensor->raw[1] << 15;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d72a:	03db      	lsls	r3, r3, #15
 800d72c:	613b      	str	r3, [r7, #16]
    raw32[2] = (long)sensor->raw[2] << 15;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d734:	03db      	lsls	r3, r3, #15
 800d736:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->raw_scaled);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	b298      	uxth	r0, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d742:	0059      	lsls	r1, r3, #1
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	330c      	adds	r3, #12
 800d748:	f107 020c 	add.w	r2, r7, #12
 800d74c:	f001 fdfb 	bl	800f346 <inv_convert_to_body_with_scale>

    raw32[0] -= bias[0] >> 1;
 800d750:	68fa      	ldr	r2, [r7, #12]
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	105b      	asrs	r3, r3, #1
 800d758:	1ad3      	subs	r3, r2, r3
 800d75a:	60fb      	str	r3, [r7, #12]
    raw32[1] -= bias[1] >> 1;
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	3304      	adds	r3, #4
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	105b      	asrs	r3, r3, #1
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	613b      	str	r3, [r7, #16]
    raw32[2] -= bias[2] >> 1;
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	3308      	adds	r3, #8
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	105b      	asrs	r3, r3, #1
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	617b      	str	r3, [r7, #20]

    inv_convert_to_body_with_scale(sensor->orientation, sensor->sensitivity << 1, raw32, sensor->calibrated);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	b298      	uxth	r0, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d782:	0059      	lsls	r1, r3, #1
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	3318      	adds	r3, #24
 800d788:	f107 020c 	add.w	r2, r7, #12
 800d78c:	f001 fddb 	bl	800f346 <inv_convert_to_body_with_scale>

    sensor->status |= INV_CALIBRATED;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d794:	f043 0220 	orr.w	r2, r3, #32
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d79c:	bf00      	nop
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <inv_set_compass_disturbance>:

/** Set the state of a compass disturbance
 * @param[in] dist 1=disturbance, 0=no disturbance
 */
void inv_set_compass_disturbance(int dist)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
    inv_data_builder.compass_disturbance = dist;
 800d7ac:	4a04      	ldr	r2, [pc, #16]	; (800d7c0 <inv_set_compass_disturbance+0x1c>)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
}
 800d7b4:	bf00      	nop
 800d7b6:	370c      	adds	r7, #12
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bc80      	pop	{r7}
 800d7bc:	4770      	bx	lr
 800d7be:	bf00      	nop
 800d7c0:	200005bc 	.word	0x200005bc

0800d7c4 <inv_set_gyro_bias>:
 * @param[in] bias Gyro bias in hardware units scaled by 2^16. In chip mounting frame.
 *            Length 3.
 * @param[in] accuracy Accuracy of bias. 0 = least accurate, 3 = most accurate.
 */
void inv_set_gyro_bias(const long *bias, int accuracy)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d010      	beq.n	800d7f6 <inv_set_gyro_bias+0x32>
    {
        if (memcmp(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias)))
 800d7d4:	220c      	movs	r2, #12
 800d7d6:	6879      	ldr	r1, [r7, #4]
 800d7d8:	4819      	ldr	r0, [pc, #100]	; (800d840 <inv_set_gyro_bias+0x7c>)
 800d7da:	f002 fef2 	bl	80105c2 <memcmp>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d008      	beq.n	800d7f6 <inv_set_gyro_bias+0x32>
        {
            memcpy(inv_data_builder.save.gyro_bias, bias, sizeof(inv_data_builder.save.gyro_bias));
 800d7e4:	220c      	movs	r2, #12
 800d7e6:	6879      	ldr	r1, [r7, #4]
 800d7e8:	4815      	ldr	r0, [pc, #84]	; (800d840 <inv_set_gyro_bias+0x7c>)
 800d7ea:	f002 fef8 	bl	80105de <memcpy>
            inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 800d7ee:	4914      	ldr	r1, [pc, #80]	; (800d840 <inv_set_gyro_bias+0x7c>)
 800d7f0:	4814      	ldr	r0, [pc, #80]	; (800d844 <inv_set_gyro_bias+0x80>)
 800d7f2:	f7ff ff8d 	bl	800d710 <inv_apply_calibration>
        }
    }
    sensors.gyro.accuracy = accuracy;
 800d7f6:	4a13      	ldr	r2, [pc, #76]	; (800d844 <inv_set_gyro_bias+0x80>)
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	6353      	str	r3, [r2, #52]	; 0x34
    inv_data_builder.save.gyro_accuracy = accuracy;
 800d7fc:	4a12      	ldr	r2, [pc, #72]	; (800d848 <inv_set_gyro_bias+0x84>)
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

    /* TODO: What should we do if there's no temperature data? */
    if (sensors.temp.calibrated[0])
 800d804:	4b0f      	ldr	r3, [pc, #60]	; (800d844 <inv_set_gyro_bias+0x80>)
 800d806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d006      	beq.n	800d81c <inv_set_gyro_bias+0x58>
        inv_data_builder.save.gyro_temp = sensors.temp.calibrated[0];
 800d80e:	4b0d      	ldr	r3, [pc, #52]	; (800d844 <inv_set_gyro_bias+0x80>)
 800d810:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d814:	4a0c      	ldr	r2, [pc, #48]	; (800d848 <inv_set_gyro_bias+0x84>)
 800d816:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800d81a:	e004      	b.n	800d826 <inv_set_gyro_bias+0x62>
    else
        /* Set to 27 deg C for now until we've got a better solution. */
        inv_data_builder.save.gyro_temp = 1769472L;
 800d81c:	4b0a      	ldr	r3, [pc, #40]	; (800d848 <inv_set_gyro_bias+0x84>)
 800d81e:	f44f 12d8 	mov.w	r2, #1769472	; 0x1b0000
 800d822:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    inv_set_message(INV_MSG_NEW_GB_EVENT, INV_MSG_NEW_GB_EVENT, 0);
 800d826:	2200      	movs	r2, #0
 800d828:	2104      	movs	r1, #4
 800d82a:	2004      	movs	r0, #4
 800d82c:	f000 fe72 	bl	800e514 <inv_set_message>

    /* TODO: this flag works around the synchronization problem seen with using
       the user-exposed message layer to signal the temperature compensation
       module that gyro biases were set.
       A better, cleaner method is certainly needed. */
    inv_data_builder.save.gyro_bias_tc_set = true;
 800d830:	4b05      	ldr	r3, [pc, #20]	; (800d848 <inv_set_gyro_bias+0x84>)
 800d832:	2201      	movs	r2, #1
 800d834:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 800d838:	bf00      	nop
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	200006bc 	.word	0x200006bc
 800d844:	20001058 	.word	0x20001058
 800d848:	200005bc 	.word	0x200005bc

0800d84c <inv_get_gyro_bias_tc_set>:
 *          The flag clear automatically after is read.
 *  @return true if the flag was set, indicating gyro biases were set.
 *          false if the flag was not set.
 */
int inv_get_gyro_bias_tc_set(void)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
    int flag = (inv_data_builder.save.gyro_bias_tc_set == true);
 800d852:	4b09      	ldr	r3, [pc, #36]	; (800d878 <inv_get_gyro_bias_tc_set+0x2c>)
 800d854:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800d858:	2b01      	cmp	r3, #1
 800d85a:	bf0c      	ite	eq
 800d85c:	2301      	moveq	r3, #1
 800d85e:	2300      	movne	r3, #0
 800d860:	b2db      	uxtb	r3, r3
 800d862:	607b      	str	r3, [r7, #4]
    inv_data_builder.save.gyro_bias_tc_set = false;
 800d864:	4b04      	ldr	r3, [pc, #16]	; (800d878 <inv_get_gyro_bias_tc_set+0x2c>)
 800d866:	2200      	movs	r2, #0
 800d868:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    return flag;
 800d86c:	687b      	ldr	r3, [r7, #4]
}
 800d86e:	4618      	mov	r0, r3
 800d870:	370c      	adds	r7, #12
 800d872:	46bd      	mov	sp, r7
 800d874:	bc80      	pop	{r7}
 800d876:	4770      	bx	lr
 800d878:	200005bc 	.word	0x200005bc

0800d87c <inv_get_gyro_bias>:
 *              Length 3.
 *  @param[in] temp
 *              Tempearature in degrees C.
 */
void inv_get_gyro_bias(long *bias, long *temp)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
    if (bias != NULL)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <inv_get_gyro_bias+0x1a>
        memcpy(bias, inv_data_builder.save.gyro_bias, sizeof(inv_data_builder.save.gyro_bias));
 800d88c:	220c      	movs	r2, #12
 800d88e:	4908      	ldr	r1, [pc, #32]	; (800d8b0 <inv_get_gyro_bias+0x34>)
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f002 fea4 	bl	80105de <memcpy>
    if (temp != NULL)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d004      	beq.n	800d8a6 <inv_get_gyro_bias+0x2a>
        temp[0] = inv_data_builder.save.gyro_temp;
 800d89c:	4b05      	ldr	r3, [pc, #20]	; (800d8b4 <inv_get_gyro_bias+0x38>)
 800d89e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	601a      	str	r2, [r3, #0]
}
 800d8a6:	bf00      	nop
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
 800d8ae:	bf00      	nop
 800d8b0:	200006bc 	.word	0x200006bc
 800d8b4:	200005bc 	.word	0x200005bc

0800d8b8 <inv_build_accel>:
 *  @param[in]  timestamp
 *              Monotonic time stamp, for Android it's in nanoseconds.
 *  @return     Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_accel(const long *accel, int status, inv_time_t timestamp)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
        fwrite(accel, sizeof(accel[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    if ((status & INV_CALIBRATED) == 0)
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	f003 0320 	and.w	r3, r3, #32
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d11e      	bne.n	800d90c <inv_build_accel+0x54>
    {
        sensors.accel.raw[0] = (short)accel[0];
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	b21a      	sxth	r2, r3
 800d8d4:	4b25      	ldr	r3, [pc, #148]	; (800d96c <inv_build_accel+0xb4>)
 800d8d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        sensors.accel.raw[1] = (short)accel[1];
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	b21a      	sxth	r2, r3
 800d8e2:	4b22      	ldr	r3, [pc, #136]	; (800d96c <inv_build_accel+0xb4>)
 800d8e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
        sensors.accel.raw[2] = (short)accel[2];
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3308      	adds	r3, #8
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	b21a      	sxth	r2, r3
 800d8f0:	4b1e      	ldr	r3, [pc, #120]	; (800d96c <inv_build_accel+0xb4>)
 800d8f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        sensors.accel.status |= INV_RAW_DATA;
 800d8f6:	4b1d      	ldr	r3, [pc, #116]	; (800d96c <inv_build_accel+0xb4>)
 800d8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8fe:	4a1b      	ldr	r2, [pc, #108]	; (800d96c <inv_build_accel+0xb4>)
 800d900:	6753      	str	r3, [r2, #116]	; 0x74
        inv_apply_calibration(&sensors.accel, inv_data_builder.save.accel_bias);
 800d902:	491b      	ldr	r1, [pc, #108]	; (800d970 <inv_build_accel+0xb8>)
 800d904:	481b      	ldr	r0, [pc, #108]	; (800d974 <inv_build_accel+0xbc>)
 800d906:	f7ff ff03 	bl	800d710 <inv_apply_calibration>
 800d90a:	e01c      	b.n	800d946 <inv_build_accel+0x8e>
    }
    else
    {
        sensors.accel.calibrated[0] = accel[0];
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a16      	ldr	r2, [pc, #88]	; (800d96c <inv_build_accel+0xb4>)
 800d912:	65d3      	str	r3, [r2, #92]	; 0x5c
        sensors.accel.calibrated[1] = accel[1];
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	4a14      	ldr	r2, [pc, #80]	; (800d96c <inv_build_accel+0xb4>)
 800d91a:	6613      	str	r3, [r2, #96]	; 0x60
        sensors.accel.calibrated[2] = accel[2];
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	4a12      	ldr	r2, [pc, #72]	; (800d96c <inv_build_accel+0xb4>)
 800d922:	6653      	str	r3, [r2, #100]	; 0x64
        sensors.accel.status |= INV_CALIBRATED;
 800d924:	4b11      	ldr	r3, [pc, #68]	; (800d96c <inv_build_accel+0xb4>)
 800d926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d928:	f043 0320 	orr.w	r3, r3, #32
 800d92c:	4a0f      	ldr	r2, [pc, #60]	; (800d96c <inv_build_accel+0xb4>)
 800d92e:	6753      	str	r3, [r2, #116]	; 0x74
        sensors.accel.accuracy = status & 3;
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	f003 0303 	and.w	r3, r3, #3
 800d936:	4a0d      	ldr	r2, [pc, #52]	; (800d96c <inv_build_accel+0xb4>)
 800d938:	6793      	str	r3, [r2, #120]	; 0x78
        inv_data_builder.save.accel_accuracy = status & 3;
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	f003 0303 	and.w	r3, r3, #3
 800d940:	4a0d      	ldr	r2, [pc, #52]	; (800d978 <inv_build_accel+0xc0>)
 800d942:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
    }
    sensors.accel.status |= INV_NEW_DATA | INV_SENSOR_ON;
 800d946:	4b09      	ldr	r3, [pc, #36]	; (800d96c <inv_build_accel+0xb4>)
 800d948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d94a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800d94e:	4a07      	ldr	r2, [pc, #28]	; (800d96c <inv_build_accel+0xb4>)
 800d950:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.accel.timestamp_prev = sensors.accel.timestamp;
 800d952:	4b06      	ldr	r3, [pc, #24]	; (800d96c <inv_build_accel+0xb4>)
 800d954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d956:	4a05      	ldr	r2, [pc, #20]	; (800d96c <inv_build_accel+0xb4>)
 800d958:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    sensors.accel.timestamp = timestamp;
 800d95c:	4a03      	ldr	r2, [pc, #12]	; (800d96c <inv_build_accel+0xb4>)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	67d3      	str	r3, [r2, #124]	; 0x7c

    return INV_SUCCESS;
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	3710      	adds	r7, #16
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	20001058 	.word	0x20001058
 800d970:	200006d0 	.word	0x200006d0
 800d974:	2000109c 	.word	0x2000109c
 800d978:	200005bc 	.word	0x200005bc

0800d97c <inv_build_gyro>:
 * @param[in] timestamp Monotonic time stamp, for Android it's in nanoseconds.
 * @param[out] executed Set to 1 if data processing was done.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_gyro(const short *gyro, inv_time_t timestamp)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
        fwrite(gyro, sizeof(gyro[0]), 3, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    memcpy(sensors.gyro.raw, gyro, 3 * sizeof(short));
 800d986:	2206      	movs	r2, #6
 800d988:	6879      	ldr	r1, [r7, #4]
 800d98a:	480c      	ldr	r0, [pc, #48]	; (800d9bc <inv_build_gyro+0x40>)
 800d98c:	f002 fe27 	bl	80105de <memcpy>
    sensors.gyro.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800d990:	4b0b      	ldr	r3, [pc, #44]	; (800d9c0 <inv_build_gyro+0x44>)
 800d992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d994:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800d998:	4a09      	ldr	r2, [pc, #36]	; (800d9c0 <inv_build_gyro+0x44>)
 800d99a:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.gyro.timestamp_prev = sensors.gyro.timestamp;
 800d99c:	4b08      	ldr	r3, [pc, #32]	; (800d9c0 <inv_build_gyro+0x44>)
 800d99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a0:	4a07      	ldr	r2, [pc, #28]	; (800d9c0 <inv_build_gyro+0x44>)
 800d9a2:	63d3      	str	r3, [r2, #60]	; 0x3c
    sensors.gyro.timestamp = timestamp;
 800d9a4:	4a06      	ldr	r2, [pc, #24]	; (800d9c0 <inv_build_gyro+0x44>)
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	6393      	str	r3, [r2, #56]	; 0x38
    inv_apply_calibration(&sensors.gyro, inv_data_builder.save.gyro_bias);
 800d9aa:	4906      	ldr	r1, [pc, #24]	; (800d9c4 <inv_build_gyro+0x48>)
 800d9ac:	4804      	ldr	r0, [pc, #16]	; (800d9c0 <inv_build_gyro+0x44>)
 800d9ae:	f7ff feaf 	bl	800d710 <inv_apply_calibration>

    return INV_SUCCESS;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	2000105c 	.word	0x2000105c
 800d9c0:	20001058 	.word	0x20001058
 800d9c4:	200006bc 	.word	0x200006bc

0800d9c8 <inv_build_temp>:
 *  @param[in]  timestamp   Monotonic time stamp; for Android it's in
 *                          nanoseconds.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_temp(const long temp, inv_time_t timestamp)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
        fwrite(&temp, sizeof(temp), 1, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif
    sensors.temp.calibrated[0] = temp;
 800d9d2:	4a0e      	ldr	r2, [pc, #56]	; (800da0c <inv_build_temp+0x44>)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
    sensors.temp.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800d9da:	4b0c      	ldr	r3, [pc, #48]	; (800da0c <inv_build_temp+0x44>)
 800d9dc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800d9e0:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800d9e4:	4a09      	ldr	r2, [pc, #36]	; (800da0c <inv_build_temp+0x44>)
 800d9e6:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.temp.timestamp_prev = sensors.temp.timestamp;
 800d9ea:	4b08      	ldr	r3, [pc, #32]	; (800da0c <inv_build_temp+0x44>)
 800d9ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800d9f0:	4a06      	ldr	r2, [pc, #24]	; (800da0c <inv_build_temp+0x44>)
 800d9f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    sensors.temp.timestamp = timestamp;
 800d9f6:	4a05      	ldr	r2, [pc, #20]	; (800da0c <inv_build_temp+0x44>)
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    /* TODO: Apply scale, remove offset. */

    return INV_SUCCESS;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	bc80      	pop	{r7}
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	20001058 	.word	0x20001058

0800da10 <inv_build_quat>:
 *                         nanoseconds.
 * @param[out] executed Set to 1 if data processing was done.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_build_quat(const long *quat, int status, inv_time_t timestamp)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
        fwrite(quat, sizeof(quat[0]), 4, inv_data_builder.file);
        fwrite(&timestamp, sizeof(timestamp), 1, inv_data_builder.file);
    }
#endif

    memcpy(sensors.quat.raw, quat, sizeof(sensors.quat.raw));
 800da1c:	2210      	movs	r2, #16
 800da1e:	68f9      	ldr	r1, [r7, #12]
 800da20:	480e      	ldr	r0, [pc, #56]	; (800da5c <inv_build_quat+0x4c>)
 800da22:	f002 fddc 	bl	80105de <memcpy>
    sensors.quat.timestamp = timestamp;
 800da26:	4a0e      	ldr	r2, [pc, #56]	; (800da60 <inv_build_quat+0x50>)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    sensors.quat.status |= INV_NEW_DATA | INV_RAW_DATA | INV_SENSOR_ON;
 800da2e:	4b0c      	ldr	r3, [pc, #48]	; (800da60 <inv_build_quat+0x50>)
 800da30:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800da34:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800da38:	4a09      	ldr	r2, [pc, #36]	; (800da60 <inv_build_quat+0x50>)
 800da3a:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    sensors.quat.status |= (INV_BIAS_APPLIED & status);
 800da3e:	4b08      	ldr	r3, [pc, #32]	; (800da60 <inv_build_quat+0x50>)
 800da40:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da4a:	4313      	orrs	r3, r2
 800da4c:	4a04      	ldr	r2, [pc, #16]	; (800da60 <inv_build_quat+0x50>)
 800da4e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return INV_SUCCESS;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3710      	adds	r7, #16
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}
 800da5c:	20001168 	.word	0x20001168
 800da60:	20001058 	.word	0x20001058

0800da64 <inv_accel_was_turned_off>:

/** This should be called when the accel has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_accel_was_turned_off()
{
 800da64:	b480      	push	{r7}
 800da66:	af00      	add	r7, sp, #0
    sensors.accel.status = 0;
 800da68:	4b03      	ldr	r3, [pc, #12]	; (800da78 <inv_accel_was_turned_off+0x14>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800da6e:	bf00      	nop
 800da70:	46bd      	mov	sp, r7
 800da72:	bc80      	pop	{r7}
 800da74:	4770      	bx	lr
 800da76:	bf00      	nop
 800da78:	20001058 	.word	0x20001058

0800da7c <inv_compass_was_turned_off>:

/** This should be called when the compass has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_compass_was_turned_off()
{
 800da7c:	b480      	push	{r7}
 800da7e:	af00      	add	r7, sp, #0
    sensors.compass.status = 0;
 800da80:	4b03      	ldr	r3, [pc, #12]	; (800da90 <inv_compass_was_turned_off+0x14>)
 800da82:	2200      	movs	r2, #0
 800da84:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800da88:	bf00      	nop
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bc80      	pop	{r7}
 800da8e:	4770      	bx	lr
 800da90:	20001058 	.word	0x20001058

0800da94 <inv_quaternion_sensor_was_turned_off>:

/** This should be called when the quaternion data from the DMP has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_quaternion_sensor_was_turned_off(void)
{
 800da94:	b480      	push	{r7}
 800da96:	af00      	add	r7, sp, #0
    sensors.quat.status = 0;
 800da98:	4b03      	ldr	r3, [pc, #12]	; (800daa8 <inv_quaternion_sensor_was_turned_off+0x14>)
 800da9a:	2200      	movs	r2, #0
 800da9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800daa0:	bf00      	nop
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bc80      	pop	{r7}
 800daa6:	4770      	bx	lr
 800daa8:	20001058 	.word	0x20001058

0800daac <inv_gyro_was_turned_off>:

/** This should be called when the gyro has been turned off. This is so
 * that we will know if the data is contiguous.
 */
void inv_gyro_was_turned_off()
{
 800daac:	b480      	push	{r7}
 800daae:	af00      	add	r7, sp, #0
    sensors.gyro.status = 0;
 800dab0:	4b03      	ldr	r3, [pc, #12]	; (800dac0 <inv_gyro_was_turned_off+0x14>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dab6:	bf00      	nop
 800dab8:	46bd      	mov	sp, r7
 800daba:	bc80      	pop	{r7}
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	20001058 	.word	0x20001058

0800dac4 <inv_register_data_cb>:
 *            gyro data, INV_MAG_NEW = compass data. So passing in
 *            INV_ACCEL_NEW | INV_MAG_NEW, a
 *            callback would be generated if there was new magnetomer data OR new accel data.
 */
inv_error_t inv_register_data_cb(inv_error_t (*func)(struct inv_sensor_cal_t *data), int priority, int sensor_type)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b088      	sub	sp, #32
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
    inv_error_t result = INV_SUCCESS;
 800dad0:	2300      	movs	r3, #0
 800dad2:	61fb      	str	r3, [r7, #28]
    int kk, nn;

    // Make sure we haven't registered this function already
    // Or used the same priority
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800dad4:	2300      	movs	r3, #0
 800dad6:	61bb      	str	r3, [r7, #24]
 800dad8:	e01c      	b.n	800db14 <inv_register_data_cb+0x50>
    {
        if ((inv_data_builder.process[kk].func == func) || (inv_data_builder.process[kk].priority == priority))
 800dada:	4949      	ldr	r1, [pc, #292]	; (800dc00 <inv_register_data_cb+0x13c>)
 800dadc:	69ba      	ldr	r2, [r7, #24]
 800dade:	4613      	mov	r3, r2
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	4413      	add	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	440b      	add	r3, r1
 800dae8:	3304      	adds	r3, #4
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	68fa      	ldr	r2, [r7, #12]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d00b      	beq.n	800db0a <inv_register_data_cb+0x46>
 800daf2:	4943      	ldr	r1, [pc, #268]	; (800dc00 <inv_register_data_cb+0x13c>)
 800daf4:	69ba      	ldr	r2, [r7, #24]
 800daf6:	4613      	mov	r3, r2
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	4413      	add	r3, r2
 800dafc:	009b      	lsls	r3, r3, #2
 800dafe:	440b      	add	r3, r1
 800db00:	3308      	adds	r3, #8
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	429a      	cmp	r2, r3
 800db08:	d101      	bne.n	800db0e <inv_register_data_cb+0x4a>
        {
            return INV_ERROR_INVALID_PARAMETER; // fixme give a warning
 800db0a:	2316      	movs	r3, #22
 800db0c:	e074      	b.n	800dbf8 <inv_register_data_cb+0x134>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	3301      	adds	r3, #1
 800db12:	61bb      	str	r3, [r7, #24]
 800db14:	4b3a      	ldr	r3, [pc, #232]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	69ba      	ldr	r2, [r7, #24]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	dbdd      	blt.n	800dada <inv_register_data_cb+0x16>
        }
    }

    // Make sure we have not filled up our number of allowable callbacks
    if (inv_data_builder.num_cb <= INV_MAX_DATA_CB - 1)
 800db1e:	4b38      	ldr	r3, [pc, #224]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b13      	cmp	r3, #19
 800db24:	dc62      	bgt.n	800dbec <inv_register_data_cb+0x128>
    {
        kk = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	61bb      	str	r3, [r7, #24]
        if (inv_data_builder.num_cb != 0)
 800db2a:	4b35      	ldr	r3, [pc, #212]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d038      	beq.n	800dba4 <inv_register_data_cb+0xe0>
        {
            // set kk to be where this new callback goes in the array
            while ((kk < inv_data_builder.num_cb) && (inv_data_builder.process[kk].priority < priority))
 800db32:	e002      	b.n	800db3a <inv_register_data_cb+0x76>
            {
                kk++;
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	3301      	adds	r3, #1
 800db38:	61bb      	str	r3, [r7, #24]
            while ((kk < inv_data_builder.num_cb) && (inv_data_builder.process[kk].priority < priority))
 800db3a:	4b31      	ldr	r3, [pc, #196]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	69ba      	ldr	r2, [r7, #24]
 800db40:	429a      	cmp	r2, r3
 800db42:	da0b      	bge.n	800db5c <inv_register_data_cb+0x98>
 800db44:	492e      	ldr	r1, [pc, #184]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db46:	69ba      	ldr	r2, [r7, #24]
 800db48:	4613      	mov	r3, r2
 800db4a:	005b      	lsls	r3, r3, #1
 800db4c:	4413      	add	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	440b      	add	r3, r1
 800db52:	3308      	adds	r3, #8
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	429a      	cmp	r2, r3
 800db5a:	dceb      	bgt.n	800db34 <inv_register_data_cb+0x70>
            }
            if (kk != inv_data_builder.num_cb)
 800db5c:	4b28      	ldr	r3, [pc, #160]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	69ba      	ldr	r2, [r7, #24]
 800db62:	429a      	cmp	r2, r3
 800db64:	d01e      	beq.n	800dba4 <inv_register_data_cb+0xe0>
            {
                // We need to move the others
                for (nn = inv_data_builder.num_cb; nn > kk; --nn)
 800db66:	4b26      	ldr	r3, [pc, #152]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	617b      	str	r3, [r7, #20]
 800db6c:	e016      	b.n	800db9c <inv_register_data_cb+0xd8>
                {
                    inv_data_builder.process[nn] = inv_data_builder.process[nn - 1];
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	1e5a      	subs	r2, r3, #1
 800db72:	4823      	ldr	r0, [pc, #140]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db74:	6979      	ldr	r1, [r7, #20]
 800db76:	460b      	mov	r3, r1
 800db78:	005b      	lsls	r3, r3, #1
 800db7a:	440b      	add	r3, r1
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	18c1      	adds	r1, r0, r3
 800db80:	481f      	ldr	r0, [pc, #124]	; (800dc00 <inv_register_data_cb+0x13c>)
 800db82:	4613      	mov	r3, r2
 800db84:	005b      	lsls	r3, r3, #1
 800db86:	4413      	add	r3, r2
 800db88:	009b      	lsls	r3, r3, #2
 800db8a:	18c2      	adds	r2, r0, r3
 800db8c:	1d0b      	adds	r3, r1, #4
 800db8e:	3204      	adds	r2, #4
 800db90:	ca07      	ldmia	r2, {r0, r1, r2}
 800db92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                for (nn = inv_data_builder.num_cb; nn > kk; --nn)
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	3b01      	subs	r3, #1
 800db9a:	617b      	str	r3, [r7, #20]
 800db9c:	697a      	ldr	r2, [r7, #20]
 800db9e:	69bb      	ldr	r3, [r7, #24]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	dce4      	bgt.n	800db6e <inv_register_data_cb+0xaa>
                }
            }
        }
        // Add new callback
        inv_data_builder.process[kk].func = func;
 800dba4:	4916      	ldr	r1, [pc, #88]	; (800dc00 <inv_register_data_cb+0x13c>)
 800dba6:	69ba      	ldr	r2, [r7, #24]
 800dba8:	4613      	mov	r3, r2
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	4413      	add	r3, r2
 800dbae:	009b      	lsls	r3, r3, #2
 800dbb0:	440b      	add	r3, r1
 800dbb2:	3304      	adds	r3, #4
 800dbb4:	68fa      	ldr	r2, [r7, #12]
 800dbb6:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].priority = priority;
 800dbb8:	4911      	ldr	r1, [pc, #68]	; (800dc00 <inv_register_data_cb+0x13c>)
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	005b      	lsls	r3, r3, #1
 800dbc0:	4413      	add	r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	440b      	add	r3, r1
 800dbc6:	3308      	adds	r3, #8
 800dbc8:	68ba      	ldr	r2, [r7, #8]
 800dbca:	601a      	str	r2, [r3, #0]
        inv_data_builder.process[kk].data_required = sensor_type;
 800dbcc:	490c      	ldr	r1, [pc, #48]	; (800dc00 <inv_register_data_cb+0x13c>)
 800dbce:	69ba      	ldr	r2, [r7, #24]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	005b      	lsls	r3, r3, #1
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	330c      	adds	r3, #12
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	601a      	str	r2, [r3, #0]
        inv_data_builder.num_cb++;
 800dbe0:	4b07      	ldr	r3, [pc, #28]	; (800dc00 <inv_register_data_cb+0x13c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	4a06      	ldr	r2, [pc, #24]	; (800dc00 <inv_register_data_cb+0x13c>)
 800dbe8:	6013      	str	r3, [r2, #0]
 800dbea:	e004      	b.n	800dbf6 <inv_register_data_cb+0x132>
    }
    else
    {
        MPL_LOGE("Unable to add feature callback as too many were already registered\n");
 800dbec:	4805      	ldr	r0, [pc, #20]	; (800dc04 <inv_register_data_cb+0x140>)
 800dbee:	f003 fc79 	bl	80114e4 <puts>
        result = INV_ERROR_MEMORY_EXAUSTED;
 800dbf2:	230c      	movs	r3, #12
 800dbf4:	61fb      	str	r3, [r7, #28]
    }

    return result;
 800dbf6:	69fb      	ldr	r3, [r7, #28]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3720      	adds	r7, #32
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	200005bc 	.word	0x200005bc
 800dc04:	0801615c 	.word	0x0801615c

0800dc08 <inv_unregister_data_cb>:
 *            gyro data, INV_MAG_NEW = compass data. So passing in
 *            INV_ACCEL_NEW | INV_MAG_NEW, a
 *            callback would be generated if there was new magnetomer data OR new accel data.
 */
inv_error_t inv_unregister_data_cb(inv_error_t (*func)(struct inv_sensor_cal_t *data))
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
    int kk, nn;

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800dc10:	2300      	movs	r3, #0
 800dc12:	60fb      	str	r3, [r7, #12]
 800dc14:	e035      	b.n	800dc82 <inv_unregister_data_cb+0x7a>
    {
        if (inv_data_builder.process[kk].func == func)
 800dc16:	4920      	ldr	r1, [pc, #128]	; (800dc98 <inv_unregister_data_cb+0x90>)
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	005b      	lsls	r3, r3, #1
 800dc1e:	4413      	add	r3, r2
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	440b      	add	r3, r1
 800dc24:	3304      	adds	r3, #4
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d126      	bne.n	800dc7c <inv_unregister_data_cb+0x74>
        {
            // Delete this callback
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn)
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	3301      	adds	r3, #1
 800dc32:	60bb      	str	r3, [r7, #8]
 800dc34:	e016      	b.n	800dc64 <inv_unregister_data_cb+0x5c>
            {
                inv_data_builder.process[nn - 1] = inv_data_builder.process[nn];
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	1e5a      	subs	r2, r3, #1
 800dc3a:	4917      	ldr	r1, [pc, #92]	; (800dc98 <inv_unregister_data_cb+0x90>)
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	4413      	add	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4419      	add	r1, r3
 800dc46:	4814      	ldr	r0, [pc, #80]	; (800dc98 <inv_unregister_data_cb+0x90>)
 800dc48:	68ba      	ldr	r2, [r7, #8]
 800dc4a:	4613      	mov	r3, r2
 800dc4c:	005b      	lsls	r3, r3, #1
 800dc4e:	4413      	add	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	18c2      	adds	r2, r0, r3
 800dc54:	1d0b      	adds	r3, r1, #4
 800dc56:	3204      	adds	r2, #4
 800dc58:	ca07      	ldmia	r2, {r0, r1, r2}
 800dc5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            for (nn = kk + 1; nn < inv_data_builder.num_cb; ++nn)
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	3301      	adds	r3, #1
 800dc62:	60bb      	str	r3, [r7, #8]
 800dc64:	4b0c      	ldr	r3, [pc, #48]	; (800dc98 <inv_unregister_data_cb+0x90>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	429a      	cmp	r2, r3
 800dc6c:	dbe3      	blt.n	800dc36 <inv_unregister_data_cb+0x2e>
            }
            inv_data_builder.num_cb--;
 800dc6e:	4b0a      	ldr	r3, [pc, #40]	; (800dc98 <inv_unregister_data_cb+0x90>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	3b01      	subs	r3, #1
 800dc74:	4a08      	ldr	r2, [pc, #32]	; (800dc98 <inv_unregister_data_cb+0x90>)
 800dc76:	6013      	str	r3, [r2, #0]
            return INV_SUCCESS;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e008      	b.n	800dc8e <inv_unregister_data_cb+0x86>
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	60fb      	str	r3, [r7, #12]
 800dc82:	4b05      	ldr	r3, [pc, #20]	; (800dc98 <inv_unregister_data_cb+0x90>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	dbc4      	blt.n	800dc16 <inv_unregister_data_cb+0xe>
        }
    }

    return INV_SUCCESS; // We did not find the callback
 800dc8c:	2300      	movs	r3, #0
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	3714      	adds	r7, #20
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bc80      	pop	{r7}
 800dc96:	4770      	bx	lr
 800dc98:	200005bc 	.word	0x200005bc

0800dc9c <inv_execute_on_data>:
 * It will process the data it has received and update all the internal states
 * and features that have been turned on.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_execute_on_data(void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	b084      	sub	sp, #16
 800dca0:	af00      	add	r7, sp, #0
        int type = PLAYBACK_DBG_TYPE_EXECUTE;
        fwrite(&type, sizeof(type), 1, inv_data_builder.file);
    }
#endif
    // Determine what new data we have
    mode = 0;
 800dca2:	2300      	movs	r3, #0
 800dca4:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
 800dca6:	4b35      	ldr	r3, [pc, #212]	; (800dd7c <inv_execute_on_data+0xe0>)
 800dca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <inv_execute_on_data+0x1e>
        mode |= INV_GYRO_NEW;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f043 0302 	orr.w	r3, r3, #2
 800dcb8:	607b      	str	r3, [r7, #4]
    if (sensors.accel.status & INV_NEW_DATA)
 800dcba:	4b30      	ldr	r3, [pc, #192]	; (800dd7c <inv_execute_on_data+0xe0>)
 800dcbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d003      	beq.n	800dcce <inv_execute_on_data+0x32>
        mode |= INV_ACCEL_NEW;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f043 0301 	orr.w	r3, r3, #1
 800dccc:	607b      	str	r3, [r7, #4]
    if (sensors.compass.status & INV_NEW_DATA)
 800dcce:	4b2b      	ldr	r3, [pc, #172]	; (800dd7c <inv_execute_on_data+0xe0>)
 800dcd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800dcd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d003      	beq.n	800dce4 <inv_execute_on_data+0x48>
        mode |= INV_MAG_NEW;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f043 0304 	orr.w	r3, r3, #4
 800dce2:	607b      	str	r3, [r7, #4]
    if (sensors.temp.status & INV_NEW_DATA)
 800dce4:	4b25      	ldr	r3, [pc, #148]	; (800dd7c <inv_execute_on_data+0xe0>)
 800dce6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800dcea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d003      	beq.n	800dcfa <inv_execute_on_data+0x5e>
        mode |= INV_TEMP_NEW;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f043 0308 	orr.w	r3, r3, #8
 800dcf8:	607b      	str	r3, [r7, #4]
    if (sensors.quat.status & INV_NEW_DATA)
 800dcfa:	4b20      	ldr	r3, [pc, #128]	; (800dd7c <inv_execute_on_data+0xe0>)
 800dcfc:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800dd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d003      	beq.n	800dd10 <inv_execute_on_data+0x74>
        mode |= INV_QUAT_NEW;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f043 0310 	orr.w	r3, r3, #16
 800dd0e:	607b      	str	r3, [r7, #4]

    first_error = INV_SUCCESS;
 800dd10:	2300      	movs	r3, #0
 800dd12:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800dd14:	2300      	movs	r3, #0
 800dd16:	60bb      	str	r3, [r7, #8]
 800dd18:	e023      	b.n	800dd62 <inv_execute_on_data+0xc6>
    {
        if (mode & inv_data_builder.process[kk].data_required)
 800dd1a:	4919      	ldr	r1, [pc, #100]	; (800dd80 <inv_execute_on_data+0xe4>)
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	4413      	add	r3, r2
 800dd24:	009b      	lsls	r3, r3, #2
 800dd26:	440b      	add	r3, r1
 800dd28:	330c      	adds	r3, #12
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4013      	ands	r3, r2
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d013      	beq.n	800dd5c <inv_execute_on_data+0xc0>
        {
            result = inv_data_builder.process[kk].func(&sensors);
 800dd34:	4912      	ldr	r1, [pc, #72]	; (800dd80 <inv_execute_on_data+0xe4>)
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	005b      	lsls	r3, r3, #1
 800dd3c:	4413      	add	r3, r2
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	440b      	add	r3, r1
 800dd42:	3304      	adds	r3, #4
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	480d      	ldr	r0, [pc, #52]	; (800dd7c <inv_execute_on_data+0xe0>)
 800dd48:	4798      	blx	r3
 800dd4a:	6038      	str	r0, [r7, #0]
            if (result && !first_error)
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d004      	beq.n	800dd5c <inv_execute_on_data+0xc0>
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d101      	bne.n	800dd5c <inv_execute_on_data+0xc0>
            {
                first_error = result;
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_data_builder.num_cb; ++kk)
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	60bb      	str	r3, [r7, #8]
 800dd62:	4b07      	ldr	r3, [pc, #28]	; (800dd80 <inv_execute_on_data+0xe4>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	dbd6      	blt.n	800dd1a <inv_execute_on_data+0x7e>
            }
        }
    }

    inv_set_contiguous();
 800dd6c:	f000 f80a 	bl	800dd84 <inv_set_contiguous>

    return first_error;
 800dd70:	68fb      	ldr	r3, [r7, #12]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	20001058 	.word	0x20001058
 800dd80:	200005bc 	.word	0x200005bc

0800dd84 <inv_set_contiguous>:

/** Cleans up status bits after running all the callbacks. It sets the contiguous flag.
 *
 */
static void inv_set_contiguous(void)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b083      	sub	sp, #12
 800dd88:	af00      	add	r7, sp, #0
    inv_time_t current_time = 0;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	607b      	str	r3, [r7, #4]
    if (sensors.gyro.status & INV_NEW_DATA)
 800dd8e:	4b48      	ldr	r3, [pc, #288]	; (800deb0 <inv_set_contiguous+0x12c>)
 800dd90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d008      	beq.n	800ddac <inv_set_contiguous+0x28>
    {
        sensors.gyro.status |= INV_CONTIGUOUS;
 800dd9a:	4b45      	ldr	r3, [pc, #276]	; (800deb0 <inv_set_contiguous+0x12c>)
 800dd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd9e:	f043 0310 	orr.w	r3, r3, #16
 800dda2:	4a43      	ldr	r2, [pc, #268]	; (800deb0 <inv_set_contiguous+0x12c>)
 800dda4:	6313      	str	r3, [r2, #48]	; 0x30
        current_time = sensors.gyro.timestamp;
 800dda6:	4b42      	ldr	r3, [pc, #264]	; (800deb0 <inv_set_contiguous+0x12c>)
 800dda8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddaa:	607b      	str	r3, [r7, #4]
    }
    if (sensors.accel.status & INV_NEW_DATA)
 800ddac:	4b40      	ldr	r3, [pc, #256]	; (800deb0 <inv_set_contiguous+0x12c>)
 800ddae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00c      	beq.n	800ddd2 <inv_set_contiguous+0x4e>
    {
        sensors.accel.status |= INV_CONTIGUOUS;
 800ddb8:	4b3d      	ldr	r3, [pc, #244]	; (800deb0 <inv_set_contiguous+0x12c>)
 800ddba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddbc:	f043 0310 	orr.w	r3, r3, #16
 800ddc0:	4a3b      	ldr	r2, [pc, #236]	; (800deb0 <inv_set_contiguous+0x12c>)
 800ddc2:	6753      	str	r3, [r2, #116]	; 0x74
        current_time = MAX(current_time, sensors.accel.timestamp);
 800ddc4:	4b3a      	ldr	r3, [pc, #232]	; (800deb0 <inv_set_contiguous+0x12c>)
 800ddc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	bf38      	it	cc
 800ddce:	4613      	movcc	r3, r2
 800ddd0:	607b      	str	r3, [r7, #4]
    }
    if (sensors.compass.status & INV_NEW_DATA)
 800ddd2:	4b37      	ldr	r3, [pc, #220]	; (800deb0 <inv_set_contiguous+0x12c>)
 800ddd4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ddd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00f      	beq.n	800de00 <inv_set_contiguous+0x7c>
    {
        sensors.compass.status |= INV_CONTIGUOUS;
 800dde0:	4b33      	ldr	r3, [pc, #204]	; (800deb0 <inv_set_contiguous+0x12c>)
 800dde2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800dde6:	f043 0310 	orr.w	r3, r3, #16
 800ddea:	4a31      	ldr	r2, [pc, #196]	; (800deb0 <inv_set_contiguous+0x12c>)
 800ddec:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
        current_time = MAX(current_time, sensors.compass.timestamp);
 800ddf0:	4b2f      	ldr	r3, [pc, #188]	; (800deb0 <inv_set_contiguous+0x12c>)
 800ddf2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	bf38      	it	cc
 800ddfc:	4613      	movcc	r3, r2
 800ddfe:	607b      	str	r3, [r7, #4]
    }
    if (sensors.temp.status & INV_NEW_DATA)
 800de00:	4b2b      	ldr	r3, [pc, #172]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de02:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800de06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00f      	beq.n	800de2e <inv_set_contiguous+0xaa>
    {
        sensors.temp.status |= INV_CONTIGUOUS;
 800de0e:	4b28      	ldr	r3, [pc, #160]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de10:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800de14:	f043 0310 	orr.w	r3, r3, #16
 800de18:	4a25      	ldr	r2, [pc, #148]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de1a:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
        current_time = MAX(current_time, sensors.temp.timestamp);
 800de1e:	4b24      	ldr	r3, [pc, #144]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de20:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800de24:	687a      	ldr	r2, [r7, #4]
 800de26:	4293      	cmp	r3, r2
 800de28:	bf38      	it	cc
 800de2a:	4613      	movcc	r3, r2
 800de2c:	607b      	str	r3, [r7, #4]
    }
    if (sensors.quat.status & INV_NEW_DATA)
 800de2e:	4b20      	ldr	r3, [pc, #128]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de30:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800de34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00f      	beq.n	800de5c <inv_set_contiguous+0xd8>
    {
        sensors.quat.status |= INV_CONTIGUOUS;
 800de3c:	4b1c      	ldr	r3, [pc, #112]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de3e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800de42:	f043 0310 	orr.w	r3, r3, #16
 800de46:	4a1a      	ldr	r2, [pc, #104]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de48:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
        current_time = MAX(current_time, sensors.quat.timestamp);
 800de4c:	4b18      	ldr	r3, [pc, #96]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	4293      	cmp	r3, r2
 800de56:	bf38      	it	cc
 800de58:	4613      	movcc	r3, r2
 800de5a:	607b      	str	r3, [r7, #4]
    if (inv_delta_time_ms(current_time, sensors.temp.timestamp) >= 2000)
        inv_temperature_was_turned_off();
#endif

    /* clear bits */
    sensors.gyro.status &= ~INV_NEW_DATA;
 800de5c:	4b14      	ldr	r3, [pc, #80]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de64:	4a12      	ldr	r2, [pc, #72]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de66:	6313      	str	r3, [r2, #48]	; 0x30
    sensors.accel.status &= ~INV_NEW_DATA;
 800de68:	4b11      	ldr	r3, [pc, #68]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de70:	4a0f      	ldr	r2, [pc, #60]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de72:	6753      	str	r3, [r2, #116]	; 0x74
    sensors.compass.status &= ~INV_NEW_DATA;
 800de74:	4b0e      	ldr	r3, [pc, #56]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800de7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de7e:	4a0c      	ldr	r2, [pc, #48]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de80:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    sensors.temp.status &= ~INV_NEW_DATA;
 800de84:	4b0a      	ldr	r3, [pc, #40]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de86:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800de8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de8e:	4a08      	ldr	r2, [pc, #32]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de90:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    sensors.quat.status &= ~INV_NEW_DATA;
 800de94:	4b06      	ldr	r3, [pc, #24]	; (800deb0 <inv_set_contiguous+0x12c>)
 800de96:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800de9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de9e:	4a04      	ldr	r2, [pc, #16]	; (800deb0 <inv_set_contiguous+0x12c>)
 800dea0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
}
 800dea4:	bf00      	nop
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bc80      	pop	{r7}
 800deac:	4770      	bx	lr
 800deae:	bf00      	nop
 800deb0:	20001058 	.word	0x20001058

0800deb4 <inv_get_accel_set>:
 * @param[out] data Accel Data where 1g = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
 */
void inv_get_accel_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
    if (data != NULL)
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d004      	beq.n	800ded0 <inv_get_accel_set+0x1c>
    {
        memcpy(data, sensors.accel.calibrated, sizeof(sensors.accel.calibrated));
 800dec6:	220c      	movs	r2, #12
 800dec8:	490b      	ldr	r1, [pc, #44]	; (800def8 <inv_get_accel_set+0x44>)
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f002 fb87 	bl	80105de <memcpy>
    }
    if (timestamp != NULL)
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d003      	beq.n	800dede <inv_get_accel_set+0x2a>
    {
        *timestamp = sensors.accel.timestamp;
 800ded6:	4b09      	ldr	r3, [pc, #36]	; (800defc <inv_get_accel_set+0x48>)
 800ded8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL)
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d004      	beq.n	800deee <inv_get_accel_set+0x3a>
    {
        *accuracy = sensors.accel.accuracy;
 800dee4:	4b05      	ldr	r3, [pc, #20]	; (800defc <inv_get_accel_set+0x48>)
 800dee6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dee8:	b25a      	sxtb	r2, r3
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	701a      	strb	r2, [r3, #0]
    }
}
 800deee:	bf00      	nop
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop
 800def8:	200010b4 	.word	0x200010b4
 800defc:	20001058 	.word	0x20001058

0800df00 <inv_get_gyro_set>:
 * @param[out] data Gyro Data where 1 dps = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
 */
void inv_get_gyro_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 800df0c:	220c      	movs	r2, #12
 800df0e:	490b      	ldr	r1, [pc, #44]	; (800df3c <inv_get_gyro_set+0x3c>)
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f002 fb64 	bl	80105de <memcpy>
    if (timestamp != NULL)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <inv_get_gyro_set+0x24>
    {
        *timestamp = sensors.gyro.timestamp;
 800df1c:	4b08      	ldr	r3, [pc, #32]	; (800df40 <inv_get_gyro_set+0x40>)
 800df1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL)
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d004      	beq.n	800df34 <inv_get_gyro_set+0x34>
    {
        *accuracy = sensors.gyro.accuracy;
 800df2a:	4b05      	ldr	r3, [pc, #20]	; (800df40 <inv_get_gyro_set+0x40>)
 800df2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df2e:	b25a      	sxtb	r2, r3
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	701a      	strb	r2, [r3, #0]
    }
}
 800df34:	bf00      	nop
 800df36:	3710      	adds	r7, #16
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	20001070 	.word	0x20001070
 800df40:	20001058 	.word	0x20001058

0800df44 <inv_get_gyro>:

/** Get's latest gyro data.
 * @param[out] gyro Gyro Data, Length 3. 1 dps = 2^16.
 */
void inv_get_gyro(long *gyro)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
    memcpy(gyro, sensors.gyro.calibrated, sizeof(sensors.gyro.calibrated));
 800df4c:	220c      	movs	r2, #12
 800df4e:	4904      	ldr	r1, [pc, #16]	; (800df60 <inv_get_gyro+0x1c>)
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f002 fb44 	bl	80105de <memcpy>
}
 800df56:	bf00      	nop
 800df58:	3708      	adds	r7, #8
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	20001070 	.word	0x20001070

0800df64 <inv_get_compass_set>:
 * @param[out] data Compass Data where 1 uT = 2^16
 * @param[out] accuracy Accuracy 0 being not accurate, and 3 being most accurate.
 * @param[out] timestamp The timestamp of the data sample.
 */
void inv_get_compass_set(long *data, int8_t *accuracy, inv_time_t *timestamp)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
    memcpy(data, sensors.compass.calibrated, sizeof(sensors.compass.calibrated));
 800df70:	220c      	movs	r2, #12
 800df72:	4911      	ldr	r1, [pc, #68]	; (800dfb8 <inv_get_compass_set+0x54>)
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f002 fb32 	bl	80105de <memcpy>
    if (timestamp != NULL)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d004      	beq.n	800df8a <inv_get_compass_set+0x26>
    {
        *timestamp = sensors.compass.timestamp;
 800df80:	4b0e      	ldr	r3, [pc, #56]	; (800dfbc <inv_get_compass_set+0x58>)
 800df82:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	601a      	str	r2, [r3, #0]
    }
    if (accuracy != NULL)
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <inv_get_compass_set+0x4a>
    {
        if (inv_data_builder.compass_disturbance)
 800df90:	4b0b      	ldr	r3, [pc, #44]	; (800dfc0 <inv_get_compass_set+0x5c>)
 800df92:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800df96:	2b00      	cmp	r3, #0
 800df98:	d003      	beq.n	800dfa2 <inv_get_compass_set+0x3e>
            *accuracy = 0;
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	2200      	movs	r2, #0
 800df9e:	701a      	strb	r2, [r3, #0]
        else
            *accuracy = sensors.compass.accuracy;
    }
}
 800dfa0:	e005      	b.n	800dfae <inv_get_compass_set+0x4a>
            *accuracy = sensors.compass.accuracy;
 800dfa2:	4b06      	ldr	r3, [pc, #24]	; (800dfbc <inv_get_compass_set+0x58>)
 800dfa4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dfa8:	b25a      	sxtb	r2, r3
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	701a      	strb	r2, [r3, #0]
}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	200010f8 	.word	0x200010f8
 800dfbc:	20001058 	.word	0x20001058
 800dfc0:	200005bc 	.word	0x200005bc

0800dfc4 <inv_get_gyro_accuracy>:

/** Returns accuracy of gyro.
 * @return Accuracy of gyro with 0 being not accurate, and 3 being most accurate.
 */
int inv_get_gyro_accuracy(void)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	af00      	add	r7, sp, #0
    return sensors.gyro.accuracy;
 800dfc8:	4b02      	ldr	r3, [pc, #8]	; (800dfd4 <inv_get_gyro_accuracy+0x10>)
 800dfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bc80      	pop	{r7}
 800dfd2:	4770      	bx	lr
 800dfd4:	20001058 	.word	0x20001058

0800dfd8 <inv_get_mag_accuracy>:

/** Returns accuracy of compass.
 * @return Accuracy of compass with 0 being not accurate, and 3 being most accurate.
 */
int inv_get_mag_accuracy(void)
{
 800dfd8:	b480      	push	{r7}
 800dfda:	af00      	add	r7, sp, #0
    if (inv_data_builder.compass_disturbance)
 800dfdc:	4b06      	ldr	r3, [pc, #24]	; (800dff8 <inv_get_mag_accuracy+0x20>)
 800dfde:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <inv_get_mag_accuracy+0x12>
        return 0;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e002      	b.n	800dff0 <inv_get_mag_accuracy+0x18>
    return sensors.compass.accuracy;
 800dfea:	4b04      	ldr	r3, [pc, #16]	; (800dffc <inv_get_mag_accuracy+0x24>)
 800dfec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bc80      	pop	{r7}
 800dff6:	4770      	bx	lr
 800dff8:	200005bc 	.word	0x200005bc
 800dffc:	20001058 	.word	0x20001058

0800e000 <inv_get_accel_accuracy>:

/** Returns accuracy of accel.
 * @return Accuracy of accel with 0 being not accurate, and 3 being most accurate.
 */
int inv_get_accel_accuracy(void)
{
 800e000:	b480      	push	{r7}
 800e002:	af00      	add	r7, sp, #0
    return sensors.accel.accuracy;
 800e004:	4b02      	ldr	r3, [pc, #8]	; (800e010 <inv_get_accel_accuracy+0x10>)
 800e006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
}
 800e008:	4618      	mov	r0, r3
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bc80      	pop	{r7}
 800e00e:	4770      	bx	lr
 800e010:	20001058 	.word	0x20001058

0800e014 <inv_reset_compass_soft_iron_matrix>:

/** This subroutine resets the the soft iron transformation to unity matrix and
 * disable the soft iron transformation process by default.
 */
void inv_reset_compass_soft_iron_matrix(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
    int i;
    for (i = 0; i < 9; i++)
 800e01a:	2300      	movs	r3, #0
 800e01c:	607b      	str	r3, [r7, #4]
 800e01e:	e00a      	b.n	800e036 <inv_reset_compass_soft_iron_matrix+0x22>
    {
        sensors.soft_iron.matrix_f[i] = 0.0f;
 800e020:	4a19      	ldr	r2, [pc, #100]	; (800e088 <inv_reset_compass_soft_iron_matrix+0x74>)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	335a      	adds	r3, #90	; 0x5a
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	f04f 0200 	mov.w	r2, #0
 800e02e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < 9; i++)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	3301      	adds	r3, #1
 800e034:	607b      	str	r3, [r7, #4]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2b08      	cmp	r3, #8
 800e03a:	ddf1      	ble.n	800e020 <inv_reset_compass_soft_iron_matrix+0xc>
    }

    memset(&sensors.soft_iron.matrix_d, 0, sizeof(sensors.soft_iron.matrix_d));
 800e03c:	2224      	movs	r2, #36	; 0x24
 800e03e:	2100      	movs	r1, #0
 800e040:	4812      	ldr	r0, [pc, #72]	; (800e08c <inv_reset_compass_soft_iron_matrix+0x78>)
 800e042:	f002 faf4 	bl	801062e <memset>

    for (i = 0; i < 3; i++)
 800e046:	2300      	movs	r3, #0
 800e048:	607b      	str	r3, [r7, #4]
 800e04a:	e013      	b.n	800e074 <inv_reset_compass_soft_iron_matrix+0x60>
    {
        // set the floating point matrix
        sensors.soft_iron.matrix_f[i * 4] = 1.0;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4a0d      	ldr	r2, [pc, #52]	; (800e088 <inv_reset_compass_soft_iron_matrix+0x74>)
 800e052:	335a      	adds	r3, #90	; 0x5a
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4413      	add	r3, r2
 800e058:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e05c:	605a      	str	r2, [r3, #4]
        // set the fixed point matrix
        sensors.soft_iron.matrix_d[i * 4] = ROT_MATRIX_SCALE_LONG;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4a09      	ldr	r2, [pc, #36]	; (800e088 <inv_reset_compass_soft_iron_matrix+0x74>)
 800e064:	3352      	adds	r3, #82	; 0x52
 800e066:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e06a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < 3; i++)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	3301      	adds	r3, #1
 800e072:	607b      	str	r3, [r7, #4]
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b02      	cmp	r3, #2
 800e078:	dde8      	ble.n	800e04c <inv_reset_compass_soft_iron_matrix+0x38>
    }

    inv_disable_compass_soft_iron_matrix();
 800e07a:	f000 f809 	bl	800e090 <inv_disable_compass_soft_iron_matrix>
}
 800e07e:	bf00      	nop
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	20001058 	.word	0x20001058
 800e08c:	200011a0 	.word	0x200011a0

0800e090 <inv_disable_compass_soft_iron_matrix>:
}

/** This subroutine disables the the soft iron transformation process.
 */
void inv_disable_compass_soft_iron_matrix(void)
{
 800e090:	b480      	push	{r7}
 800e092:	af00      	add	r7, sp, #0
    sensors.soft_iron.enable = 0;
 800e094:	4b03      	ldr	r3, [pc, #12]	; (800e0a4 <inv_disable_compass_soft_iron_matrix+0x14>)
 800e096:	2200      	movs	r2, #0
 800e098:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
}
 800e09c:	bf00      	nop
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bc80      	pop	{r7}
 800e0a2:	4770      	bx	lr
 800e0a4:	20001058 	.word	0x20001058

0800e0a8 <inv_get_sensor_type_linear_acceleration>:
 * @param[out] timestamp The timestamp for this sensor. Derived from the timestamp sent to
 *             inv_build_accel().
 * @return     Returns 1 if the data was updated or 0 if it was not updated.
 */
int inv_get_sensor_type_linear_acceleration(float *values, int8_t *accuracy, inv_time_t *timestamp)
{
 800e0a8:	b590      	push	{r4, r7, lr}
 800e0aa:	b08b      	sub	sp, #44	; 0x2c
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
    long gravity[3], accel[3];

    inv_get_accel_set(accel, accuracy, timestamp);
 800e0b4:	f107 0310 	add.w	r3, r7, #16
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	68b9      	ldr	r1, [r7, #8]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7ff fef9 	bl	800deb4 <inv_get_accel_set>
    inv_get_gravity(gravity);
 800e0c2:	f107 031c 	add.w	r3, r7, #28
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f001 fb66 	bl	800f798 <inv_get_gravity>
    accel[0] -= gravity[0] >> 14;
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	139b      	asrs	r3, r3, #14
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	613b      	str	r3, [r7, #16]
    accel[1] -= gravity[1] >> 14;
 800e0d6:	697a      	ldr	r2, [r7, #20]
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	139b      	asrs	r3, r3, #14
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	617b      	str	r3, [r7, #20]
    accel[2] -= gravity[2] >> 14;
 800e0e0:	69ba      	ldr	r2, [r7, #24]
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	139b      	asrs	r3, r3, #14
 800e0e6:	1ad3      	subs	r3, r2, r3
 800e0e8:	61bb      	str	r3, [r7, #24]
    values[0] = accel[0] * ACCEL_CONVERSION;
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7f5 fbcd 	bl	800388c <__aeabi_i2f>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	4913      	ldr	r1, [pc, #76]	; (800e144 <inv_get_sensor_type_linear_acceleration+0x9c>)
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7f5 fc1c 	bl	8003934 <__aeabi_fmul>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	461a      	mov	r2, r3
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	601a      	str	r2, [r3, #0]
    values[1] = accel[1] * ACCEL_CONVERSION;
 800e104:	697b      	ldr	r3, [r7, #20]
 800e106:	4618      	mov	r0, r3
 800e108:	f7f5 fbc0 	bl	800388c <__aeabi_i2f>
 800e10c:	4602      	mov	r2, r0
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	1d1c      	adds	r4, r3, #4
 800e112:	490c      	ldr	r1, [pc, #48]	; (800e144 <inv_get_sensor_type_linear_acceleration+0x9c>)
 800e114:	4610      	mov	r0, r2
 800e116:	f7f5 fc0d 	bl	8003934 <__aeabi_fmul>
 800e11a:	4603      	mov	r3, r0
 800e11c:	6023      	str	r3, [r4, #0]
    values[2] = accel[2] * ACCEL_CONVERSION;
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	4618      	mov	r0, r3
 800e122:	f7f5 fbb3 	bl	800388c <__aeabi_i2f>
 800e126:	4602      	mov	r2, r0
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f103 0408 	add.w	r4, r3, #8
 800e12e:	4905      	ldr	r1, [pc, #20]	; (800e144 <inv_get_sensor_type_linear_acceleration+0x9c>)
 800e130:	4610      	mov	r0, r2
 800e132:	f7f5 fbff 	bl	8003934 <__aeabi_fmul>
 800e136:	4603      	mov	r3, r0
 800e138:	6023      	str	r3, [r4, #0]

    return 1;
 800e13a:	2301      	movs	r3, #1
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	372c      	adds	r7, #44	; 0x2c
 800e140:	46bd      	mov	sp, r7
 800e142:	bd90      	pop	{r4, r7, pc}
 800e144:	391ce80a 	.word	0x391ce80a

0800e148 <inv_get_sensor_type_gravity>:
 * @param[out] timestamp The timestamp for this sensor. Derived from the timestamp sent to
 *             inv_build_accel().
 * @return     Returns 1 if the data was updated or 0 if it was not updated.
 */
int inv_get_sensor_type_gravity(float *values, int8_t *accuracy, inv_time_t *timestamp)
{
 800e148:	b590      	push	{r4, r7, lr}
 800e14a:	b089      	sub	sp, #36	; 0x24
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	60b9      	str	r1, [r7, #8]
 800e152:	607a      	str	r2, [r7, #4]
    long gravity[3];

    *accuracy = (int8_t)hal_out.accuracy_quat;
 800e154:	4b1e      	ldr	r3, [pc, #120]	; (800e1d0 <inv_get_sensor_type_gravity+0x88>)
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	b25a      	sxtb	r2, r3
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	701a      	strb	r2, [r3, #0]
    *timestamp = hal_out.nav_timestamp;
 800e15e:	4b1c      	ldr	r3, [pc, #112]	; (800e1d0 <inv_get_sensor_type_gravity+0x88>)
 800e160:	689a      	ldr	r2, [r3, #8]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	601a      	str	r2, [r3, #0]
    inv_get_gravity(gravity);
 800e166:	f107 0314 	add.w	r3, r7, #20
 800e16a:	4618      	mov	r0, r3
 800e16c:	f001 fb14 	bl	800f798 <inv_get_gravity>
    values[0] = (gravity[0] >> 14) * ACCEL_CONVERSION;
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	139b      	asrs	r3, r3, #14
 800e174:	4618      	mov	r0, r3
 800e176:	f7f5 fb89 	bl	800388c <__aeabi_i2f>
 800e17a:	4603      	mov	r3, r0
 800e17c:	4915      	ldr	r1, [pc, #84]	; (800e1d4 <inv_get_sensor_type_gravity+0x8c>)
 800e17e:	4618      	mov	r0, r3
 800e180:	f7f5 fbd8 	bl	8003934 <__aeabi_fmul>
 800e184:	4603      	mov	r3, r0
 800e186:	461a      	mov	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	601a      	str	r2, [r3, #0]
    values[1] = (gravity[1] >> 14) * ACCEL_CONVERSION;
 800e18c:	69bb      	ldr	r3, [r7, #24]
 800e18e:	139b      	asrs	r3, r3, #14
 800e190:	4618      	mov	r0, r3
 800e192:	f7f5 fb7b 	bl	800388c <__aeabi_i2f>
 800e196:	4602      	mov	r2, r0
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	1d1c      	adds	r4, r3, #4
 800e19c:	490d      	ldr	r1, [pc, #52]	; (800e1d4 <inv_get_sensor_type_gravity+0x8c>)
 800e19e:	4610      	mov	r0, r2
 800e1a0:	f7f5 fbc8 	bl	8003934 <__aeabi_fmul>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	6023      	str	r3, [r4, #0]
    values[2] = (gravity[2] >> 14) * ACCEL_CONVERSION;
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	139b      	asrs	r3, r3, #14
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7f5 fb6d 	bl	800388c <__aeabi_i2f>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	f103 0408 	add.w	r4, r3, #8
 800e1ba:	4906      	ldr	r1, [pc, #24]	; (800e1d4 <inv_get_sensor_type_gravity+0x8c>)
 800e1bc:	4610      	mov	r0, r2
 800e1be:	f7f5 fbb9 	bl	8003934 <__aeabi_fmul>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	6023      	str	r3, [r4, #0]

    return 1;
 800e1c6:	2301      	movs	r3, #1
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3724      	adds	r7, #36	; 0x24
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd90      	pop	{r4, r7, pc}
 800e1d0:	200006fc 	.word	0x200006fc
 800e1d4:	391ce80a 	.word	0x391ce80a

0800e1d8 <inv_generate_hal_outputs>:
 * @param[in] sensor_cal Input variable to take sensor data whenever there is new
 * sensor data.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_hal_outputs(struct inv_sensor_cal_t *sensor_cal)
{
 800e1d8:	b590      	push	{r4, r7, lr}
 800e1da:	b08b      	sub	sp, #44	; 0x2c
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
    int use_sensor = 0;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	627b      	str	r3, [r7, #36]	; 0x24
    long sr = 1000;
 800e1e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e1e8:	623b      	str	r3, [r7, #32]
    long compass[3];
    int8_t accuracy;
    int i;
    (void)sensor_cal;

    inv_get_quaternion_set(hal_out.nav_quat, &hal_out.accuracy_quat, &hal_out.nav_timestamp);
 800e1ea:	4aa1      	ldr	r2, [pc, #644]	; (800e470 <inv_generate_hal_outputs+0x298>)
 800e1ec:	49a1      	ldr	r1, [pc, #644]	; (800e474 <inv_generate_hal_outputs+0x29c>)
 800e1ee:	48a2      	ldr	r0, [pc, #648]	; (800e478 <inv_generate_hal_outputs+0x2a0>)
 800e1f0:	f001 fb56 	bl	800f8a0 <inv_get_quaternion_set>
    hal_out.gyro_status = sensor_cal->gyro.status;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f8:	4aa0      	ldr	r2, [pc, #640]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e1fa:	6253      	str	r3, [r2, #36]	; 0x24
    hal_out.accel_status = sensor_cal->accel.status;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e200:	4a9e      	ldr	r2, [pc, #632]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e202:	6293      	str	r3, [r2, #40]	; 0x28
    hal_out.compass_status = sensor_cal->compass.status;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e20a:	4a9c      	ldr	r2, [pc, #624]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e20c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Find the highest sample rate and tie generating 9-axis to that one.
    if (sensor_cal->gyro.status & INV_SENSOR_ON)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e216:	2b00      	cmp	r3, #0
 800e218:	d004      	beq.n	800e224 <inv_generate_hal_outputs+0x4c>
    {
        sr = sensor_cal->gyro.sample_rate_ms;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21e:	623b      	str	r3, [r7, #32]
        use_sensor = 0;
 800e220:	2300      	movs	r3, #0
 800e222:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if ((sensor_cal->accel.status & INV_SENSOR_ON) && (sr > sensor_cal->accel.sample_rate_ms))
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d009      	beq.n	800e244 <inv_generate_hal_outputs+0x6c>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e234:	6a3a      	ldr	r2, [r7, #32]
 800e236:	429a      	cmp	r2, r3
 800e238:	dd04      	ble.n	800e244 <inv_generate_hal_outputs+0x6c>
    {
        sr = sensor_cal->accel.sample_rate_ms;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e23e:	623b      	str	r3, [r7, #32]
        use_sensor = 1;
 800e240:	2301      	movs	r3, #1
 800e242:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if ((sensor_cal->compass.status & INV_SENSOR_ON) && (sr > sensor_cal->compass.sample_rate_ms))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00b      	beq.n	800e26a <inv_generate_hal_outputs+0x92>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e258:	6a3a      	ldr	r2, [r7, #32]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	dd05      	ble.n	800e26a <inv_generate_hal_outputs+0x92>
    {
        sr = sensor_cal->compass.sample_rate_ms;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e264:	623b      	str	r3, [r7, #32]
        use_sensor = 2;
 800e266:	2302      	movs	r3, #2
 800e268:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if ((sensor_cal->quat.status & INV_SENSOR_ON) && (sr > sensor_cal->quat.sample_rate_ms))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e274:	2b00      	cmp	r3, #0
 800e276:	d00b      	beq.n	800e290 <inv_generate_hal_outputs+0xb8>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e27e:	6a3a      	ldr	r2, [r7, #32]
 800e280:	429a      	cmp	r2, r3
 800e282:	dd05      	ble.n	800e290 <inv_generate_hal_outputs+0xb8>
    {
        sr = sensor_cal->quat.sample_rate_ms;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e28a:	623b      	str	r3, [r7, #32]
        use_sensor = 3;
 800e28c:	2303      	movs	r3, #3
 800e28e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Only output 9-axis if all 9 sensors are on.
    if (sensor_cal->quat.status & INV_SENSOR_ON)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d00d      	beq.n	800e2ba <inv_generate_hal_outputs+0xe2>
    {
        // If quaternion sensor is on, gyros are not required as quaternion already has that part
        if ((sensor_cal->accel.status & sensor_cal->compass.status & INV_SENSOR_ON) == 0)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e2a8:	4013      	ands	r3, r2
 800e2aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d113      	bne.n	800e2da <inv_generate_hal_outputs+0x102>
        {
            use_sensor = -1;
 800e2b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e2b8:	e00f      	b.n	800e2da <inv_generate_hal_outputs+0x102>
        }
    }
    else
    {
        if ((sensor_cal->gyro.status & sensor_cal->accel.status & sensor_cal->compass.status & INV_SENSOR_ON) == 0)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c2:	401a      	ands	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e2ca:	4013      	ands	r3, r2
 800e2cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d102      	bne.n	800e2da <inv_generate_hal_outputs+0x102>
        {
            use_sensor = -1;
 800e2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	2b03      	cmp	r3, #3
 800e2de:	d83f      	bhi.n	800e360 <inv_generate_hal_outputs+0x188>
 800e2e0:	a201      	add	r2, pc, #4	; (adr r2, 800e2e8 <inv_generate_hal_outputs+0x110>)
 800e2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2e6:	bf00      	nop
 800e2e8:	0800e2f9 	.word	0x0800e2f9
 800e2ec:	0800e311 	.word	0x0800e311
 800e2f0:	0800e329 	.word	0x0800e329
 800e2f4:	0800e345 	.word	0x0800e345
    }

    switch (use_sensor)
    {
    case 0:
        hal_out.nine_axis_status = (sensor_cal->gyro.status & INV_NEW_DATA) ? 1 : 0;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2fc:	119b      	asrs	r3, r3, #6
 800e2fe:	f003 0301 	and.w	r3, r3, #1
 800e302:	4a5e      	ldr	r2, [pc, #376]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e304:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->gyro.timestamp;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e30a:	4a5c      	ldr	r2, [pc, #368]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e30c:	6093      	str	r3, [r2, #8]
        break;
 800e30e:	e02b      	b.n	800e368 <inv_generate_hal_outputs+0x190>
    case 1:
        hal_out.nine_axis_status = (sensor_cal->accel.status & INV_NEW_DATA) ? 1 : 0;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e314:	119b      	asrs	r3, r3, #6
 800e316:	f003 0301 	and.w	r3, r3, #1
 800e31a:	4a58      	ldr	r2, [pc, #352]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e31c:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->accel.timestamp;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e322:	4a56      	ldr	r2, [pc, #344]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e324:	6093      	str	r3, [r2, #8]
        break;
 800e326:	e01f      	b.n	800e368 <inv_generate_hal_outputs+0x190>
    case 2:
        hal_out.nine_axis_status = (sensor_cal->compass.status & INV_NEW_DATA) ? 1 : 0;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e32e:	119b      	asrs	r3, r3, #6
 800e330:	f003 0301 	and.w	r3, r3, #1
 800e334:	4a51      	ldr	r2, [pc, #324]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e336:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->compass.timestamp;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e33e:	4a4f      	ldr	r2, [pc, #316]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e340:	6093      	str	r3, [r2, #8]
        break;
 800e342:	e011      	b.n	800e368 <inv_generate_hal_outputs+0x190>
    case 3:
        hal_out.nine_axis_status = (sensor_cal->quat.status & INV_NEW_DATA) ? 1 : 0;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800e34a:	119b      	asrs	r3, r3, #6
 800e34c:	f003 0301 	and.w	r3, r3, #1
 800e350:	4a4a      	ldr	r2, [pc, #296]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e352:	6313      	str	r3, [r2, #48]	; 0x30
        hal_out.nav_timestamp = sensor_cal->quat.timestamp;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800e35a:	4a48      	ldr	r2, [pc, #288]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e35c:	6093      	str	r3, [r2, #8]
        break;
 800e35e:	e003      	b.n	800e368 <inv_generate_hal_outputs+0x190>
    default:
        hal_out.nine_axis_status = 0; // Don't output quaternion related info
 800e360:	4b46      	ldr	r3, [pc, #280]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e362:	2200      	movs	r2, #0
 800e364:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 800e366:	bf00      	nop

/* Converts fixed point to uT. Fixed point has 1 uT = 2^16.
 * So this is: 1 / 2^16*/
#define COMPASS_CONVERSION 1.52587890625e-005f

    inv_get_compass_set(compass, &accuracy, &(hal_out.mag_timestamp));
 800e368:	f107 010f 	add.w	r1, r7, #15
 800e36c:	f107 0310 	add.w	r3, r7, #16
 800e370:	4a43      	ldr	r2, [pc, #268]	; (800e480 <inv_generate_hal_outputs+0x2a8>)
 800e372:	4618      	mov	r0, r3
 800e374:	f7ff fdf6 	bl	800df64 <inv_get_compass_set>
    hal_out.accuracy_mag = (int)accuracy;
 800e378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e37c:	461a      	mov	r2, r3
 800e37e:	4b3f      	ldr	r3, [pc, #252]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e380:	601a      	str	r2, [r3, #0]

    for (i = 0; i < 3; i++)
 800e382:	2300      	movs	r3, #0
 800e384:	61fb      	str	r3, [r7, #28]
 800e386:	e06a      	b.n	800e45e <inv_generate_hal_outputs+0x286>
    {
        if ((sensor_cal->compass.status & (INV_NEW_DATA | INV_CONTIGUOUS)) == INV_NEW_DATA)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e38e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e392:	2b40      	cmp	r3, #64	; 0x40
 800e394:	d116      	bne.n	800e3c4 <inv_generate_hal_outputs+0x1ec>
        {
            // set the state variables to match output with input
            inv_calc_state_to_match_output(&hal_out.lp_filter[i], (float)compass[i]);
 800e396:	69fb      	ldr	r3, [r7, #28]
 800e398:	222c      	movs	r2, #44	; 0x2c
 800e39a:	fb02 f303 	mul.w	r3, r2, r3
 800e39e:	3330      	adds	r3, #48	; 0x30
 800e3a0:	4a36      	ldr	r2, [pc, #216]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e3a2:	4413      	add	r3, r2
 800e3a4:	1d1c      	adds	r4, r3, #4
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e3ae:	4413      	add	r3, r2
 800e3b0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f5 fa69 	bl	800388c <__aeabi_i2f>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	4619      	mov	r1, r3
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f001 f845 	bl	800f44e <inv_calc_state_to_match_output>
        }

        if ((sensor_cal->compass.status & (INV_NEW_DATA | INV_RAW_DATA)) == (INV_NEW_DATA | INV_RAW_DATA))
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e3ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e3ce:	2bc0      	cmp	r3, #192	; 0xc0
 800e3d0:	d124      	bne.n	800e41c <inv_generate_hal_outputs+0x244>
        {

            hal_out.compass_float[i] =
                inv_biquad_filter_process(&hal_out.lp_filter[i], (float)compass[i]) * COMPASS_CONVERSION;
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	222c      	movs	r2, #44	; 0x2c
 800e3d6:	fb02 f303 	mul.w	r3, r2, r3
 800e3da:	3330      	adds	r3, #48	; 0x30
 800e3dc:	4a27      	ldr	r2, [pc, #156]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e3de:	4413      	add	r3, r2
 800e3e0:	1d1c      	adds	r4, r3, #4
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e3ea:	4413      	add	r3, r2
 800e3ec:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7f5 fa4b 	bl	800388c <__aeabi_i2f>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f001 f852 	bl	800f4a4 <inv_biquad_filter_process>
 800e400:	4603      	mov	r3, r0
 800e402:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800e406:	4618      	mov	r0, r3
 800e408:	f7f5 fa94 	bl	8003934 <__aeabi_fmul>
 800e40c:	4603      	mov	r3, r0
 800e40e:	4619      	mov	r1, r3
            hal_out.compass_float[i] =
 800e410:	4a1a      	ldr	r2, [pc, #104]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	332e      	adds	r3, #46	; 0x2e
 800e416:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800e41a:	e01d      	b.n	800e458 <inv_generate_hal_outputs+0x280>
        }
        else if ((sensor_cal->compass.status & INV_NEW_DATA) == INV_NEW_DATA)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e426:	2b00      	cmp	r3, #0
 800e428:	d016      	beq.n	800e458 <inv_generate_hal_outputs+0x280>
        {
            hal_out.compass_float[i] = (float)compass[i] * COMPASS_CONVERSION;
 800e42a:	69fb      	ldr	r3, [r7, #28]
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e432:	4413      	add	r3, r2
 800e434:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7f5 fa27 	bl	800388c <__aeabi_i2f>
 800e43e:	4603      	mov	r3, r0
 800e440:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 800e444:	4618      	mov	r0, r3
 800e446:	f7f5 fa75 	bl	8003934 <__aeabi_fmul>
 800e44a:	4603      	mov	r3, r0
 800e44c:	4619      	mov	r1, r3
 800e44e:	4a0b      	ldr	r2, [pc, #44]	; (800e47c <inv_generate_hal_outputs+0x2a4>)
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	332e      	adds	r3, #46	; 0x2e
 800e454:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < 3; i++)
 800e458:	69fb      	ldr	r3, [r7, #28]
 800e45a:	3301      	adds	r3, #1
 800e45c:	61fb      	str	r3, [r7, #28]
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	2b02      	cmp	r3, #2
 800e462:	dd91      	ble.n	800e388 <inv_generate_hal_outputs+0x1b0>
        }
    }
    return INV_SUCCESS;
 800e464:	2300      	movs	r3, #0
}
 800e466:	4618      	mov	r0, r3
 800e468:	372c      	adds	r7, #44	; 0x2c
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd90      	pop	{r4, r7, pc}
 800e46e:	bf00      	nop
 800e470:	20000704 	.word	0x20000704
 800e474:	20000700 	.word	0x20000700
 800e478:	20000710 	.word	0x20000710
 800e47c:	200006fc 	.word	0x200006fc
 800e480:	2000070c 	.word	0x2000070c

0800e484 <inv_start_hal_outputs>:
/** Turns on generation of HAL outputs. This should be called after inv_stop_hal_outputs()
 * to turn generation of HAL outputs back on. It is automatically called by inv_enable_hal_outputs().
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_hal_outputs(void)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
    inv_error_t result;
    result =
        //        inv_register_data_cb(inv_generate_hal_outputs,
        //                             INV_PRIORITY_HAL_OUTPUTS,
        //                             INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
        inv_register_data_cb(inv_generate_hal_outputs, INV_PRIORITY_HAL_OUTPUTS,
 800e48a:	2207      	movs	r2, #7
 800e48c:	f44f 7161 	mov.w	r1, #900	; 0x384
 800e490:	4804      	ldr	r0, [pc, #16]	; (800e4a4 <inv_start_hal_outputs+0x20>)
 800e492:	f7ff fb17 	bl	800dac4 <inv_register_data_cb>
 800e496:	6078      	str	r0, [r7, #4]
                             INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
    return result;
 800e498:	687b      	ldr	r3, [r7, #4]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	0800e1d9 	.word	0x0800e1d9

0800e4a8 <inv_init_hal_outputs>:
 * enable function. It may be called any time the feature is enabled, but
 * is typically not needed to be called by outside callers.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_hal_outputs(void)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
    int i;
    memset(&hal_out, 0, sizeof(hal_out));
 800e4ae:	22c4      	movs	r2, #196	; 0xc4
 800e4b0:	2100      	movs	r1, #0
 800e4b2:	480e      	ldr	r0, [pc, #56]	; (800e4ec <inv_init_hal_outputs+0x44>)
 800e4b4:	f002 f8bb 	bl	801062e <memset>
    for (i = 0; i < 3; i++)
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	607b      	str	r3, [r7, #4]
 800e4bc:	e00e      	b.n	800e4dc <inv_init_hal_outputs+0x34>
    {
        inv_init_biquad_filter(&hal_out.lp_filter[i], compass_low_pass_filter_coeff);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	222c      	movs	r2, #44	; 0x2c
 800e4c2:	fb02 f303 	mul.w	r3, r2, r3
 800e4c6:	3330      	adds	r3, #48	; 0x30
 800e4c8:	4a08      	ldr	r2, [pc, #32]	; (800e4ec <inv_init_hal_outputs+0x44>)
 800e4ca:	4413      	add	r3, r2
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	4908      	ldr	r1, [pc, #32]	; (800e4f0 <inv_init_hal_outputs+0x48>)
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f000 ff96 	bl	800f402 <inv_init_biquad_filter>
    for (i = 0; i < 3; i++)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	3301      	adds	r3, #1
 800e4da:	607b      	str	r3, [r7, #4]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	dded      	ble.n	800e4be <inv_init_hal_outputs+0x16>
    }

    return INV_SUCCESS;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	200006fc 	.word	0x200006fc
 800e4f0:	20000038 	.word	0x20000038

0800e4f4 <inv_enable_hal_outputs>:

/** Turns on creation and storage of HAL type results.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_enable_hal_outputs(void)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
    inv_error_t result;

    // don't need to check the result for inv_init_hal_outputs
    // since it's always INV_SUCCESS
    inv_init_hal_outputs();
 800e4fa:	f7ff ffd5 	bl	800e4a8 <inv_init_hal_outputs>

    result = inv_register_mpl_start_notification(inv_start_hal_outputs);
 800e4fe:	4804      	ldr	r0, [pc, #16]	; (800e510 <inv_enable_hal_outputs+0x1c>)
 800e500:	f001 faf8 	bl	800faf4 <inv_register_mpl_start_notification>
 800e504:	6078      	str	r0, [r7, #4]
    return result;
 800e506:	687b      	ldr	r3, [r7, #4]
}
 800e508:	4618      	mov	r0, r3
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	0800e485 	.word	0x0800e485

0800e514 <inv_set_message>:
*                  a motion or no motion message.
* @param[in] level Level of the messages. It starts at 0, and may increase
*            in the future to allow more messages if the bit storage runs out.
*/
void inv_set_message(long set, long clear, int level)
{
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
    if (level == 0) {
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10c      	bne.n	800e540 <inv_set_message+0x2c>
        mh.message &= ~clear;
 800e526:	4b09      	ldr	r3, [pc, #36]	; (800e54c <inv_set_message+0x38>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	43db      	mvns	r3, r3
 800e52e:	4013      	ands	r3, r2
 800e530:	4a06      	ldr	r2, [pc, #24]	; (800e54c <inv_set_message+0x38>)
 800e532:	6013      	str	r3, [r2, #0]
        mh.message |= set;
 800e534:	4b05      	ldr	r3, [pc, #20]	; (800e54c <inv_set_message+0x38>)
 800e536:	681a      	ldr	r2, [r3, #0]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	4313      	orrs	r3, r2
 800e53c:	4a03      	ldr	r2, [pc, #12]	; (800e54c <inv_set_message+0x38>)
 800e53e:	6013      	str	r3, [r2, #0]
    }
}
 800e540:	bf00      	nop
 800e542:	3714      	adds	r7, #20
 800e544:	46bd      	mov	sp, r7
 800e546:	bc80      	pop	{r7}
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	200007c0 	.word	0x200007c0

0800e550 <inv_get_message_level_0>:
* @param[in] clear If set, will clear the message. Typically this will be set
*  for one reader, so that you don't get the same message over and over.
* @return bit field to corresponding message.
*/
long inv_get_message_level_0(int clear)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
    long msg;
    msg = mh.message;
 800e558:	4b07      	ldr	r3, [pc, #28]	; (800e578 <inv_get_message_level_0+0x28>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	60fb      	str	r3, [r7, #12]
    if (clear) {
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <inv_get_message_level_0+0x1a>
        mh.message = 0;
 800e564:	4b04      	ldr	r3, [pc, #16]	; (800e578 <inv_get_message_level_0+0x28>)
 800e566:	2200      	movs	r2, #0
 800e568:	601a      	str	r2, [r3, #0]
    }
    return msg;
 800e56a:	68fb      	ldr	r3, [r7, #12]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3714      	adds	r7, #20
 800e570:	46bd      	mov	sp, r7
 800e572:	bc80      	pop	{r7}
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	200007c0 	.word	0x200007c0

0800e57c <inv_q30_to_float>:
        float input;
        float output;
    }   inv_biquad_filter_t;

    static inline float inv_q30_to_float(long q30)
    {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b082      	sub	sp, #8
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
        return (float) q30 / ((float)(1L << 30));
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7f5 f981 	bl	800388c <__aeabi_i2f>
 800e58a:	4603      	mov	r3, r0
 800e58c:	f04f 419d 	mov.w	r1, #1317011456	; 0x4e800000
 800e590:	4618      	mov	r0, r3
 800e592:	f7f5 fa83 	bl	8003a9c <__aeabi_fdiv>
 800e596:	4603      	mov	r3, r0
    }
 800e598:	4618      	mov	r0, r3
 800e59a:	3708      	adds	r7, #8
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <inv_compass_angle>:
 * @param[in] grav Gravity Vector (Body Frame), length 3
 * @param[in] quat Quaternion, Length 4
 * @return Angle Cross Product makes after quaternion rotation.
 */
float inv_compass_angle(const long *compass, const long *grav, const long *quat)
{
 800e5a0:	b590      	push	{r4, r7, lr}
 800e5a2:	b097      	sub	sp, #92	; 0x5c
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
    long cgcross[4], q1[4], q2[4], qi[4];
    float angW;

    // Compass cross Gravity
    cgcross[0] = 0L;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	647b      	str	r3, [r7, #68]	; 0x44
    cgcross[1] = inv_q30_mult(compass[1], grav[2]) - inv_q30_mult(compass[2], grav[1]);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3304      	adds	r3, #4
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4619      	mov	r1, r3
 800e5be:	4610      	mov	r0, r2
 800e5c0:	f000 f8c0 	bl	800e744 <inv_q30_mult>
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	3308      	adds	r3, #8
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f000 f8b5 	bl	800e744 <inv_q30_mult>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	1ae3      	subs	r3, r4, r3
 800e5de:	64bb      	str	r3, [r7, #72]	; 0x48
    cgcross[2] = inv_q30_mult(compass[2], grav[0]) - inv_q30_mult(compass[0], grav[2]);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	3308      	adds	r3, #8
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4619      	mov	r1, r3
 800e5ec:	4610      	mov	r0, r2
 800e5ee:	f000 f8a9 	bl	800e744 <inv_q30_mult>
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4619      	mov	r1, r3
 800e600:	4610      	mov	r0, r2
 800e602:	f000 f89f 	bl	800e744 <inv_q30_mult>
 800e606:	4603      	mov	r3, r0
 800e608:	1ae3      	subs	r3, r4, r3
 800e60a:	64fb      	str	r3, [r7, #76]	; 0x4c
    cgcross[3] = inv_q30_mult(compass[0], grav[1]) - inv_q30_mult(compass[1], grav[0]);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	3304      	adds	r3, #4
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4619      	mov	r1, r3
 800e618:	4610      	mov	r0, r2
 800e61a:	f000 f893 	bl	800e744 <inv_q30_mult>
 800e61e:	4604      	mov	r4, r0
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3304      	adds	r3, #4
 800e624:	681a      	ldr	r2, [r3, #0]
 800e626:	68bb      	ldr	r3, [r7, #8]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4619      	mov	r1, r3
 800e62c:	4610      	mov	r0, r2
 800e62e:	f000 f889 	bl	800e744 <inv_q30_mult>
 800e632:	4603      	mov	r3, r0
 800e634:	1ae3      	subs	r3, r4, r3
 800e636:	653b      	str	r3, [r7, #80]	; 0x50

    // Now convert cross product into world frame
    inv_q_mult(quat, cgcross, q1);
 800e638:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e63c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f8aa 	bl	800e79c <inv_q_mult>
    inv_q_invert(quat, qi);
 800e648:	f107 0314 	add.w	r3, r7, #20
 800e64c:	4619      	mov	r1, r3
 800e64e:	6878      	ldr	r0, [r7, #4]
 800e650:	f000 f99d 	bl	800e98e <inv_q_invert>
    inv_q_mult(q1, qi, q2);
 800e654:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e658:	f107 0114 	add.w	r1, r7, #20
 800e65c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e660:	4618      	mov	r0, r3
 800e662:	f000 f89b 	bl	800e79c <inv_q_mult>

    // Protect against atan2 of 0,0
    if ((q2[2] == 0L) && (q2[1] == 0L))
 800e666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d105      	bne.n	800e678 <inv_compass_angle+0xd8>
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d102      	bne.n	800e678 <inv_compass_angle+0xd8>
        return 0.f;
 800e672:	f04f 0300 	mov.w	r3, #0
 800e676:	e012      	b.n	800e69e <inv_compass_angle+0xfe>

    // This is the unfiltered heading correction
    angW = -atan2f(inv_q30_to_float(q2[2]), inv_q30_to_float(q2[1]));
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7ff ff7e 	bl	800e57c <inv_q30_to_float>
 800e680:	4604      	mov	r4, r0
 800e682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e684:	4618      	mov	r0, r3
 800e686:	f7ff ff79 	bl	800e57c <inv_q30_to_float>
 800e68a:	4603      	mov	r3, r0
 800e68c:	4619      	mov	r1, r3
 800e68e:	4620      	mov	r0, r4
 800e690:	f006 fbdc 	bl	8014e4c <atan2f>
 800e694:	4603      	mov	r3, r0
 800e696:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e69a:	657b      	str	r3, [r7, #84]	; 0x54
    return angW;
 800e69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	375c      	adds	r7, #92	; 0x5c
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd90      	pop	{r4, r7, pc}

0800e6a6 <inv_get_gyro_sum_of_sqr>:
 *          (1 degree per second)^2 = 2^6 = 2^GYRO_MAG_SQR_SHIFT.
 * @param[in] gyro Gyro data scaled with 1 dps = 2^16
 *  @return the computed magnitude squared output of the gyroscope.
 */
unsigned long inv_get_gyro_sum_of_sqr(const long *gyro)
{
 800e6a6:	b480      	push	{r7}
 800e6a8:	b087      	sub	sp, #28
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6078      	str	r0, [r7, #4]
    unsigned long gmag = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	617b      	str	r3, [r7, #20]
    long temp;
    int kk;

    for (kk = 0; kk < 3; ++kk) {
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	613b      	str	r3, [r7, #16]
 800e6b6:	e010      	b.n	800e6da <inv_get_gyro_sum_of_sqr+0x34>
        temp = gyro[kk] >> (16 - (GYRO_MAG_SQR_SHIFT / 2));
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	4413      	add	r3, r2
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	135b      	asrs	r3, r3, #13
 800e6c4:	60fb      	str	r3, [r7, #12]
        gmag += temp * temp;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	fb03 f303 	mul.w	r3, r3, r3
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	697b      	ldr	r3, [r7, #20]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	617b      	str	r3, [r7, #20]
    for (kk = 0; kk < 3; ++kk) {
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	3301      	adds	r3, #1
 800e6d8:	613b      	str	r3, [r7, #16]
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	2b02      	cmp	r3, #2
 800e6de:	ddeb      	ble.n	800e6b8 <inv_get_gyro_sum_of_sqr+0x12>
    }

    return gmag;
 800e6e0:	697b      	ldr	r3, [r7, #20]
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	371c      	adds	r7, #28
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bc80      	pop	{r7}
 800e6ea:	4770      	bx	lr

0800e6ec <inv_q29_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>29
*/
long inv_q29_mult(long a, long b)
{
 800e6ec:	b4b0      	push	{r4, r5, r7}
 800e6ee:	b087      	sub	sp, #28
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 29));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	461a      	mov	r2, r3
 800e702:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e706:	fb02 f501 	mul.w	r5, r2, r1
 800e70a:	fb00 f403 	mul.w	r4, r0, r3
 800e70e:	442c      	add	r4, r5
 800e710:	fba0 2302 	umull	r2, r3, r0, r2
 800e714:	18e1      	adds	r1, r4, r3
 800e716:	460b      	mov	r3, r1
 800e718:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800e71c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result = (long)(temp >> 29);
 800e720:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e724:	f04f 0200 	mov.w	r2, #0
 800e728:	f04f 0300 	mov.w	r3, #0
 800e72c:	0f42      	lsrs	r2, r0, #29
 800e72e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800e732:	174b      	asrs	r3, r1, #29
 800e734:	4613      	mov	r3, r2
 800e736:	60fb      	str	r3, [r7, #12]
    return result;
 800e738:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	371c      	adds	r7, #28
 800e73e:	46bd      	mov	sp, r7
 800e740:	bcb0      	pop	{r4, r5, r7}
 800e742:	4770      	bx	lr

0800e744 <inv_q30_mult>:
 * @param[in] a
 * @param[in] b
 * @return ((long long)a*b)>>30
*/
long inv_q30_mult(long a, long b)
{
 800e744:	b4b0      	push	{r4, r5, r7}
 800e746:	b087      	sub	sp, #28
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
 800e74c:	6039      	str	r1, [r7, #0]
    result = (long)((float)a * b / (1L << 30));
    return result;
#else
    long long temp;
    long result;
    temp = (long long)a * b;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4618      	mov	r0, r3
 800e752:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800e75e:	fb02 f501 	mul.w	r5, r2, r1
 800e762:	fb00 f403 	mul.w	r4, r0, r3
 800e766:	442c      	add	r4, r5
 800e768:	fba0 2302 	umull	r2, r3, r0, r2
 800e76c:	18e1      	adds	r1, r4, r3
 800e76e:	460b      	mov	r3, r1
 800e770:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800e774:	e9c7 2304 	strd	r2, r3, [r7, #16]
    result = (long)(temp >> 30);
 800e778:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e77c:	f04f 0200 	mov.w	r2, #0
 800e780:	f04f 0300 	mov.w	r3, #0
 800e784:	0f82      	lsrs	r2, r0, #30
 800e786:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800e78a:	178b      	asrs	r3, r1, #30
 800e78c:	4613      	mov	r3, r2
 800e78e:	60fb      	str	r3, [r7, #12]
    return result;
 800e790:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800e792:	4618      	mov	r0, r3
 800e794:	371c      	adds	r7, #28
 800e796:	46bd      	mov	sp, r7
 800e798:	bcb0      	pop	{r4, r5, r7}
 800e79a:	4770      	bx	lr

0800e79c <inv_q_mult>:
*            to 2^30
* @param[out] qProd Product after quaternion multiply. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_mult(const long *q1, const long *q2, long *qProd)
{
 800e79c:	b590      	push	{r4, r7, lr}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681a      	ldr	r2, [r3, #0]
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	f7ff ffc6 	bl	800e744 <inv_q30_mult>
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	f7ff ffbb 	bl	800e744 <inv_q30_mult>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	3308      	adds	r3, #8
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	3308      	adds	r3, #8
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4619      	mov	r1, r3
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	f7ff ffaf 	bl	800e744 <inv_q30_mult>
 800e7e6:	4603      	mov	r3, r0
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800e7e8:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[2]) - inv_q30_mult(q1[3], q2[3]);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	330c      	adds	r3, #12
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	330c      	adds	r3, #12
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4610      	mov	r0, r2
 800e7fa:	f7ff ffa3 	bl	800e744 <inv_q30_mult>
 800e7fe:	4603      	mov	r3, r0
 800e800:	1ae2      	subs	r2, r4, r3
    qProd[0] = inv_q30_mult(q1[0], q2[0]) - inv_q30_mult(q1[1], q2[1]) -
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	601a      	str	r2, [r3, #0]

    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	3304      	adds	r3, #4
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4619      	mov	r1, r3
 800e812:	4610      	mov	r0, r2
 800e814:	f7ff ff96 	bl	800e744 <inv_q30_mult>
 800e818:	4604      	mov	r4, r0
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3304      	adds	r3, #4
 800e81e:	681a      	ldr	r2, [r3, #0]
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4619      	mov	r1, r3
 800e826:	4610      	mov	r0, r2
 800e828:	f7ff ff8c 	bl	800e744 <inv_q30_mult>
 800e82c:	4603      	mov	r3, r0
 800e82e:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	3308      	adds	r3, #8
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	330c      	adds	r3, #12
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4619      	mov	r1, r3
 800e83e:	4610      	mov	r0, r2
 800e840:	f7ff ff80 	bl	800e744 <inv_q30_mult>
 800e844:	4603      	mov	r3, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e846:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	330c      	adds	r3, #12
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	3308      	adds	r3, #8
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4619      	mov	r1, r3
 800e856:	4610      	mov	r0, r2
 800e858:	f7ff ff74 	bl	800e744 <inv_q30_mult>
 800e85c:	4602      	mov	r2, r0
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3304      	adds	r3, #4
               inv_q30_mult(q1[2], q2[3]) - inv_q30_mult(q1[3], q2[2]);
 800e862:	1aa2      	subs	r2, r4, r2
    qProd[1] = inv_q30_mult(q1[0], q2[1]) + inv_q30_mult(q1[1], q2[0]) +
 800e864:	601a      	str	r2, [r3, #0]

    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	3308      	adds	r3, #8
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4619      	mov	r1, r3
 800e872:	4610      	mov	r0, r2
 800e874:	f7ff ff66 	bl	800e744 <inv_q30_mult>
 800e878:	4604      	mov	r4, r0
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	3304      	adds	r3, #4
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	330c      	adds	r3, #12
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4619      	mov	r1, r3
 800e888:	4610      	mov	r0, r2
 800e88a:	f7ff ff5b 	bl	800e744 <inv_q30_mult>
 800e88e:	4603      	mov	r3, r0
 800e890:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3308      	adds	r3, #8
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	4619      	mov	r1, r3
 800e89e:	4610      	mov	r0, r2
 800e8a0:	f7ff ff50 	bl	800e744 <inv_q30_mult>
 800e8a4:	4603      	mov	r3, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e8a6:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	330c      	adds	r3, #12
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	f7ff ff44 	bl	800e744 <inv_q30_mult>
 800e8bc:	4602      	mov	r2, r0
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	3308      	adds	r3, #8
               inv_q30_mult(q1[2], q2[0]) + inv_q30_mult(q1[3], q2[1]);
 800e8c2:	4422      	add	r2, r4
    qProd[2] = inv_q30_mult(q1[0], q2[2]) - inv_q30_mult(q1[1], q2[3]) +
 800e8c4:	601a      	str	r2, [r3, #0]

    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	330c      	adds	r3, #12
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	f7ff ff36 	bl	800e744 <inv_q30_mult>
 800e8d8:	4604      	mov	r4, r0
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	681a      	ldr	r2, [r3, #0]
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	3308      	adds	r3, #8
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	4610      	mov	r0, r2
 800e8ea:	f7ff ff2b 	bl	800e744 <inv_q30_mult>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	441c      	add	r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3308      	adds	r3, #8
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	4619      	mov	r1, r3
 800e900:	4610      	mov	r0, r2
 800e902:	f7ff ff1f 	bl	800e744 <inv_q30_mult>
 800e906:	4603      	mov	r3, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e908:	1ae4      	subs	r4, r4, r3
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	330c      	adds	r3, #12
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4619      	mov	r1, r3
 800e916:	4610      	mov	r0, r2
 800e918:	f7ff ff14 	bl	800e744 <inv_q30_mult>
 800e91c:	4602      	mov	r2, r0
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	330c      	adds	r3, #12
               inv_q30_mult(q1[2], q2[1]) + inv_q30_mult(q1[3], q2[0]);
 800e922:	4422      	add	r2, r4
    qProd[3] = inv_q30_mult(q1[0], q2[3]) + inv_q30_mult(q1[1], q2[2]) -
 800e924:	601a      	str	r2, [r3, #0]
}
 800e926:	bf00      	nop
 800e928:	3714      	adds	r7, #20
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd90      	pop	{r4, r7, pc}

0800e92e <inv_q_add>:
*            to 2^30
* @param[out] qSum Sum after quaternion summation. Length 4.
*             1.0 scaled to 2^30.
*/
void inv_q_add(long *q1, long *q2, long *qSum)
{
 800e92e:	b480      	push	{r7}
 800e930:	b085      	sub	sp, #20
 800e932:	af00      	add	r7, sp, #0
 800e934:	60f8      	str	r0, [r7, #12]
 800e936:	60b9      	str	r1, [r7, #8]
 800e938:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681a      	ldr	r2, [r3, #0]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	441a      	add	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	3304      	adds	r3, #4
 800e94c:	6819      	ldr	r1, [r3, #0]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	3304      	adds	r3, #4
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3304      	adds	r3, #4
 800e958:	440a      	add	r2, r1
 800e95a:	601a      	str	r2, [r3, #0]
    qSum[2] = q1[2] + q2[2];
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	3308      	adds	r3, #8
 800e960:	6819      	ldr	r1, [r3, #0]
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	3308      	adds	r3, #8
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	3308      	adds	r3, #8
 800e96c:	440a      	add	r2, r1
 800e96e:	601a      	str	r2, [r3, #0]
    qSum[3] = q1[3] + q2[3];
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	330c      	adds	r3, #12
 800e974:	6819      	ldr	r1, [r3, #0]
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	330c      	adds	r3, #12
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	330c      	adds	r3, #12
 800e980:	440a      	add	r2, r1
 800e982:	601a      	str	r2, [r3, #0]
}
 800e984:	bf00      	nop
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	bc80      	pop	{r7}
 800e98c:	4770      	bx	lr

0800e98e <inv_q_invert>:
    INVENSENSE_FUNC_START;
    inv_vector_normalize(q, 4);
}

void inv_q_invert(const long *q, long *qInverted)
{
 800e98e:	b480      	push	{r7}
 800e990:	b083      	sub	sp, #12
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
 800e996:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	3304      	adds	r3, #4
 800e9aa:	4252      	negs	r2, r2
 800e9ac:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	3308      	adds	r3, #8
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	3308      	adds	r3, #8
 800e9b8:	4252      	negs	r2, r2
 800e9ba:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	330c      	adds	r3, #12
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	330c      	adds	r3, #12
 800e9c6:	4252      	negs	r2, r2
 800e9c8:	601a      	str	r2, [r3, #0]
}
 800e9ca:	bf00      	nop
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bc80      	pop	{r7}
 800e9d2:	4770      	bx	lr

0800e9d4 <inv_q_rotate>:
}

/** Rotates a 3-element vector by Rotation defined by Q
*/
void inv_q_rotate(const long *q, const long *in, long *out)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b094      	sub	sp, #80	; 0x50
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	60f8      	str	r0, [r7, #12]
 800e9dc:	60b9      	str	r1, [r7, #8]
 800e9de:	607a      	str	r2, [r7, #4]
    long q_temp1[4], q_temp2[4];
    long in4[4], out4[4];

    // Fixme optimize
    in4[0] = 0;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	623b      	str	r3, [r7, #32]
    memcpy(&in4[1], in, 3 * sizeof(long));
 800e9e4:	f107 0320 	add.w	r3, r7, #32
 800e9e8:	3304      	adds	r3, #4
 800e9ea:	220c      	movs	r2, #12
 800e9ec:	68b9      	ldr	r1, [r7, #8]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f001 fdf5 	bl	80105de <memcpy>
    inv_q_mult(q, in4, q_temp1);
 800e9f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e9f8:	f107 0320 	add.w	r3, r7, #32
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff fecc 	bl	800e79c <inv_q_mult>
    inv_q_invert(q, q_temp2);
 800ea04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ea08:	4619      	mov	r1, r3
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	f7ff ffbf 	bl	800e98e <inv_q_invert>
    inv_q_mult(q_temp1, q_temp2, out4);
 800ea10:	f107 0210 	add.w	r2, r7, #16
 800ea14:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ea18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f7ff febd 	bl	800e79c <inv_q_mult>
    memcpy(out, &out4[1], 3 * sizeof(long));
 800ea22:	f107 0310 	add.w	r3, r7, #16
 800ea26:	3304      	adds	r3, #4
 800ea28:	220c      	movs	r2, #12
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f001 fdd6 	bl	80105de <memcpy>
}
 800ea32:	bf00      	nop
 800ea34:	3750      	adds	r7, #80	; 0x50
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <inv_q_multf>:

void inv_q_multf(const float *q1, const float *q2, float *qProd)
{
 800ea3a:	b5b0      	push	{r4, r5, r7, lr}
 800ea3c:	b084      	sub	sp, #16
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	60f8      	str	r0, [r7, #12]
 800ea42:	60b9      	str	r1, [r7, #8]
 800ea44:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qProd[0] =
        (q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3]);
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	681a      	ldr	r2, [r3, #0]
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	4619      	mov	r1, r3
 800ea50:	4610      	mov	r0, r2
 800ea52:	f7f4 ff6f 	bl	8003934 <__aeabi_fmul>
 800ea56:	4603      	mov	r3, r0
 800ea58:	461c      	mov	r4, r3
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	3304      	adds	r3, #4
 800ea5e:	681a      	ldr	r2, [r3, #0]
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	3304      	adds	r3, #4
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4619      	mov	r1, r3
 800ea68:	4610      	mov	r0, r2
 800ea6a:	f7f4 ff63 	bl	8003934 <__aeabi_fmul>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	4619      	mov	r1, r3
 800ea72:	4620      	mov	r0, r4
 800ea74:	f7f4 fe54 	bl	8003720 <__aeabi_fsub>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	461c      	mov	r4, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	3308      	adds	r3, #8
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	3308      	adds	r3, #8
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	4610      	mov	r0, r2
 800ea8c:	f7f4 ff52 	bl	8003934 <__aeabi_fmul>
 800ea90:	4603      	mov	r3, r0
 800ea92:	4619      	mov	r1, r3
 800ea94:	4620      	mov	r0, r4
 800ea96:	f7f4 fe43 	bl	8003720 <__aeabi_fsub>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	461c      	mov	r4, r3
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	330c      	adds	r3, #12
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	330c      	adds	r3, #12
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4619      	mov	r1, r3
 800eaac:	4610      	mov	r0, r2
 800eaae:	f7f4 ff41 	bl	8003934 <__aeabi_fmul>
 800eab2:	4603      	mov	r3, r0
 800eab4:	4619      	mov	r1, r3
 800eab6:	4620      	mov	r0, r4
 800eab8:	f7f4 fe32 	bl	8003720 <__aeabi_fsub>
 800eabc:	4603      	mov	r3, r0
 800eabe:	461a      	mov	r2, r3
    qProd[0] =
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	601a      	str	r2, [r3, #0]
    qProd[1] =
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	3304      	adds	r3, #4
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4619      	mov	r1, r3
 800ead0:	4610      	mov	r0, r2
 800ead2:	f7f4 ff2f 	bl	8003934 <__aeabi_fmul>
 800ead6:	4603      	mov	r3, r0
 800ead8:	461c      	mov	r4, r3
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	3304      	adds	r3, #4
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4619      	mov	r1, r3
 800eae6:	4610      	mov	r0, r2
 800eae8:	f7f4 ff24 	bl	8003934 <__aeabi_fmul>
 800eaec:	4603      	mov	r3, r0
 800eaee:	4619      	mov	r1, r3
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	f7f4 fe17 	bl	8003724 <__addsf3>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	461c      	mov	r4, r3
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3308      	adds	r3, #8
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	330c      	adds	r3, #12
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f7f4 ff13 	bl	8003934 <__aeabi_fmul>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	4619      	mov	r1, r3
 800eb12:	4620      	mov	r0, r4
 800eb14:	f7f4 fe06 	bl	8003724 <__addsf3>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	461d      	mov	r5, r3
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	330c      	adds	r3, #12
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	3308      	adds	r3, #8
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	4610      	mov	r0, r2
 800eb2c:	f7f4 ff02 	bl	8003934 <__aeabi_fmul>
 800eb30:	4603      	mov	r3, r0
 800eb32:	461a      	mov	r2, r3
    qProd[1] =
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	1d1c      	adds	r4, r3, #4
        (q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2]);
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	f7f4 fdf0 	bl	8003720 <__aeabi_fsub>
 800eb40:	4603      	mov	r3, r0
    qProd[1] =
 800eb42:	6023      	str	r3, [r4, #0]
    qProd[2] =
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	3308      	adds	r3, #8
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	4610      	mov	r0, r2
 800eb52:	f7f4 feef 	bl	8003934 <__aeabi_fmul>
 800eb56:	4603      	mov	r3, r0
 800eb58:	461c      	mov	r4, r3
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	3304      	adds	r3, #4
 800eb5e:	681a      	ldr	r2, [r3, #0]
 800eb60:	68bb      	ldr	r3, [r7, #8]
 800eb62:	330c      	adds	r3, #12
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	4619      	mov	r1, r3
 800eb68:	4610      	mov	r0, r2
 800eb6a:	f7f4 fee3 	bl	8003934 <__aeabi_fmul>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	4619      	mov	r1, r3
 800eb72:	4620      	mov	r0, r4
 800eb74:	f7f4 fdd4 	bl	8003720 <__aeabi_fsub>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461c      	mov	r4, r3
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	681a      	ldr	r2, [r3, #0]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4619      	mov	r1, r3
 800eb88:	4610      	mov	r0, r2
 800eb8a:	f7f4 fed3 	bl	8003934 <__aeabi_fmul>
 800eb8e:	4603      	mov	r3, r0
 800eb90:	4619      	mov	r1, r3
 800eb92:	4620      	mov	r0, r4
 800eb94:	f7f4 fdc6 	bl	8003724 <__addsf3>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	461d      	mov	r5, r3
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	330c      	adds	r3, #12
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	3304      	adds	r3, #4
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4619      	mov	r1, r3
 800ebaa:	4610      	mov	r0, r2
 800ebac:	f7f4 fec2 	bl	8003934 <__aeabi_fmul>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	461a      	mov	r2, r3
    qProd[2] =
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f103 0408 	add.w	r4, r3, #8
        (q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1]);
 800ebba:	4611      	mov	r1, r2
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f7f4 fdb1 	bl	8003724 <__addsf3>
 800ebc2:	4603      	mov	r3, r0
    qProd[2] =
 800ebc4:	6023      	str	r3, [r4, #0]
    qProd[3] =
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	330c      	adds	r3, #12
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	4610      	mov	r0, r2
 800ebd4:	f7f4 feae 	bl	8003934 <__aeabi_fmul>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	461c      	mov	r4, r3
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	3304      	adds	r3, #4
 800ebe0:	681a      	ldr	r2, [r3, #0]
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4619      	mov	r1, r3
 800ebea:	4610      	mov	r0, r2
 800ebec:	f7f4 fea2 	bl	8003934 <__aeabi_fmul>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f7f4 fd95 	bl	8003724 <__addsf3>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	461c      	mov	r4, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	3308      	adds	r3, #8
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	68bb      	ldr	r3, [r7, #8]
 800ec06:	3304      	adds	r3, #4
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	f7f4 fe91 	bl	8003934 <__aeabi_fmul>
 800ec12:	4603      	mov	r3, r0
 800ec14:	4619      	mov	r1, r3
 800ec16:	4620      	mov	r0, r4
 800ec18:	f7f4 fd82 	bl	8003720 <__aeabi_fsub>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	461d      	mov	r5, r3
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	330c      	adds	r3, #12
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	4610      	mov	r0, r2
 800ec2e:	f7f4 fe81 	bl	8003934 <__aeabi_fmul>
 800ec32:	4603      	mov	r3, r0
 800ec34:	461a      	mov	r2, r3
    qProd[3] =
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f103 040c 	add.w	r4, r3, #12
        (q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0]);
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f7f4 fd70 	bl	8003724 <__addsf3>
 800ec44:	4603      	mov	r3, r0
    qProd[3] =
 800ec46:	6023      	str	r3, [r4, #0]
}
 800ec48:	bf00      	nop
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bdb0      	pop	{r4, r5, r7, pc}

0800ec50 <inv_q_addf>:

void inv_q_addf(const float *q1, const float *q2, float *qSum)
{
 800ec50:	b590      	push	{r4, r7, lr}
 800ec52:	b085      	sub	sp, #20
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
    INVENSENSE_FUNC_START;
    qSum[0] = q1[0] + q2[0];
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681a      	ldr	r2, [r3, #0]
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	4619      	mov	r1, r3
 800ec66:	4610      	mov	r0, r2
 800ec68:	f7f4 fd5c 	bl	8003724 <__addsf3>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	461a      	mov	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	601a      	str	r2, [r3, #0]
    qSum[1] = q1[1] + q2[1];
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	3304      	adds	r3, #4
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	6819      	ldr	r1, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	1d1c      	adds	r4, r3, #4
 800ec84:	4610      	mov	r0, r2
 800ec86:	f7f4 fd4d 	bl	8003724 <__addsf3>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	6023      	str	r3, [r4, #0]
    qSum[2] = q1[2] + q2[2];
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3308      	adds	r3, #8
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	3308      	adds	r3, #8
 800ec98:	6819      	ldr	r1, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f103 0408 	add.w	r4, r3, #8
 800eca0:	4610      	mov	r0, r2
 800eca2:	f7f4 fd3f 	bl	8003724 <__addsf3>
 800eca6:	4603      	mov	r3, r0
 800eca8:	6023      	str	r3, [r4, #0]
    qSum[3] = q1[3] + q2[3];
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	330c      	adds	r3, #12
 800ecae:	681a      	ldr	r2, [r3, #0]
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	330c      	adds	r3, #12
 800ecb4:	6819      	ldr	r1, [r3, #0]
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f103 040c 	add.w	r4, r3, #12
 800ecbc:	4610      	mov	r0, r2
 800ecbe:	f7f4 fd31 	bl	8003724 <__addsf3>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	6023      	str	r3, [r4, #0]
}
 800ecc6:	bf00      	nop
 800ecc8:	3714      	adds	r7, #20
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd90      	pop	{r4, r7, pc}

0800ecce <inv_q_normalizef>:

void inv_q_normalizef(float *q)
{
 800ecce:	b590      	push	{r4, r7, lr}
 800ecd0:	b085      	sub	sp, #20
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
    INVENSENSE_FUNC_START;
    float normSF = 0;
 800ecd6:	f04f 0300 	mov.w	r3, #0
 800ecda:	60fb      	str	r3, [r7, #12]
    float xHalf = 0;
 800ecdc:	f04f 0300 	mov.w	r3, #0
 800ece0:	60bb      	str	r3, [r7, #8]
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4619      	mov	r1, r3
 800ecec:	4610      	mov	r0, r2
 800ecee:	f7f4 fe21 	bl	8003934 <__aeabi_fmul>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	461c      	mov	r4, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	3304      	adds	r3, #4
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	3304      	adds	r3, #4
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4619      	mov	r1, r3
 800ed04:	4610      	mov	r0, r2
 800ed06:	f7f4 fe15 	bl	8003934 <__aeabi_fmul>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	4619      	mov	r1, r3
 800ed0e:	4620      	mov	r0, r4
 800ed10:	f7f4 fd08 	bl	8003724 <__addsf3>
 800ed14:	4603      	mov	r3, r0
 800ed16:	461c      	mov	r4, r3
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3308      	adds	r3, #8
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	3308      	adds	r3, #8
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	4619      	mov	r1, r3
 800ed26:	4610      	mov	r0, r2
 800ed28:	f7f4 fe04 	bl	8003934 <__aeabi_fmul>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	4619      	mov	r1, r3
 800ed30:	4620      	mov	r0, r4
 800ed32:	f7f4 fcf7 	bl	8003724 <__addsf3>
 800ed36:	4603      	mov	r3, r0
 800ed38:	461c      	mov	r4, r3
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	330c      	adds	r3, #12
 800ed3e:	681a      	ldr	r2, [r3, #0]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	330c      	adds	r3, #12
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4619      	mov	r1, r3
 800ed48:	4610      	mov	r0, r2
 800ed4a:	f7f4 fdf3 	bl	8003934 <__aeabi_fmul>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	4619      	mov	r1, r3
 800ed52:	4620      	mov	r0, r4
 800ed54:	f7f4 fce6 	bl	8003724 <__addsf3>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	60fb      	str	r3, [r7, #12]
    if (normSF < 2) {
 800ed5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f7f4 ff85 	bl	8003c70 <__aeabi_fcmplt>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f000 808d 	beq.w	800ee88 <inv_q_normalizef+0x1ba>
        xHalf = 0.5f * normSF;
 800ed6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f7f4 fdde 	bl	8003934 <__aeabi_fmul>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	60bb      	str	r3, [r7, #8]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800ed7c:	68f9      	ldr	r1, [r7, #12]
 800ed7e:	68b8      	ldr	r0, [r7, #8]
 800ed80:	f7f4 fdd8 	bl	8003934 <__aeabi_fmul>
 800ed84:	4603      	mov	r3, r0
 800ed86:	68f9      	ldr	r1, [r7, #12]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7f4 fdd3 	bl	8003934 <__aeabi_fmul>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	4619      	mov	r1, r3
 800ed92:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800ed96:	f7f4 fcc3 	bl	8003720 <__aeabi_fsub>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f7f4 fdc8 	bl	8003934 <__aeabi_fmul>
 800eda4:	4603      	mov	r3, r0
 800eda6:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800eda8:	68f9      	ldr	r1, [r7, #12]
 800edaa:	68b8      	ldr	r0, [r7, #8]
 800edac:	f7f4 fdc2 	bl	8003934 <__aeabi_fmul>
 800edb0:	4603      	mov	r3, r0
 800edb2:	68f9      	ldr	r1, [r7, #12]
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7f4 fdbd 	bl	8003934 <__aeabi_fmul>
 800edba:	4603      	mov	r3, r0
 800edbc:	4619      	mov	r1, r3
 800edbe:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800edc2:	f7f4 fcad 	bl	8003720 <__aeabi_fsub>
 800edc6:	4603      	mov	r3, r0
 800edc8:	4619      	mov	r1, r3
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f7f4 fdb2 	bl	8003934 <__aeabi_fmul>
 800edd0:	4603      	mov	r3, r0
 800edd2:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800edd4:	68f9      	ldr	r1, [r7, #12]
 800edd6:	68b8      	ldr	r0, [r7, #8]
 800edd8:	f7f4 fdac 	bl	8003934 <__aeabi_fmul>
 800eddc:	4603      	mov	r3, r0
 800edde:	68f9      	ldr	r1, [r7, #12]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f7f4 fda7 	bl	8003934 <__aeabi_fmul>
 800ede6:	4603      	mov	r3, r0
 800ede8:	4619      	mov	r1, r3
 800edea:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800edee:	f7f4 fc97 	bl	8003720 <__aeabi_fsub>
 800edf2:	4603      	mov	r3, r0
 800edf4:	4619      	mov	r1, r3
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7f4 fd9c 	bl	8003934 <__aeabi_fmul>
 800edfc:	4603      	mov	r3, r0
 800edfe:	60fb      	str	r3, [r7, #12]
        normSF = normSF * (1.5f - xHalf * normSF * normSF);
 800ee00:	68f9      	ldr	r1, [r7, #12]
 800ee02:	68b8      	ldr	r0, [r7, #8]
 800ee04:	f7f4 fd96 	bl	8003934 <__aeabi_fmul>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	68f9      	ldr	r1, [r7, #12]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f7f4 fd91 	bl	8003934 <__aeabi_fmul>
 800ee12:	4603      	mov	r3, r0
 800ee14:	4619      	mov	r1, r3
 800ee16:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 800ee1a:	f7f4 fc81 	bl	8003720 <__aeabi_fsub>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	4619      	mov	r1, r3
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f7f4 fd86 	bl	8003934 <__aeabi_fmul>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	60fb      	str	r3, [r7, #12]
        q[0] *= normSF;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68f9      	ldr	r1, [r7, #12]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7f4 fd7e 	bl	8003934 <__aeabi_fmul>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	601a      	str	r2, [r3, #0]
        q[1] *= normSF;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3304      	adds	r3, #4
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	1d1c      	adds	r4, r3, #4
 800ee4a:	68f9      	ldr	r1, [r7, #12]
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7f4 fd71 	bl	8003934 <__aeabi_fmul>
 800ee52:	4603      	mov	r3, r0
 800ee54:	6023      	str	r3, [r4, #0]
        q[2] *= normSF;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	3308      	adds	r3, #8
 800ee5a:	681a      	ldr	r2, [r3, #0]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f103 0408 	add.w	r4, r3, #8
 800ee62:	68f9      	ldr	r1, [r7, #12]
 800ee64:	4610      	mov	r0, r2
 800ee66:	f7f4 fd65 	bl	8003934 <__aeabi_fmul>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	6023      	str	r3, [r4, #0]
        q[3] *= normSF;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	330c      	adds	r3, #12
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f103 040c 	add.w	r4, r3, #12
 800ee7a:	68f9      	ldr	r1, [r7, #12]
 800ee7c:	4610      	mov	r0, r2
 800ee7e:	f7f4 fd59 	bl	8003934 <__aeabi_fmul>
 800ee82:	4603      	mov	r3, r0
 800ee84:	6023      	str	r3, [r4, #0]
 800ee86:	e012      	b.n	800eeae <inv_q_normalizef+0x1e0>
    } else {
        q[0] = 1.0;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ee8e:	601a      	str	r2, [r3, #0]
        q[1] = 0.0;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	3304      	adds	r3, #4
 800ee94:	f04f 0200 	mov.w	r2, #0
 800ee98:	601a      	str	r2, [r3, #0]
        q[2] = 0.0;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	3308      	adds	r3, #8
 800ee9e:	f04f 0200 	mov.w	r2, #0
 800eea2:	601a      	str	r2, [r3, #0]
        q[3] = 0.0;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	330c      	adds	r3, #12
 800eea8:	f04f 0200 	mov.w	r2, #0
 800eeac:	601a      	str	r2, [r3, #0]
    }
    normSF = (q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	4610      	mov	r0, r2
 800eeba:	f7f4 fd3b 	bl	8003934 <__aeabi_fmul>
 800eebe:	4603      	mov	r3, r0
 800eec0:	461c      	mov	r4, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	3304      	adds	r3, #4
 800eec6:	681a      	ldr	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	3304      	adds	r3, #4
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4619      	mov	r1, r3
 800eed0:	4610      	mov	r0, r2
 800eed2:	f7f4 fd2f 	bl	8003934 <__aeabi_fmul>
 800eed6:	4603      	mov	r3, r0
 800eed8:	4619      	mov	r1, r3
 800eeda:	4620      	mov	r0, r4
 800eedc:	f7f4 fc22 	bl	8003724 <__addsf3>
 800eee0:	4603      	mov	r3, r0
 800eee2:	461c      	mov	r4, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3308      	adds	r3, #8
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	3308      	adds	r3, #8
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4619      	mov	r1, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	f7f4 fd1e 	bl	8003934 <__aeabi_fmul>
 800eef8:	4603      	mov	r3, r0
 800eefa:	4619      	mov	r1, r3
 800eefc:	4620      	mov	r0, r4
 800eefe:	f7f4 fc11 	bl	8003724 <__addsf3>
 800ef02:	4603      	mov	r3, r0
 800ef04:	461c      	mov	r4, r3
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	330c      	adds	r3, #12
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	330c      	adds	r3, #12
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4619      	mov	r1, r3
 800ef14:	4610      	mov	r0, r2
 800ef16:	f7f4 fd0d 	bl	8003934 <__aeabi_fmul>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f7f4 fc00 	bl	8003724 <__addsf3>
 800ef24:	4603      	mov	r3, r0
 800ef26:	60fb      	str	r3, [r7, #12]
}
 800ef28:	bf00      	nop
 800ef2a:	3714      	adds	r7, #20
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd90      	pop	{r4, r7, pc}

0800ef30 <inv_q_norm4>:

/** Performs a length 4 vector normalization with a square root.
* @param[in,out] q vector to normalize. Returns [1,0,0,0] is magnitude is zero.
*/
void inv_q_norm4(float *q)
{
 800ef30:	b590      	push	{r4, r7, lr}
 800ef32:	b085      	sub	sp, #20
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
    float mag;
    mag = sqrtf(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681a      	ldr	r2, [r3, #0]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4619      	mov	r1, r3
 800ef42:	4610      	mov	r0, r2
 800ef44:	f7f4 fcf6 	bl	8003934 <__aeabi_fmul>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	461c      	mov	r4, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	3304      	adds	r3, #4
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	3304      	adds	r3, #4
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	4619      	mov	r1, r3
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	f7f4 fcea 	bl	8003934 <__aeabi_fmul>
 800ef60:	4603      	mov	r3, r0
 800ef62:	4619      	mov	r1, r3
 800ef64:	4620      	mov	r0, r4
 800ef66:	f7f4 fbdd 	bl	8003724 <__addsf3>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	461c      	mov	r4, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	3308      	adds	r3, #8
 800ef72:	681a      	ldr	r2, [r3, #0]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	3308      	adds	r3, #8
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	4610      	mov	r0, r2
 800ef7e:	f7f4 fcd9 	bl	8003934 <__aeabi_fmul>
 800ef82:	4603      	mov	r3, r0
 800ef84:	4619      	mov	r1, r3
 800ef86:	4620      	mov	r0, r4
 800ef88:	f7f4 fbcc 	bl	8003724 <__addsf3>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	461c      	mov	r4, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	330c      	adds	r3, #12
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	330c      	adds	r3, #12
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	4619      	mov	r1, r3
 800ef9e:	4610      	mov	r0, r2
 800efa0:	f7f4 fcc8 	bl	8003934 <__aeabi_fmul>
 800efa4:	4603      	mov	r3, r0
 800efa6:	4619      	mov	r1, r3
 800efa8:	4620      	mov	r0, r4
 800efaa:	f7f4 fbbb 	bl	8003724 <__addsf3>
 800efae:	4603      	mov	r3, r0
 800efb0:	4618      	mov	r0, r3
 800efb2:	f005 ff4d 	bl	8014e50 <sqrtf>
 800efb6:	60f8      	str	r0, [r7, #12]
    if (mag) {
 800efb8:	f04f 0100 	mov.w	r1, #0
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	f7f4 fe4d 	bl	8003c5c <__aeabi_fcmpeq>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d12d      	bne.n	800f024 <inv_q_norm4+0xf4>
        q[0] /= mag;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	68f9      	ldr	r1, [r7, #12]
 800efce:	4618      	mov	r0, r3
 800efd0:	f7f4 fd64 	bl	8003a9c <__aeabi_fdiv>
 800efd4:	4603      	mov	r3, r0
 800efd6:	461a      	mov	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	601a      	str	r2, [r3, #0]
        q[1] /= mag;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3304      	adds	r3, #4
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	1d1c      	adds	r4, r3, #4
 800efe6:	68f9      	ldr	r1, [r7, #12]
 800efe8:	4610      	mov	r0, r2
 800efea:	f7f4 fd57 	bl	8003a9c <__aeabi_fdiv>
 800efee:	4603      	mov	r3, r0
 800eff0:	6023      	str	r3, [r4, #0]
        q[2] /= mag;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3308      	adds	r3, #8
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	f103 0408 	add.w	r4, r3, #8
 800effe:	68f9      	ldr	r1, [r7, #12]
 800f000:	4610      	mov	r0, r2
 800f002:	f7f4 fd4b 	bl	8003a9c <__aeabi_fdiv>
 800f006:	4603      	mov	r3, r0
 800f008:	6023      	str	r3, [r4, #0]
        q[3] /= mag;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	330c      	adds	r3, #12
 800f00e:	681a      	ldr	r2, [r3, #0]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f103 040c 	add.w	r4, r3, #12
 800f016:	68f9      	ldr	r1, [r7, #12]
 800f018:	4610      	mov	r0, r2
 800f01a:	f7f4 fd3f 	bl	8003a9c <__aeabi_fdiv>
 800f01e:	4603      	mov	r3, r0
 800f020:	6023      	str	r3, [r4, #0]
        q[0] = 1.f;
        q[1] = 0.f;
        q[2] = 0.f;
        q[3] = 0.f;
    }
}
 800f022:	e012      	b.n	800f04a <inv_q_norm4+0x11a>
        q[0] = 1.f;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f02a:	601a      	str	r2, [r3, #0]
        q[1] = 0.f;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	3304      	adds	r3, #4
 800f030:	f04f 0200 	mov.w	r2, #0
 800f034:	601a      	str	r2, [r3, #0]
        q[2] = 0.f;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	3308      	adds	r3, #8
 800f03a:	f04f 0200 	mov.w	r2, #0
 800f03e:	601a      	str	r2, [r3, #0]
        q[3] = 0.f;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	330c      	adds	r3, #12
 800f044:	f04f 0200 	mov.w	r2, #0
 800f048:	601a      	str	r2, [r3, #0]
}
 800f04a:	bf00      	nop
 800f04c:	3714      	adds	r7, #20
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd90      	pop	{r4, r7, pc}

0800f052 <inv_q_invertf>:

void inv_q_invertf(const float *q, float *qInverted)
{
 800f052:	b480      	push	{r7}
 800f054:	b083      	sub	sp, #12
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
 800f05a:	6039      	str	r1, [r7, #0]
    INVENSENSE_FUNC_START;
    qInverted[0] = q[0];
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	601a      	str	r2, [r3, #0]
    qInverted[1] = -q[1];
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	3304      	adds	r3, #4
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	3304      	adds	r3, #4
 800f06e:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800f072:	601a      	str	r2, [r3, #0]
    qInverted[2] = -q[2];
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	3308      	adds	r3, #8
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	3308      	adds	r3, #8
 800f07e:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800f082:	601a      	str	r2, [r3, #0]
    qInverted[3] = -q[3];
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	330c      	adds	r3, #12
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	330c      	adds	r3, #12
 800f08e:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
 800f092:	601a      	str	r2, [r3, #0]
}
 800f094:	bf00      	nop
 800f096:	370c      	adds	r7, #12
 800f098:	46bd      	mov	sp, r7
 800f09a:	bc80      	pop	{r7}
 800f09c:	4770      	bx	lr

0800f09e <inv_quaternion_to_rotation>:
 *             the first row of the matrix. Rotation matrix multiplied
 *             by a 3 element column vector transform a vector from Body
 *             to World.
 */
void inv_quaternion_to_rotation(const long *quat, long *rot)
{
 800f09e:	b590      	push	{r4, r7, lr}
 800f0a0:	b083      	sub	sp, #12
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
 800f0a6:	6039      	str	r1, [r7, #0]
    rot[0] =
        inv_q29_mult(quat[1], quat[1]) + inv_q29_mult(quat[0],
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	3304      	adds	r3, #4
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	3304      	adds	r3, #4
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	4610      	mov	r0, r2
 800f0b8:	f7ff fb18 	bl	800e6ec <inv_q29_mult>
 800f0bc:	4604      	mov	r4, r0
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	4610      	mov	r0, r2
 800f0ca:	f7ff fb0f 	bl	800e6ec <inv_q29_mult>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	4423      	add	r3, r4
                quat[0]) -
 800f0d2:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    rot[0] =
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[1] =
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3308      	adds	r3, #8
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	4610      	mov	r0, r2
 800f0ea:	f7ff faff 	bl	800e6ec <inv_q29_mult>
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	330c      	adds	r3, #12
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4610      	mov	r0, r2
 800f0fe:	f7ff faf5 	bl	800e6ec <inv_q29_mult>
 800f102:	4602      	mov	r2, r0
    rot[1] =
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	3304      	adds	r3, #4
        inv_q29_mult(quat[1], quat[2]) - inv_q29_mult(quat[3], quat[0]);
 800f108:	1aa2      	subs	r2, r4, r2
    rot[1] =
 800f10a:	601a      	str	r2, [r3, #0]
    rot[2] =
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3304      	adds	r3, #4
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	330c      	adds	r3, #12
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4619      	mov	r1, r3
 800f11a:	4610      	mov	r0, r2
 800f11c:	f7ff fae6 	bl	800e6ec <inv_q29_mult>
 800f120:	4604      	mov	r4, r0
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	3308      	adds	r3, #8
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4619      	mov	r1, r3
 800f12e:	4610      	mov	r0, r2
 800f130:	f7ff fadc 	bl	800e6ec <inv_q29_mult>
 800f134:	4602      	mov	r2, r0
    rot[2] =
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	3308      	adds	r3, #8
        inv_q29_mult(quat[1], quat[3]) + inv_q29_mult(quat[2], quat[0]);
 800f13a:	4422      	add	r2, r4
    rot[2] =
 800f13c:	601a      	str	r2, [r3, #0]
    rot[3] =
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3304      	adds	r3, #4
 800f142:	681a      	ldr	r2, [r3, #0]
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	3308      	adds	r3, #8
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4619      	mov	r1, r3
 800f14c:	4610      	mov	r0, r2
 800f14e:	f7ff facd 	bl	800e6ec <inv_q29_mult>
 800f152:	4604      	mov	r4, r0
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	330c      	adds	r3, #12
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4619      	mov	r1, r3
 800f160:	4610      	mov	r0, r2
 800f162:	f7ff fac3 	bl	800e6ec <inv_q29_mult>
 800f166:	4602      	mov	r2, r0
    rot[3] =
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	330c      	adds	r3, #12
        inv_q29_mult(quat[1], quat[2]) + inv_q29_mult(quat[3], quat[0]);
 800f16c:	4422      	add	r2, r4
    rot[3] =
 800f16e:	601a      	str	r2, [r3, #0]
    rot[4] =
        inv_q29_mult(quat[2], quat[2]) + inv_q29_mult(quat[0],
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	3308      	adds	r3, #8
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	3308      	adds	r3, #8
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4619      	mov	r1, r3
 800f17e:	4610      	mov	r0, r2
 800f180:	f7ff fab4 	bl	800e6ec <inv_q29_mult>
 800f184:	4604      	mov	r4, r0
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4619      	mov	r1, r3
 800f190:	4610      	mov	r0, r2
 800f192:	f7ff faab 	bl	800e6ec <inv_q29_mult>
 800f196:	4603      	mov	r3, r0
 800f198:	18e2      	adds	r2, r4, r3
    rot[4] =
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	3310      	adds	r3, #16
                quat[0]) -
 800f19e:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    rot[4] =
 800f1a2:	601a      	str	r2, [r3, #0]
        1073741824L;
    rot[5] =
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	3308      	adds	r3, #8
 800f1a8:	681a      	ldr	r2, [r3, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	330c      	adds	r3, #12
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	4610      	mov	r0, r2
 800f1b4:	f7ff fa9a 	bl	800e6ec <inv_q29_mult>
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	3304      	adds	r3, #4
 800f1be:	681a      	ldr	r2, [r3, #0]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	4610      	mov	r0, r2
 800f1c8:	f7ff fa90 	bl	800e6ec <inv_q29_mult>
 800f1cc:	4602      	mov	r2, r0
    rot[5] =
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	3314      	adds	r3, #20
        inv_q29_mult(quat[2], quat[3]) - inv_q29_mult(quat[1], quat[0]);
 800f1d2:	1aa2      	subs	r2, r4, r2
    rot[5] =
 800f1d4:	601a      	str	r2, [r3, #0]
    rot[6] =
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	3304      	adds	r3, #4
 800f1da:	681a      	ldr	r2, [r3, #0]
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	330c      	adds	r3, #12
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	4610      	mov	r0, r2
 800f1e6:	f7ff fa81 	bl	800e6ec <inv_q29_mult>
 800f1ea:	4604      	mov	r4, r0
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	3308      	adds	r3, #8
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	4610      	mov	r0, r2
 800f1fa:	f7ff fa77 	bl	800e6ec <inv_q29_mult>
 800f1fe:	4602      	mov	r2, r0
    rot[6] =
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	3318      	adds	r3, #24
        inv_q29_mult(quat[1], quat[3]) - inv_q29_mult(quat[2], quat[0]);
 800f204:	1aa2      	subs	r2, r4, r2
    rot[6] =
 800f206:	601a      	str	r2, [r3, #0]
    rot[7] =
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	3308      	adds	r3, #8
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	330c      	adds	r3, #12
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	4619      	mov	r1, r3
 800f216:	4610      	mov	r0, r2
 800f218:	f7ff fa68 	bl	800e6ec <inv_q29_mult>
 800f21c:	4604      	mov	r4, r0
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	3304      	adds	r3, #4
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4619      	mov	r1, r3
 800f22a:	4610      	mov	r0, r2
 800f22c:	f7ff fa5e 	bl	800e6ec <inv_q29_mult>
 800f230:	4602      	mov	r2, r0
    rot[7] =
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	331c      	adds	r3, #28
        inv_q29_mult(quat[2], quat[3]) + inv_q29_mult(quat[1], quat[0]);
 800f236:	4422      	add	r2, r4
    rot[7] =
 800f238:	601a      	str	r2, [r3, #0]
    rot[8] =
        inv_q29_mult(quat[3], quat[3]) + inv_q29_mult(quat[0],
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	330c      	adds	r3, #12
 800f23e:	681a      	ldr	r2, [r3, #0]
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	330c      	adds	r3, #12
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	4619      	mov	r1, r3
 800f248:	4610      	mov	r0, r2
 800f24a:	f7ff fa4f 	bl	800e6ec <inv_q29_mult>
 800f24e:	4604      	mov	r4, r0
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4619      	mov	r1, r3
 800f25a:	4610      	mov	r0, r2
 800f25c:	f7ff fa46 	bl	800e6ec <inv_q29_mult>
 800f260:	4603      	mov	r3, r0
 800f262:	18e2      	adds	r2, r4, r3
    rot[8] =
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	3320      	adds	r3, #32
                quat[0]) -
 800f268:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    rot[8] =
 800f26c:	601a      	str	r2, [r3, #0]
        1073741824L;
}
 800f26e:	bf00      	nop
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	bd90      	pop	{r4, r7, pc}

0800f276 <inv_row_2_scale>:

    return hash;
}

static unsigned short inv_row_2_scale(const signed char *row)
{
 800f276:	b480      	push	{r7}
 800f278:	b085      	sub	sp, #20
 800f27a:	af00      	add	r7, sp, #0
 800f27c:	6078      	str	r0, [r7, #4]
    unsigned short b;

    if (row[0] > 0)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f993 3000 	ldrsb.w	r3, [r3]
 800f284:	2b00      	cmp	r3, #0
 800f286:	dd02      	ble.n	800f28e <inv_row_2_scale+0x18>
        b = 0;
 800f288:	2300      	movs	r3, #0
 800f28a:	81fb      	strh	r3, [r7, #14]
 800f28c:	e02d      	b.n	800f2ea <inv_row_2_scale+0x74>
    else if (row[0] < 0)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f993 3000 	ldrsb.w	r3, [r3]
 800f294:	2b00      	cmp	r3, #0
 800f296:	da02      	bge.n	800f29e <inv_row_2_scale+0x28>
        b = 4;
 800f298:	2304      	movs	r3, #4
 800f29a:	81fb      	strh	r3, [r7, #14]
 800f29c:	e025      	b.n	800f2ea <inv_row_2_scale+0x74>
    else if (row[1] > 0)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	f993 3000 	ldrsb.w	r3, [r3]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	dd02      	ble.n	800f2b0 <inv_row_2_scale+0x3a>
        b = 1;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	81fb      	strh	r3, [r7, #14]
 800f2ae:	e01c      	b.n	800f2ea <inv_row_2_scale+0x74>
    else if (row[1] < 0)
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	f993 3000 	ldrsb.w	r3, [r3]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	da02      	bge.n	800f2c2 <inv_row_2_scale+0x4c>
        b = 5;
 800f2bc:	2305      	movs	r3, #5
 800f2be:	81fb      	strh	r3, [r7, #14]
 800f2c0:	e013      	b.n	800f2ea <inv_row_2_scale+0x74>
    else if (row[2] > 0)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3302      	adds	r3, #2
 800f2c6:	f993 3000 	ldrsb.w	r3, [r3]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	dd02      	ble.n	800f2d4 <inv_row_2_scale+0x5e>
        b = 2;
 800f2ce:	2302      	movs	r3, #2
 800f2d0:	81fb      	strh	r3, [r7, #14]
 800f2d2:	e00a      	b.n	800f2ea <inv_row_2_scale+0x74>
    else if (row[2] < 0)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3302      	adds	r3, #2
 800f2d8:	f993 3000 	ldrsb.w	r3, [r3]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	da02      	bge.n	800f2e6 <inv_row_2_scale+0x70>
        b = 6;
 800f2e0:	2306      	movs	r3, #6
 800f2e2:	81fb      	strh	r3, [r7, #14]
 800f2e4:	e001      	b.n	800f2ea <inv_row_2_scale+0x74>
    else
        b = 7;		// error
 800f2e6:	2307      	movs	r3, #7
 800f2e8:	81fb      	strh	r3, [r7, #14]
    return b;
 800f2ea:	89fb      	ldrh	r3, [r7, #14]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bc80      	pop	{r7}
 800f2f4:	4770      	bx	lr

0800f2f6 <inv_orientation_matrix_to_scalar>:
* The next 2 bits (6 and 7) represent the column the one is on for the third row with
* bit number 8 being the sign. In binary the identity matrix would therefor be:
* 010_001_000 or 0x88 in hex.
*/
unsigned short inv_orientation_matrix_to_scalar(const signed char *mtx)
{
 800f2f6:	b580      	push	{r7, lr}
 800f2f8:	b084      	sub	sp, #16
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	6078      	str	r0, [r7, #4]
       YZX  000_010_001
       ZXY  001_000_010
       ZYX  000_001_010
     */

    scalar = inv_row_2_scale(mtx);
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7ff ffb9 	bl	800f276 <inv_row_2_scale>
 800f304:	4603      	mov	r3, r0
 800f306:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 3) << 3;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	3303      	adds	r3, #3
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7ff ffb2 	bl	800f276 <inv_row_2_scale>
 800f312:	4603      	mov	r3, r0
 800f314:	00db      	lsls	r3, r3, #3
 800f316:	b21a      	sxth	r2, r3
 800f318:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f31c:	4313      	orrs	r3, r2
 800f31e:	b21b      	sxth	r3, r3
 800f320:	81fb      	strh	r3, [r7, #14]
    scalar |= inv_row_2_scale(mtx + 6) << 6;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	3306      	adds	r3, #6
 800f326:	4618      	mov	r0, r3
 800f328:	f7ff ffa5 	bl	800f276 <inv_row_2_scale>
 800f32c:	4603      	mov	r3, r0
 800f32e:	019b      	lsls	r3, r3, #6
 800f330:	b21a      	sxth	r2, r3
 800f332:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800f336:	4313      	orrs	r3, r2
 800f338:	b21b      	sxth	r3, r3
 800f33a:	81fb      	strh	r3, [r7, #14]


    return scalar;
 800f33c:	89fb      	ldrh	r3, [r7, #14]
}
 800f33e:	4618      	mov	r0, r3
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}

0800f346 <inv_convert_to_body_with_scale>:
* @param[in] sensitivity Sensitivity scale
* @param[in] input Input vector, length 3
* @param[out] output Output vector, length 3
*/
void inv_convert_to_body_with_scale(unsigned short orientation, long sensitivity, const long *input, long *output)
{
 800f346:	b590      	push	{r4, r7, lr}
 800f348:	b085      	sub	sp, #20
 800f34a:	af00      	add	r7, sp, #0
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
 800f350:	603b      	str	r3, [r7, #0]
 800f352:	4603      	mov	r3, r0
 800f354:	81fb      	strh	r3, [r7, #14]
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800f356:	89fb      	ldrh	r3, [r7, #14]
 800f358:	f003 0303 	and.w	r3, r3, #3
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	687a      	ldr	r2, [r7, #4]
 800f360:	4413      	add	r3, r2
 800f362:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x004), sensitivity);
 800f364:	89fb      	ldrh	r3, [r7, #14]
 800f366:	f003 0304 	and.w	r3, r3, #4
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d002      	beq.n	800f374 <inv_convert_to_body_with_scale+0x2e>
 800f36e:	f04f 33ff 	mov.w	r3, #4294967295
 800f372:	e000      	b.n	800f376 <inv_convert_to_body_with_scale+0x30>
 800f374:	2301      	movs	r3, #1
    output[0] = inv_q30_mult(input[orientation & 0x03] *
 800f376:	fb02 f303 	mul.w	r3, r2, r3
 800f37a:	68b9      	ldr	r1, [r7, #8]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff f9e1 	bl	800e744 <inv_q30_mult>
 800f382:	4602      	mov	r2, r0
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	601a      	str	r2, [r3, #0]
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800f388:	89fb      	ldrh	r3, [r7, #14]
 800f38a:	08db      	lsrs	r3, r3, #3
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	f003 0303 	and.w	r3, r3, #3
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	4413      	add	r3, r2
 800f398:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x020), sensitivity);
 800f39a:	89fb      	ldrh	r3, [r7, #14]
 800f39c:	f003 0320 	and.w	r3, r3, #32
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d002      	beq.n	800f3aa <inv_convert_to_body_with_scale+0x64>
 800f3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3a8:	e000      	b.n	800f3ac <inv_convert_to_body_with_scale+0x66>
 800f3aa:	2301      	movs	r3, #1
    output[1] = inv_q30_mult(input[(orientation>>3) & 0x03] *
 800f3ac:	fb02 f203 	mul.w	r2, r2, r3
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	1d1c      	adds	r4, r3, #4
 800f3b4:	68b9      	ldr	r1, [r7, #8]
 800f3b6:	4610      	mov	r0, r2
 800f3b8:	f7ff f9c4 	bl	800e744 <inv_q30_mult>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	6023      	str	r3, [r4, #0]
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800f3c0:	89fb      	ldrh	r3, [r7, #14]
 800f3c2:	099b      	lsrs	r3, r3, #6
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	f003 0303 	and.w	r3, r3, #3
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	681a      	ldr	r2, [r3, #0]
                             SIGNSET(orientation & 0x100), sensitivity);
 800f3d2:	89fb      	ldrh	r3, [r7, #14]
 800f3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d002      	beq.n	800f3e2 <inv_convert_to_body_with_scale+0x9c>
 800f3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e0:	e000      	b.n	800f3e4 <inv_convert_to_body_with_scale+0x9e>
 800f3e2:	2301      	movs	r3, #1
    output[2] = inv_q30_mult(input[(orientation>>6) & 0x03] *
 800f3e4:	fb02 f203 	mul.w	r2, r2, r3
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	f103 0408 	add.w	r4, r3, #8
 800f3ee:	68b9      	ldr	r1, [r7, #8]
 800f3f0:	4610      	mov	r0, r2
 800f3f2:	f7ff f9a7 	bl	800e744 <inv_q30_mult>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	6023      	str	r3, [r4, #0]
}
 800f3fa:	bf00      	nop
 800f3fc:	3714      	adds	r7, #20
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd90      	pop	{r4, r7, pc}

0800f402 <inv_init_biquad_filter>:
double inv_vector_norm(const float *x)
{
    return sqrt(x[0]*x[0]+x[1]*x[1]+x[2]*x[2]);
}

void inv_init_biquad_filter(inv_biquad_filter_t *pFilter, float *pBiquadCoeff) {
 800f402:	b480      	push	{r7}
 800f404:	b085      	sub	sp, #20
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	6039      	str	r1, [r7, #0]
    int i;
    // initial state to zero
    pFilter->state[0] = 0;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f04f 0200 	mov.w	r2, #0
 800f412:	601a      	str	r2, [r3, #0]
    pFilter->state[1] = 0;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f04f 0200 	mov.w	r2, #0
 800f41a:	605a      	str	r2, [r3, #4]

    // set up coefficients
    for (i=0; i<5; i++) {
 800f41c:	2300      	movs	r3, #0
 800f41e:	60fb      	str	r3, [r7, #12]
 800f420:	e00c      	b.n	800f43c <inv_init_biquad_filter+0x3a>
        pFilter->c[i] = pBiquadCoeff[i];
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	683a      	ldr	r2, [r7, #0]
 800f428:	4413      	add	r3, r2
 800f42a:	6819      	ldr	r1, [r3, #0]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	68fa      	ldr	r2, [r7, #12]
 800f430:	3204      	adds	r2, #4
 800f432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i=0; i<5; i++) {
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	3301      	adds	r3, #1
 800f43a:	60fb      	str	r3, [r7, #12]
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2b04      	cmp	r3, #4
 800f440:	ddef      	ble.n	800f422 <inv_init_biquad_filter+0x20>
    }
}
 800f442:	bf00      	nop
 800f444:	bf00      	nop
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	bc80      	pop	{r7}
 800f44c:	4770      	bx	lr

0800f44e <inv_calc_state_to_match_output>:

void inv_calc_state_to_match_output(inv_biquad_filter_t *pFilter, float input)
{
 800f44e:	b580      	push	{r7, lr}
 800f450:	b082      	sub	sp, #8
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
 800f456:	6039      	str	r1, [r7, #0]
    pFilter->input = input;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	683a      	ldr	r2, [r7, #0]
 800f45c:	625a      	str	r2, [r3, #36]	; 0x24
    pFilter->output = input;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	629a      	str	r2, [r3, #40]	; 0x28
    pFilter->state[0] = input / (1 + pFilter->c[2] + pFilter->c[3]);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	699b      	ldr	r3, [r3, #24]
 800f468:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7f4 f959 	bl	8003724 <__addsf3>
 800f472:	4603      	mov	r3, r0
 800f474:	461a      	mov	r2, r3
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	69db      	ldr	r3, [r3, #28]
 800f47a:	4619      	mov	r1, r3
 800f47c:	4610      	mov	r0, r2
 800f47e:	f7f4 f951 	bl	8003724 <__addsf3>
 800f482:	4603      	mov	r3, r0
 800f484:	4619      	mov	r1, r3
 800f486:	6838      	ldr	r0, [r7, #0]
 800f488:	f7f4 fb08 	bl	8003a9c <__aeabi_fdiv>
 800f48c:	4603      	mov	r3, r0
 800f48e:	461a      	mov	r2, r3
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	601a      	str	r2, [r3, #0]
    pFilter->state[1] = pFilter->state[0];
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681a      	ldr	r2, [r3, #0]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	605a      	str	r2, [r3, #4]
}
 800f49c:	bf00      	nop
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <inv_biquad_filter_process>:

float inv_biquad_filter_process(inv_biquad_filter_t *pFilter, float input)  {
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
    float stateZero;

    pFilter->input = input;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	683a      	ldr	r2, [r7, #0]
 800f4b2:	625a      	str	r2, [r3, #36]	; 0x24
    // calculate the new state;
    stateZero = pFilter->input - pFilter->c[2]*pFilter->state[0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	699a      	ldr	r2, [r3, #24]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	4610      	mov	r0, r2
 800f4c4:	f7f4 fa36 	bl	8003934 <__aeabi_fmul>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f7f4 f927 	bl	8003720 <__aeabi_fsub>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	461c      	mov	r4, r3
                               - pFilter->c[3]*pFilter->state[1];
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	69da      	ldr	r2, [r3, #28]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	4619      	mov	r1, r3
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	f7f4 fa27 	bl	8003934 <__aeabi_fmul>
 800f4e6:	4603      	mov	r3, r0
    stateZero = pFilter->input - pFilter->c[2]*pFilter->state[0]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f7f4 f918 	bl	8003720 <__aeabi_fsub>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	60fb      	str	r3, [r7, #12]

    pFilter->output = stateZero + pFilter->c[0]*pFilter->state[0]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	691a      	ldr	r2, [r3, #16]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4610      	mov	r0, r2
 800f500:	f7f4 fa18 	bl	8003934 <__aeabi_fmul>
 800f504:	4603      	mov	r3, r0
 800f506:	68f9      	ldr	r1, [r7, #12]
 800f508:	4618      	mov	r0, r3
 800f50a:	f7f4 f90b 	bl	8003724 <__addsf3>
 800f50e:	4603      	mov	r3, r0
 800f510:	461c      	mov	r4, r3
                                + pFilter->c[1]*pFilter->state[1];
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	695a      	ldr	r2, [r3, #20]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	4619      	mov	r1, r3
 800f51c:	4610      	mov	r0, r2
 800f51e:	f7f4 fa09 	bl	8003934 <__aeabi_fmul>
 800f522:	4603      	mov	r3, r0
 800f524:	4619      	mov	r1, r3
 800f526:	4620      	mov	r0, r4
 800f528:	f7f4 f8fc 	bl	8003724 <__addsf3>
 800f52c:	4603      	mov	r3, r0
 800f52e:	461a      	mov	r2, r3
    pFilter->output = stateZero + pFilter->c[0]*pFilter->state[0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	629a      	str	r2, [r3, #40]	; 0x28

    // update the output and state
    pFilter->output = pFilter->output * pFilter->c[4];
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	4619      	mov	r1, r3
 800f53e:	4610      	mov	r0, r2
 800f540:	f7f4 f9f8 	bl	8003934 <__aeabi_fmul>
 800f544:	4603      	mov	r3, r0
 800f546:	461a      	mov	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	629a      	str	r2, [r3, #40]	; 0x28
    pFilter->state[1] = pFilter->state[0];
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681a      	ldr	r2, [r3, #0]
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	605a      	str	r2, [r3, #4]
    pFilter->state[0] = stateZero;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	68fa      	ldr	r2, [r7, #12]
 800f558:	601a      	str	r2, [r3, #0]
    return pFilter->output;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3714      	adds	r7, #20
 800f562:	46bd      	mov	sp, r7
 800f564:	bd90      	pop	{r4, r7, pc}
	...

0800f568 <__print_result_location>:
    /* Final implementation of actual writing to a character device */
    int _MLWriteLog(const char *buf, int buflen);
#endif

    static inline void __print_result_location(int result, const char *file, const char *func, int line)
    {
 800f568:	b580      	push	{r7, lr}
 800f56a:	b086      	sub	sp, #24
 800f56c:	af02      	add	r7, sp, #8
 800f56e:	60f8      	str	r0, [r7, #12]
 800f570:	60b9      	str	r1, [r7, #8]
 800f572:	607a      	str	r2, [r7, #4]
 800f574:	603b      	str	r3, [r7, #0]
        MPL_LOGE("%s|%s|%d returning %d\n", file, func, line, result);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	9300      	str	r3, [sp, #0]
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	68b9      	ldr	r1, [r7, #8]
 800f580:	4803      	ldr	r0, [pc, #12]	; (800f590 <__print_result_location+0x28>)
 800f582:	f001 ff29 	bl	80113d8 <iprintf>
    }
 800f586:	bf00      	nop
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	080161a0 	.word	0x080161a0

0800f594 <inv_init_mpl>:
/**
 * @brief  Initializes the MPL. Should be called first and once 
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_mpl(void)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	af00      	add	r7, sp, #0
    inv_init_storage_manager();
 800f598:	f000 faf0 	bl	800fb7c <inv_init_storage_manager>

    /* initialize the start callback manager */
    INV_ERROR_CHECK(inv_init_start_manager());
 800f59c:	f000 fa5e 	bl	800fa5c <inv_init_start_manager>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00a      	beq.n	800f5bc <inv_init_mpl+0x28>
 800f5a6:	f000 fa59 	bl	800fa5c <inv_init_start_manager>
 800f5aa:	2322      	movs	r3, #34	; 0x22
 800f5ac:	4a15      	ldr	r2, [pc, #84]	; (800f604 <inv_init_mpl+0x70>)
 800f5ae:	4916      	ldr	r1, [pc, #88]	; (800f608 <inv_init_mpl+0x74>)
 800f5b0:	f7ff ffda 	bl	800f568 <__print_result_location>
 800f5b4:	f000 fa52 	bl	800fa5c <inv_init_start_manager>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	e020      	b.n	800f5fe <inv_init_mpl+0x6a>

    /* initialize the data builder */
    INV_ERROR_CHECK(inv_init_data_builder());
 800f5bc:	f7fd ff8a 	bl	800d4d4 <inv_init_data_builder>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d00a      	beq.n	800f5dc <inv_init_mpl+0x48>
 800f5c6:	f7fd ff85 	bl	800d4d4 <inv_init_data_builder>
 800f5ca:	2325      	movs	r3, #37	; 0x25
 800f5cc:	4a0d      	ldr	r2, [pc, #52]	; (800f604 <inv_init_mpl+0x70>)
 800f5ce:	490e      	ldr	r1, [pc, #56]	; (800f608 <inv_init_mpl+0x74>)
 800f5d0:	f7ff ffca 	bl	800f568 <__print_result_location>
 800f5d4:	f7fd ff7e 	bl	800d4d4 <inv_init_data_builder>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	e010      	b.n	800f5fe <inv_init_mpl+0x6a>

    INV_ERROR_CHECK(inv_enable_results_holder());
 800f5dc:	f000 f9de 	bl	800f99c <inv_enable_results_holder>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d00a      	beq.n	800f5fc <inv_init_mpl+0x68>
 800f5e6:	f000 f9d9 	bl	800f99c <inv_enable_results_holder>
 800f5ea:	2327      	movs	r3, #39	; 0x27
 800f5ec:	4a05      	ldr	r2, [pc, #20]	; (800f604 <inv_init_mpl+0x70>)
 800f5ee:	4906      	ldr	r1, [pc, #24]	; (800f608 <inv_init_mpl+0x74>)
 800f5f0:	f7ff ffba 	bl	800f568 <__print_result_location>
 800f5f4:	f000 f9d2 	bl	800f99c <inv_enable_results_holder>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	e000      	b.n	800f5fe <inv_init_mpl+0x6a>

    return INV_SUCCESS;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	08016f30 	.word	0x08016f30
 800f608:	080161b8 	.word	0x080161b8

0800f60c <inv_start_mpl>:
 *  @brief  Starts the MPL. Typically called after inv_init_mpl() or after a
 *          inv_stop_mpl() to start the MPL back up an running.
 *  @return INV_SUCCESS if successful or a non-zero error code otherwise.
 */
inv_error_t inv_start_mpl(void)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	af00      	add	r7, sp, #0
    INV_ERROR_CHECK(inv_execute_mpl_start_notification());
 800f610:	f000 fa8e 	bl	800fb30 <inv_execute_mpl_start_notification>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	d00a      	beq.n	800f630 <inv_start_mpl+0x24>
 800f61a:	f000 fa89 	bl	800fb30 <inv_execute_mpl_start_notification>
 800f61e:	2342      	movs	r3, #66	; 0x42
 800f620:	4a05      	ldr	r2, [pc, #20]	; (800f638 <inv_start_mpl+0x2c>)
 800f622:	4906      	ldr	r1, [pc, #24]	; (800f63c <inv_start_mpl+0x30>)
 800f624:	f7ff ffa0 	bl	800f568 <__print_result_location>
 800f628:	f000 fa82 	bl	800fb30 <inv_execute_mpl_start_notification>
 800f62c:	4603      	mov	r3, r0
 800f62e:	e000      	b.n	800f632 <inv_start_mpl+0x26>
    return INV_SUCCESS;
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	08016f40 	.word	0x08016f40
 800f63c:	080161b8 	.word	0x080161b8

0800f640 <inv_store_gaming_quaternion>:
 * Store a quaternion more suitable for gaming. This quaternion is often determined
 * using only gyro and accel.
 * @param[in] quat Length 4, Quaternion scaled by 2^30
 */
void inv_store_gaming_quaternion(const long *quat, inv_time_t timestamp)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	6039      	str	r1, [r7, #0]
    rh.status |= INV_6_AXIS_QUAT_SET;
 800f64a:	4b09      	ldr	r3, [pc, #36]	; (800f670 <inv_store_gaming_quaternion+0x30>)
 800f64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f64e:	f043 0302 	orr.w	r3, r3, #2
 800f652:	4a07      	ldr	r2, [pc, #28]	; (800f670 <inv_store_gaming_quaternion+0x30>)
 800f654:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(&rh.gam_quat, quat, sizeof(rh.gam_quat));
 800f656:	2210      	movs	r2, #16
 800f658:	6879      	ldr	r1, [r7, #4]
 800f65a:	4806      	ldr	r0, [pc, #24]	; (800f674 <inv_store_gaming_quaternion+0x34>)
 800f65c:	f000 ffbf 	bl	80105de <memcpy>
    rh.gam_timestamp = timestamp;
 800f660:	4a03      	ldr	r2, [pc, #12]	; (800f670 <inv_store_gaming_quaternion+0x30>)
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	6253      	str	r3, [r2, #36]	; 0x24
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	200007c4 	.word	0x200007c4
 800f674:	200007d4 	.word	0x200007d4

0800f678 <inv_set_compass_correction>:
 * Sets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
 * @param[in] data Quaternion Adjustment
 * @param[in] timestamp Timestamp of when this is valid
 */
void inv_set_compass_correction(const long *data, inv_time_t timestamp)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
    rh.status |= INV_COMPASS_CORRECTION_SET;
 800f682:	4b09      	ldr	r3, [pc, #36]	; (800f6a8 <inv_set_compass_correction+0x30>)
 800f684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f686:	f043 0301 	orr.w	r3, r3, #1
 800f68a:	4a07      	ldr	r2, [pc, #28]	; (800f6a8 <inv_set_compass_correction+0x30>)
 800f68c:	67d3      	str	r3, [r2, #124]	; 0x7c
    memcpy(rh.compass_correction, data, sizeof(rh.compass_correction));
 800f68e:	2210      	movs	r2, #16
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	4806      	ldr	r0, [pc, #24]	; (800f6ac <inv_set_compass_correction+0x34>)
 800f694:	f000 ffa3 	bl	80105de <memcpy>
    rh.nav_timestamp = timestamp;
 800f698:	4a03      	ldr	r2, [pc, #12]	; (800f6a8 <inv_set_compass_correction+0x30>)
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	6213      	str	r3, [r2, #32]
}
 800f69e:	bf00      	nop
 800f6a0:	3708      	adds	r7, #8
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	200007c4 	.word	0x200007c4
 800f6ac:	20000804 	.word	0x20000804

0800f6b0 <inv_get_compass_correction>:
 * Gets the quaternion adjustment from 6 axis (accel, gyro) to 9 axis quaternion.
 * @param[out] data Quaternion Adjustment
 * @param[out] timestamp Timestamp of when this is valid
 */
void inv_get_compass_correction(long *data, inv_time_t *timestamp)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	b082      	sub	sp, #8
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	6039      	str	r1, [r7, #0]
    memcpy(data, rh.compass_correction, sizeof(rh.compass_correction));
 800f6ba:	2210      	movs	r2, #16
 800f6bc:	4905      	ldr	r1, [pc, #20]	; (800f6d4 <inv_get_compass_correction+0x24>)
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 ff8d 	bl	80105de <memcpy>
    *timestamp = rh.nav_timestamp;
 800f6c4:	4b04      	ldr	r3, [pc, #16]	; (800f6d8 <inv_get_compass_correction+0x28>)
 800f6c6:	6a1a      	ldr	r2, [r3, #32]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	601a      	str	r2, [r3, #0]
}
 800f6cc:	bf00      	nop
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	20000804 	.word	0x20000804
 800f6d8:	200007c4 	.word	0x200007c4

0800f6dc <inv_get_acc_state>:

/** Gets the accel state set by inv_set_acc_state()
 * @return accel state.
 */
int inv_get_acc_state()
{
 800f6dc:	b480      	push	{r7}
 800f6de:	af00      	add	r7, sp, #0
    return rh.acc_state;
 800f6e0:	4b02      	ldr	r3, [pc, #8]	; (800f6ec <inv_get_acc_state+0x10>)
 800f6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bc80      	pop	{r7}
 800f6ea:	4770      	bx	lr
 800f6ec:	200007c4 	.word	0x200007c4

0800f6f0 <inv_get_motion_state>:
/** Returns the motion state
 * @param[out] cntr Number of previous times a no motion event has occured in a row.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
int inv_get_motion_state(unsigned int *cntr)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
    *cntr = rh.motion_state_counter;
 800f6f8:	4b05      	ldr	r3, [pc, #20]	; (800f710 <inv_get_motion_state+0x20>)
 800f6fa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	601a      	str	r2, [r3, #0]
    return rh.motion_state;
 800f700:	4b03      	ldr	r3, [pc, #12]	; (800f710 <inv_get_motion_state+0x20>)
 800f702:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
}
 800f706:	4618      	mov	r0, r3
 800f708:	370c      	adds	r7, #12
 800f70a:	46bd      	mov	sp, r7
 800f70c:	bc80      	pop	{r7}
 800f70e:	4770      	bx	lr
 800f710:	200007c4 	.word	0x200007c4

0800f714 <inv_set_motion_state>:
/** Sets the motion state
 * @param[in] state motion state where INV_NO_MOTION is not moving
 *            and INV_MOTION is moving.
 */
void inv_set_motion_state(unsigned char state)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b084      	sub	sp, #16
 800f718:	af00      	add	r7, sp, #0
 800f71a:	4603      	mov	r3, r0
 800f71c:	71fb      	strb	r3, [r7, #7]
    long set;
    if (state == rh.motion_state)
 800f71e:	4b15      	ldr	r3, [pc, #84]	; (800f774 <inv_set_motion_state+0x60>)
 800f720:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800f724:	79fa      	ldrb	r2, [r7, #7]
 800f726:	429a      	cmp	r2, r3
 800f728:	d10c      	bne.n	800f744 <inv_set_motion_state+0x30>
    {
        if (state == INV_NO_MOTION)
 800f72a:	79fb      	ldrb	r3, [r7, #7]
 800f72c:	2b02      	cmp	r3, #2
 800f72e:	d105      	bne.n	800f73c <inv_set_motion_state+0x28>
        {
            rh.motion_state_counter++;
 800f730:	4b10      	ldr	r3, [pc, #64]	; (800f774 <inv_set_motion_state+0x60>)
 800f732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f734:	3301      	adds	r3, #1
 800f736:	4a0f      	ldr	r2, [pc, #60]	; (800f774 <inv_set_motion_state+0x60>)
 800f738:	6693      	str	r3, [r2, #104]	; 0x68
        }
        else
        {
            rh.motion_state_counter = 0;
        }
        return;
 800f73a:	e017      	b.n	800f76c <inv_set_motion_state+0x58>
            rh.motion_state_counter = 0;
 800f73c:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <inv_set_motion_state+0x60>)
 800f73e:	2200      	movs	r2, #0
 800f740:	669a      	str	r2, [r3, #104]	; 0x68
        return;
 800f742:	e013      	b.n	800f76c <inv_set_motion_state+0x58>
    }
    rh.motion_state_counter = 0;
 800f744:	4b0b      	ldr	r3, [pc, #44]	; (800f774 <inv_set_motion_state+0x60>)
 800f746:	2200      	movs	r2, #0
 800f748:	669a      	str	r2, [r3, #104]	; 0x68
    rh.motion_state = state;
 800f74a:	4a0a      	ldr	r2, [pc, #40]	; (800f774 <inv_set_motion_state+0x60>)
 800f74c:	79fb      	ldrb	r3, [r7, #7]
 800f74e:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
    /* Equivalent to set = state, but #define's may change. */
    if (state == INV_MOTION)
 800f752:	79fb      	ldrb	r3, [r7, #7]
 800f754:	2b01      	cmp	r3, #1
 800f756:	d102      	bne.n	800f75e <inv_set_motion_state+0x4a>
        set = INV_MSG_MOTION_EVENT;
 800f758:	2301      	movs	r3, #1
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	e001      	b.n	800f762 <inv_set_motion_state+0x4e>
    else
        set = INV_MSG_NO_MOTION_EVENT;
 800f75e:	2302      	movs	r3, #2
 800f760:	60fb      	str	r3, [r7, #12]
    inv_set_message(set, (INV_MSG_MOTION_EVENT | INV_MSG_NO_MOTION_EVENT), 0);
 800f762:	2200      	movs	r2, #0
 800f764:	2103      	movs	r1, #3
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f7fe fed4 	bl	800e514 <inv_set_message>
}
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	200007c4 	.word	0x200007c4

0800f778 <inv_get_local_field>:
 * @param[out] data Local earth's magnetic field in uT scaled by 2^16.
 *            Length = 3. Y typically points north, Z typically points down in
 *                        northern hemisphere and up in southern hemisphere.
 */
void inv_get_local_field(long *data)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.local_field, sizeof(rh.local_field));
 800f780:	220c      	movs	r2, #12
 800f782:	4904      	ldr	r1, [pc, #16]	; (800f794 <inv_get_local_field+0x1c>)
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 ff2a 	bl	80105de <memcpy>
}
 800f78a:	bf00      	nop
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}
 800f792:	bf00      	nop
 800f794:	200007ec 	.word	0x200007ec

0800f798 <inv_get_gravity>:
/** Gets gravity vector
 * @param[out] data gravity vector in body frame scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_gravity(long *data)
{
 800f798:	b590      	push	{r4, r7, lr}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
    data[0] = inv_q29_mult(rh.nav_quat[1], rh.nav_quat[3]) - inv_q29_mult(rh.nav_quat[2], rh.nav_quat[0]);
 800f7a0:	4b23      	ldr	r3, [pc, #140]	; (800f830 <inv_get_gravity+0x98>)
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	4a22      	ldr	r2, [pc, #136]	; (800f830 <inv_get_gravity+0x98>)
 800f7a6:	68d2      	ldr	r2, [r2, #12]
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fe ff9e 	bl	800e6ec <inv_q29_mult>
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	4b1f      	ldr	r3, [pc, #124]	; (800f830 <inv_get_gravity+0x98>)
 800f7b4:	689b      	ldr	r3, [r3, #8]
 800f7b6:	4a1e      	ldr	r2, [pc, #120]	; (800f830 <inv_get_gravity+0x98>)
 800f7b8:	6812      	ldr	r2, [r2, #0]
 800f7ba:	4611      	mov	r1, r2
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fe ff95 	bl	800e6ec <inv_q29_mult>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	1ae2      	subs	r2, r4, r3
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	601a      	str	r2, [r3, #0]
    data[1] = inv_q29_mult(rh.nav_quat[2], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[1], rh.nav_quat[0]);
 800f7ca:	4b19      	ldr	r3, [pc, #100]	; (800f830 <inv_get_gravity+0x98>)
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	4a18      	ldr	r2, [pc, #96]	; (800f830 <inv_get_gravity+0x98>)
 800f7d0:	68d2      	ldr	r2, [r2, #12]
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f7fe ff89 	bl	800e6ec <inv_q29_mult>
 800f7da:	4604      	mov	r4, r0
 800f7dc:	4b14      	ldr	r3, [pc, #80]	; (800f830 <inv_get_gravity+0x98>)
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	4a13      	ldr	r2, [pc, #76]	; (800f830 <inv_get_gravity+0x98>)
 800f7e2:	6812      	ldr	r2, [r2, #0]
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7fe ff80 	bl	800e6ec <inv_q29_mult>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	4422      	add	r2, r4
 800f7f4:	601a      	str	r2, [r3, #0]
    data[2] =
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) - 1073741824L;
 800f7f6:	4b0e      	ldr	r3, [pc, #56]	; (800f830 <inv_get_gravity+0x98>)
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	4a0d      	ldr	r2, [pc, #52]	; (800f830 <inv_get_gravity+0x98>)
 800f7fc:	68d2      	ldr	r2, [r2, #12]
 800f7fe:	4611      	mov	r1, r2
 800f800:	4618      	mov	r0, r3
 800f802:	f7fe ff73 	bl	800e6ec <inv_q29_mult>
 800f806:	4604      	mov	r4, r0
 800f808:	4b09      	ldr	r3, [pc, #36]	; (800f830 <inv_get_gravity+0x98>)
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	4a08      	ldr	r2, [pc, #32]	; (800f830 <inv_get_gravity+0x98>)
 800f80e:	6812      	ldr	r2, [r2, #0]
 800f810:	4611      	mov	r1, r2
 800f812:	4618      	mov	r0, r3
 800f814:	f7fe ff6a 	bl	800e6ec <inv_q29_mult>
 800f818:	4603      	mov	r3, r0
 800f81a:	18e2      	adds	r2, r4, r3
    data[2] =
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	3308      	adds	r3, #8
        (inv_q29_mult(rh.nav_quat[3], rh.nav_quat[3]) + inv_q29_mult(rh.nav_quat[0], rh.nav_quat[0])) - 1073741824L;
 800f820:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    data[2] =
 800f824:	601a      	str	r2, [r3, #0]

    return INV_SUCCESS;
 800f826:	2300      	movs	r3, #0
}
 800f828:	4618      	mov	r0, r3
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd90      	pop	{r4, r7, pc}
 800f830:	200007c4 	.word	0x200007c4

0800f834 <inv_get_6axis_quaternion>:
/** Returns a quaternion based only on gyro and accel.
 * @param[out] data 6-axis  gyro and accel quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_6axis_quaternion(long *data)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
    memcpy(data, rh.gam_quat, sizeof(rh.gam_quat));
 800f83c:	2210      	movs	r2, #16
 800f83e:	4904      	ldr	r1, [pc, #16]	; (800f850 <inv_get_6axis_quaternion+0x1c>)
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 fecc 	bl	80105de <memcpy>
    return INV_SUCCESS;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	200007d4 	.word	0x200007d4

0800f854 <inv_get_quaternion>:
/** Returns a quaternion.
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_get_quaternion(long *data)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
    if (rh.status & (INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET))
 800f85c:	4b0d      	ldr	r3, [pc, #52]	; (800f894 <inv_get_quaternion+0x40>)
 800f85e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f860:	f003 0303 	and.w	r3, r3, #3
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00a      	beq.n	800f87e <inv_get_quaternion+0x2a>
    {
        inv_q_mult(rh.compass_correction, rh.gam_quat, rh.nav_quat);
 800f868:	4a0a      	ldr	r2, [pc, #40]	; (800f894 <inv_get_quaternion+0x40>)
 800f86a:	490b      	ldr	r1, [pc, #44]	; (800f898 <inv_get_quaternion+0x44>)
 800f86c:	480b      	ldr	r0, [pc, #44]	; (800f89c <inv_get_quaternion+0x48>)
 800f86e:	f7fe ff95 	bl	800e79c <inv_q_mult>
        rh.status &= ~(INV_COMPASS_CORRECTION_SET | INV_6_AXIS_QUAT_SET);
 800f872:	4b08      	ldr	r3, [pc, #32]	; (800f894 <inv_get_quaternion+0x40>)
 800f874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f876:	f023 0303 	bic.w	r3, r3, #3
 800f87a:	4a06      	ldr	r2, [pc, #24]	; (800f894 <inv_get_quaternion+0x40>)
 800f87c:	67d3      	str	r3, [r2, #124]	; 0x7c
    }
    memcpy(data, rh.nav_quat, sizeof(rh.nav_quat));
 800f87e:	2210      	movs	r2, #16
 800f880:	4904      	ldr	r1, [pc, #16]	; (800f894 <inv_get_quaternion+0x40>)
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f000 feab 	bl	80105de <memcpy>
    return INV_SUCCESS;
 800f888:	2300      	movs	r3, #0
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3708      	adds	r7, #8
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	200007c4 	.word	0x200007c4
 800f898:	200007d4 	.word	0x200007d4
 800f89c:	20000804 	.word	0x20000804

0800f8a0 <inv_get_quaternion_set>:
 * @param[out] data 9-axis quaternion scaled such that 1.0 = 2^30.
 * @param[out] accuracy Accuracy of quaternion, 0-3, where 3 is most accurate.
 * @param[out] timestamp Timestamp of this quaternion in nanoseconds
 */
void inv_get_quaternion_set(long *data, int *accuracy, inv_time_t *timestamp)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	607a      	str	r2, [r7, #4]
    inv_get_quaternion(data);
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7ff ffd1 	bl	800f854 <inv_get_quaternion>
    *timestamp = inv_get_last_timestamp();
 800f8b2:	f7fd fed7 	bl	800d664 <inv_get_last_timestamp>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	601a      	str	r2, [r3, #0]
    if (inv_get_compass_on())
 800f8bc:	f7fd fe9c 	bl	800d5f8 <inv_get_compass_on>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d005      	beq.n	800f8d2 <inv_get_quaternion_set+0x32>
    {
        *accuracy = inv_get_mag_accuracy();
 800f8c6:	f7fe fb87 	bl	800dfd8 <inv_get_mag_accuracy>
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *accuracy = 0;
    }
}
 800f8d0:	e018      	b.n	800f904 <inv_get_quaternion_set+0x64>
    else if (inv_get_gyro_on())
 800f8d2:	f7fd fea3 	bl	800d61c <inv_get_gyro_on>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d005      	beq.n	800f8e8 <inv_get_quaternion_set+0x48>
        *accuracy = inv_get_gyro_accuracy();
 800f8dc:	f7fe fb72 	bl	800dfc4 <inv_get_gyro_accuracy>
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	601a      	str	r2, [r3, #0]
}
 800f8e6:	e00d      	b.n	800f904 <inv_get_quaternion_set+0x64>
    else if (inv_get_accel_on())
 800f8e8:	f7fd feaa 	bl	800d640 <inv_get_accel_on>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d005      	beq.n	800f8fe <inv_get_quaternion_set+0x5e>
        *accuracy = inv_get_accel_accuracy();
 800f8f2:	f7fe fb85 	bl	800e000 <inv_get_accel_accuracy>
 800f8f6:	4602      	mov	r2, r0
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	601a      	str	r2, [r3, #0]
}
 800f8fc:	e002      	b.n	800f904 <inv_get_quaternion_set+0x64>
        *accuracy = 0;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	2200      	movs	r2, #0
 800f902:	601a      	str	r2, [r3, #0]
}
 800f904:	bf00      	nop
 800f906:	3710      	adds	r7, #16
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}

0800f90c <inv_generate_results>:
 * registered by inv_start_results_holder().
 * @param[in] sensor_cal New sensor data to process.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_generate_results(struct inv_sensor_cal_t *sensor_cal)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b083      	sub	sp, #12
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
    rh.sensor = sensor_cal;
 800f914:	4a04      	ldr	r2, [pc, #16]	; (800f928 <inv_generate_results+0x1c>)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    return INV_SUCCESS;
 800f91c:	2300      	movs	r3, #0
}
 800f91e:	4618      	mov	r0, r3
 800f920:	370c      	adds	r7, #12
 800f922:	46bd      	mov	sp, r7
 800f924:	bc80      	pop	{r7}
 800f926:	4770      	bx	lr
 800f928:	200007c4 	.word	0x200007c4

0800f92c <inv_start_results_holder>:
/** Function to turn on this module. This is automatically called by
 *  inv_enable_results_holder(). Typically not called by users.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_start_results_holder(void)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
    inv_register_data_cb(inv_generate_results, INV_PRIORITY_RESULTS_HOLDER, INV_GYRO_NEW | INV_ACCEL_NEW | INV_MAG_NEW);
 800f930:	2207      	movs	r2, #7
 800f932:	f44f 7148 	mov.w	r1, #800	; 0x320
 800f936:	4803      	ldr	r0, [pc, #12]	; (800f944 <inv_start_results_holder+0x18>)
 800f938:	f7fe f8c4 	bl	800dac4 <inv_register_data_cb>
    return INV_SUCCESS;
 800f93c:	2300      	movs	r3, #0
}
 800f93e:	4618      	mov	r0, r3
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	0800f90d 	.word	0x0800f90d

0800f948 <inv_init_results_holder>:
 * enable function inv_enable_results_holder(). It may be called any time the feature is enabled, but
 * is typically not needed to be called by outside callers.
 * @return Returns INV_SUCCESS if successful or an error code if not.
 */
inv_error_t inv_init_results_holder(void)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	af00      	add	r7, sp, #0
    memset(&rh, 0, sizeof(rh));
 800f94c:	2288      	movs	r2, #136	; 0x88
 800f94e:	2100      	movs	r1, #0
 800f950:	4810      	ldr	r0, [pc, #64]	; (800f994 <inv_init_results_holder+0x4c>)
 800f952:	f000 fe6c 	bl	801062e <memset>
    rh.mag_scale[0] = 1L << 30;
 800f956:	4b0f      	ldr	r3, [pc, #60]	; (800f994 <inv_init_results_holder+0x4c>)
 800f958:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f95c:	635a      	str	r2, [r3, #52]	; 0x34
    rh.mag_scale[1] = 1L << 30;
 800f95e:	4b0d      	ldr	r3, [pc, #52]	; (800f994 <inv_init_results_holder+0x4c>)
 800f960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f964:	639a      	str	r2, [r3, #56]	; 0x38
    rh.mag_scale[2] = 1L << 30;
 800f966:	4b0b      	ldr	r3, [pc, #44]	; (800f994 <inv_init_results_holder+0x4c>)
 800f968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f96c:	63da      	str	r2, [r3, #60]	; 0x3c
    rh.compass_correction[0] = 1L << 30;
 800f96e:	4b09      	ldr	r3, [pc, #36]	; (800f994 <inv_init_results_holder+0x4c>)
 800f970:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f974:	641a      	str	r2, [r3, #64]	; 0x40
    rh.gam_quat[0] = 1L << 30;
 800f976:	4b07      	ldr	r3, [pc, #28]	; (800f994 <inv_init_results_holder+0x4c>)
 800f978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f97c:	611a      	str	r2, [r3, #16]
    rh.nav_quat[0] = 1L << 30;
 800f97e:	4b05      	ldr	r3, [pc, #20]	; (800f994 <inv_init_results_holder+0x4c>)
 800f980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800f984:	601a      	str	r2, [r3, #0]
    rh.quat_confidence_interval = (float)M_PI;
 800f986:	4b03      	ldr	r3, [pc, #12]	; (800f994 <inv_init_results_holder+0x4c>)
 800f988:	4a03      	ldr	r2, [pc, #12]	; (800f998 <inv_init_results_holder+0x50>)
 800f98a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return INV_SUCCESS;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	bd80      	pop	{r7, pc}
 800f994:	200007c4 	.word	0x200007c4
 800f998:	40490fdb 	.word	0x40490fdb

0800f99c <inv_enable_results_holder>:

/** Turns on storage of results.
 */
inv_error_t inv_enable_results_holder()
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_results_holder();
 800f9a2:	f7ff ffd1 	bl	800f948 <inv_init_results_holder>
 800f9a6:	6078      	str	r0, [r7, #4]
    if (result)
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <inv_enable_results_holder+0x16>
    {
        return result;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	e004      	b.n	800f9bc <inv_enable_results_holder+0x20>
    }

    result = inv_register_mpl_start_notification(inv_start_results_holder);
 800f9b2:	4804      	ldr	r0, [pc, #16]	; (800f9c4 <inv_enable_results_holder+0x28>)
 800f9b4:	f000 f89e 	bl	800faf4 <inv_register_mpl_start_notification>
 800f9b8:	6078      	str	r0, [r7, #4]
    return result;
 800f9ba:	687b      	ldr	r3, [r7, #4]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0800f92d 	.word	0x0800f92d

0800f9c8 <inv_got_compass_bias>:
/** Sets state of if we know the compass bias.
 * @return return 1 if we know the compass bias, 0 if not.
 *            it is set with inv_set_compass_bias_found()
 */
int inv_got_compass_bias()
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	af00      	add	r7, sp, #0
    return rh.got_compass_bias;
 800f9cc:	4b02      	ldr	r3, [pc, #8]	; (800f9d8 <inv_got_compass_bias+0x10>)
 800f9ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bc80      	pop	{r7}
 800f9d6:	4770      	bx	lr
 800f9d8:	200007c4 	.word	0x200007c4

0800f9dc <inv_set_compass_bias_found>:
/** Sets whether we know the compass bias
 * @param[in] state Set to 1 if we know the compass bias.
 *            Can be retrieved with inv_got_compass_bias()
 */
void inv_set_compass_bias_found(int state)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    rh.got_compass_bias = state;
 800f9e4:	4a03      	ldr	r2, [pc, #12]	; (800f9f4 <inv_set_compass_bias_found+0x18>)
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6713      	str	r3, [r2, #112]	; 0x70
}
 800f9ea:	bf00      	nop
 800f9ec:	370c      	adds	r7, #12
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	bc80      	pop	{r7}
 800f9f2:	4770      	bx	lr
 800f9f4:	200007c4 	.word	0x200007c4

0800f9f8 <inv_get_linear_accel>:
 *                with gravity removed
 *  @return     INV_SUCCESS if successful
 *              INV_ERROR_INVALID_PARAMETER if invalid input pointer
 */
inv_error_t inv_get_linear_accel(long *data)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b086      	sub	sp, #24
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
    long gravity[3];

    if (data != NULL)
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d024      	beq.n	800fa50 <inv_get_linear_accel+0x58>
    {
        inv_get_accel_set(data, NULL, NULL);
 800fa06:	2200      	movs	r2, #0
 800fa08:	2100      	movs	r1, #0
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7fe fa52 	bl	800deb4 <inv_get_accel_set>
        inv_get_gravity(gravity);
 800fa10:	f107 030c 	add.w	r3, r7, #12
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7ff febf 	bl	800f798 <inv_get_gravity>
        data[0] -= gravity[0] >> 14;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	139b      	asrs	r3, r3, #14
 800fa22:	1ad2      	subs	r2, r2, r3
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	601a      	str	r2, [r3, #0]
        data[1] -= gravity[1] >> 14;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	3304      	adds	r3, #4
 800fa2c:	6819      	ldr	r1, [r3, #0]
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	139a      	asrs	r2, r3, #14
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3304      	adds	r3, #4
 800fa36:	1a8a      	subs	r2, r1, r2
 800fa38:	601a      	str	r2, [r3, #0]
        data[2] -= gravity[2] >> 14;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3308      	adds	r3, #8
 800fa3e:	6819      	ldr	r1, [r3, #0]
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	139a      	asrs	r2, r3, #14
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3308      	adds	r3, #8
 800fa48:	1a8a      	subs	r2, r1, r2
 800fa4a:	601a      	str	r2, [r3, #0]
        return INV_SUCCESS;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	e000      	b.n	800fa52 <inv_get_linear_accel+0x5a>
    }
    else
    {
        return INV_ERROR_INVALID_PARAMETER;
 800fa50:	2316      	movs	r3, #22
    }
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
	...

0800fa5c <inv_init_start_manager>:

/** Initilize the start manager. Typically called by inv_start_mpl();
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_init_start_manager(void)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	af00      	add	r7, sp, #0
    memset(&inv_start_cb, 0, sizeof(inv_start_cb));
 800fa60:	2254      	movs	r2, #84	; 0x54
 800fa62:	2100      	movs	r1, #0
 800fa64:	4802      	ldr	r0, [pc, #8]	; (800fa70 <inv_init_start_manager+0x14>)
 800fa66:	f000 fde2 	bl	801062e <memset>
    return INV_SUCCESS;
 800fa6a:	2300      	movs	r3, #0
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	2000084c 	.word	0x2000084c

0800fa74 <inv_unregister_mpl_start_notification>:
/** Removes a callback from start notification
* @param[in] start_cb function to remove from start notification
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_unregister_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b084      	sub	sp, #16
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
    int kk;

    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800fa7c:	2300      	movs	r3, #0
 800fa7e:	60fb      	str	r3, [r7, #12]
 800fa80:	e02b      	b.n	800fada <inv_unregister_mpl_start_notification+0x66>
        if (inv_start_cb.start_cb[kk] == start_cb) {
 800fa82:	4a1b      	ldr	r2, [pc, #108]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	687a      	ldr	r2, [r7, #4]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d120      	bne.n	800fad4 <inv_unregister_mpl_start_notification+0x60>
            // Found the match
            if (kk != (inv_start_cb.num_cb-1)) {
 800fa92:	4b17      	ldr	r3, [pc, #92]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	3b01      	subs	r3, #1
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d013      	beq.n	800fac6 <inv_unregister_mpl_start_notification+0x52>
                memmove(&inv_start_cb.start_cb[kk],
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	4a13      	ldr	r2, [pc, #76]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800faa4:	4413      	add	r3, r2
 800faa6:	1d18      	adds	r0, r3, #4
                    &inv_start_cb.start_cb[kk+1],
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	3301      	adds	r3, #1
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4a10      	ldr	r2, [pc, #64]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800fab0:	4413      	add	r3, r2
 800fab2:	1d19      	adds	r1, r3, #4
                    (inv_start_cb.num_cb-kk-1)*sizeof(inv_start_cb_func));
 800fab4:	4b0e      	ldr	r3, [pc, #56]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	3b01      	subs	r3, #1
                memmove(&inv_start_cb.start_cb[kk],
 800fabe:	009b      	lsls	r3, r3, #2
 800fac0:	461a      	mov	r2, r3
 800fac2:	f000 fd9a 	bl	80105fa <memmove>
            }
            inv_start_cb.num_cb--;
 800fac6:	4b0a      	ldr	r3, [pc, #40]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	3b01      	subs	r3, #1
 800facc:	4a08      	ldr	r2, [pc, #32]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800face:	6013      	str	r3, [r2, #0]
            return INV_SUCCESS;
 800fad0:	2300      	movs	r3, #0
 800fad2:	e008      	b.n	800fae6 <inv_unregister_mpl_start_notification+0x72>
    for (kk=0; kk<inv_start_cb.num_cb; ++kk) {
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	3301      	adds	r3, #1
 800fad8:	60fb      	str	r3, [r7, #12]
 800fada:	4b05      	ldr	r3, [pc, #20]	; (800faf0 <inv_unregister_mpl_start_notification+0x7c>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	dbce      	blt.n	800fa82 <inv_unregister_mpl_start_notification+0xe>
        }
    }
    return INV_ERROR_INVALID_PARAMETER;
 800fae4:	2316      	movs	r3, #22
}
 800fae6:	4618      	mov	r0, r3
 800fae8:	3710      	adds	r7, #16
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}
 800faee:	bf00      	nop
 800faf0:	2000084c 	.word	0x2000084c

0800faf4 <inv_register_mpl_start_notification>:
* @param[in] start_cb Function callback that will be called when inv_start_mpl() is
*            called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_mpl_start_notification(inv_error_t (*start_cb)(void))
{
 800faf4:	b480      	push	{r7}
 800faf6:	b083      	sub	sp, #12
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
    if (inv_start_cb.num_cb >= INV_MAX_START_CB)
 800fafc:	4b0b      	ldr	r3, [pc, #44]	; (800fb2c <inv_register_mpl_start_notification+0x38>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b13      	cmp	r3, #19
 800fb02:	dd01      	ble.n	800fb08 <inv_register_mpl_start_notification+0x14>
        return INV_ERROR_INVALID_PARAMETER;
 800fb04:	2316      	movs	r3, #22
 800fb06:	e00c      	b.n	800fb22 <inv_register_mpl_start_notification+0x2e>

    inv_start_cb.start_cb[inv_start_cb.num_cb] = start_cb;
 800fb08:	4b08      	ldr	r3, [pc, #32]	; (800fb2c <inv_register_mpl_start_notification+0x38>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a07      	ldr	r2, [pc, #28]	; (800fb2c <inv_register_mpl_start_notification+0x38>)
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	4413      	add	r3, r2
 800fb12:	687a      	ldr	r2, [r7, #4]
 800fb14:	605a      	str	r2, [r3, #4]
    inv_start_cb.num_cb++;
 800fb16:	4b05      	ldr	r3, [pc, #20]	; (800fb2c <inv_register_mpl_start_notification+0x38>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	4a03      	ldr	r2, [pc, #12]	; (800fb2c <inv_register_mpl_start_notification+0x38>)
 800fb1e:	6013      	str	r3, [r2, #0]
    return INV_SUCCESS;
 800fb20:	2300      	movs	r3, #0
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	370c      	adds	r7, #12
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bc80      	pop	{r7}
 800fb2a:	4770      	bx	lr
 800fb2c:	2000084c 	.word	0x2000084c

0800fb30 <inv_execute_mpl_start_notification>:
/** Callback all the functions that want to be notified when inv_start_mpl() was
* called.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_execute_mpl_start_notification(void)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
    inv_error_t result,first_error;
    int kk;

    first_error = INV_SUCCESS;
 800fb36:	2300      	movs	r3, #0
 800fb38:	60fb      	str	r3, [r7, #12]

    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	60bb      	str	r3, [r7, #8]
 800fb3e:	e011      	b.n	800fb64 <inv_execute_mpl_start_notification+0x34>
        result = inv_start_cb.start_cb[kk]();
 800fb40:	4a0d      	ldr	r2, [pc, #52]	; (800fb78 <inv_execute_mpl_start_notification+0x48>)
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	4413      	add	r3, r2
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	4798      	blx	r3
 800fb4c:	6078      	str	r0, [r7, #4]
        if (result && (first_error == INV_SUCCESS)) {
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d004      	beq.n	800fb5e <inv_execute_mpl_start_notification+0x2e>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <inv_execute_mpl_start_notification+0x2e>
            first_error = result;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	60fb      	str	r3, [r7, #12]
    for (kk = 0; kk < inv_start_cb.num_cb; ++kk) {
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	3301      	adds	r3, #1
 800fb62:	60bb      	str	r3, [r7, #8]
 800fb64:	4b04      	ldr	r3, [pc, #16]	; (800fb78 <inv_execute_mpl_start_notification+0x48>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	68ba      	ldr	r2, [r7, #8]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	dbe8      	blt.n	800fb40 <inv_execute_mpl_start_notification+0x10>
        }
    }
    return first_error;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	2000084c 	.word	0x2000084c

0800fb7c <inv_init_storage_manager>:
static struct data_storage_t ds;

/** Should be called once before using any of the storage methods. Typically
* called first by inv_init_mpl().*/
void inv_init_storage_manager()
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	af00      	add	r7, sp, #0
    memset(&ds, 0, sizeof(ds));
 800fb80:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800fb84:	2100      	movs	r1, #0
 800fb86:	4804      	ldr	r0, [pc, #16]	; (800fb98 <inv_init_storage_manager+0x1c>)
 800fb88:	f000 fd51 	bl	801062e <memset>
    ds.total_size = sizeof(struct data_header_t);
 800fb8c:	4b02      	ldr	r3, [pc, #8]	; (800fb98 <inv_init_storage_manager+0x1c>)
 800fb8e:	220c      	movs	r2, #12
 800fb90:	605a      	str	r2, [r3, #4]
}
 800fb92:	bf00      	nop
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	200008a0 	.word	0x200008a0

0800fb9c <inv_register_load_store>:
*                    The key should change when your type of data for storage changes.
* @return Returns INV_SUCCESS if successful or an error code if not.
*/
inv_error_t inv_register_load_store(inv_error_t (*load_func)(const unsigned char *data),
                                    inv_error_t (*save_func)(unsigned char *data), size_t size, unsigned int key)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b087      	sub	sp, #28
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	60f8      	str	r0, [r7, #12]
 800fba4:	60b9      	str	r1, [r7, #8]
 800fba6:	607a      	str	r2, [r7, #4]
 800fba8:	603b      	str	r3, [r7, #0]
    int kk;
    // Check if this has been registered already
    for (kk=0; kk<ds.num; ++kk) {
 800fbaa:	2300      	movs	r3, #0
 800fbac:	617b      	str	r3, [r7, #20]
 800fbae:	e010      	b.n	800fbd2 <inv_register_load_store+0x36>
        if (key == ds.hd[kk].key) {
 800fbb0:	4928      	ldr	r1, [pc, #160]	; (800fc54 <inv_register_load_store+0xb8>)
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	4613      	mov	r3, r2
 800fbb6:	005b      	lsls	r3, r3, #1
 800fbb8:	4413      	add	r3, r2
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	440b      	add	r3, r1
 800fbbe:	33b0      	adds	r3, #176	; 0xb0
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	683a      	ldr	r2, [r7, #0]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d101      	bne.n	800fbcc <inv_register_load_store+0x30>
            return INV_ERROR_INVALID_PARAMETER;
 800fbc8:	2316      	movs	r3, #22
 800fbca:	e03e      	b.n	800fc4a <inv_register_load_store+0xae>
    for (kk=0; kk<ds.num; ++kk) {
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	617b      	str	r3, [r7, #20]
 800fbd2:	4b20      	ldr	r3, [pc, #128]	; (800fc54 <inv_register_load_store+0xb8>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	dbe9      	blt.n	800fbb0 <inv_register_load_store+0x14>
        }
    }
    // Make sure there is room
    if (ds.num >= NUM_STORAGE_BOXES) {
 800fbdc:	4b1d      	ldr	r3, [pc, #116]	; (800fc54 <inv_register_load_store+0xb8>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	2b13      	cmp	r3, #19
 800fbe2:	dd01      	ble.n	800fbe8 <inv_register_load_store+0x4c>
        return INV_ERROR_INVALID_PARAMETER;
 800fbe4:	2316      	movs	r3, #22
 800fbe6:	e030      	b.n	800fc4a <inv_register_load_store+0xae>
    }
    // Add to list
    ds.hd[ds.num].key = key;
 800fbe8:	4b1a      	ldr	r3, [pc, #104]	; (800fc54 <inv_register_load_store+0xb8>)
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	4919      	ldr	r1, [pc, #100]	; (800fc54 <inv_register_load_store+0xb8>)
 800fbee:	4613      	mov	r3, r2
 800fbf0:	005b      	lsls	r3, r3, #1
 800fbf2:	4413      	add	r3, r2
 800fbf4:	009b      	lsls	r3, r3, #2
 800fbf6:	440b      	add	r3, r1
 800fbf8:	33b0      	adds	r3, #176	; 0xb0
 800fbfa:	683a      	ldr	r2, [r7, #0]
 800fbfc:	601a      	str	r2, [r3, #0]
    ds.hd[ds.num].size = size;
 800fbfe:	4b15      	ldr	r3, [pc, #84]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	6879      	ldr	r1, [r7, #4]
 800fc04:	4813      	ldr	r0, [pc, #76]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc06:	4613      	mov	r3, r2
 800fc08:	005b      	lsls	r3, r3, #1
 800fc0a:	4413      	add	r3, r2
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	4403      	add	r3, r0
 800fc10:	33a8      	adds	r3, #168	; 0xa8
 800fc12:	6019      	str	r1, [r3, #0]
    ds.load[ds.num] = load_func;
 800fc14:	4b0f      	ldr	r3, [pc, #60]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	490e      	ldr	r1, [pc, #56]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc1a:	3302      	adds	r3, #2
 800fc1c:	68fa      	ldr	r2, [r7, #12]
 800fc1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.save[ds.num] = save_func;
 800fc22:	4b0c      	ldr	r3, [pc, #48]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	490b      	ldr	r1, [pc, #44]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc28:	3316      	adds	r3, #22
 800fc2a:	68ba      	ldr	r2, [r7, #8]
 800fc2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    ds.total_size += size + sizeof(struct data_header_t);
 800fc30:	4b08      	ldr	r3, [pc, #32]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc32:	685a      	ldr	r2, [r3, #4]
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4413      	add	r3, r2
 800fc38:	330c      	adds	r3, #12
 800fc3a:	4a06      	ldr	r2, [pc, #24]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc3c:	6053      	str	r3, [r2, #4]
    ds.num++;
 800fc3e:	4b05      	ldr	r3, [pc, #20]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	3301      	adds	r3, #1
 800fc44:	4a03      	ldr	r2, [pc, #12]	; (800fc54 <inv_register_load_store+0xb8>)
 800fc46:	6013      	str	r3, [r2, #0]

    return INV_SUCCESS;
 800fc48:	2300      	movs	r3, #0
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	371c      	adds	r7, #28
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bc80      	pop	{r7}
 800fc52:	4770      	bx	lr
 800fc54:	200008a0 	.word	0x200008a0

0800fc58 <I2Cx_Error>:


#include "STM32F1_porting.h"

static void I2Cx_Error(uint8_t Addr)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	4603      	mov	r3, r0
 800fc60:	71fb      	strb	r3, [r7, #7]
    /* 恢复I2C寄存器为默认值 */
    HAL_I2C_DeInit(&MPU6050_I2C_Handle);
 800fc62:	4804      	ldr	r0, [pc, #16]	; (800fc74 <I2Cx_Error+0x1c>)
 800fc64:	f7f6 fda2 	bl	80067ac <HAL_I2C_DeInit>
    /* 重新初始化I2C外设 */
    MX_I2C1_Init();
 800fc68:	f7f4 fb24 	bl	80042b4 <MX_I2C1_Init>
}
 800fc6c:	bf00      	nop
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}
 800fc74:	20000f30 	.word	0x20000f30

0800fc78 <Sensors_I2C_ReadRegister>:
 *	@param data_ptr:指向要存储数据的指针
 * @retval 正常为0，不正常为非0
 */
int Sensors_I2C_ReadRegister(unsigned char slave_addr, unsigned char reg_addr, unsigned short len,
                             unsigned char *data_ptr)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af04      	add	r7, sp, #16
 800fc7e:	603b      	str	r3, [r7, #0]
 800fc80:	4603      	mov	r3, r0
 800fc82:	71fb      	strb	r3, [r7, #7]
 800fc84:	460b      	mov	r3, r1
 800fc86:	71bb      	strb	r3, [r7, #6]
 800fc88:	4613      	mov	r3, r2
 800fc8a:	80bb      	strh	r3, [r7, #4]

    HAL_StatusTypeDef status = HAL_OK;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	73fb      	strb	r3, [r7, #15]
    slave_addr <<= 1;
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	005b      	lsls	r3, r3, #1
 800fc94:	71fb      	strb	r3, [r7, #7]
    status = HAL_I2C_Mem_Read(&MPU6050_I2C_Handle, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data_ptr, len,
 800fc96:	79fb      	ldrb	r3, [r7, #7]
 800fc98:	b299      	uxth	r1, r3
 800fc9a:	79bb      	ldrb	r3, [r7, #6]
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fca2:	9302      	str	r3, [sp, #8]
 800fca4:	88bb      	ldrh	r3, [r7, #4]
 800fca6:	9301      	str	r3, [sp, #4]
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	2301      	movs	r3, #1
 800fcae:	4816      	ldr	r0, [pc, #88]	; (800fd08 <Sensors_I2C_ReadRegister+0x90>)
 800fcb0:	f7f6 fea6 	bl	8006a00 <HAL_I2C_Mem_Read>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	73fb      	strb	r3, [r7, #15]
                              I2Cx_FLAG_TIMEOUT);
    /* 检查通讯状态 */
    if (status != HAL_OK)
 800fcb8:	7bfb      	ldrb	r3, [r7, #15]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d003      	beq.n	800fcc6 <Sensors_I2C_ReadRegister+0x4e>
    {
        /* 总线出错处理 */
        I2Cx_Error(slave_addr);
 800fcbe:	79fb      	ldrb	r3, [r7, #7]
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f7ff ffc9 	bl	800fc58 <I2Cx_Error>
    }
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800fcc6:	bf00      	nop
 800fcc8:	480f      	ldr	r0, [pc, #60]	; (800fd08 <Sensors_I2C_ReadRegister+0x90>)
 800fcca:	f7f7 fcad 	bl	8007628 <HAL_I2C_GetState>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	2b20      	cmp	r3, #32
 800fcd2:	d1f9      	bne.n	800fcc8 <Sensors_I2C_ReadRegister+0x50>
    {
    }
    /* 检查SENSOR是否就绪进行下一次读写操作 */
    while (HAL_I2C_IsDeviceReady(&MPU6050_I2C_Handle, slave_addr, I2Cx_FLAG_TIMEOUT, I2Cx_FLAG_TIMEOUT) == HAL_TIMEOUT)
 800fcd4:	bf00      	nop
 800fcd6:	79fb      	ldrb	r3, [r7, #7]
 800fcd8:	b299      	uxth	r1, r3
 800fcda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fcde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fce2:	4809      	ldr	r0, [pc, #36]	; (800fd08 <Sensors_I2C_ReadRegister+0x90>)
 800fce4:	f7f7 f8f4 	bl	8006ed0 <HAL_I2C_IsDeviceReady>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b03      	cmp	r3, #3
 800fcec:	d0f3      	beq.n	800fcd6 <Sensors_I2C_ReadRegister+0x5e>
        ;
    /* 等待传输结束 */
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800fcee:	bf00      	nop
 800fcf0:	4805      	ldr	r0, [pc, #20]	; (800fd08 <Sensors_I2C_ReadRegister+0x90>)
 800fcf2:	f7f7 fc99 	bl	8007628 <HAL_I2C_GetState>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b20      	cmp	r3, #32
 800fcfa:	d1f9      	bne.n	800fcf0 <Sensors_I2C_ReadRegister+0x78>
    {
    }
    return status;
 800fcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3710      	adds	r7, #16
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	20000f30 	.word	0x20000f30

0800fd0c <Sensors_I2C_WriteRegister>:
 *	@param data_ptr:指向要写入的数据
 * @retval 正常为0，不正常为非0
 */
int Sensors_I2C_WriteRegister(unsigned char slave_addr, unsigned char reg_addr, unsigned short len,
                              unsigned char *data_ptr)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b088      	sub	sp, #32
 800fd10:	af04      	add	r7, sp, #16
 800fd12:	603b      	str	r3, [r7, #0]
 800fd14:	4603      	mov	r3, r0
 800fd16:	71fb      	strb	r3, [r7, #7]
 800fd18:	460b      	mov	r3, r1
 800fd1a:	71bb      	strb	r3, [r7, #6]
 800fd1c:	4613      	mov	r3, r2
 800fd1e:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 800fd20:	2300      	movs	r3, #0
 800fd22:	73fb      	strb	r3, [r7, #15]
    slave_addr <<= 1;
 800fd24:	79fb      	ldrb	r3, [r7, #7]
 800fd26:	005b      	lsls	r3, r3, #1
 800fd28:	71fb      	strb	r3, [r7, #7]
    status = HAL_I2C_Mem_Write(&MPU6050_I2C_Handle, slave_addr, reg_addr, I2C_MEMADD_SIZE_8BIT, data_ptr, len,
 800fd2a:	79fb      	ldrb	r3, [r7, #7]
 800fd2c:	b299      	uxth	r1, r3
 800fd2e:	79bb      	ldrb	r3, [r7, #6]
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd36:	9302      	str	r3, [sp, #8]
 800fd38:	88bb      	ldrh	r3, [r7, #4]
 800fd3a:	9301      	str	r3, [sp, #4]
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	9300      	str	r3, [sp, #0]
 800fd40:	2301      	movs	r3, #1
 800fd42:	4816      	ldr	r0, [pc, #88]	; (800fd9c <Sensors_I2C_WriteRegister+0x90>)
 800fd44:	f7f6 fd62 	bl	800680c <HAL_I2C_Mem_Write>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	73fb      	strb	r3, [r7, #15]
                               I2Cx_FLAG_TIMEOUT);
    /* 检查通讯状态 */
    if (status != HAL_OK)
 800fd4c:	7bfb      	ldrb	r3, [r7, #15]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d003      	beq.n	800fd5a <Sensors_I2C_WriteRegister+0x4e>
    {
        /* 总线出错处理 */
        I2Cx_Error(slave_addr);
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7ff ff7f 	bl	800fc58 <I2Cx_Error>
    }
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800fd5a:	bf00      	nop
 800fd5c:	480f      	ldr	r0, [pc, #60]	; (800fd9c <Sensors_I2C_WriteRegister+0x90>)
 800fd5e:	f7f7 fc63 	bl	8007628 <HAL_I2C_GetState>
 800fd62:	4603      	mov	r3, r0
 800fd64:	2b20      	cmp	r3, #32
 800fd66:	d1f9      	bne.n	800fd5c <Sensors_I2C_WriteRegister+0x50>
    {
    }
    /* 检查SENSOR是否就绪进行下一次读写操作 */
    while (HAL_I2C_IsDeviceReady(&MPU6050_I2C_Handle, slave_addr, I2Cx_FLAG_TIMEOUT, I2Cx_FLAG_TIMEOUT) == HAL_TIMEOUT)
 800fd68:	bf00      	nop
 800fd6a:	79fb      	ldrb	r3, [r7, #7]
 800fd6c:	b299      	uxth	r1, r3
 800fd6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fd72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd76:	4809      	ldr	r0, [pc, #36]	; (800fd9c <Sensors_I2C_WriteRegister+0x90>)
 800fd78:	f7f7 f8aa 	bl	8006ed0 <HAL_I2C_IsDeviceReady>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	2b03      	cmp	r3, #3
 800fd80:	d0f3      	beq.n	800fd6a <Sensors_I2C_WriteRegister+0x5e>
        ;
    /* 等待传输结束 */
    while (HAL_I2C_GetState(&MPU6050_I2C_Handle) != HAL_I2C_STATE_READY)
 800fd82:	bf00      	nop
 800fd84:	4805      	ldr	r0, [pc, #20]	; (800fd9c <Sensors_I2C_WriteRegister+0x90>)
 800fd86:	f7f7 fc4f 	bl	8007628 <HAL_I2C_GetState>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	2b20      	cmp	r3, #32
 800fd8e:	d1f9      	bne.n	800fd84 <Sensors_I2C_WriteRegister+0x78>
    {
    }
    return status;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	20000f30 	.word	0x20000f30

0800fda0 <get_ms_user>:

inline void get_ms_user(unsigned long *count) //换壳函数  inline修饰（内联）减少出入栈开销
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
    *count = HAL_GetTick();
 800fda8:	f7f5 fb82 	bl	80054b0 <HAL_GetTick>
 800fdac:	4602      	mov	r2, r0
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	601a      	str	r2, [r3, #0]
}
 800fdb2:	bf00      	nop
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
	...

0800fdbc <MPU6050_mpu_init>:
static struct platform_data_s compass_pdata = {.orientation = {-1, 0, 0, 0, -1, 0, 0, 0, 1}};
#define COMPASS_ENABLED 1
#endif

uint8_t MPU6050_mpu_init(void)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
    inv_error_t result;
    struct int_param_s int_param;
    result = mpu_init(&int_param);
 800fdc2:	1d3b      	adds	r3, r7, #4
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7fa fdd9 	bl	800a97c <mpu_init>
 800fdca:	60f8      	str	r0, [r7, #12]
    if (result)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d005      	beq.n	800fdde <MPU6050_mpu_init+0x22>
    {
#if USE_PRINTF_DEBUG
        printf("Could not initialize gyro.result =  %d\n", result);
 800fdd2:	68f9      	ldr	r1, [r7, #12]
 800fdd4:	4806      	ldr	r0, [pc, #24]	; (800fdf0 <MPU6050_mpu_init+0x34>)
 800fdd6:	f001 faff 	bl	80113d8 <iprintf>
#endif
        return 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	e004      	b.n	800fde8 <MPU6050_mpu_init+0x2c>
    }
    else
    {
#if USE_PRINTF_DEBUG
        printf("Initialize gyro.result =  %d\n succeeded\n", result);
 800fdde:	68f9      	ldr	r1, [r7, #12]
 800fde0:	4804      	ldr	r0, [pc, #16]	; (800fdf4 <MPU6050_mpu_init+0x38>)
 800fde2:	f001 faf9 	bl	80113d8 <iprintf>
#endif
        return 1;
 800fde6:	2301      	movs	r3, #1
    }
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3710      	adds	r7, #16
 800fdec:	46bd      	mov	sp, r7
 800fdee:	bd80      	pop	{r7, pc}
 800fdf0:	080161f8 	.word	0x080161f8
 800fdf4:	08016220 	.word	0x08016220

0800fdf8 <MPU6050_mpl_init>:

uint8_t MPU6050_mpl_init(void)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
    inv_error_t result;
    result = inv_init_mpl();
 800fdfe:	f7ff fbc9 	bl	800f594 <inv_init_mpl>
 800fe02:	6078      	str	r0, [r7, #4]
    if (result)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d004      	beq.n	800fe14 <MPU6050_mpl_init+0x1c>
    {
#if USE_PRINTF_DEBUG
        printf("Could not initialize MPL.\n");
 800fe0a:	4806      	ldr	r0, [pc, #24]	; (800fe24 <MPU6050_mpl_init+0x2c>)
 800fe0c:	f001 fb6a 	bl	80114e4 <puts>
#endif
        return 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	e003      	b.n	800fe1c <MPU6050_mpl_init+0x24>
    }
    else
    {
#if USE_PRINTF_DEBUG
        printf("initialize MPL suceeded.\n");
 800fe14:	4804      	ldr	r0, [pc, #16]	; (800fe28 <MPU6050_mpl_init+0x30>)
 800fe16:	f001 fb65 	bl	80114e4 <puts>
#endif
        return 1;
 800fe1a:	2301      	movs	r3, #1
    }
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3708      	adds	r7, #8
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	0801624c 	.word	0x0801624c
 800fe28:	08016268 	.word	0x08016268

0800fe2c <MPU6050_config>:

uint8_t MPU6050_config(void)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b084      	sub	sp, #16
 800fe30:	af00      	add	r7, sp, #0
#ifdef COMPASS_ENABLED
    unsigned char new_compass = 0;
    unsigned short compass_fsr;
#endif
    /* Compute 6-axis and 9-axis quaternions. */
    inv_enable_quaternion();
 800fe32:	f7f2 ff49 	bl	8002cc8 <inv_enable_quaternion>
    inv_enable_9x_sensor_fusion();
 800fe36:	f7f1 fc07 	bl	8001648 <inv_enable_9x_sensor_fusion>
     */

    /* Update gyro biases when not in motion.
     * WARNING: These algorithms are mutually exclusive.
     */
    inv_enable_fast_nomot();
 800fe3a:	f7f1 f865 	bl	8000f08 <inv_enable_fast_nomot>
    /* inv_enable_motion_no_motion(); */
    /* inv_set_no_motion_time(1000); */

    /* Update gyro biases when temperature changes. */
    inv_enable_gyro_tc();
 800fe3e:	f7f1 feb1 	bl	8001ba4 <inv_enable_gyro_tc>
     * detected, so we'll just leave it out to save memory.
     * inv_enable_heading_from_gyro();
     */

    /* Allows use of the MPL APIs in read_from_mpl. */
    inv_enable_eMPL_outputs();
 800fe42:	f7fd faf5 	bl	800d430 <inv_enable_eMPL_outputs>
    result = inv_enable_hal_outputs();
 800fe46:	f7fe fb55 	bl	800e4f4 <inv_enable_hal_outputs>
 800fe4a:	60f8      	str	r0, [r7, #12]
    if (result)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d002      	beq.n	800fe58 <MPU6050_config+0x2c>
    {
        // MPL_LOGE("Could not start the MPL.\n");
        printf("inv_enable_hal_outputs()\n");
 800fe52:	4844      	ldr	r0, [pc, #272]	; (800ff64 <MPU6050_config+0x138>)
 800fe54:	f001 fb46 	bl	80114e4 <puts>
    }
    result = inv_start_mpl();
 800fe58:	f7ff fbd8 	bl	800f60c <inv_start_mpl>
 800fe5c:	60f8      	str	r0, [r7, #12]
    if (result == INV_ERROR_NOT_AUTHORIZED)
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2b32      	cmp	r3, #50	; 0x32
 800fe62:	d106      	bne.n	800fe72 <MPU6050_config+0x46>
    {
        while (1)
        {
            MPL_LOGE("Not authorized.\n");
 800fe64:	4840      	ldr	r0, [pc, #256]	; (800ff68 <MPU6050_config+0x13c>)
 800fe66:	f001 fb3d 	bl	80114e4 <puts>
            printf("Not authorized.\n");
 800fe6a:	483f      	ldr	r0, [pc, #252]	; (800ff68 <MPU6050_config+0x13c>)
 800fe6c:	f001 fb3a 	bl	80114e4 <puts>
            MPL_LOGE("Not authorized.\n");
 800fe70:	e7f8      	b.n	800fe64 <MPU6050_config+0x38>
        }
    }
    if (result)
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <MPU6050_config+0x52>
    {
        // MPL_LOGE("Could not start the MPL.\n");
        printf("Could not start the MPL.\n");
 800fe78:	483c      	ldr	r0, [pc, #240]	; (800ff6c <MPU6050_config+0x140>)
 800fe7a:	f001 fb33 	bl	80114e4 <puts>
    /* Get/set hardware configuration. Start gyro. */
    /* Wake up all sensors. */
#ifdef COMPASS_ENABLED
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL | INV_XYZ_COMPASS);
#else
    mpu_set_sensors(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 800fe7e:	2078      	movs	r0, #120	; 0x78
 800fe80:	f7fb fa9e 	bl	800b3c0 <mpu_set_sensors>
#endif
    /* Push both gyro and accel data into the FIFO. */
    mpu_configure_fifo(INV_XYZ_GYRO | INV_XYZ_ACCEL);
 800fe84:	2078      	movs	r0, #120	; 0x78
 800fe86:	f7fb fa49 	bl	800b31c <mpu_configure_fifo>
    mpu_set_sample_rate(DEFAULT_MPU_HZ);
 800fe8a:	2014      	movs	r0, #20
 800fe8c:	f7fb f9d0 	bl	800b230 <mpu_set_sample_rate>
     * Use this function for proper power management.
     */
    mpu_set_compass_sample_rate(1000 / COMPASS_READ_MS);
#endif
    /* Read back configuration in case it was set improperly. */
    mpu_get_sample_rate(&gyro_rate);
 800fe90:	f107 0308 	add.w	r3, r7, #8
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fb f9b3 	bl	800b200 <mpu_get_sample_rate>
    mpu_get_gyro_fsr(&gyro_fsr);
 800fe9a:	1dbb      	adds	r3, r7, #6
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f7fa fffb 	bl	800ae98 <mpu_get_gyro_fsr>
    mpu_get_accel_fsr(&accel_fsr);
 800fea2:	f107 030b 	add.w	r3, r7, #11
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fb f87e 	bl	800afa8 <mpu_get_accel_fsr>
#ifdef COMPASS_ENABLED
    mpu_get_compass_fsr(&compass_fsr);
#endif
    /* Sync driver configuration with MPL. */
    /* Sample rate expected in microseconds. */
    inv_set_gyro_sample_rate(1000000L / gyro_rate);
 800feac:	893b      	ldrh	r3, [r7, #8]
 800feae:	461a      	mov	r2, r3
 800feb0:	4b2f      	ldr	r3, [pc, #188]	; (800ff70 <MPU6050_config+0x144>)
 800feb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fd fb50 	bl	800d55c <inv_set_gyro_sample_rate>
    inv_set_accel_sample_rate(1000000L / gyro_rate);
 800febc:	893b      	ldrh	r3, [r7, #8]
 800febe:	461a      	mov	r2, r3
 800fec0:	4b2b      	ldr	r3, [pc, #172]	; (800ff70 <MPU6050_config+0x144>)
 800fec2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fd fb6e 	bl	800d5a8 <inv_set_accel_sample_rate>
    inv_set_compass_sample_rate(COMPASS_READ_MS * 1000L);
#endif
    /* Set chip-to-body orientation matrix.
     * Set hardware units to dps/g's/degrees scaling factor.
     */
    inv_set_gyro_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation), (long)gyro_fsr << 15);
 800fecc:	4829      	ldr	r0, [pc, #164]	; (800ff74 <MPU6050_config+0x148>)
 800fece:	f7ff fa12 	bl	800f2f6 <inv_orientation_matrix_to_scalar>
 800fed2:	4603      	mov	r3, r0
 800fed4:	461a      	mov	r2, r3
 800fed6:	88fb      	ldrh	r3, [r7, #6]
 800fed8:	03db      	lsls	r3, r3, #15
 800feda:	4619      	mov	r1, r3
 800fedc:	4610      	mov	r0, r2
 800fede:	f7fd fb2d 	bl	800d53c <inv_set_gyro_orientation_and_scale>
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 800fee2:	4824      	ldr	r0, [pc, #144]	; (800ff74 <MPU6050_config+0x148>)
 800fee4:	f7ff fa07 	bl	800f2f6 <inv_orientation_matrix_to_scalar>
 800fee8:	4603      	mov	r3, r0
 800feea:	461a      	mov	r2, r3
                                        (long)accel_fsr << 15);
 800feec:	7afb      	ldrb	r3, [r7, #11]
    inv_set_accel_orientation_and_scale(inv_orientation_matrix_to_scalar(gyro_pdata.orientation),
 800feee:	03db      	lsls	r3, r3, #15
 800fef0:	4619      	mov	r1, r3
 800fef2:	4610      	mov	r0, r2
 800fef4:	f7fd fbfc 	bl	800d6f0 <inv_set_accel_orientation_and_scale>
#endif
    /* Initialize HAL state variables. */
#ifdef COMPASS_ENABLED
    hal.sensors = ACCEL_ON | GYRO_ON | COMPASS_ON;
#else
    hal.sensors = ACCEL_ON | GYRO_ON;
 800fef8:	4b1f      	ldr	r3, [pc, #124]	; (800ff78 <MPU6050_config+0x14c>)
 800fefa:	2203      	movs	r2, #3
 800fefc:	705a      	strb	r2, [r3, #1]
#endif
    hal.dmp_on = 0;
 800fefe:	4b1e      	ldr	r3, [pc, #120]	; (800ff78 <MPU6050_config+0x14c>)
 800ff00:	2200      	movs	r2, #0
 800ff02:	709a      	strb	r2, [r3, #2]
    hal.report = 0;
 800ff04:	4b1c      	ldr	r3, [pc, #112]	; (800ff78 <MPU6050_config+0x14c>)
 800ff06:	2200      	movs	r2, #0
 800ff08:	619a      	str	r2, [r3, #24]
    hal.rx.cmd = 0;
 800ff0a:	4b1b      	ldr	r3, [pc, #108]	; (800ff78 <MPU6050_config+0x14c>)
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hal.next_pedo_ms = 0;
 800ff12:	4b19      	ldr	r3, [pc, #100]	; (800ff78 <MPU6050_config+0x14c>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	60da      	str	r2, [r3, #12]
    hal.next_compass_ms = 0;
 800ff18:	4b17      	ldr	r3, [pc, #92]	; (800ff78 <MPU6050_config+0x14c>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	615a      	str	r2, [r3, #20]
    hal.next_temp_ms = 0;
 800ff1e:	4b16      	ldr	r3, [pc, #88]	; (800ff78 <MPU6050_config+0x14c>)
 800ff20:	2200      	movs	r2, #0
 800ff22:	611a      	str	r2, [r3, #16]
     * DMP_FEATURE_SEND_RAW_GYRO: Add raw gyro data to the FIFO.
     * DMP_FEATURE_SEND_CAL_GYRO: Add calibrated gyro data to the FIFO. Cannot
     * be used in combination with DMP_FEATURE_SEND_RAW_GYRO.
     */

    dmp_load_motion_driver_firmware();
 800ff24:	f7fb fe70 	bl	800bc08 <dmp_load_motion_driver_firmware>
    dmp_set_orientation(inv_orientation_matrix_to_scalar(gyro_pdata.orientation));
 800ff28:	4812      	ldr	r0, [pc, #72]	; (800ff74 <MPU6050_config+0x148>)
 800ff2a:	f7ff f9e4 	bl	800f2f6 <inv_orientation_matrix_to_scalar>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7fb fe79 	bl	800bc28 <dmp_set_orientation>
     * then the interrupts will be at 200Hz even if fifo rate
     * is set at a different rate. To avoid this issue include the DMP_FEATURE_TAP
     *
     * DMP sensor fusion works only with gyro at +-2000dps and accel +-2G
     */
    hal.dmp_features = DMP_FEATURE_6X_LP_QUAT | DMP_FEATURE_TAP | DMP_FEATURE_ANDROID_ORIENT |
 800ff36:	4b10      	ldr	r3, [pc, #64]	; (800ff78 <MPU6050_config+0x14c>)
 800ff38:	f240 1273 	movw	r2, #371	; 0x173
 800ff3c:	839a      	strh	r2, [r3, #28]
                       DMP_FEATURE_SEND_RAW_ACCEL | DMP_FEATURE_SEND_CAL_GYRO | DMP_FEATURE_GYRO_CAL;
    dmp_enable_feature(hal.dmp_features);
 800ff3e:	4b0e      	ldr	r3, [pc, #56]	; (800ff78 <MPU6050_config+0x14c>)
 800ff40:	8b9b      	ldrh	r3, [r3, #28]
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fc fa38 	bl	800c3b8 <dmp_enable_feature>
    dmp_set_fifo_rate(DEFAULT_MPU_HZ);
 800ff48:	2014      	movs	r0, #20
 800ff4a:	f7fb ff5f 	bl	800be0c <dmp_set_fifo_rate>
    mpu_set_dmp_state(1);
 800ff4e:	2001      	movs	r0, #1
 800ff50:	f7fb fd66 	bl	800ba20 <mpu_set_dmp_state>
    hal.dmp_on = 1;
 800ff54:	4b08      	ldr	r3, [pc, #32]	; (800ff78 <MPU6050_config+0x14c>)
 800ff56:	2201      	movs	r2, #1
 800ff58:	709a      	strb	r2, [r3, #2]
    return 1;
 800ff5a:	2301      	movs	r3, #1
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3710      	adds	r7, #16
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	08016284 	.word	0x08016284
 800ff68:	080162a0 	.word	0x080162a0
 800ff6c:	080162b0 	.word	0x080162b0
 800ff70:	000f4240 	.word	0x000f4240
 800ff74:	20000050 	.word	0x20000050
 800ff78:	20000a38 	.word	0x20000a38

0800ff7c <MPU6050_data_ready_cb>:

void MPU6050_data_ready_cb(void) //中断回调函数
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	af00      	add	r7, sp, #0

    hal.new_gyro = 1;
 800ff80:	4b03      	ldr	r3, [pc, #12]	; (800ff90 <MPU6050_data_ready_cb+0x14>)
 800ff82:	2201      	movs	r2, #1
 800ff84:	711a      	strb	r2, [r3, #4]
}
 800ff86:	bf00      	nop
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bc80      	pop	{r7}
 800ff8c:	4770      	bx	lr
 800ff8e:	bf00      	nop
 800ff90:	20000a38 	.word	0x20000a38

0800ff94 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ff94:	b480      	push	{r7}
 800ff96:	b085      	sub	sp, #20
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
 800ff9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	689a      	ldr	r2, [r3, #8]
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	689b      	ldr	r3, [r3, #8]
 800ffb6:	683a      	ldr	r2, [r7, #0]
 800ffb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	683a      	ldr	r2, [r7, #0]
 800ffbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	1c5a      	adds	r2, r3, #1
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	601a      	str	r2, [r3, #0]
}
 800ffd0:	bf00      	nop
 800ffd2:	3714      	adds	r7, #20
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	bc80      	pop	{r7}
 800ffd8:	4770      	bx	lr

0800ffda <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ffda:	b480      	push	{r7}
 800ffdc:	b085      	sub	sp, #20
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	691b      	ldr	r3, [r3, #16]
 800ffe6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	6892      	ldr	r2, [r2, #8]
 800fff0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	6852      	ldr	r2, [r2, #4]
 800fffa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	429a      	cmp	r2, r3
 8010004:	d103      	bne.n	801000e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	689a      	ldr	r2, [r3, #8]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2200      	movs	r2, #0
 8010012:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	1e5a      	subs	r2, r3, #1
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	681b      	ldr	r3, [r3, #0]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3714      	adds	r7, #20
 8010026:	46bd      	mov	sp, r7
 8010028:	bc80      	pop	{r7}
 801002a:	4770      	bx	lr

0801002c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b086      	sub	sp, #24
 8010030:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010032:	2300      	movs	r3, #0
 8010034:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010036:	4b51      	ldr	r3, [pc, #324]	; (801017c <xTaskIncrementTick+0x150>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	2b00      	cmp	r3, #0
 801003c:	f040 808e 	bne.w	801015c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010040:	4b4f      	ldr	r3, [pc, #316]	; (8010180 <xTaskIncrementTick+0x154>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	3301      	adds	r3, #1
 8010046:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010048:	4a4d      	ldr	r2, [pc, #308]	; (8010180 <xTaskIncrementTick+0x154>)
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d120      	bne.n	8010096 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010054:	4b4b      	ldr	r3, [pc, #300]	; (8010184 <xTaskIncrementTick+0x158>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d00a      	beq.n	8010074 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010070:	bf00      	nop
 8010072:	e7fe      	b.n	8010072 <xTaskIncrementTick+0x46>
 8010074:	4b43      	ldr	r3, [pc, #268]	; (8010184 <xTaskIncrementTick+0x158>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	60fb      	str	r3, [r7, #12]
 801007a:	4b43      	ldr	r3, [pc, #268]	; (8010188 <xTaskIncrementTick+0x15c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a41      	ldr	r2, [pc, #260]	; (8010184 <xTaskIncrementTick+0x158>)
 8010080:	6013      	str	r3, [r2, #0]
 8010082:	4a41      	ldr	r2, [pc, #260]	; (8010188 <xTaskIncrementTick+0x15c>)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	6013      	str	r3, [r2, #0]
 8010088:	4b40      	ldr	r3, [pc, #256]	; (801018c <xTaskIncrementTick+0x160>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	3301      	adds	r3, #1
 801008e:	4a3f      	ldr	r2, [pc, #252]	; (801018c <xTaskIncrementTick+0x160>)
 8010090:	6013      	str	r3, [r2, #0]
 8010092:	f000 f8ed 	bl	8010270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010096:	4b3e      	ldr	r3, [pc, #248]	; (8010190 <xTaskIncrementTick+0x164>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	693a      	ldr	r2, [r7, #16]
 801009c:	429a      	cmp	r2, r3
 801009e:	d34e      	bcc.n	801013e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80100a0:	4b38      	ldr	r3, [pc, #224]	; (8010184 <xTaskIncrementTick+0x158>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d101      	bne.n	80100ae <xTaskIncrementTick+0x82>
 80100aa:	2301      	movs	r3, #1
 80100ac:	e000      	b.n	80100b0 <xTaskIncrementTick+0x84>
 80100ae:	2300      	movs	r3, #0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d004      	beq.n	80100be <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100b4:	4b36      	ldr	r3, [pc, #216]	; (8010190 <xTaskIncrementTick+0x164>)
 80100b6:	f04f 32ff 	mov.w	r2, #4294967295
 80100ba:	601a      	str	r2, [r3, #0]
					break;
 80100bc:	e03f      	b.n	801013e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80100be:	4b31      	ldr	r3, [pc, #196]	; (8010184 <xTaskIncrementTick+0x158>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d203      	bcs.n	80100de <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80100d6:	4a2e      	ldr	r2, [pc, #184]	; (8010190 <xTaskIncrementTick+0x164>)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6013      	str	r3, [r2, #0]
						break;
 80100dc:	e02f      	b.n	801013e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	3304      	adds	r3, #4
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7ff ff79 	bl	800ffda <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d004      	beq.n	80100fa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	3318      	adds	r3, #24
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7ff ff70 	bl	800ffda <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100fe:	4b25      	ldr	r3, [pc, #148]	; (8010194 <xTaskIncrementTick+0x168>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	429a      	cmp	r2, r3
 8010104:	d903      	bls.n	801010e <xTaskIncrementTick+0xe2>
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010a:	4a22      	ldr	r2, [pc, #136]	; (8010194 <xTaskIncrementTick+0x168>)
 801010c:	6013      	str	r3, [r2, #0]
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010112:	4613      	mov	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	4a1f      	ldr	r2, [pc, #124]	; (8010198 <xTaskIncrementTick+0x16c>)
 801011c:	441a      	add	r2, r3
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	3304      	adds	r3, #4
 8010122:	4619      	mov	r1, r3
 8010124:	4610      	mov	r0, r2
 8010126:	f7ff ff35 	bl	800ff94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801012e:	4b1b      	ldr	r3, [pc, #108]	; (801019c <xTaskIncrementTick+0x170>)
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010134:	429a      	cmp	r2, r3
 8010136:	d3b3      	bcc.n	80100a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010138:	2301      	movs	r3, #1
 801013a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801013c:	e7b0      	b.n	80100a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801013e:	4b17      	ldr	r3, [pc, #92]	; (801019c <xTaskIncrementTick+0x170>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010144:	4914      	ldr	r1, [pc, #80]	; (8010198 <xTaskIncrementTick+0x16c>)
 8010146:	4613      	mov	r3, r2
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	4413      	add	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	440b      	add	r3, r1
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d907      	bls.n	8010166 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010156:	2301      	movs	r3, #1
 8010158:	617b      	str	r3, [r7, #20]
 801015a:	e004      	b.n	8010166 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801015c:	4b10      	ldr	r3, [pc, #64]	; (80101a0 <xTaskIncrementTick+0x174>)
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	3301      	adds	r3, #1
 8010162:	4a0f      	ldr	r2, [pc, #60]	; (80101a0 <xTaskIncrementTick+0x174>)
 8010164:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010166:	4b0f      	ldr	r3, [pc, #60]	; (80101a4 <xTaskIncrementTick+0x178>)
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d001      	beq.n	8010172 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 801016e:	2301      	movs	r3, #1
 8010170:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010172:	697b      	ldr	r3, [r7, #20]
}
 8010174:	4618      	mov	r0, r3
 8010176:	3718      	adds	r7, #24
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	20000ee0 	.word	0x20000ee0
 8010180:	20000ec8 	.word	0x20000ec8
 8010184:	20000ec0 	.word	0x20000ec0
 8010188:	20000ec4 	.word	0x20000ec4
 801018c:	20000ed8 	.word	0x20000ed8
 8010190:	20000edc 	.word	0x20000edc
 8010194:	20000ecc 	.word	0x20000ecc
 8010198:	20000a60 	.word	0x20000a60
 801019c:	20000a5c 	.word	0x20000a5c
 80101a0:	20000ed0 	.word	0x20000ed0
 80101a4:	20000ed4 	.word	0x20000ed4

080101a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80101ae:	4b2a      	ldr	r3, [pc, #168]	; (8010258 <vTaskSwitchContext+0xb0>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d003      	beq.n	80101be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80101b6:	4b29      	ldr	r3, [pc, #164]	; (801025c <vTaskSwitchContext+0xb4>)
 80101b8:	2201      	movs	r2, #1
 80101ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80101bc:	e046      	b.n	801024c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80101be:	4b27      	ldr	r3, [pc, #156]	; (801025c <vTaskSwitchContext+0xb4>)
 80101c0:	2200      	movs	r2, #0
 80101c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80101c4:	4b26      	ldr	r3, [pc, #152]	; (8010260 <vTaskSwitchContext+0xb8>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	60fb      	str	r3, [r7, #12]
 80101ca:	e010      	b.n	80101ee <vTaskSwitchContext+0x46>
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d10a      	bne.n	80101e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80101d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101d6:	f383 8811 	msr	BASEPRI, r3
 80101da:	f3bf 8f6f 	isb	sy
 80101de:	f3bf 8f4f 	dsb	sy
 80101e2:	607b      	str	r3, [r7, #4]
}
 80101e4:	bf00      	nop
 80101e6:	e7fe      	b.n	80101e6 <vTaskSwitchContext+0x3e>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	3b01      	subs	r3, #1
 80101ec:	60fb      	str	r3, [r7, #12]
 80101ee:	491d      	ldr	r1, [pc, #116]	; (8010264 <vTaskSwitchContext+0xbc>)
 80101f0:	68fa      	ldr	r2, [r7, #12]
 80101f2:	4613      	mov	r3, r2
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4413      	add	r3, r2
 80101f8:	009b      	lsls	r3, r3, #2
 80101fa:	440b      	add	r3, r1
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d0e4      	beq.n	80101cc <vTaskSwitchContext+0x24>
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	4613      	mov	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	4413      	add	r3, r2
 801020a:	009b      	lsls	r3, r3, #2
 801020c:	4a15      	ldr	r2, [pc, #84]	; (8010264 <vTaskSwitchContext+0xbc>)
 801020e:	4413      	add	r3, r2
 8010210:	60bb      	str	r3, [r7, #8]
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	605a      	str	r2, [r3, #4]
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	685a      	ldr	r2, [r3, #4]
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	3308      	adds	r3, #8
 8010224:	429a      	cmp	r2, r3
 8010226:	d104      	bne.n	8010232 <vTaskSwitchContext+0x8a>
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	685a      	ldr	r2, [r3, #4]
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	605a      	str	r2, [r3, #4]
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	4a0b      	ldr	r2, [pc, #44]	; (8010268 <vTaskSwitchContext+0xc0>)
 801023a:	6013      	str	r3, [r2, #0]
 801023c:	4a08      	ldr	r2, [pc, #32]	; (8010260 <vTaskSwitchContext+0xb8>)
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010242:	4b09      	ldr	r3, [pc, #36]	; (8010268 <vTaskSwitchContext+0xc0>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	3354      	adds	r3, #84	; 0x54
 8010248:	4a08      	ldr	r2, [pc, #32]	; (801026c <vTaskSwitchContext+0xc4>)
 801024a:	6013      	str	r3, [r2, #0]
}
 801024c:	bf00      	nop
 801024e:	3714      	adds	r7, #20
 8010250:	46bd      	mov	sp, r7
 8010252:	bc80      	pop	{r7}
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	20000ee0 	.word	0x20000ee0
 801025c:	20000ed4 	.word	0x20000ed4
 8010260:	20000ecc 	.word	0x20000ecc
 8010264:	20000a60 	.word	0x20000a60
 8010268:	20000a5c 	.word	0x20000a5c
 801026c:	2000005c 	.word	0x2000005c

08010270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010276:	4b0e      	ldr	r3, [pc, #56]	; (80102b0 <prvResetNextTaskUnblockTime+0x40>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <prvResetNextTaskUnblockTime+0x14>
 8010280:	2301      	movs	r3, #1
 8010282:	e000      	b.n	8010286 <prvResetNextTaskUnblockTime+0x16>
 8010284:	2300      	movs	r3, #0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d004      	beq.n	8010294 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801028a:	4b0a      	ldr	r3, [pc, #40]	; (80102b4 <prvResetNextTaskUnblockTime+0x44>)
 801028c:	f04f 32ff 	mov.w	r2, #4294967295
 8010290:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010292:	e008      	b.n	80102a6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8010294:	4b06      	ldr	r3, [pc, #24]	; (80102b0 <prvResetNextTaskUnblockTime+0x40>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	68db      	ldr	r3, [r3, #12]
 801029a:	68db      	ldr	r3, [r3, #12]
 801029c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	4a04      	ldr	r2, [pc, #16]	; (80102b4 <prvResetNextTaskUnblockTime+0x44>)
 80102a4:	6013      	str	r3, [r2, #0]
}
 80102a6:	bf00      	nop
 80102a8:	370c      	adds	r7, #12
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bc80      	pop	{r7}
 80102ae:	4770      	bx	lr
 80102b0:	20000ec0 	.word	0x20000ec0
 80102b4:	20000edc 	.word	0x20000edc
	...

080102c0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80102c0:	4b07      	ldr	r3, [pc, #28]	; (80102e0 <pxCurrentTCBConst2>)
 80102c2:	6819      	ldr	r1, [r3, #0]
 80102c4:	6808      	ldr	r0, [r1, #0]
 80102c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80102ca:	f380 8809 	msr	PSP, r0
 80102ce:	f3bf 8f6f 	isb	sy
 80102d2:	f04f 0000 	mov.w	r0, #0
 80102d6:	f380 8811 	msr	BASEPRI, r0
 80102da:	f04e 0e0d 	orr.w	lr, lr, #13
 80102de:	4770      	bx	lr

080102e0 <pxCurrentTCBConst2>:
 80102e0:	20000a5c 	.word	0x20000a5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80102e4:	bf00      	nop
 80102e6:	bf00      	nop
	...

080102f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80102f0:	f3ef 8009 	mrs	r0, PSP
 80102f4:	f3bf 8f6f 	isb	sy
 80102f8:	4b0d      	ldr	r3, [pc, #52]	; (8010330 <pxCurrentTCBConst>)
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010300:	6010      	str	r0, [r2, #0]
 8010302:	e92d 4008 	stmdb	sp!, {r3, lr}
 8010306:	f04f 0050 	mov.w	r0, #80	; 0x50
 801030a:	f380 8811 	msr	BASEPRI, r0
 801030e:	f7ff ff4b 	bl	80101a8 <vTaskSwitchContext>
 8010312:	f04f 0000 	mov.w	r0, #0
 8010316:	f380 8811 	msr	BASEPRI, r0
 801031a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801031e:	6819      	ldr	r1, [r3, #0]
 8010320:	6808      	ldr	r0, [r1, #0]
 8010322:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010326:	f380 8809 	msr	PSP, r0
 801032a:	f3bf 8f6f 	isb	sy
 801032e:	4770      	bx	lr

08010330 <pxCurrentTCBConst>:
 8010330:	20000a5c 	.word	0x20000a5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010334:	bf00      	nop
 8010336:	bf00      	nop

08010338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
	__asm volatile
 801033e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010342:	f383 8811 	msr	BASEPRI, r3
 8010346:	f3bf 8f6f 	isb	sy
 801034a:	f3bf 8f4f 	dsb	sy
 801034e:	607b      	str	r3, [r7, #4]
}
 8010350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010352:	f7ff fe6b 	bl	801002c <xTaskIncrementTick>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d003      	beq.n	8010364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801035c:	4b06      	ldr	r3, [pc, #24]	; (8010378 <SysTick_Handler+0x40>)
 801035e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010362:	601a      	str	r2, [r3, #0]
 8010364:	2300      	movs	r3, #0
 8010366:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801036e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010370:	bf00      	nop
 8010372:	3708      	adds	r7, #8
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	e000ed04 	.word	0xe000ed04

0801037c <__errno>:
 801037c:	4b01      	ldr	r3, [pc, #4]	; (8010384 <__errno+0x8>)
 801037e:	6818      	ldr	r0, [r3, #0]
 8010380:	4770      	bx	lr
 8010382:	bf00      	nop
 8010384:	2000005c 	.word	0x2000005c

08010388 <std>:
 8010388:	2300      	movs	r3, #0
 801038a:	b510      	push	{r4, lr}
 801038c:	4604      	mov	r4, r0
 801038e:	e9c0 3300 	strd	r3, r3, [r0]
 8010392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010396:	6083      	str	r3, [r0, #8]
 8010398:	8181      	strh	r1, [r0, #12]
 801039a:	6643      	str	r3, [r0, #100]	; 0x64
 801039c:	81c2      	strh	r2, [r0, #14]
 801039e:	6183      	str	r3, [r0, #24]
 80103a0:	4619      	mov	r1, r3
 80103a2:	2208      	movs	r2, #8
 80103a4:	305c      	adds	r0, #92	; 0x5c
 80103a6:	f000 f942 	bl	801062e <memset>
 80103aa:	4b05      	ldr	r3, [pc, #20]	; (80103c0 <std+0x38>)
 80103ac:	6224      	str	r4, [r4, #32]
 80103ae:	6263      	str	r3, [r4, #36]	; 0x24
 80103b0:	4b04      	ldr	r3, [pc, #16]	; (80103c4 <std+0x3c>)
 80103b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80103b4:	4b04      	ldr	r3, [pc, #16]	; (80103c8 <std+0x40>)
 80103b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80103b8:	4b04      	ldr	r3, [pc, #16]	; (80103cc <std+0x44>)
 80103ba:	6323      	str	r3, [r4, #48]	; 0x30
 80103bc:	bd10      	pop	{r4, pc}
 80103be:	bf00      	nop
 80103c0:	0801155d 	.word	0x0801155d
 80103c4:	0801157f 	.word	0x0801157f
 80103c8:	080115b7 	.word	0x080115b7
 80103cc:	080115db 	.word	0x080115db

080103d0 <_cleanup_r>:
 80103d0:	4901      	ldr	r1, [pc, #4]	; (80103d8 <_cleanup_r+0x8>)
 80103d2:	f000 b8af 	b.w	8010534 <_fwalk_reent>
 80103d6:	bf00      	nop
 80103d8:	080132f9 	.word	0x080132f9

080103dc <__sfmoreglue>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	2568      	movs	r5, #104	; 0x68
 80103e0:	1e4a      	subs	r2, r1, #1
 80103e2:	4355      	muls	r5, r2
 80103e4:	460e      	mov	r6, r1
 80103e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80103ea:	f000 f929 	bl	8010640 <_malloc_r>
 80103ee:	4604      	mov	r4, r0
 80103f0:	b140      	cbz	r0, 8010404 <__sfmoreglue+0x28>
 80103f2:	2100      	movs	r1, #0
 80103f4:	e9c0 1600 	strd	r1, r6, [r0]
 80103f8:	300c      	adds	r0, #12
 80103fa:	60a0      	str	r0, [r4, #8]
 80103fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010400:	f000 f915 	bl	801062e <memset>
 8010404:	4620      	mov	r0, r4
 8010406:	bd70      	pop	{r4, r5, r6, pc}

08010408 <__sfp_lock_acquire>:
 8010408:	4801      	ldr	r0, [pc, #4]	; (8010410 <__sfp_lock_acquire+0x8>)
 801040a:	f000 b8d8 	b.w	80105be <__retarget_lock_acquire_recursive>
 801040e:	bf00      	nop
 8010410:	20001590 	.word	0x20001590

08010414 <__sfp_lock_release>:
 8010414:	4801      	ldr	r0, [pc, #4]	; (801041c <__sfp_lock_release+0x8>)
 8010416:	f000 b8d3 	b.w	80105c0 <__retarget_lock_release_recursive>
 801041a:	bf00      	nop
 801041c:	20001590 	.word	0x20001590

08010420 <__sinit_lock_acquire>:
 8010420:	4801      	ldr	r0, [pc, #4]	; (8010428 <__sinit_lock_acquire+0x8>)
 8010422:	f000 b8cc 	b.w	80105be <__retarget_lock_acquire_recursive>
 8010426:	bf00      	nop
 8010428:	2000158b 	.word	0x2000158b

0801042c <__sinit_lock_release>:
 801042c:	4801      	ldr	r0, [pc, #4]	; (8010434 <__sinit_lock_release+0x8>)
 801042e:	f000 b8c7 	b.w	80105c0 <__retarget_lock_release_recursive>
 8010432:	bf00      	nop
 8010434:	2000158b 	.word	0x2000158b

08010438 <__sinit>:
 8010438:	b510      	push	{r4, lr}
 801043a:	4604      	mov	r4, r0
 801043c:	f7ff fff0 	bl	8010420 <__sinit_lock_acquire>
 8010440:	69a3      	ldr	r3, [r4, #24]
 8010442:	b11b      	cbz	r3, 801044c <__sinit+0x14>
 8010444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010448:	f7ff bff0 	b.w	801042c <__sinit_lock_release>
 801044c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010450:	6523      	str	r3, [r4, #80]	; 0x50
 8010452:	4b13      	ldr	r3, [pc, #76]	; (80104a0 <__sinit+0x68>)
 8010454:	4a13      	ldr	r2, [pc, #76]	; (80104a4 <__sinit+0x6c>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	62a2      	str	r2, [r4, #40]	; 0x28
 801045a:	42a3      	cmp	r3, r4
 801045c:	bf08      	it	eq
 801045e:	2301      	moveq	r3, #1
 8010460:	4620      	mov	r0, r4
 8010462:	bf08      	it	eq
 8010464:	61a3      	streq	r3, [r4, #24]
 8010466:	f000 f81f 	bl	80104a8 <__sfp>
 801046a:	6060      	str	r0, [r4, #4]
 801046c:	4620      	mov	r0, r4
 801046e:	f000 f81b 	bl	80104a8 <__sfp>
 8010472:	60a0      	str	r0, [r4, #8]
 8010474:	4620      	mov	r0, r4
 8010476:	f000 f817 	bl	80104a8 <__sfp>
 801047a:	2200      	movs	r2, #0
 801047c:	2104      	movs	r1, #4
 801047e:	60e0      	str	r0, [r4, #12]
 8010480:	6860      	ldr	r0, [r4, #4]
 8010482:	f7ff ff81 	bl	8010388 <std>
 8010486:	2201      	movs	r2, #1
 8010488:	2109      	movs	r1, #9
 801048a:	68a0      	ldr	r0, [r4, #8]
 801048c:	f7ff ff7c 	bl	8010388 <std>
 8010490:	2202      	movs	r2, #2
 8010492:	2112      	movs	r1, #18
 8010494:	68e0      	ldr	r0, [r4, #12]
 8010496:	f7ff ff77 	bl	8010388 <std>
 801049a:	2301      	movs	r3, #1
 801049c:	61a3      	str	r3, [r4, #24]
 801049e:	e7d1      	b.n	8010444 <__sinit+0xc>
 80104a0:	08016fbc 	.word	0x08016fbc
 80104a4:	080103d1 	.word	0x080103d1

080104a8 <__sfp>:
 80104a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104aa:	4607      	mov	r7, r0
 80104ac:	f7ff ffac 	bl	8010408 <__sfp_lock_acquire>
 80104b0:	4b1e      	ldr	r3, [pc, #120]	; (801052c <__sfp+0x84>)
 80104b2:	681e      	ldr	r6, [r3, #0]
 80104b4:	69b3      	ldr	r3, [r6, #24]
 80104b6:	b913      	cbnz	r3, 80104be <__sfp+0x16>
 80104b8:	4630      	mov	r0, r6
 80104ba:	f7ff ffbd 	bl	8010438 <__sinit>
 80104be:	3648      	adds	r6, #72	; 0x48
 80104c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80104c4:	3b01      	subs	r3, #1
 80104c6:	d503      	bpl.n	80104d0 <__sfp+0x28>
 80104c8:	6833      	ldr	r3, [r6, #0]
 80104ca:	b30b      	cbz	r3, 8010510 <__sfp+0x68>
 80104cc:	6836      	ldr	r6, [r6, #0]
 80104ce:	e7f7      	b.n	80104c0 <__sfp+0x18>
 80104d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80104d4:	b9d5      	cbnz	r5, 801050c <__sfp+0x64>
 80104d6:	4b16      	ldr	r3, [pc, #88]	; (8010530 <__sfp+0x88>)
 80104d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80104dc:	60e3      	str	r3, [r4, #12]
 80104de:	6665      	str	r5, [r4, #100]	; 0x64
 80104e0:	f000 f86c 	bl	80105bc <__retarget_lock_init_recursive>
 80104e4:	f7ff ff96 	bl	8010414 <__sfp_lock_release>
 80104e8:	2208      	movs	r2, #8
 80104ea:	4629      	mov	r1, r5
 80104ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80104f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80104f4:	6025      	str	r5, [r4, #0]
 80104f6:	61a5      	str	r5, [r4, #24]
 80104f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80104fc:	f000 f897 	bl	801062e <memset>
 8010500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010508:	4620      	mov	r0, r4
 801050a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801050c:	3468      	adds	r4, #104	; 0x68
 801050e:	e7d9      	b.n	80104c4 <__sfp+0x1c>
 8010510:	2104      	movs	r1, #4
 8010512:	4638      	mov	r0, r7
 8010514:	f7ff ff62 	bl	80103dc <__sfmoreglue>
 8010518:	4604      	mov	r4, r0
 801051a:	6030      	str	r0, [r6, #0]
 801051c:	2800      	cmp	r0, #0
 801051e:	d1d5      	bne.n	80104cc <__sfp+0x24>
 8010520:	f7ff ff78 	bl	8010414 <__sfp_lock_release>
 8010524:	230c      	movs	r3, #12
 8010526:	603b      	str	r3, [r7, #0]
 8010528:	e7ee      	b.n	8010508 <__sfp+0x60>
 801052a:	bf00      	nop
 801052c:	08016fbc 	.word	0x08016fbc
 8010530:	ffff0001 	.word	0xffff0001

08010534 <_fwalk_reent>:
 8010534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010538:	4606      	mov	r6, r0
 801053a:	4688      	mov	r8, r1
 801053c:	2700      	movs	r7, #0
 801053e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010546:	f1b9 0901 	subs.w	r9, r9, #1
 801054a:	d505      	bpl.n	8010558 <_fwalk_reent+0x24>
 801054c:	6824      	ldr	r4, [r4, #0]
 801054e:	2c00      	cmp	r4, #0
 8010550:	d1f7      	bne.n	8010542 <_fwalk_reent+0xe>
 8010552:	4638      	mov	r0, r7
 8010554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010558:	89ab      	ldrh	r3, [r5, #12]
 801055a:	2b01      	cmp	r3, #1
 801055c:	d907      	bls.n	801056e <_fwalk_reent+0x3a>
 801055e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010562:	3301      	adds	r3, #1
 8010564:	d003      	beq.n	801056e <_fwalk_reent+0x3a>
 8010566:	4629      	mov	r1, r5
 8010568:	4630      	mov	r0, r6
 801056a:	47c0      	blx	r8
 801056c:	4307      	orrs	r7, r0
 801056e:	3568      	adds	r5, #104	; 0x68
 8010570:	e7e9      	b.n	8010546 <_fwalk_reent+0x12>
	...

08010574 <__libc_init_array>:
 8010574:	b570      	push	{r4, r5, r6, lr}
 8010576:	2600      	movs	r6, #0
 8010578:	4d0c      	ldr	r5, [pc, #48]	; (80105ac <__libc_init_array+0x38>)
 801057a:	4c0d      	ldr	r4, [pc, #52]	; (80105b0 <__libc_init_array+0x3c>)
 801057c:	1b64      	subs	r4, r4, r5
 801057e:	10a4      	asrs	r4, r4, #2
 8010580:	42a6      	cmp	r6, r4
 8010582:	d109      	bne.n	8010598 <__libc_init_array+0x24>
 8010584:	f005 fd68 	bl	8016058 <_init>
 8010588:	2600      	movs	r6, #0
 801058a:	4d0a      	ldr	r5, [pc, #40]	; (80105b4 <__libc_init_array+0x40>)
 801058c:	4c0a      	ldr	r4, [pc, #40]	; (80105b8 <__libc_init_array+0x44>)
 801058e:	1b64      	subs	r4, r4, r5
 8010590:	10a4      	asrs	r4, r4, #2
 8010592:	42a6      	cmp	r6, r4
 8010594:	d105      	bne.n	80105a2 <__libc_init_array+0x2e>
 8010596:	bd70      	pop	{r4, r5, r6, pc}
 8010598:	f855 3b04 	ldr.w	r3, [r5], #4
 801059c:	4798      	blx	r3
 801059e:	3601      	adds	r6, #1
 80105a0:	e7ee      	b.n	8010580 <__libc_init_array+0xc>
 80105a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80105a6:	4798      	blx	r3
 80105a8:	3601      	adds	r6, #1
 80105aa:	e7f2      	b.n	8010592 <__libc_init_array+0x1e>
 80105ac:	08017824 	.word	0x08017824
 80105b0:	08017824 	.word	0x08017824
 80105b4:	08017824 	.word	0x08017824
 80105b8:	08017828 	.word	0x08017828

080105bc <__retarget_lock_init_recursive>:
 80105bc:	4770      	bx	lr

080105be <__retarget_lock_acquire_recursive>:
 80105be:	4770      	bx	lr

080105c0 <__retarget_lock_release_recursive>:
 80105c0:	4770      	bx	lr

080105c2 <memcmp>:
 80105c2:	b530      	push	{r4, r5, lr}
 80105c4:	2400      	movs	r4, #0
 80105c6:	3901      	subs	r1, #1
 80105c8:	42a2      	cmp	r2, r4
 80105ca:	d101      	bne.n	80105d0 <memcmp+0xe>
 80105cc:	2000      	movs	r0, #0
 80105ce:	e005      	b.n	80105dc <memcmp+0x1a>
 80105d0:	5d03      	ldrb	r3, [r0, r4]
 80105d2:	3401      	adds	r4, #1
 80105d4:	5d0d      	ldrb	r5, [r1, r4]
 80105d6:	42ab      	cmp	r3, r5
 80105d8:	d0f6      	beq.n	80105c8 <memcmp+0x6>
 80105da:	1b58      	subs	r0, r3, r5
 80105dc:	bd30      	pop	{r4, r5, pc}

080105de <memcpy>:
 80105de:	440a      	add	r2, r1
 80105e0:	4291      	cmp	r1, r2
 80105e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80105e6:	d100      	bne.n	80105ea <memcpy+0xc>
 80105e8:	4770      	bx	lr
 80105ea:	b510      	push	{r4, lr}
 80105ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105f0:	4291      	cmp	r1, r2
 80105f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105f6:	d1f9      	bne.n	80105ec <memcpy+0xe>
 80105f8:	bd10      	pop	{r4, pc}

080105fa <memmove>:
 80105fa:	4288      	cmp	r0, r1
 80105fc:	b510      	push	{r4, lr}
 80105fe:	eb01 0402 	add.w	r4, r1, r2
 8010602:	d902      	bls.n	801060a <memmove+0x10>
 8010604:	4284      	cmp	r4, r0
 8010606:	4623      	mov	r3, r4
 8010608:	d807      	bhi.n	801061a <memmove+0x20>
 801060a:	1e43      	subs	r3, r0, #1
 801060c:	42a1      	cmp	r1, r4
 801060e:	d008      	beq.n	8010622 <memmove+0x28>
 8010610:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010614:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010618:	e7f8      	b.n	801060c <memmove+0x12>
 801061a:	4601      	mov	r1, r0
 801061c:	4402      	add	r2, r0
 801061e:	428a      	cmp	r2, r1
 8010620:	d100      	bne.n	8010624 <memmove+0x2a>
 8010622:	bd10      	pop	{r4, pc}
 8010624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010628:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801062c:	e7f7      	b.n	801061e <memmove+0x24>

0801062e <memset>:
 801062e:	4603      	mov	r3, r0
 8010630:	4402      	add	r2, r0
 8010632:	4293      	cmp	r3, r2
 8010634:	d100      	bne.n	8010638 <memset+0xa>
 8010636:	4770      	bx	lr
 8010638:	f803 1b01 	strb.w	r1, [r3], #1
 801063c:	e7f9      	b.n	8010632 <memset+0x4>
	...

08010640 <_malloc_r>:
 8010640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010642:	1ccd      	adds	r5, r1, #3
 8010644:	f025 0503 	bic.w	r5, r5, #3
 8010648:	3508      	adds	r5, #8
 801064a:	2d0c      	cmp	r5, #12
 801064c:	bf38      	it	cc
 801064e:	250c      	movcc	r5, #12
 8010650:	2d00      	cmp	r5, #0
 8010652:	4606      	mov	r6, r0
 8010654:	db01      	blt.n	801065a <_malloc_r+0x1a>
 8010656:	42a9      	cmp	r1, r5
 8010658:	d903      	bls.n	8010662 <_malloc_r+0x22>
 801065a:	230c      	movs	r3, #12
 801065c:	6033      	str	r3, [r6, #0]
 801065e:	2000      	movs	r0, #0
 8010660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010662:	f003 fa8d 	bl	8013b80 <__malloc_lock>
 8010666:	4921      	ldr	r1, [pc, #132]	; (80106ec <_malloc_r+0xac>)
 8010668:	680a      	ldr	r2, [r1, #0]
 801066a:	4614      	mov	r4, r2
 801066c:	b99c      	cbnz	r4, 8010696 <_malloc_r+0x56>
 801066e:	4f20      	ldr	r7, [pc, #128]	; (80106f0 <_malloc_r+0xb0>)
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	b923      	cbnz	r3, 801067e <_malloc_r+0x3e>
 8010674:	4621      	mov	r1, r4
 8010676:	4630      	mov	r0, r6
 8010678:	f000 ff3c 	bl	80114f4 <_sbrk_r>
 801067c:	6038      	str	r0, [r7, #0]
 801067e:	4629      	mov	r1, r5
 8010680:	4630      	mov	r0, r6
 8010682:	f000 ff37 	bl	80114f4 <_sbrk_r>
 8010686:	1c43      	adds	r3, r0, #1
 8010688:	d123      	bne.n	80106d2 <_malloc_r+0x92>
 801068a:	230c      	movs	r3, #12
 801068c:	4630      	mov	r0, r6
 801068e:	6033      	str	r3, [r6, #0]
 8010690:	f003 fa7c 	bl	8013b8c <__malloc_unlock>
 8010694:	e7e3      	b.n	801065e <_malloc_r+0x1e>
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	1b5b      	subs	r3, r3, r5
 801069a:	d417      	bmi.n	80106cc <_malloc_r+0x8c>
 801069c:	2b0b      	cmp	r3, #11
 801069e:	d903      	bls.n	80106a8 <_malloc_r+0x68>
 80106a0:	6023      	str	r3, [r4, #0]
 80106a2:	441c      	add	r4, r3
 80106a4:	6025      	str	r5, [r4, #0]
 80106a6:	e004      	b.n	80106b2 <_malloc_r+0x72>
 80106a8:	6863      	ldr	r3, [r4, #4]
 80106aa:	42a2      	cmp	r2, r4
 80106ac:	bf0c      	ite	eq
 80106ae:	600b      	streq	r3, [r1, #0]
 80106b0:	6053      	strne	r3, [r2, #4]
 80106b2:	4630      	mov	r0, r6
 80106b4:	f003 fa6a 	bl	8013b8c <__malloc_unlock>
 80106b8:	f104 000b 	add.w	r0, r4, #11
 80106bc:	1d23      	adds	r3, r4, #4
 80106be:	f020 0007 	bic.w	r0, r0, #7
 80106c2:	1ac2      	subs	r2, r0, r3
 80106c4:	d0cc      	beq.n	8010660 <_malloc_r+0x20>
 80106c6:	1a1b      	subs	r3, r3, r0
 80106c8:	50a3      	str	r3, [r4, r2]
 80106ca:	e7c9      	b.n	8010660 <_malloc_r+0x20>
 80106cc:	4622      	mov	r2, r4
 80106ce:	6864      	ldr	r4, [r4, #4]
 80106d0:	e7cc      	b.n	801066c <_malloc_r+0x2c>
 80106d2:	1cc4      	adds	r4, r0, #3
 80106d4:	f024 0403 	bic.w	r4, r4, #3
 80106d8:	42a0      	cmp	r0, r4
 80106da:	d0e3      	beq.n	80106a4 <_malloc_r+0x64>
 80106dc:	1a21      	subs	r1, r4, r0
 80106de:	4630      	mov	r0, r6
 80106e0:	f000 ff08 	bl	80114f4 <_sbrk_r>
 80106e4:	3001      	adds	r0, #1
 80106e6:	d1dd      	bne.n	80106a4 <_malloc_r+0x64>
 80106e8:	e7cf      	b.n	801068a <_malloc_r+0x4a>
 80106ea:	bf00      	nop
 80106ec:	20000ee4 	.word	0x20000ee4
 80106f0:	20000ee8 	.word	0x20000ee8

080106f4 <__cvt>:
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106fa:	461f      	mov	r7, r3
 80106fc:	bfbb      	ittet	lt
 80106fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8010702:	461f      	movlt	r7, r3
 8010704:	2300      	movge	r3, #0
 8010706:	232d      	movlt	r3, #45	; 0x2d
 8010708:	b088      	sub	sp, #32
 801070a:	4614      	mov	r4, r2
 801070c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801070e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010710:	7013      	strb	r3, [r2, #0]
 8010712:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010714:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8010718:	f023 0820 	bic.w	r8, r3, #32
 801071c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010720:	d005      	beq.n	801072e <__cvt+0x3a>
 8010722:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010726:	d100      	bne.n	801072a <__cvt+0x36>
 8010728:	3501      	adds	r5, #1
 801072a:	2302      	movs	r3, #2
 801072c:	e000      	b.n	8010730 <__cvt+0x3c>
 801072e:	2303      	movs	r3, #3
 8010730:	aa07      	add	r2, sp, #28
 8010732:	9204      	str	r2, [sp, #16]
 8010734:	aa06      	add	r2, sp, #24
 8010736:	e9cd a202 	strd	sl, r2, [sp, #8]
 801073a:	e9cd 3500 	strd	r3, r5, [sp]
 801073e:	4622      	mov	r2, r4
 8010740:	463b      	mov	r3, r7
 8010742:	f001 ff65 	bl	8012610 <_dtoa_r>
 8010746:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801074a:	4606      	mov	r6, r0
 801074c:	d102      	bne.n	8010754 <__cvt+0x60>
 801074e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010750:	07db      	lsls	r3, r3, #31
 8010752:	d522      	bpl.n	801079a <__cvt+0xa6>
 8010754:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010758:	eb06 0905 	add.w	r9, r6, r5
 801075c:	d110      	bne.n	8010780 <__cvt+0x8c>
 801075e:	7833      	ldrb	r3, [r6, #0]
 8010760:	2b30      	cmp	r3, #48	; 0x30
 8010762:	d10a      	bne.n	801077a <__cvt+0x86>
 8010764:	2200      	movs	r2, #0
 8010766:	2300      	movs	r3, #0
 8010768:	4620      	mov	r0, r4
 801076a:	4639      	mov	r1, r7
 801076c:	f7f2 fef4 	bl	8003558 <__aeabi_dcmpeq>
 8010770:	b918      	cbnz	r0, 801077a <__cvt+0x86>
 8010772:	f1c5 0501 	rsb	r5, r5, #1
 8010776:	f8ca 5000 	str.w	r5, [sl]
 801077a:	f8da 3000 	ldr.w	r3, [sl]
 801077e:	4499      	add	r9, r3
 8010780:	2200      	movs	r2, #0
 8010782:	2300      	movs	r3, #0
 8010784:	4620      	mov	r0, r4
 8010786:	4639      	mov	r1, r7
 8010788:	f7f2 fee6 	bl	8003558 <__aeabi_dcmpeq>
 801078c:	b108      	cbz	r0, 8010792 <__cvt+0x9e>
 801078e:	f8cd 901c 	str.w	r9, [sp, #28]
 8010792:	2230      	movs	r2, #48	; 0x30
 8010794:	9b07      	ldr	r3, [sp, #28]
 8010796:	454b      	cmp	r3, r9
 8010798:	d307      	bcc.n	80107aa <__cvt+0xb6>
 801079a:	4630      	mov	r0, r6
 801079c:	9b07      	ldr	r3, [sp, #28]
 801079e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80107a0:	1b9b      	subs	r3, r3, r6
 80107a2:	6013      	str	r3, [r2, #0]
 80107a4:	b008      	add	sp, #32
 80107a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107aa:	1c59      	adds	r1, r3, #1
 80107ac:	9107      	str	r1, [sp, #28]
 80107ae:	701a      	strb	r2, [r3, #0]
 80107b0:	e7f0      	b.n	8010794 <__cvt+0xa0>

080107b2 <__exponent>:
 80107b2:	4603      	mov	r3, r0
 80107b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107b6:	2900      	cmp	r1, #0
 80107b8:	f803 2b02 	strb.w	r2, [r3], #2
 80107bc:	bfb6      	itet	lt
 80107be:	222d      	movlt	r2, #45	; 0x2d
 80107c0:	222b      	movge	r2, #43	; 0x2b
 80107c2:	4249      	neglt	r1, r1
 80107c4:	2909      	cmp	r1, #9
 80107c6:	7042      	strb	r2, [r0, #1]
 80107c8:	dd2b      	ble.n	8010822 <__exponent+0x70>
 80107ca:	f10d 0407 	add.w	r4, sp, #7
 80107ce:	46a4      	mov	ip, r4
 80107d0:	270a      	movs	r7, #10
 80107d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80107d6:	460a      	mov	r2, r1
 80107d8:	46a6      	mov	lr, r4
 80107da:	fb07 1516 	mls	r5, r7, r6, r1
 80107de:	2a63      	cmp	r2, #99	; 0x63
 80107e0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80107e4:	4631      	mov	r1, r6
 80107e6:	f104 34ff 	add.w	r4, r4, #4294967295
 80107ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80107ee:	dcf0      	bgt.n	80107d2 <__exponent+0x20>
 80107f0:	3130      	adds	r1, #48	; 0x30
 80107f2:	f1ae 0502 	sub.w	r5, lr, #2
 80107f6:	f804 1c01 	strb.w	r1, [r4, #-1]
 80107fa:	4629      	mov	r1, r5
 80107fc:	1c44      	adds	r4, r0, #1
 80107fe:	4561      	cmp	r1, ip
 8010800:	d30a      	bcc.n	8010818 <__exponent+0x66>
 8010802:	f10d 0209 	add.w	r2, sp, #9
 8010806:	eba2 020e 	sub.w	r2, r2, lr
 801080a:	4565      	cmp	r5, ip
 801080c:	bf88      	it	hi
 801080e:	2200      	movhi	r2, #0
 8010810:	4413      	add	r3, r2
 8010812:	1a18      	subs	r0, r3, r0
 8010814:	b003      	add	sp, #12
 8010816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010818:	f811 2b01 	ldrb.w	r2, [r1], #1
 801081c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8010820:	e7ed      	b.n	80107fe <__exponent+0x4c>
 8010822:	2330      	movs	r3, #48	; 0x30
 8010824:	3130      	adds	r1, #48	; 0x30
 8010826:	7083      	strb	r3, [r0, #2]
 8010828:	70c1      	strb	r1, [r0, #3]
 801082a:	1d03      	adds	r3, r0, #4
 801082c:	e7f1      	b.n	8010812 <__exponent+0x60>
	...

08010830 <_printf_float>:
 8010830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010834:	b091      	sub	sp, #68	; 0x44
 8010836:	460c      	mov	r4, r1
 8010838:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 801083c:	4616      	mov	r6, r2
 801083e:	461f      	mov	r7, r3
 8010840:	4605      	mov	r5, r0
 8010842:	f003 f8fb 	bl	8013a3c <_localeconv_r>
 8010846:	6803      	ldr	r3, [r0, #0]
 8010848:	4618      	mov	r0, r3
 801084a:	9309      	str	r3, [sp, #36]	; 0x24
 801084c:	f7f2 fa58 	bl	8002d00 <strlen>
 8010850:	2300      	movs	r3, #0
 8010852:	930e      	str	r3, [sp, #56]	; 0x38
 8010854:	f8d8 3000 	ldr.w	r3, [r8]
 8010858:	900a      	str	r0, [sp, #40]	; 0x28
 801085a:	3307      	adds	r3, #7
 801085c:	f023 0307 	bic.w	r3, r3, #7
 8010860:	f103 0208 	add.w	r2, r3, #8
 8010864:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010868:	f8d4 b000 	ldr.w	fp, [r4]
 801086c:	f8c8 2000 	str.w	r2, [r8]
 8010870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010874:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010878:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 801087c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8010880:	930b      	str	r3, [sp, #44]	; 0x2c
 8010882:	f04f 32ff 	mov.w	r2, #4294967295
 8010886:	4640      	mov	r0, r8
 8010888:	4b9c      	ldr	r3, [pc, #624]	; (8010afc <_printf_float+0x2cc>)
 801088a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801088c:	f7f2 fe96 	bl	80035bc <__aeabi_dcmpun>
 8010890:	bb70      	cbnz	r0, 80108f0 <_printf_float+0xc0>
 8010892:	f04f 32ff 	mov.w	r2, #4294967295
 8010896:	4640      	mov	r0, r8
 8010898:	4b98      	ldr	r3, [pc, #608]	; (8010afc <_printf_float+0x2cc>)
 801089a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801089c:	f7f2 fe70 	bl	8003580 <__aeabi_dcmple>
 80108a0:	bb30      	cbnz	r0, 80108f0 <_printf_float+0xc0>
 80108a2:	2200      	movs	r2, #0
 80108a4:	2300      	movs	r3, #0
 80108a6:	4640      	mov	r0, r8
 80108a8:	4651      	mov	r1, sl
 80108aa:	f7f2 fe5f 	bl	800356c <__aeabi_dcmplt>
 80108ae:	b110      	cbz	r0, 80108b6 <_printf_float+0x86>
 80108b0:	232d      	movs	r3, #45	; 0x2d
 80108b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80108b6:	4b92      	ldr	r3, [pc, #584]	; (8010b00 <_printf_float+0x2d0>)
 80108b8:	4892      	ldr	r0, [pc, #584]	; (8010b04 <_printf_float+0x2d4>)
 80108ba:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80108be:	bf94      	ite	ls
 80108c0:	4698      	movls	r8, r3
 80108c2:	4680      	movhi	r8, r0
 80108c4:	2303      	movs	r3, #3
 80108c6:	f04f 0a00 	mov.w	sl, #0
 80108ca:	6123      	str	r3, [r4, #16]
 80108cc:	f02b 0304 	bic.w	r3, fp, #4
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	4633      	mov	r3, r6
 80108d4:	4621      	mov	r1, r4
 80108d6:	4628      	mov	r0, r5
 80108d8:	9700      	str	r7, [sp, #0]
 80108da:	aa0f      	add	r2, sp, #60	; 0x3c
 80108dc:	f000 f9d4 	bl	8010c88 <_printf_common>
 80108e0:	3001      	adds	r0, #1
 80108e2:	f040 8090 	bne.w	8010a06 <_printf_float+0x1d6>
 80108e6:	f04f 30ff 	mov.w	r0, #4294967295
 80108ea:	b011      	add	sp, #68	; 0x44
 80108ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f0:	4642      	mov	r2, r8
 80108f2:	4653      	mov	r3, sl
 80108f4:	4640      	mov	r0, r8
 80108f6:	4651      	mov	r1, sl
 80108f8:	f7f2 fe60 	bl	80035bc <__aeabi_dcmpun>
 80108fc:	b148      	cbz	r0, 8010912 <_printf_float+0xe2>
 80108fe:	f1ba 0f00 	cmp.w	sl, #0
 8010902:	bfb8      	it	lt
 8010904:	232d      	movlt	r3, #45	; 0x2d
 8010906:	4880      	ldr	r0, [pc, #512]	; (8010b08 <_printf_float+0x2d8>)
 8010908:	bfb8      	it	lt
 801090a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801090e:	4b7f      	ldr	r3, [pc, #508]	; (8010b0c <_printf_float+0x2dc>)
 8010910:	e7d3      	b.n	80108ba <_printf_float+0x8a>
 8010912:	6863      	ldr	r3, [r4, #4]
 8010914:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8010918:	1c5a      	adds	r2, r3, #1
 801091a:	d142      	bne.n	80109a2 <_printf_float+0x172>
 801091c:	2306      	movs	r3, #6
 801091e:	6063      	str	r3, [r4, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	9206      	str	r2, [sp, #24]
 8010924:	aa0e      	add	r2, sp, #56	; 0x38
 8010926:	e9cd 9204 	strd	r9, r2, [sp, #16]
 801092a:	aa0d      	add	r2, sp, #52	; 0x34
 801092c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8010930:	9203      	str	r2, [sp, #12]
 8010932:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8010936:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801093a:	6023      	str	r3, [r4, #0]
 801093c:	6863      	ldr	r3, [r4, #4]
 801093e:	4642      	mov	r2, r8
 8010940:	9300      	str	r3, [sp, #0]
 8010942:	4628      	mov	r0, r5
 8010944:	4653      	mov	r3, sl
 8010946:	910b      	str	r1, [sp, #44]	; 0x2c
 8010948:	f7ff fed4 	bl	80106f4 <__cvt>
 801094c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801094e:	4680      	mov	r8, r0
 8010950:	2947      	cmp	r1, #71	; 0x47
 8010952:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010954:	d108      	bne.n	8010968 <_printf_float+0x138>
 8010956:	1cc8      	adds	r0, r1, #3
 8010958:	db02      	blt.n	8010960 <_printf_float+0x130>
 801095a:	6863      	ldr	r3, [r4, #4]
 801095c:	4299      	cmp	r1, r3
 801095e:	dd40      	ble.n	80109e2 <_printf_float+0x1b2>
 8010960:	f1a9 0902 	sub.w	r9, r9, #2
 8010964:	fa5f f989 	uxtb.w	r9, r9
 8010968:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801096c:	d81f      	bhi.n	80109ae <_printf_float+0x17e>
 801096e:	464a      	mov	r2, r9
 8010970:	3901      	subs	r1, #1
 8010972:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010976:	910d      	str	r1, [sp, #52]	; 0x34
 8010978:	f7ff ff1b 	bl	80107b2 <__exponent>
 801097c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801097e:	4682      	mov	sl, r0
 8010980:	1813      	adds	r3, r2, r0
 8010982:	2a01      	cmp	r2, #1
 8010984:	6123      	str	r3, [r4, #16]
 8010986:	dc02      	bgt.n	801098e <_printf_float+0x15e>
 8010988:	6822      	ldr	r2, [r4, #0]
 801098a:	07d2      	lsls	r2, r2, #31
 801098c:	d501      	bpl.n	8010992 <_printf_float+0x162>
 801098e:	3301      	adds	r3, #1
 8010990:	6123      	str	r3, [r4, #16]
 8010992:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8010996:	2b00      	cmp	r3, #0
 8010998:	d09b      	beq.n	80108d2 <_printf_float+0xa2>
 801099a:	232d      	movs	r3, #45	; 0x2d
 801099c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109a0:	e797      	b.n	80108d2 <_printf_float+0xa2>
 80109a2:	2947      	cmp	r1, #71	; 0x47
 80109a4:	d1bc      	bne.n	8010920 <_printf_float+0xf0>
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1ba      	bne.n	8010920 <_printf_float+0xf0>
 80109aa:	2301      	movs	r3, #1
 80109ac:	e7b7      	b.n	801091e <_printf_float+0xee>
 80109ae:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80109b2:	d118      	bne.n	80109e6 <_printf_float+0x1b6>
 80109b4:	2900      	cmp	r1, #0
 80109b6:	6863      	ldr	r3, [r4, #4]
 80109b8:	dd0b      	ble.n	80109d2 <_printf_float+0x1a2>
 80109ba:	6121      	str	r1, [r4, #16]
 80109bc:	b913      	cbnz	r3, 80109c4 <_printf_float+0x194>
 80109be:	6822      	ldr	r2, [r4, #0]
 80109c0:	07d0      	lsls	r0, r2, #31
 80109c2:	d502      	bpl.n	80109ca <_printf_float+0x19a>
 80109c4:	3301      	adds	r3, #1
 80109c6:	440b      	add	r3, r1
 80109c8:	6123      	str	r3, [r4, #16]
 80109ca:	f04f 0a00 	mov.w	sl, #0
 80109ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80109d0:	e7df      	b.n	8010992 <_printf_float+0x162>
 80109d2:	b913      	cbnz	r3, 80109da <_printf_float+0x1aa>
 80109d4:	6822      	ldr	r2, [r4, #0]
 80109d6:	07d2      	lsls	r2, r2, #31
 80109d8:	d501      	bpl.n	80109de <_printf_float+0x1ae>
 80109da:	3302      	adds	r3, #2
 80109dc:	e7f4      	b.n	80109c8 <_printf_float+0x198>
 80109de:	2301      	movs	r3, #1
 80109e0:	e7f2      	b.n	80109c8 <_printf_float+0x198>
 80109e2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80109e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109e8:	4299      	cmp	r1, r3
 80109ea:	db05      	blt.n	80109f8 <_printf_float+0x1c8>
 80109ec:	6823      	ldr	r3, [r4, #0]
 80109ee:	6121      	str	r1, [r4, #16]
 80109f0:	07d8      	lsls	r0, r3, #31
 80109f2:	d5ea      	bpl.n	80109ca <_printf_float+0x19a>
 80109f4:	1c4b      	adds	r3, r1, #1
 80109f6:	e7e7      	b.n	80109c8 <_printf_float+0x198>
 80109f8:	2900      	cmp	r1, #0
 80109fa:	bfcc      	ite	gt
 80109fc:	2201      	movgt	r2, #1
 80109fe:	f1c1 0202 	rsble	r2, r1, #2
 8010a02:	4413      	add	r3, r2
 8010a04:	e7e0      	b.n	80109c8 <_printf_float+0x198>
 8010a06:	6823      	ldr	r3, [r4, #0]
 8010a08:	055a      	lsls	r2, r3, #21
 8010a0a:	d407      	bmi.n	8010a1c <_printf_float+0x1ec>
 8010a0c:	6923      	ldr	r3, [r4, #16]
 8010a0e:	4642      	mov	r2, r8
 8010a10:	4631      	mov	r1, r6
 8010a12:	4628      	mov	r0, r5
 8010a14:	47b8      	blx	r7
 8010a16:	3001      	adds	r0, #1
 8010a18:	d12b      	bne.n	8010a72 <_printf_float+0x242>
 8010a1a:	e764      	b.n	80108e6 <_printf_float+0xb6>
 8010a1c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010a20:	f240 80dd 	bls.w	8010bde <_printf_float+0x3ae>
 8010a24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	f7f2 fd94 	bl	8003558 <__aeabi_dcmpeq>
 8010a30:	2800      	cmp	r0, #0
 8010a32:	d033      	beq.n	8010a9c <_printf_float+0x26c>
 8010a34:	2301      	movs	r3, #1
 8010a36:	4631      	mov	r1, r6
 8010a38:	4628      	mov	r0, r5
 8010a3a:	4a35      	ldr	r2, [pc, #212]	; (8010b10 <_printf_float+0x2e0>)
 8010a3c:	47b8      	blx	r7
 8010a3e:	3001      	adds	r0, #1
 8010a40:	f43f af51 	beq.w	80108e6 <_printf_float+0xb6>
 8010a44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	db02      	blt.n	8010a52 <_printf_float+0x222>
 8010a4c:	6823      	ldr	r3, [r4, #0]
 8010a4e:	07d8      	lsls	r0, r3, #31
 8010a50:	d50f      	bpl.n	8010a72 <_printf_float+0x242>
 8010a52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a56:	4631      	mov	r1, r6
 8010a58:	4628      	mov	r0, r5
 8010a5a:	47b8      	blx	r7
 8010a5c:	3001      	adds	r0, #1
 8010a5e:	f43f af42 	beq.w	80108e6 <_printf_float+0xb6>
 8010a62:	f04f 0800 	mov.w	r8, #0
 8010a66:	f104 091a 	add.w	r9, r4, #26
 8010a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	4543      	cmp	r3, r8
 8010a70:	dc09      	bgt.n	8010a86 <_printf_float+0x256>
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	079b      	lsls	r3, r3, #30
 8010a76:	f100 8102 	bmi.w	8010c7e <_printf_float+0x44e>
 8010a7a:	68e0      	ldr	r0, [r4, #12]
 8010a7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a7e:	4298      	cmp	r0, r3
 8010a80:	bfb8      	it	lt
 8010a82:	4618      	movlt	r0, r3
 8010a84:	e731      	b.n	80108ea <_printf_float+0xba>
 8010a86:	2301      	movs	r3, #1
 8010a88:	464a      	mov	r2, r9
 8010a8a:	4631      	mov	r1, r6
 8010a8c:	4628      	mov	r0, r5
 8010a8e:	47b8      	blx	r7
 8010a90:	3001      	adds	r0, #1
 8010a92:	f43f af28 	beq.w	80108e6 <_printf_float+0xb6>
 8010a96:	f108 0801 	add.w	r8, r8, #1
 8010a9a:	e7e6      	b.n	8010a6a <_printf_float+0x23a>
 8010a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	dc38      	bgt.n	8010b14 <_printf_float+0x2e4>
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	4631      	mov	r1, r6
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	4a19      	ldr	r2, [pc, #100]	; (8010b10 <_printf_float+0x2e0>)
 8010aaa:	47b8      	blx	r7
 8010aac:	3001      	adds	r0, #1
 8010aae:	f43f af1a 	beq.w	80108e6 <_printf_float+0xb6>
 8010ab2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	d102      	bne.n	8010ac0 <_printf_float+0x290>
 8010aba:	6823      	ldr	r3, [r4, #0]
 8010abc:	07d9      	lsls	r1, r3, #31
 8010abe:	d5d8      	bpl.n	8010a72 <_printf_float+0x242>
 8010ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010ac4:	4631      	mov	r1, r6
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	47b8      	blx	r7
 8010aca:	3001      	adds	r0, #1
 8010acc:	f43f af0b 	beq.w	80108e6 <_printf_float+0xb6>
 8010ad0:	f04f 0900 	mov.w	r9, #0
 8010ad4:	f104 0a1a 	add.w	sl, r4, #26
 8010ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ada:	425b      	negs	r3, r3
 8010adc:	454b      	cmp	r3, r9
 8010ade:	dc01      	bgt.n	8010ae4 <_printf_float+0x2b4>
 8010ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010ae2:	e794      	b.n	8010a0e <_printf_float+0x1de>
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	4652      	mov	r2, sl
 8010ae8:	4631      	mov	r1, r6
 8010aea:	4628      	mov	r0, r5
 8010aec:	47b8      	blx	r7
 8010aee:	3001      	adds	r0, #1
 8010af0:	f43f aef9 	beq.w	80108e6 <_printf_float+0xb6>
 8010af4:	f109 0901 	add.w	r9, r9, #1
 8010af8:	e7ee      	b.n	8010ad8 <_printf_float+0x2a8>
 8010afa:	bf00      	nop
 8010afc:	7fefffff 	.word	0x7fefffff
 8010b00:	08016fc0 	.word	0x08016fc0
 8010b04:	08016fc4 	.word	0x08016fc4
 8010b08:	08016fcc 	.word	0x08016fcc
 8010b0c:	08016fc8 	.word	0x08016fc8
 8010b10:	08016fd0 	.word	0x08016fd0
 8010b14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	bfa8      	it	ge
 8010b1c:	461a      	movge	r2, r3
 8010b1e:	2a00      	cmp	r2, #0
 8010b20:	4691      	mov	r9, r2
 8010b22:	dc37      	bgt.n	8010b94 <_printf_float+0x364>
 8010b24:	f04f 0b00 	mov.w	fp, #0
 8010b28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b2c:	f104 021a 	add.w	r2, r4, #26
 8010b30:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010b34:	ebaa 0309 	sub.w	r3, sl, r9
 8010b38:	455b      	cmp	r3, fp
 8010b3a:	dc33      	bgt.n	8010ba4 <_printf_float+0x374>
 8010b3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010b40:	429a      	cmp	r2, r3
 8010b42:	db3b      	blt.n	8010bbc <_printf_float+0x38c>
 8010b44:	6823      	ldr	r3, [r4, #0]
 8010b46:	07da      	lsls	r2, r3, #31
 8010b48:	d438      	bmi.n	8010bbc <_printf_float+0x38c>
 8010b4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b4c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010b4e:	eba2 030a 	sub.w	r3, r2, sl
 8010b52:	eba2 0901 	sub.w	r9, r2, r1
 8010b56:	4599      	cmp	r9, r3
 8010b58:	bfa8      	it	ge
 8010b5a:	4699      	movge	r9, r3
 8010b5c:	f1b9 0f00 	cmp.w	r9, #0
 8010b60:	dc34      	bgt.n	8010bcc <_printf_float+0x39c>
 8010b62:	f04f 0800 	mov.w	r8, #0
 8010b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b6a:	f104 0a1a 	add.w	sl, r4, #26
 8010b6e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8010b72:	1a9b      	subs	r3, r3, r2
 8010b74:	eba3 0309 	sub.w	r3, r3, r9
 8010b78:	4543      	cmp	r3, r8
 8010b7a:	f77f af7a 	ble.w	8010a72 <_printf_float+0x242>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	4652      	mov	r2, sl
 8010b82:	4631      	mov	r1, r6
 8010b84:	4628      	mov	r0, r5
 8010b86:	47b8      	blx	r7
 8010b88:	3001      	adds	r0, #1
 8010b8a:	f43f aeac 	beq.w	80108e6 <_printf_float+0xb6>
 8010b8e:	f108 0801 	add.w	r8, r8, #1
 8010b92:	e7ec      	b.n	8010b6e <_printf_float+0x33e>
 8010b94:	4613      	mov	r3, r2
 8010b96:	4631      	mov	r1, r6
 8010b98:	4642      	mov	r2, r8
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	47b8      	blx	r7
 8010b9e:	3001      	adds	r0, #1
 8010ba0:	d1c0      	bne.n	8010b24 <_printf_float+0x2f4>
 8010ba2:	e6a0      	b.n	80108e6 <_printf_float+0xb6>
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	4631      	mov	r1, r6
 8010ba8:	4628      	mov	r0, r5
 8010baa:	920b      	str	r2, [sp, #44]	; 0x2c
 8010bac:	47b8      	blx	r7
 8010bae:	3001      	adds	r0, #1
 8010bb0:	f43f ae99 	beq.w	80108e6 <_printf_float+0xb6>
 8010bb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010bb6:	f10b 0b01 	add.w	fp, fp, #1
 8010bba:	e7b9      	b.n	8010b30 <_printf_float+0x300>
 8010bbc:	4631      	mov	r1, r6
 8010bbe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	47b8      	blx	r7
 8010bc6:	3001      	adds	r0, #1
 8010bc8:	d1bf      	bne.n	8010b4a <_printf_float+0x31a>
 8010bca:	e68c      	b.n	80108e6 <_printf_float+0xb6>
 8010bcc:	464b      	mov	r3, r9
 8010bce:	4631      	mov	r1, r6
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	eb08 020a 	add.w	r2, r8, sl
 8010bd6:	47b8      	blx	r7
 8010bd8:	3001      	adds	r0, #1
 8010bda:	d1c2      	bne.n	8010b62 <_printf_float+0x332>
 8010bdc:	e683      	b.n	80108e6 <_printf_float+0xb6>
 8010bde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010be0:	2a01      	cmp	r2, #1
 8010be2:	dc01      	bgt.n	8010be8 <_printf_float+0x3b8>
 8010be4:	07db      	lsls	r3, r3, #31
 8010be6:	d537      	bpl.n	8010c58 <_printf_float+0x428>
 8010be8:	2301      	movs	r3, #1
 8010bea:	4642      	mov	r2, r8
 8010bec:	4631      	mov	r1, r6
 8010bee:	4628      	mov	r0, r5
 8010bf0:	47b8      	blx	r7
 8010bf2:	3001      	adds	r0, #1
 8010bf4:	f43f ae77 	beq.w	80108e6 <_printf_float+0xb6>
 8010bf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010bfc:	4631      	mov	r1, r6
 8010bfe:	4628      	mov	r0, r5
 8010c00:	47b8      	blx	r7
 8010c02:	3001      	adds	r0, #1
 8010c04:	f43f ae6f 	beq.w	80108e6 <_printf_float+0xb6>
 8010c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	2300      	movs	r3, #0
 8010c10:	f7f2 fca2 	bl	8003558 <__aeabi_dcmpeq>
 8010c14:	b9d8      	cbnz	r0, 8010c4e <_printf_float+0x41e>
 8010c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c18:	f108 0201 	add.w	r2, r8, #1
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	4631      	mov	r1, r6
 8010c20:	4628      	mov	r0, r5
 8010c22:	47b8      	blx	r7
 8010c24:	3001      	adds	r0, #1
 8010c26:	d10e      	bne.n	8010c46 <_printf_float+0x416>
 8010c28:	e65d      	b.n	80108e6 <_printf_float+0xb6>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	464a      	mov	r2, r9
 8010c2e:	4631      	mov	r1, r6
 8010c30:	4628      	mov	r0, r5
 8010c32:	47b8      	blx	r7
 8010c34:	3001      	adds	r0, #1
 8010c36:	f43f ae56 	beq.w	80108e6 <_printf_float+0xb6>
 8010c3a:	f108 0801 	add.w	r8, r8, #1
 8010c3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c40:	3b01      	subs	r3, #1
 8010c42:	4543      	cmp	r3, r8
 8010c44:	dcf1      	bgt.n	8010c2a <_printf_float+0x3fa>
 8010c46:	4653      	mov	r3, sl
 8010c48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010c4c:	e6e0      	b.n	8010a10 <_printf_float+0x1e0>
 8010c4e:	f04f 0800 	mov.w	r8, #0
 8010c52:	f104 091a 	add.w	r9, r4, #26
 8010c56:	e7f2      	b.n	8010c3e <_printf_float+0x40e>
 8010c58:	2301      	movs	r3, #1
 8010c5a:	4642      	mov	r2, r8
 8010c5c:	e7df      	b.n	8010c1e <_printf_float+0x3ee>
 8010c5e:	2301      	movs	r3, #1
 8010c60:	464a      	mov	r2, r9
 8010c62:	4631      	mov	r1, r6
 8010c64:	4628      	mov	r0, r5
 8010c66:	47b8      	blx	r7
 8010c68:	3001      	adds	r0, #1
 8010c6a:	f43f ae3c 	beq.w	80108e6 <_printf_float+0xb6>
 8010c6e:	f108 0801 	add.w	r8, r8, #1
 8010c72:	68e3      	ldr	r3, [r4, #12]
 8010c74:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010c76:	1a5b      	subs	r3, r3, r1
 8010c78:	4543      	cmp	r3, r8
 8010c7a:	dcf0      	bgt.n	8010c5e <_printf_float+0x42e>
 8010c7c:	e6fd      	b.n	8010a7a <_printf_float+0x24a>
 8010c7e:	f04f 0800 	mov.w	r8, #0
 8010c82:	f104 0919 	add.w	r9, r4, #25
 8010c86:	e7f4      	b.n	8010c72 <_printf_float+0x442>

08010c88 <_printf_common>:
 8010c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c8c:	4616      	mov	r6, r2
 8010c8e:	4699      	mov	r9, r3
 8010c90:	688a      	ldr	r2, [r1, #8]
 8010c92:	690b      	ldr	r3, [r1, #16]
 8010c94:	4607      	mov	r7, r0
 8010c96:	4293      	cmp	r3, r2
 8010c98:	bfb8      	it	lt
 8010c9a:	4613      	movlt	r3, r2
 8010c9c:	6033      	str	r3, [r6, #0]
 8010c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010ca2:	460c      	mov	r4, r1
 8010ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010ca8:	b10a      	cbz	r2, 8010cae <_printf_common+0x26>
 8010caa:	3301      	adds	r3, #1
 8010cac:	6033      	str	r3, [r6, #0]
 8010cae:	6823      	ldr	r3, [r4, #0]
 8010cb0:	0699      	lsls	r1, r3, #26
 8010cb2:	bf42      	ittt	mi
 8010cb4:	6833      	ldrmi	r3, [r6, #0]
 8010cb6:	3302      	addmi	r3, #2
 8010cb8:	6033      	strmi	r3, [r6, #0]
 8010cba:	6825      	ldr	r5, [r4, #0]
 8010cbc:	f015 0506 	ands.w	r5, r5, #6
 8010cc0:	d106      	bne.n	8010cd0 <_printf_common+0x48>
 8010cc2:	f104 0a19 	add.w	sl, r4, #25
 8010cc6:	68e3      	ldr	r3, [r4, #12]
 8010cc8:	6832      	ldr	r2, [r6, #0]
 8010cca:	1a9b      	subs	r3, r3, r2
 8010ccc:	42ab      	cmp	r3, r5
 8010cce:	dc28      	bgt.n	8010d22 <_printf_common+0x9a>
 8010cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010cd4:	1e13      	subs	r3, r2, #0
 8010cd6:	6822      	ldr	r2, [r4, #0]
 8010cd8:	bf18      	it	ne
 8010cda:	2301      	movne	r3, #1
 8010cdc:	0692      	lsls	r2, r2, #26
 8010cde:	d42d      	bmi.n	8010d3c <_printf_common+0xb4>
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	4638      	mov	r0, r7
 8010ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010ce8:	47c0      	blx	r8
 8010cea:	3001      	adds	r0, #1
 8010cec:	d020      	beq.n	8010d30 <_printf_common+0xa8>
 8010cee:	6823      	ldr	r3, [r4, #0]
 8010cf0:	68e5      	ldr	r5, [r4, #12]
 8010cf2:	f003 0306 	and.w	r3, r3, #6
 8010cf6:	2b04      	cmp	r3, #4
 8010cf8:	bf18      	it	ne
 8010cfa:	2500      	movne	r5, #0
 8010cfc:	6832      	ldr	r2, [r6, #0]
 8010cfe:	f04f 0600 	mov.w	r6, #0
 8010d02:	68a3      	ldr	r3, [r4, #8]
 8010d04:	bf08      	it	eq
 8010d06:	1aad      	subeq	r5, r5, r2
 8010d08:	6922      	ldr	r2, [r4, #16]
 8010d0a:	bf08      	it	eq
 8010d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d10:	4293      	cmp	r3, r2
 8010d12:	bfc4      	itt	gt
 8010d14:	1a9b      	subgt	r3, r3, r2
 8010d16:	18ed      	addgt	r5, r5, r3
 8010d18:	341a      	adds	r4, #26
 8010d1a:	42b5      	cmp	r5, r6
 8010d1c:	d11a      	bne.n	8010d54 <_printf_common+0xcc>
 8010d1e:	2000      	movs	r0, #0
 8010d20:	e008      	b.n	8010d34 <_printf_common+0xac>
 8010d22:	2301      	movs	r3, #1
 8010d24:	4652      	mov	r2, sl
 8010d26:	4649      	mov	r1, r9
 8010d28:	4638      	mov	r0, r7
 8010d2a:	47c0      	blx	r8
 8010d2c:	3001      	adds	r0, #1
 8010d2e:	d103      	bne.n	8010d38 <_printf_common+0xb0>
 8010d30:	f04f 30ff 	mov.w	r0, #4294967295
 8010d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d38:	3501      	adds	r5, #1
 8010d3a:	e7c4      	b.n	8010cc6 <_printf_common+0x3e>
 8010d3c:	2030      	movs	r0, #48	; 0x30
 8010d3e:	18e1      	adds	r1, r4, r3
 8010d40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010d44:	1c5a      	adds	r2, r3, #1
 8010d46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010d4a:	4422      	add	r2, r4
 8010d4c:	3302      	adds	r3, #2
 8010d4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010d52:	e7c5      	b.n	8010ce0 <_printf_common+0x58>
 8010d54:	2301      	movs	r3, #1
 8010d56:	4622      	mov	r2, r4
 8010d58:	4649      	mov	r1, r9
 8010d5a:	4638      	mov	r0, r7
 8010d5c:	47c0      	blx	r8
 8010d5e:	3001      	adds	r0, #1
 8010d60:	d0e6      	beq.n	8010d30 <_printf_common+0xa8>
 8010d62:	3601      	adds	r6, #1
 8010d64:	e7d9      	b.n	8010d1a <_printf_common+0x92>
	...

08010d68 <_printf_i>:
 8010d68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d6c:	460c      	mov	r4, r1
 8010d6e:	7e27      	ldrb	r7, [r4, #24]
 8010d70:	4691      	mov	r9, r2
 8010d72:	2f78      	cmp	r7, #120	; 0x78
 8010d74:	4680      	mov	r8, r0
 8010d76:	469a      	mov	sl, r3
 8010d78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d7e:	d807      	bhi.n	8010d90 <_printf_i+0x28>
 8010d80:	2f62      	cmp	r7, #98	; 0x62
 8010d82:	d80a      	bhi.n	8010d9a <_printf_i+0x32>
 8010d84:	2f00      	cmp	r7, #0
 8010d86:	f000 80d9 	beq.w	8010f3c <_printf_i+0x1d4>
 8010d8a:	2f58      	cmp	r7, #88	; 0x58
 8010d8c:	f000 80a4 	beq.w	8010ed8 <_printf_i+0x170>
 8010d90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010d98:	e03a      	b.n	8010e10 <_printf_i+0xa8>
 8010d9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010d9e:	2b15      	cmp	r3, #21
 8010da0:	d8f6      	bhi.n	8010d90 <_printf_i+0x28>
 8010da2:	a001      	add	r0, pc, #4	; (adr r0, 8010da8 <_printf_i+0x40>)
 8010da4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010da8:	08010e01 	.word	0x08010e01
 8010dac:	08010e15 	.word	0x08010e15
 8010db0:	08010d91 	.word	0x08010d91
 8010db4:	08010d91 	.word	0x08010d91
 8010db8:	08010d91 	.word	0x08010d91
 8010dbc:	08010d91 	.word	0x08010d91
 8010dc0:	08010e15 	.word	0x08010e15
 8010dc4:	08010d91 	.word	0x08010d91
 8010dc8:	08010d91 	.word	0x08010d91
 8010dcc:	08010d91 	.word	0x08010d91
 8010dd0:	08010d91 	.word	0x08010d91
 8010dd4:	08010f23 	.word	0x08010f23
 8010dd8:	08010e45 	.word	0x08010e45
 8010ddc:	08010f05 	.word	0x08010f05
 8010de0:	08010d91 	.word	0x08010d91
 8010de4:	08010d91 	.word	0x08010d91
 8010de8:	08010f45 	.word	0x08010f45
 8010dec:	08010d91 	.word	0x08010d91
 8010df0:	08010e45 	.word	0x08010e45
 8010df4:	08010d91 	.word	0x08010d91
 8010df8:	08010d91 	.word	0x08010d91
 8010dfc:	08010f0d 	.word	0x08010f0d
 8010e00:	680b      	ldr	r3, [r1, #0]
 8010e02:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010e06:	1d1a      	adds	r2, r3, #4
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	600a      	str	r2, [r1, #0]
 8010e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e10:	2301      	movs	r3, #1
 8010e12:	e0a4      	b.n	8010f5e <_printf_i+0x1f6>
 8010e14:	6825      	ldr	r5, [r4, #0]
 8010e16:	6808      	ldr	r0, [r1, #0]
 8010e18:	062e      	lsls	r6, r5, #24
 8010e1a:	f100 0304 	add.w	r3, r0, #4
 8010e1e:	d50a      	bpl.n	8010e36 <_printf_i+0xce>
 8010e20:	6805      	ldr	r5, [r0, #0]
 8010e22:	600b      	str	r3, [r1, #0]
 8010e24:	2d00      	cmp	r5, #0
 8010e26:	da03      	bge.n	8010e30 <_printf_i+0xc8>
 8010e28:	232d      	movs	r3, #45	; 0x2d
 8010e2a:	426d      	negs	r5, r5
 8010e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e30:	230a      	movs	r3, #10
 8010e32:	485e      	ldr	r0, [pc, #376]	; (8010fac <_printf_i+0x244>)
 8010e34:	e019      	b.n	8010e6a <_printf_i+0x102>
 8010e36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010e3a:	6805      	ldr	r5, [r0, #0]
 8010e3c:	600b      	str	r3, [r1, #0]
 8010e3e:	bf18      	it	ne
 8010e40:	b22d      	sxthne	r5, r5
 8010e42:	e7ef      	b.n	8010e24 <_printf_i+0xbc>
 8010e44:	680b      	ldr	r3, [r1, #0]
 8010e46:	6825      	ldr	r5, [r4, #0]
 8010e48:	1d18      	adds	r0, r3, #4
 8010e4a:	6008      	str	r0, [r1, #0]
 8010e4c:	0628      	lsls	r0, r5, #24
 8010e4e:	d501      	bpl.n	8010e54 <_printf_i+0xec>
 8010e50:	681d      	ldr	r5, [r3, #0]
 8010e52:	e002      	b.n	8010e5a <_printf_i+0xf2>
 8010e54:	0669      	lsls	r1, r5, #25
 8010e56:	d5fb      	bpl.n	8010e50 <_printf_i+0xe8>
 8010e58:	881d      	ldrh	r5, [r3, #0]
 8010e5a:	2f6f      	cmp	r7, #111	; 0x6f
 8010e5c:	bf0c      	ite	eq
 8010e5e:	2308      	moveq	r3, #8
 8010e60:	230a      	movne	r3, #10
 8010e62:	4852      	ldr	r0, [pc, #328]	; (8010fac <_printf_i+0x244>)
 8010e64:	2100      	movs	r1, #0
 8010e66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010e6a:	6866      	ldr	r6, [r4, #4]
 8010e6c:	2e00      	cmp	r6, #0
 8010e6e:	bfa8      	it	ge
 8010e70:	6821      	ldrge	r1, [r4, #0]
 8010e72:	60a6      	str	r6, [r4, #8]
 8010e74:	bfa4      	itt	ge
 8010e76:	f021 0104 	bicge.w	r1, r1, #4
 8010e7a:	6021      	strge	r1, [r4, #0]
 8010e7c:	b90d      	cbnz	r5, 8010e82 <_printf_i+0x11a>
 8010e7e:	2e00      	cmp	r6, #0
 8010e80:	d04d      	beq.n	8010f1e <_printf_i+0x1b6>
 8010e82:	4616      	mov	r6, r2
 8010e84:	fbb5 f1f3 	udiv	r1, r5, r3
 8010e88:	fb03 5711 	mls	r7, r3, r1, r5
 8010e8c:	5dc7      	ldrb	r7, [r0, r7]
 8010e8e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010e92:	462f      	mov	r7, r5
 8010e94:	42bb      	cmp	r3, r7
 8010e96:	460d      	mov	r5, r1
 8010e98:	d9f4      	bls.n	8010e84 <_printf_i+0x11c>
 8010e9a:	2b08      	cmp	r3, #8
 8010e9c:	d10b      	bne.n	8010eb6 <_printf_i+0x14e>
 8010e9e:	6823      	ldr	r3, [r4, #0]
 8010ea0:	07df      	lsls	r7, r3, #31
 8010ea2:	d508      	bpl.n	8010eb6 <_printf_i+0x14e>
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	6861      	ldr	r1, [r4, #4]
 8010ea8:	4299      	cmp	r1, r3
 8010eaa:	bfde      	ittt	le
 8010eac:	2330      	movle	r3, #48	; 0x30
 8010eae:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010eb2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010eb6:	1b92      	subs	r2, r2, r6
 8010eb8:	6122      	str	r2, [r4, #16]
 8010eba:	464b      	mov	r3, r9
 8010ebc:	4621      	mov	r1, r4
 8010ebe:	4640      	mov	r0, r8
 8010ec0:	f8cd a000 	str.w	sl, [sp]
 8010ec4:	aa03      	add	r2, sp, #12
 8010ec6:	f7ff fedf 	bl	8010c88 <_printf_common>
 8010eca:	3001      	adds	r0, #1
 8010ecc:	d14c      	bne.n	8010f68 <_printf_i+0x200>
 8010ece:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed2:	b004      	add	sp, #16
 8010ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ed8:	4834      	ldr	r0, [pc, #208]	; (8010fac <_printf_i+0x244>)
 8010eda:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010ede:	680e      	ldr	r6, [r1, #0]
 8010ee0:	6823      	ldr	r3, [r4, #0]
 8010ee2:	f856 5b04 	ldr.w	r5, [r6], #4
 8010ee6:	061f      	lsls	r7, r3, #24
 8010ee8:	600e      	str	r6, [r1, #0]
 8010eea:	d514      	bpl.n	8010f16 <_printf_i+0x1ae>
 8010eec:	07d9      	lsls	r1, r3, #31
 8010eee:	bf44      	itt	mi
 8010ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8010ef4:	6023      	strmi	r3, [r4, #0]
 8010ef6:	b91d      	cbnz	r5, 8010f00 <_printf_i+0x198>
 8010ef8:	6823      	ldr	r3, [r4, #0]
 8010efa:	f023 0320 	bic.w	r3, r3, #32
 8010efe:	6023      	str	r3, [r4, #0]
 8010f00:	2310      	movs	r3, #16
 8010f02:	e7af      	b.n	8010e64 <_printf_i+0xfc>
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	f043 0320 	orr.w	r3, r3, #32
 8010f0a:	6023      	str	r3, [r4, #0]
 8010f0c:	2378      	movs	r3, #120	; 0x78
 8010f0e:	4828      	ldr	r0, [pc, #160]	; (8010fb0 <_printf_i+0x248>)
 8010f10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f14:	e7e3      	b.n	8010ede <_printf_i+0x176>
 8010f16:	065e      	lsls	r6, r3, #25
 8010f18:	bf48      	it	mi
 8010f1a:	b2ad      	uxthmi	r5, r5
 8010f1c:	e7e6      	b.n	8010eec <_printf_i+0x184>
 8010f1e:	4616      	mov	r6, r2
 8010f20:	e7bb      	b.n	8010e9a <_printf_i+0x132>
 8010f22:	680b      	ldr	r3, [r1, #0]
 8010f24:	6826      	ldr	r6, [r4, #0]
 8010f26:	1d1d      	adds	r5, r3, #4
 8010f28:	6960      	ldr	r0, [r4, #20]
 8010f2a:	600d      	str	r5, [r1, #0]
 8010f2c:	0635      	lsls	r5, r6, #24
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	d501      	bpl.n	8010f36 <_printf_i+0x1ce>
 8010f32:	6018      	str	r0, [r3, #0]
 8010f34:	e002      	b.n	8010f3c <_printf_i+0x1d4>
 8010f36:	0671      	lsls	r1, r6, #25
 8010f38:	d5fb      	bpl.n	8010f32 <_printf_i+0x1ca>
 8010f3a:	8018      	strh	r0, [r3, #0]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	4616      	mov	r6, r2
 8010f40:	6123      	str	r3, [r4, #16]
 8010f42:	e7ba      	b.n	8010eba <_printf_i+0x152>
 8010f44:	680b      	ldr	r3, [r1, #0]
 8010f46:	1d1a      	adds	r2, r3, #4
 8010f48:	600a      	str	r2, [r1, #0]
 8010f4a:	681e      	ldr	r6, [r3, #0]
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	4630      	mov	r0, r6
 8010f50:	6862      	ldr	r2, [r4, #4]
 8010f52:	f002 fe07 	bl	8013b64 <memchr>
 8010f56:	b108      	cbz	r0, 8010f5c <_printf_i+0x1f4>
 8010f58:	1b80      	subs	r0, r0, r6
 8010f5a:	6060      	str	r0, [r4, #4]
 8010f5c:	6863      	ldr	r3, [r4, #4]
 8010f5e:	6123      	str	r3, [r4, #16]
 8010f60:	2300      	movs	r3, #0
 8010f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f66:	e7a8      	b.n	8010eba <_printf_i+0x152>
 8010f68:	4632      	mov	r2, r6
 8010f6a:	4649      	mov	r1, r9
 8010f6c:	4640      	mov	r0, r8
 8010f6e:	6923      	ldr	r3, [r4, #16]
 8010f70:	47d0      	blx	sl
 8010f72:	3001      	adds	r0, #1
 8010f74:	d0ab      	beq.n	8010ece <_printf_i+0x166>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	079b      	lsls	r3, r3, #30
 8010f7a:	d413      	bmi.n	8010fa4 <_printf_i+0x23c>
 8010f7c:	68e0      	ldr	r0, [r4, #12]
 8010f7e:	9b03      	ldr	r3, [sp, #12]
 8010f80:	4298      	cmp	r0, r3
 8010f82:	bfb8      	it	lt
 8010f84:	4618      	movlt	r0, r3
 8010f86:	e7a4      	b.n	8010ed2 <_printf_i+0x16a>
 8010f88:	2301      	movs	r3, #1
 8010f8a:	4632      	mov	r2, r6
 8010f8c:	4649      	mov	r1, r9
 8010f8e:	4640      	mov	r0, r8
 8010f90:	47d0      	blx	sl
 8010f92:	3001      	adds	r0, #1
 8010f94:	d09b      	beq.n	8010ece <_printf_i+0x166>
 8010f96:	3501      	adds	r5, #1
 8010f98:	68e3      	ldr	r3, [r4, #12]
 8010f9a:	9903      	ldr	r1, [sp, #12]
 8010f9c:	1a5b      	subs	r3, r3, r1
 8010f9e:	42ab      	cmp	r3, r5
 8010fa0:	dcf2      	bgt.n	8010f88 <_printf_i+0x220>
 8010fa2:	e7eb      	b.n	8010f7c <_printf_i+0x214>
 8010fa4:	2500      	movs	r5, #0
 8010fa6:	f104 0619 	add.w	r6, r4, #25
 8010faa:	e7f5      	b.n	8010f98 <_printf_i+0x230>
 8010fac:	08016fd2 	.word	0x08016fd2
 8010fb0:	08016fe3 	.word	0x08016fe3

08010fb4 <_scanf_float>:
 8010fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb8:	b087      	sub	sp, #28
 8010fba:	9303      	str	r3, [sp, #12]
 8010fbc:	688b      	ldr	r3, [r1, #8]
 8010fbe:	4617      	mov	r7, r2
 8010fc0:	1e5a      	subs	r2, r3, #1
 8010fc2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010fc6:	bf85      	ittet	hi
 8010fc8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010fcc:	195b      	addhi	r3, r3, r5
 8010fce:	2300      	movls	r3, #0
 8010fd0:	9302      	strhi	r3, [sp, #8]
 8010fd2:	bf88      	it	hi
 8010fd4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010fd8:	468b      	mov	fp, r1
 8010fda:	f04f 0500 	mov.w	r5, #0
 8010fde:	bf8c      	ite	hi
 8010fe0:	608b      	strhi	r3, [r1, #8]
 8010fe2:	9302      	strls	r3, [sp, #8]
 8010fe4:	680b      	ldr	r3, [r1, #0]
 8010fe6:	4680      	mov	r8, r0
 8010fe8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010fec:	f84b 3b1c 	str.w	r3, [fp], #28
 8010ff0:	460c      	mov	r4, r1
 8010ff2:	465e      	mov	r6, fp
 8010ff4:	46aa      	mov	sl, r5
 8010ff6:	46a9      	mov	r9, r5
 8010ff8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010ffc:	9501      	str	r5, [sp, #4]
 8010ffe:	68a2      	ldr	r2, [r4, #8]
 8011000:	b152      	cbz	r2, 8011018 <_scanf_float+0x64>
 8011002:	683b      	ldr	r3, [r7, #0]
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	2b4e      	cmp	r3, #78	; 0x4e
 8011008:	d864      	bhi.n	80110d4 <_scanf_float+0x120>
 801100a:	2b40      	cmp	r3, #64	; 0x40
 801100c:	d83c      	bhi.n	8011088 <_scanf_float+0xd4>
 801100e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8011012:	b2c8      	uxtb	r0, r1
 8011014:	280e      	cmp	r0, #14
 8011016:	d93a      	bls.n	801108e <_scanf_float+0xda>
 8011018:	f1b9 0f00 	cmp.w	r9, #0
 801101c:	d003      	beq.n	8011026 <_scanf_float+0x72>
 801101e:	6823      	ldr	r3, [r4, #0]
 8011020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011024:	6023      	str	r3, [r4, #0]
 8011026:	f10a 3aff 	add.w	sl, sl, #4294967295
 801102a:	f1ba 0f01 	cmp.w	sl, #1
 801102e:	f200 8113 	bhi.w	8011258 <_scanf_float+0x2a4>
 8011032:	455e      	cmp	r6, fp
 8011034:	f200 8105 	bhi.w	8011242 <_scanf_float+0x28e>
 8011038:	2501      	movs	r5, #1
 801103a:	4628      	mov	r0, r5
 801103c:	b007      	add	sp, #28
 801103e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011042:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8011046:	2a0d      	cmp	r2, #13
 8011048:	d8e6      	bhi.n	8011018 <_scanf_float+0x64>
 801104a:	a101      	add	r1, pc, #4	; (adr r1, 8011050 <_scanf_float+0x9c>)
 801104c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011050:	0801118f 	.word	0x0801118f
 8011054:	08011019 	.word	0x08011019
 8011058:	08011019 	.word	0x08011019
 801105c:	08011019 	.word	0x08011019
 8011060:	080111ef 	.word	0x080111ef
 8011064:	080111c7 	.word	0x080111c7
 8011068:	08011019 	.word	0x08011019
 801106c:	08011019 	.word	0x08011019
 8011070:	0801119d 	.word	0x0801119d
 8011074:	08011019 	.word	0x08011019
 8011078:	08011019 	.word	0x08011019
 801107c:	08011019 	.word	0x08011019
 8011080:	08011019 	.word	0x08011019
 8011084:	08011155 	.word	0x08011155
 8011088:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801108c:	e7db      	b.n	8011046 <_scanf_float+0x92>
 801108e:	290e      	cmp	r1, #14
 8011090:	d8c2      	bhi.n	8011018 <_scanf_float+0x64>
 8011092:	a001      	add	r0, pc, #4	; (adr r0, 8011098 <_scanf_float+0xe4>)
 8011094:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011098:	08011147 	.word	0x08011147
 801109c:	08011019 	.word	0x08011019
 80110a0:	08011147 	.word	0x08011147
 80110a4:	080111db 	.word	0x080111db
 80110a8:	08011019 	.word	0x08011019
 80110ac:	080110f5 	.word	0x080110f5
 80110b0:	08011131 	.word	0x08011131
 80110b4:	08011131 	.word	0x08011131
 80110b8:	08011131 	.word	0x08011131
 80110bc:	08011131 	.word	0x08011131
 80110c0:	08011131 	.word	0x08011131
 80110c4:	08011131 	.word	0x08011131
 80110c8:	08011131 	.word	0x08011131
 80110cc:	08011131 	.word	0x08011131
 80110d0:	08011131 	.word	0x08011131
 80110d4:	2b6e      	cmp	r3, #110	; 0x6e
 80110d6:	d809      	bhi.n	80110ec <_scanf_float+0x138>
 80110d8:	2b60      	cmp	r3, #96	; 0x60
 80110da:	d8b2      	bhi.n	8011042 <_scanf_float+0x8e>
 80110dc:	2b54      	cmp	r3, #84	; 0x54
 80110de:	d077      	beq.n	80111d0 <_scanf_float+0x21c>
 80110e0:	2b59      	cmp	r3, #89	; 0x59
 80110e2:	d199      	bne.n	8011018 <_scanf_float+0x64>
 80110e4:	2d07      	cmp	r5, #7
 80110e6:	d197      	bne.n	8011018 <_scanf_float+0x64>
 80110e8:	2508      	movs	r5, #8
 80110ea:	e029      	b.n	8011140 <_scanf_float+0x18c>
 80110ec:	2b74      	cmp	r3, #116	; 0x74
 80110ee:	d06f      	beq.n	80111d0 <_scanf_float+0x21c>
 80110f0:	2b79      	cmp	r3, #121	; 0x79
 80110f2:	e7f6      	b.n	80110e2 <_scanf_float+0x12e>
 80110f4:	6821      	ldr	r1, [r4, #0]
 80110f6:	05c8      	lsls	r0, r1, #23
 80110f8:	d51a      	bpl.n	8011130 <_scanf_float+0x17c>
 80110fa:	9b02      	ldr	r3, [sp, #8]
 80110fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011100:	6021      	str	r1, [r4, #0]
 8011102:	f109 0901 	add.w	r9, r9, #1
 8011106:	b11b      	cbz	r3, 8011110 <_scanf_float+0x15c>
 8011108:	3b01      	subs	r3, #1
 801110a:	3201      	adds	r2, #1
 801110c:	9302      	str	r3, [sp, #8]
 801110e:	60a2      	str	r2, [r4, #8]
 8011110:	68a3      	ldr	r3, [r4, #8]
 8011112:	3b01      	subs	r3, #1
 8011114:	60a3      	str	r3, [r4, #8]
 8011116:	6923      	ldr	r3, [r4, #16]
 8011118:	3301      	adds	r3, #1
 801111a:	6123      	str	r3, [r4, #16]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	3b01      	subs	r3, #1
 8011120:	2b00      	cmp	r3, #0
 8011122:	607b      	str	r3, [r7, #4]
 8011124:	f340 8084 	ble.w	8011230 <_scanf_float+0x27c>
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	3301      	adds	r3, #1
 801112c:	603b      	str	r3, [r7, #0]
 801112e:	e766      	b.n	8010ffe <_scanf_float+0x4a>
 8011130:	eb1a 0f05 	cmn.w	sl, r5
 8011134:	f47f af70 	bne.w	8011018 <_scanf_float+0x64>
 8011138:	6822      	ldr	r2, [r4, #0]
 801113a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801113e:	6022      	str	r2, [r4, #0]
 8011140:	f806 3b01 	strb.w	r3, [r6], #1
 8011144:	e7e4      	b.n	8011110 <_scanf_float+0x15c>
 8011146:	6822      	ldr	r2, [r4, #0]
 8011148:	0610      	lsls	r0, r2, #24
 801114a:	f57f af65 	bpl.w	8011018 <_scanf_float+0x64>
 801114e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011152:	e7f4      	b.n	801113e <_scanf_float+0x18a>
 8011154:	f1ba 0f00 	cmp.w	sl, #0
 8011158:	d10e      	bne.n	8011178 <_scanf_float+0x1c4>
 801115a:	f1b9 0f00 	cmp.w	r9, #0
 801115e:	d10e      	bne.n	801117e <_scanf_float+0x1ca>
 8011160:	6822      	ldr	r2, [r4, #0]
 8011162:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8011166:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801116a:	d108      	bne.n	801117e <_scanf_float+0x1ca>
 801116c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011170:	f04f 0a01 	mov.w	sl, #1
 8011174:	6022      	str	r2, [r4, #0]
 8011176:	e7e3      	b.n	8011140 <_scanf_float+0x18c>
 8011178:	f1ba 0f02 	cmp.w	sl, #2
 801117c:	d055      	beq.n	801122a <_scanf_float+0x276>
 801117e:	2d01      	cmp	r5, #1
 8011180:	d002      	beq.n	8011188 <_scanf_float+0x1d4>
 8011182:	2d04      	cmp	r5, #4
 8011184:	f47f af48 	bne.w	8011018 <_scanf_float+0x64>
 8011188:	3501      	adds	r5, #1
 801118a:	b2ed      	uxtb	r5, r5
 801118c:	e7d8      	b.n	8011140 <_scanf_float+0x18c>
 801118e:	f1ba 0f01 	cmp.w	sl, #1
 8011192:	f47f af41 	bne.w	8011018 <_scanf_float+0x64>
 8011196:	f04f 0a02 	mov.w	sl, #2
 801119a:	e7d1      	b.n	8011140 <_scanf_float+0x18c>
 801119c:	b97d      	cbnz	r5, 80111be <_scanf_float+0x20a>
 801119e:	f1b9 0f00 	cmp.w	r9, #0
 80111a2:	f47f af3c 	bne.w	801101e <_scanf_float+0x6a>
 80111a6:	6822      	ldr	r2, [r4, #0]
 80111a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80111ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80111b0:	f47f af39 	bne.w	8011026 <_scanf_float+0x72>
 80111b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80111b8:	2501      	movs	r5, #1
 80111ba:	6022      	str	r2, [r4, #0]
 80111bc:	e7c0      	b.n	8011140 <_scanf_float+0x18c>
 80111be:	2d03      	cmp	r5, #3
 80111c0:	d0e2      	beq.n	8011188 <_scanf_float+0x1d4>
 80111c2:	2d05      	cmp	r5, #5
 80111c4:	e7de      	b.n	8011184 <_scanf_float+0x1d0>
 80111c6:	2d02      	cmp	r5, #2
 80111c8:	f47f af26 	bne.w	8011018 <_scanf_float+0x64>
 80111cc:	2503      	movs	r5, #3
 80111ce:	e7b7      	b.n	8011140 <_scanf_float+0x18c>
 80111d0:	2d06      	cmp	r5, #6
 80111d2:	f47f af21 	bne.w	8011018 <_scanf_float+0x64>
 80111d6:	2507      	movs	r5, #7
 80111d8:	e7b2      	b.n	8011140 <_scanf_float+0x18c>
 80111da:	6822      	ldr	r2, [r4, #0]
 80111dc:	0591      	lsls	r1, r2, #22
 80111de:	f57f af1b 	bpl.w	8011018 <_scanf_float+0x64>
 80111e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80111e6:	6022      	str	r2, [r4, #0]
 80111e8:	f8cd 9004 	str.w	r9, [sp, #4]
 80111ec:	e7a8      	b.n	8011140 <_scanf_float+0x18c>
 80111ee:	6822      	ldr	r2, [r4, #0]
 80111f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80111f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80111f8:	d006      	beq.n	8011208 <_scanf_float+0x254>
 80111fa:	0550      	lsls	r0, r2, #21
 80111fc:	f57f af0c 	bpl.w	8011018 <_scanf_float+0x64>
 8011200:	f1b9 0f00 	cmp.w	r9, #0
 8011204:	f43f af0f 	beq.w	8011026 <_scanf_float+0x72>
 8011208:	0591      	lsls	r1, r2, #22
 801120a:	bf58      	it	pl
 801120c:	9901      	ldrpl	r1, [sp, #4]
 801120e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8011212:	bf58      	it	pl
 8011214:	eba9 0101 	subpl.w	r1, r9, r1
 8011218:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801121c:	f04f 0900 	mov.w	r9, #0
 8011220:	bf58      	it	pl
 8011222:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011226:	6022      	str	r2, [r4, #0]
 8011228:	e78a      	b.n	8011140 <_scanf_float+0x18c>
 801122a:	f04f 0a03 	mov.w	sl, #3
 801122e:	e787      	b.n	8011140 <_scanf_float+0x18c>
 8011230:	4639      	mov	r1, r7
 8011232:	4640      	mov	r0, r8
 8011234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011238:	4798      	blx	r3
 801123a:	2800      	cmp	r0, #0
 801123c:	f43f aedf 	beq.w	8010ffe <_scanf_float+0x4a>
 8011240:	e6ea      	b.n	8011018 <_scanf_float+0x64>
 8011242:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011246:	463a      	mov	r2, r7
 8011248:	4640      	mov	r0, r8
 801124a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801124e:	4798      	blx	r3
 8011250:	6923      	ldr	r3, [r4, #16]
 8011252:	3b01      	subs	r3, #1
 8011254:	6123      	str	r3, [r4, #16]
 8011256:	e6ec      	b.n	8011032 <_scanf_float+0x7e>
 8011258:	1e6b      	subs	r3, r5, #1
 801125a:	2b06      	cmp	r3, #6
 801125c:	d825      	bhi.n	80112aa <_scanf_float+0x2f6>
 801125e:	2d02      	cmp	r5, #2
 8011260:	d836      	bhi.n	80112d0 <_scanf_float+0x31c>
 8011262:	455e      	cmp	r6, fp
 8011264:	f67f aee8 	bls.w	8011038 <_scanf_float+0x84>
 8011268:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801126c:	463a      	mov	r2, r7
 801126e:	4640      	mov	r0, r8
 8011270:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011274:	4798      	blx	r3
 8011276:	6923      	ldr	r3, [r4, #16]
 8011278:	3b01      	subs	r3, #1
 801127a:	6123      	str	r3, [r4, #16]
 801127c:	e7f1      	b.n	8011262 <_scanf_float+0x2ae>
 801127e:	9802      	ldr	r0, [sp, #8]
 8011280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011284:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8011288:	463a      	mov	r2, r7
 801128a:	9002      	str	r0, [sp, #8]
 801128c:	4640      	mov	r0, r8
 801128e:	4798      	blx	r3
 8011290:	6923      	ldr	r3, [r4, #16]
 8011292:	3b01      	subs	r3, #1
 8011294:	6123      	str	r3, [r4, #16]
 8011296:	f10a 3aff 	add.w	sl, sl, #4294967295
 801129a:	fa5f fa8a 	uxtb.w	sl, sl
 801129e:	f1ba 0f02 	cmp.w	sl, #2
 80112a2:	d1ec      	bne.n	801127e <_scanf_float+0x2ca>
 80112a4:	3d03      	subs	r5, #3
 80112a6:	b2ed      	uxtb	r5, r5
 80112a8:	1b76      	subs	r6, r6, r5
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	05da      	lsls	r2, r3, #23
 80112ae:	d52f      	bpl.n	8011310 <_scanf_float+0x35c>
 80112b0:	055b      	lsls	r3, r3, #21
 80112b2:	d510      	bpl.n	80112d6 <_scanf_float+0x322>
 80112b4:	455e      	cmp	r6, fp
 80112b6:	f67f aebf 	bls.w	8011038 <_scanf_float+0x84>
 80112ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112be:	463a      	mov	r2, r7
 80112c0:	4640      	mov	r0, r8
 80112c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112c6:	4798      	blx	r3
 80112c8:	6923      	ldr	r3, [r4, #16]
 80112ca:	3b01      	subs	r3, #1
 80112cc:	6123      	str	r3, [r4, #16]
 80112ce:	e7f1      	b.n	80112b4 <_scanf_float+0x300>
 80112d0:	46aa      	mov	sl, r5
 80112d2:	9602      	str	r6, [sp, #8]
 80112d4:	e7df      	b.n	8011296 <_scanf_float+0x2e2>
 80112d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80112da:	6923      	ldr	r3, [r4, #16]
 80112dc:	2965      	cmp	r1, #101	; 0x65
 80112de:	f103 33ff 	add.w	r3, r3, #4294967295
 80112e2:	f106 35ff 	add.w	r5, r6, #4294967295
 80112e6:	6123      	str	r3, [r4, #16]
 80112e8:	d00c      	beq.n	8011304 <_scanf_float+0x350>
 80112ea:	2945      	cmp	r1, #69	; 0x45
 80112ec:	d00a      	beq.n	8011304 <_scanf_float+0x350>
 80112ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112f2:	463a      	mov	r2, r7
 80112f4:	4640      	mov	r0, r8
 80112f6:	4798      	blx	r3
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80112fe:	3b01      	subs	r3, #1
 8011300:	1eb5      	subs	r5, r6, #2
 8011302:	6123      	str	r3, [r4, #16]
 8011304:	463a      	mov	r2, r7
 8011306:	4640      	mov	r0, r8
 8011308:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801130c:	4798      	blx	r3
 801130e:	462e      	mov	r6, r5
 8011310:	6825      	ldr	r5, [r4, #0]
 8011312:	f015 0510 	ands.w	r5, r5, #16
 8011316:	d159      	bne.n	80113cc <_scanf_float+0x418>
 8011318:	7035      	strb	r5, [r6, #0]
 801131a:	6823      	ldr	r3, [r4, #0]
 801131c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8011320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011324:	d11c      	bne.n	8011360 <_scanf_float+0x3ac>
 8011326:	9b01      	ldr	r3, [sp, #4]
 8011328:	454b      	cmp	r3, r9
 801132a:	eba3 0209 	sub.w	r2, r3, r9
 801132e:	d124      	bne.n	801137a <_scanf_float+0x3c6>
 8011330:	2200      	movs	r2, #0
 8011332:	4659      	mov	r1, fp
 8011334:	4640      	mov	r0, r8
 8011336:	f000 ff6b 	bl	8012210 <_strtod_r>
 801133a:	f8d4 c000 	ldr.w	ip, [r4]
 801133e:	9b03      	ldr	r3, [sp, #12]
 8011340:	f01c 0f02 	tst.w	ip, #2
 8011344:	4606      	mov	r6, r0
 8011346:	460f      	mov	r7, r1
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	d021      	beq.n	8011390 <_scanf_float+0x3dc>
 801134c:	9903      	ldr	r1, [sp, #12]
 801134e:	1d1a      	adds	r2, r3, #4
 8011350:	600a      	str	r2, [r1, #0]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	e9c3 6700 	strd	r6, r7, [r3]
 8011358:	68e3      	ldr	r3, [r4, #12]
 801135a:	3301      	adds	r3, #1
 801135c:	60e3      	str	r3, [r4, #12]
 801135e:	e66c      	b.n	801103a <_scanf_float+0x86>
 8011360:	9b04      	ldr	r3, [sp, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d0e4      	beq.n	8011330 <_scanf_float+0x37c>
 8011366:	9905      	ldr	r1, [sp, #20]
 8011368:	230a      	movs	r3, #10
 801136a:	462a      	mov	r2, r5
 801136c:	4640      	mov	r0, r8
 801136e:	3101      	adds	r1, #1
 8011370:	f000 ffda 	bl	8012328 <_strtol_r>
 8011374:	9b04      	ldr	r3, [sp, #16]
 8011376:	9e05      	ldr	r6, [sp, #20]
 8011378:	1ac2      	subs	r2, r0, r3
 801137a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801137e:	429e      	cmp	r6, r3
 8011380:	bf28      	it	cs
 8011382:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8011386:	4630      	mov	r0, r6
 8011388:	4911      	ldr	r1, [pc, #68]	; (80113d0 <_scanf_float+0x41c>)
 801138a:	f000 f8c7 	bl	801151c <siprintf>
 801138e:	e7cf      	b.n	8011330 <_scanf_float+0x37c>
 8011390:	f01c 0f04 	tst.w	ip, #4
 8011394:	f103 0e04 	add.w	lr, r3, #4
 8011398:	d003      	beq.n	80113a2 <_scanf_float+0x3ee>
 801139a:	9903      	ldr	r1, [sp, #12]
 801139c:	f8c1 e000 	str.w	lr, [r1]
 80113a0:	e7d7      	b.n	8011352 <_scanf_float+0x39e>
 80113a2:	9a03      	ldr	r2, [sp, #12]
 80113a4:	f8c2 e000 	str.w	lr, [r2]
 80113a8:	f8d3 8000 	ldr.w	r8, [r3]
 80113ac:	4602      	mov	r2, r0
 80113ae:	460b      	mov	r3, r1
 80113b0:	f7f2 f904 	bl	80035bc <__aeabi_dcmpun>
 80113b4:	b128      	cbz	r0, 80113c2 <_scanf_float+0x40e>
 80113b6:	4807      	ldr	r0, [pc, #28]	; (80113d4 <_scanf_float+0x420>)
 80113b8:	f000 f8ac 	bl	8011514 <nanf>
 80113bc:	f8c8 0000 	str.w	r0, [r8]
 80113c0:	e7ca      	b.n	8011358 <_scanf_float+0x3a4>
 80113c2:	4630      	mov	r0, r6
 80113c4:	4639      	mov	r1, r7
 80113c6:	f7f2 f957 	bl	8003678 <__aeabi_d2f>
 80113ca:	e7f7      	b.n	80113bc <_scanf_float+0x408>
 80113cc:	2500      	movs	r5, #0
 80113ce:	e634      	b.n	801103a <_scanf_float+0x86>
 80113d0:	08016ff4 	.word	0x08016ff4
 80113d4:	08017410 	.word	0x08017410

080113d8 <iprintf>:
 80113d8:	b40f      	push	{r0, r1, r2, r3}
 80113da:	4b0a      	ldr	r3, [pc, #40]	; (8011404 <iprintf+0x2c>)
 80113dc:	b513      	push	{r0, r1, r4, lr}
 80113de:	681c      	ldr	r4, [r3, #0]
 80113e0:	b124      	cbz	r4, 80113ec <iprintf+0x14>
 80113e2:	69a3      	ldr	r3, [r4, #24]
 80113e4:	b913      	cbnz	r3, 80113ec <iprintf+0x14>
 80113e6:	4620      	mov	r0, r4
 80113e8:	f7ff f826 	bl	8010438 <__sinit>
 80113ec:	ab05      	add	r3, sp, #20
 80113ee:	4620      	mov	r0, r4
 80113f0:	9a04      	ldr	r2, [sp, #16]
 80113f2:	68a1      	ldr	r1, [r4, #8]
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	f003 fa65 	bl	80148c4 <_vfiprintf_r>
 80113fa:	b002      	add	sp, #8
 80113fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011400:	b004      	add	sp, #16
 8011402:	4770      	bx	lr
 8011404:	2000005c 	.word	0x2000005c

08011408 <_puts_r>:
 8011408:	b570      	push	{r4, r5, r6, lr}
 801140a:	460e      	mov	r6, r1
 801140c:	4605      	mov	r5, r0
 801140e:	b118      	cbz	r0, 8011418 <_puts_r+0x10>
 8011410:	6983      	ldr	r3, [r0, #24]
 8011412:	b90b      	cbnz	r3, 8011418 <_puts_r+0x10>
 8011414:	f7ff f810 	bl	8010438 <__sinit>
 8011418:	69ab      	ldr	r3, [r5, #24]
 801141a:	68ac      	ldr	r4, [r5, #8]
 801141c:	b913      	cbnz	r3, 8011424 <_puts_r+0x1c>
 801141e:	4628      	mov	r0, r5
 8011420:	f7ff f80a 	bl	8010438 <__sinit>
 8011424:	4b2c      	ldr	r3, [pc, #176]	; (80114d8 <_puts_r+0xd0>)
 8011426:	429c      	cmp	r4, r3
 8011428:	d120      	bne.n	801146c <_puts_r+0x64>
 801142a:	686c      	ldr	r4, [r5, #4]
 801142c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801142e:	07db      	lsls	r3, r3, #31
 8011430:	d405      	bmi.n	801143e <_puts_r+0x36>
 8011432:	89a3      	ldrh	r3, [r4, #12]
 8011434:	0598      	lsls	r0, r3, #22
 8011436:	d402      	bmi.n	801143e <_puts_r+0x36>
 8011438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801143a:	f7ff f8c0 	bl	80105be <__retarget_lock_acquire_recursive>
 801143e:	89a3      	ldrh	r3, [r4, #12]
 8011440:	0719      	lsls	r1, r3, #28
 8011442:	d51d      	bpl.n	8011480 <_puts_r+0x78>
 8011444:	6923      	ldr	r3, [r4, #16]
 8011446:	b1db      	cbz	r3, 8011480 <_puts_r+0x78>
 8011448:	3e01      	subs	r6, #1
 801144a:	68a3      	ldr	r3, [r4, #8]
 801144c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011450:	3b01      	subs	r3, #1
 8011452:	60a3      	str	r3, [r4, #8]
 8011454:	bb39      	cbnz	r1, 80114a6 <_puts_r+0x9e>
 8011456:	2b00      	cmp	r3, #0
 8011458:	da38      	bge.n	80114cc <_puts_r+0xc4>
 801145a:	4622      	mov	r2, r4
 801145c:	210a      	movs	r1, #10
 801145e:	4628      	mov	r0, r5
 8011460:	f000 ff64 	bl	801232c <__swbuf_r>
 8011464:	3001      	adds	r0, #1
 8011466:	d011      	beq.n	801148c <_puts_r+0x84>
 8011468:	250a      	movs	r5, #10
 801146a:	e011      	b.n	8011490 <_puts_r+0x88>
 801146c:	4b1b      	ldr	r3, [pc, #108]	; (80114dc <_puts_r+0xd4>)
 801146e:	429c      	cmp	r4, r3
 8011470:	d101      	bne.n	8011476 <_puts_r+0x6e>
 8011472:	68ac      	ldr	r4, [r5, #8]
 8011474:	e7da      	b.n	801142c <_puts_r+0x24>
 8011476:	4b1a      	ldr	r3, [pc, #104]	; (80114e0 <_puts_r+0xd8>)
 8011478:	429c      	cmp	r4, r3
 801147a:	bf08      	it	eq
 801147c:	68ec      	ldreq	r4, [r5, #12]
 801147e:	e7d5      	b.n	801142c <_puts_r+0x24>
 8011480:	4621      	mov	r1, r4
 8011482:	4628      	mov	r0, r5
 8011484:	f000 ffb6 	bl	80123f4 <__swsetup_r>
 8011488:	2800      	cmp	r0, #0
 801148a:	d0dd      	beq.n	8011448 <_puts_r+0x40>
 801148c:	f04f 35ff 	mov.w	r5, #4294967295
 8011490:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011492:	07da      	lsls	r2, r3, #31
 8011494:	d405      	bmi.n	80114a2 <_puts_r+0x9a>
 8011496:	89a3      	ldrh	r3, [r4, #12]
 8011498:	059b      	lsls	r3, r3, #22
 801149a:	d402      	bmi.n	80114a2 <_puts_r+0x9a>
 801149c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801149e:	f7ff f88f 	bl	80105c0 <__retarget_lock_release_recursive>
 80114a2:	4628      	mov	r0, r5
 80114a4:	bd70      	pop	{r4, r5, r6, pc}
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	da04      	bge.n	80114b4 <_puts_r+0xac>
 80114aa:	69a2      	ldr	r2, [r4, #24]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	dc06      	bgt.n	80114be <_puts_r+0xb6>
 80114b0:	290a      	cmp	r1, #10
 80114b2:	d004      	beq.n	80114be <_puts_r+0xb6>
 80114b4:	6823      	ldr	r3, [r4, #0]
 80114b6:	1c5a      	adds	r2, r3, #1
 80114b8:	6022      	str	r2, [r4, #0]
 80114ba:	7019      	strb	r1, [r3, #0]
 80114bc:	e7c5      	b.n	801144a <_puts_r+0x42>
 80114be:	4622      	mov	r2, r4
 80114c0:	4628      	mov	r0, r5
 80114c2:	f000 ff33 	bl	801232c <__swbuf_r>
 80114c6:	3001      	adds	r0, #1
 80114c8:	d1bf      	bne.n	801144a <_puts_r+0x42>
 80114ca:	e7df      	b.n	801148c <_puts_r+0x84>
 80114cc:	250a      	movs	r5, #10
 80114ce:	6823      	ldr	r3, [r4, #0]
 80114d0:	1c5a      	adds	r2, r3, #1
 80114d2:	6022      	str	r2, [r4, #0]
 80114d4:	701d      	strb	r5, [r3, #0]
 80114d6:	e7db      	b.n	8011490 <_puts_r+0x88>
 80114d8:	08016f7c 	.word	0x08016f7c
 80114dc:	08016f9c 	.word	0x08016f9c
 80114e0:	08016f5c 	.word	0x08016f5c

080114e4 <puts>:
 80114e4:	4b02      	ldr	r3, [pc, #8]	; (80114f0 <puts+0xc>)
 80114e6:	4601      	mov	r1, r0
 80114e8:	6818      	ldr	r0, [r3, #0]
 80114ea:	f7ff bf8d 	b.w	8011408 <_puts_r>
 80114ee:	bf00      	nop
 80114f0:	2000005c 	.word	0x2000005c

080114f4 <_sbrk_r>:
 80114f4:	b538      	push	{r3, r4, r5, lr}
 80114f6:	2300      	movs	r3, #0
 80114f8:	4d05      	ldr	r5, [pc, #20]	; (8011510 <_sbrk_r+0x1c>)
 80114fa:	4604      	mov	r4, r0
 80114fc:	4608      	mov	r0, r1
 80114fe:	602b      	str	r3, [r5, #0]
 8011500:	f7f3 fece 	bl	80052a0 <_sbrk>
 8011504:	1c43      	adds	r3, r0, #1
 8011506:	d102      	bne.n	801150e <_sbrk_r+0x1a>
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	b103      	cbz	r3, 801150e <_sbrk_r+0x1a>
 801150c:	6023      	str	r3, [r4, #0]
 801150e:	bd38      	pop	{r3, r4, r5, pc}
 8011510:	20001594 	.word	0x20001594

08011514 <nanf>:
 8011514:	4800      	ldr	r0, [pc, #0]	; (8011518 <nanf+0x4>)
 8011516:	4770      	bx	lr
 8011518:	7fc00000 	.word	0x7fc00000

0801151c <siprintf>:
 801151c:	b40e      	push	{r1, r2, r3}
 801151e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011522:	b500      	push	{lr}
 8011524:	b09c      	sub	sp, #112	; 0x70
 8011526:	ab1d      	add	r3, sp, #116	; 0x74
 8011528:	9002      	str	r0, [sp, #8]
 801152a:	9006      	str	r0, [sp, #24]
 801152c:	9107      	str	r1, [sp, #28]
 801152e:	9104      	str	r1, [sp, #16]
 8011530:	4808      	ldr	r0, [pc, #32]	; (8011554 <siprintf+0x38>)
 8011532:	4909      	ldr	r1, [pc, #36]	; (8011558 <siprintf+0x3c>)
 8011534:	f853 2b04 	ldr.w	r2, [r3], #4
 8011538:	9105      	str	r1, [sp, #20]
 801153a:	6800      	ldr	r0, [r0, #0]
 801153c:	a902      	add	r1, sp, #8
 801153e:	9301      	str	r3, [sp, #4]
 8011540:	f003 f898 	bl	8014674 <_svfiprintf_r>
 8011544:	2200      	movs	r2, #0
 8011546:	9b02      	ldr	r3, [sp, #8]
 8011548:	701a      	strb	r2, [r3, #0]
 801154a:	b01c      	add	sp, #112	; 0x70
 801154c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011550:	b003      	add	sp, #12
 8011552:	4770      	bx	lr
 8011554:	2000005c 	.word	0x2000005c
 8011558:	ffff0208 	.word	0xffff0208

0801155c <__sread>:
 801155c:	b510      	push	{r4, lr}
 801155e:	460c      	mov	r4, r1
 8011560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011564:	f003 fade 	bl	8014b24 <_read_r>
 8011568:	2800      	cmp	r0, #0
 801156a:	bfab      	itete	ge
 801156c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801156e:	89a3      	ldrhlt	r3, [r4, #12]
 8011570:	181b      	addge	r3, r3, r0
 8011572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011576:	bfac      	ite	ge
 8011578:	6563      	strge	r3, [r4, #84]	; 0x54
 801157a:	81a3      	strhlt	r3, [r4, #12]
 801157c:	bd10      	pop	{r4, pc}

0801157e <__swrite>:
 801157e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011582:	461f      	mov	r7, r3
 8011584:	898b      	ldrh	r3, [r1, #12]
 8011586:	4605      	mov	r5, r0
 8011588:	05db      	lsls	r3, r3, #23
 801158a:	460c      	mov	r4, r1
 801158c:	4616      	mov	r6, r2
 801158e:	d505      	bpl.n	801159c <__swrite+0x1e>
 8011590:	2302      	movs	r3, #2
 8011592:	2200      	movs	r2, #0
 8011594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011598:	f002 fa54 	bl	8013a44 <_lseek_r>
 801159c:	89a3      	ldrh	r3, [r4, #12]
 801159e:	4632      	mov	r2, r6
 80115a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115a4:	81a3      	strh	r3, [r4, #12]
 80115a6:	4628      	mov	r0, r5
 80115a8:	463b      	mov	r3, r7
 80115aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115b2:	f000 bf0d 	b.w	80123d0 <_write_r>

080115b6 <__sseek>:
 80115b6:	b510      	push	{r4, lr}
 80115b8:	460c      	mov	r4, r1
 80115ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115be:	f002 fa41 	bl	8013a44 <_lseek_r>
 80115c2:	1c43      	adds	r3, r0, #1
 80115c4:	89a3      	ldrh	r3, [r4, #12]
 80115c6:	bf15      	itete	ne
 80115c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80115ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80115ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80115d2:	81a3      	strheq	r3, [r4, #12]
 80115d4:	bf18      	it	ne
 80115d6:	81a3      	strhne	r3, [r4, #12]
 80115d8:	bd10      	pop	{r4, pc}

080115da <__sclose>:
 80115da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115de:	f000 bf77 	b.w	80124d0 <_close_r>

080115e2 <sulp>:
 80115e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115e6:	460f      	mov	r7, r1
 80115e8:	4690      	mov	r8, r2
 80115ea:	f002 fe45 	bl	8014278 <__ulp>
 80115ee:	4604      	mov	r4, r0
 80115f0:	460d      	mov	r5, r1
 80115f2:	f1b8 0f00 	cmp.w	r8, #0
 80115f6:	d011      	beq.n	801161c <sulp+0x3a>
 80115f8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80115fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011600:	2b00      	cmp	r3, #0
 8011602:	dd0b      	ble.n	801161c <sulp+0x3a>
 8011604:	2400      	movs	r4, #0
 8011606:	051b      	lsls	r3, r3, #20
 8011608:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801160c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011610:	4622      	mov	r2, r4
 8011612:	462b      	mov	r3, r5
 8011614:	f7f1 fd38 	bl	8003088 <__aeabi_dmul>
 8011618:	4604      	mov	r4, r0
 801161a:	460d      	mov	r5, r1
 801161c:	4620      	mov	r0, r4
 801161e:	4629      	mov	r1, r5
 8011620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011624:	0000      	movs	r0, r0
	...

08011628 <_strtod_l>:
 8011628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162c:	469b      	mov	fp, r3
 801162e:	2300      	movs	r3, #0
 8011630:	b0a1      	sub	sp, #132	; 0x84
 8011632:	931c      	str	r3, [sp, #112]	; 0x70
 8011634:	4ba1      	ldr	r3, [pc, #644]	; (80118bc <_strtod_l+0x294>)
 8011636:	4682      	mov	sl, r0
 8011638:	681f      	ldr	r7, [r3, #0]
 801163a:	460e      	mov	r6, r1
 801163c:	4638      	mov	r0, r7
 801163e:	9217      	str	r2, [sp, #92]	; 0x5c
 8011640:	f7f1 fb5e 	bl	8002d00 <strlen>
 8011644:	f04f 0800 	mov.w	r8, #0
 8011648:	4604      	mov	r4, r0
 801164a:	f04f 0900 	mov.w	r9, #0
 801164e:	961b      	str	r6, [sp, #108]	; 0x6c
 8011650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011652:	781a      	ldrb	r2, [r3, #0]
 8011654:	2a2b      	cmp	r2, #43	; 0x2b
 8011656:	d04c      	beq.n	80116f2 <_strtod_l+0xca>
 8011658:	d83a      	bhi.n	80116d0 <_strtod_l+0xa8>
 801165a:	2a0d      	cmp	r2, #13
 801165c:	d833      	bhi.n	80116c6 <_strtod_l+0x9e>
 801165e:	2a08      	cmp	r2, #8
 8011660:	d833      	bhi.n	80116ca <_strtod_l+0xa2>
 8011662:	2a00      	cmp	r2, #0
 8011664:	d03d      	beq.n	80116e2 <_strtod_l+0xba>
 8011666:	2300      	movs	r3, #0
 8011668:	930c      	str	r3, [sp, #48]	; 0x30
 801166a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801166c:	782b      	ldrb	r3, [r5, #0]
 801166e:	2b30      	cmp	r3, #48	; 0x30
 8011670:	f040 80af 	bne.w	80117d2 <_strtod_l+0x1aa>
 8011674:	786b      	ldrb	r3, [r5, #1]
 8011676:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801167a:	2b58      	cmp	r3, #88	; 0x58
 801167c:	d16c      	bne.n	8011758 <_strtod_l+0x130>
 801167e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011680:	4650      	mov	r0, sl
 8011682:	9301      	str	r3, [sp, #4]
 8011684:	ab1c      	add	r3, sp, #112	; 0x70
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	4a8d      	ldr	r2, [pc, #564]	; (80118c0 <_strtod_l+0x298>)
 801168a:	f8cd b008 	str.w	fp, [sp, #8]
 801168e:	ab1d      	add	r3, sp, #116	; 0x74
 8011690:	a91b      	add	r1, sp, #108	; 0x6c
 8011692:	f001 fed5 	bl	8013440 <__gethex>
 8011696:	f010 0607 	ands.w	r6, r0, #7
 801169a:	4604      	mov	r4, r0
 801169c:	d005      	beq.n	80116aa <_strtod_l+0x82>
 801169e:	2e06      	cmp	r6, #6
 80116a0:	d129      	bne.n	80116f6 <_strtod_l+0xce>
 80116a2:	2300      	movs	r3, #0
 80116a4:	3501      	adds	r5, #1
 80116a6:	951b      	str	r5, [sp, #108]	; 0x6c
 80116a8:	930c      	str	r3, [sp, #48]	; 0x30
 80116aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	f040 8596 	bne.w	80121de <_strtod_l+0xbb6>
 80116b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116b4:	b1d3      	cbz	r3, 80116ec <_strtod_l+0xc4>
 80116b6:	4642      	mov	r2, r8
 80116b8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80116bc:	4610      	mov	r0, r2
 80116be:	4619      	mov	r1, r3
 80116c0:	b021      	add	sp, #132	; 0x84
 80116c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116c6:	2a20      	cmp	r2, #32
 80116c8:	d1cd      	bne.n	8011666 <_strtod_l+0x3e>
 80116ca:	3301      	adds	r3, #1
 80116cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80116ce:	e7bf      	b.n	8011650 <_strtod_l+0x28>
 80116d0:	2a2d      	cmp	r2, #45	; 0x2d
 80116d2:	d1c8      	bne.n	8011666 <_strtod_l+0x3e>
 80116d4:	2201      	movs	r2, #1
 80116d6:	920c      	str	r2, [sp, #48]	; 0x30
 80116d8:	1c5a      	adds	r2, r3, #1
 80116da:	921b      	str	r2, [sp, #108]	; 0x6c
 80116dc:	785b      	ldrb	r3, [r3, #1]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d1c3      	bne.n	801166a <_strtod_l+0x42>
 80116e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80116e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f040 8577 	bne.w	80121da <_strtod_l+0xbb2>
 80116ec:	4642      	mov	r2, r8
 80116ee:	464b      	mov	r3, r9
 80116f0:	e7e4      	b.n	80116bc <_strtod_l+0x94>
 80116f2:	2200      	movs	r2, #0
 80116f4:	e7ef      	b.n	80116d6 <_strtod_l+0xae>
 80116f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80116f8:	b13a      	cbz	r2, 801170a <_strtod_l+0xe2>
 80116fa:	2135      	movs	r1, #53	; 0x35
 80116fc:	a81e      	add	r0, sp, #120	; 0x78
 80116fe:	f002 febf 	bl	8014480 <__copybits>
 8011702:	4650      	mov	r0, sl
 8011704:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011706:	f002 fa87 	bl	8013c18 <_Bfree>
 801170a:	3e01      	subs	r6, #1
 801170c:	2e05      	cmp	r6, #5
 801170e:	d807      	bhi.n	8011720 <_strtod_l+0xf8>
 8011710:	e8df f006 	tbb	[pc, r6]
 8011714:	1d180b0e 	.word	0x1d180b0e
 8011718:	030e      	.short	0x030e
 801171a:	f04f 0900 	mov.w	r9, #0
 801171e:	46c8      	mov	r8, r9
 8011720:	0721      	lsls	r1, r4, #28
 8011722:	d5c2      	bpl.n	80116aa <_strtod_l+0x82>
 8011724:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8011728:	e7bf      	b.n	80116aa <_strtod_l+0x82>
 801172a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 801172e:	e7f7      	b.n	8011720 <_strtod_l+0xf8>
 8011730:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011732:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8011736:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801173a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801173e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8011742:	e7ed      	b.n	8011720 <_strtod_l+0xf8>
 8011744:	f04f 0800 	mov.w	r8, #0
 8011748:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80118c4 <_strtod_l+0x29c>
 801174c:	e7e8      	b.n	8011720 <_strtod_l+0xf8>
 801174e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8011752:	f04f 38ff 	mov.w	r8, #4294967295
 8011756:	e7e3      	b.n	8011720 <_strtod_l+0xf8>
 8011758:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801175a:	1c5a      	adds	r2, r3, #1
 801175c:	921b      	str	r2, [sp, #108]	; 0x6c
 801175e:	785b      	ldrb	r3, [r3, #1]
 8011760:	2b30      	cmp	r3, #48	; 0x30
 8011762:	d0f9      	beq.n	8011758 <_strtod_l+0x130>
 8011764:	2b00      	cmp	r3, #0
 8011766:	d0a0      	beq.n	80116aa <_strtod_l+0x82>
 8011768:	2301      	movs	r3, #1
 801176a:	9307      	str	r3, [sp, #28]
 801176c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801176e:	220a      	movs	r2, #10
 8011770:	9308      	str	r3, [sp, #32]
 8011772:	2300      	movs	r3, #0
 8011774:	469b      	mov	fp, r3
 8011776:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801177a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801177c:	7805      	ldrb	r5, [r0, #0]
 801177e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8011782:	b2d9      	uxtb	r1, r3
 8011784:	2909      	cmp	r1, #9
 8011786:	d926      	bls.n	80117d6 <_strtod_l+0x1ae>
 8011788:	4622      	mov	r2, r4
 801178a:	4639      	mov	r1, r7
 801178c:	f003 f9e2 	bl	8014b54 <strncmp>
 8011790:	2800      	cmp	r0, #0
 8011792:	d032      	beq.n	80117fa <_strtod_l+0x1d2>
 8011794:	2000      	movs	r0, #0
 8011796:	462b      	mov	r3, r5
 8011798:	465c      	mov	r4, fp
 801179a:	4602      	mov	r2, r0
 801179c:	9004      	str	r0, [sp, #16]
 801179e:	2b65      	cmp	r3, #101	; 0x65
 80117a0:	d001      	beq.n	80117a6 <_strtod_l+0x17e>
 80117a2:	2b45      	cmp	r3, #69	; 0x45
 80117a4:	d113      	bne.n	80117ce <_strtod_l+0x1a6>
 80117a6:	b91c      	cbnz	r4, 80117b0 <_strtod_l+0x188>
 80117a8:	9b07      	ldr	r3, [sp, #28]
 80117aa:	4303      	orrs	r3, r0
 80117ac:	d099      	beq.n	80116e2 <_strtod_l+0xba>
 80117ae:	2400      	movs	r4, #0
 80117b0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80117b2:	1c73      	adds	r3, r6, #1
 80117b4:	931b      	str	r3, [sp, #108]	; 0x6c
 80117b6:	7873      	ldrb	r3, [r6, #1]
 80117b8:	2b2b      	cmp	r3, #43	; 0x2b
 80117ba:	d078      	beq.n	80118ae <_strtod_l+0x286>
 80117bc:	2b2d      	cmp	r3, #45	; 0x2d
 80117be:	d07b      	beq.n	80118b8 <_strtod_l+0x290>
 80117c0:	2700      	movs	r7, #0
 80117c2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80117c6:	2909      	cmp	r1, #9
 80117c8:	f240 8082 	bls.w	80118d0 <_strtod_l+0x2a8>
 80117cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80117ce:	2500      	movs	r5, #0
 80117d0:	e09e      	b.n	8011910 <_strtod_l+0x2e8>
 80117d2:	2300      	movs	r3, #0
 80117d4:	e7c9      	b.n	801176a <_strtod_l+0x142>
 80117d6:	f1bb 0f08 	cmp.w	fp, #8
 80117da:	bfd5      	itete	le
 80117dc:	9906      	ldrle	r1, [sp, #24]
 80117de:	9905      	ldrgt	r1, [sp, #20]
 80117e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80117e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80117e8:	f100 0001 	add.w	r0, r0, #1
 80117ec:	bfd4      	ite	le
 80117ee:	9306      	strle	r3, [sp, #24]
 80117f0:	9305      	strgt	r3, [sp, #20]
 80117f2:	f10b 0b01 	add.w	fp, fp, #1
 80117f6:	901b      	str	r0, [sp, #108]	; 0x6c
 80117f8:	e7bf      	b.n	801177a <_strtod_l+0x152>
 80117fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117fc:	191a      	adds	r2, r3, r4
 80117fe:	921b      	str	r2, [sp, #108]	; 0x6c
 8011800:	5d1b      	ldrb	r3, [r3, r4]
 8011802:	f1bb 0f00 	cmp.w	fp, #0
 8011806:	d036      	beq.n	8011876 <_strtod_l+0x24e>
 8011808:	465c      	mov	r4, fp
 801180a:	9004      	str	r0, [sp, #16]
 801180c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011810:	2a09      	cmp	r2, #9
 8011812:	d912      	bls.n	801183a <_strtod_l+0x212>
 8011814:	2201      	movs	r2, #1
 8011816:	e7c2      	b.n	801179e <_strtod_l+0x176>
 8011818:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801181a:	3001      	adds	r0, #1
 801181c:	1c5a      	adds	r2, r3, #1
 801181e:	921b      	str	r2, [sp, #108]	; 0x6c
 8011820:	785b      	ldrb	r3, [r3, #1]
 8011822:	2b30      	cmp	r3, #48	; 0x30
 8011824:	d0f8      	beq.n	8011818 <_strtod_l+0x1f0>
 8011826:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801182a:	2a08      	cmp	r2, #8
 801182c:	f200 84dc 	bhi.w	80121e8 <_strtod_l+0xbc0>
 8011830:	9004      	str	r0, [sp, #16]
 8011832:	2000      	movs	r0, #0
 8011834:	4604      	mov	r4, r0
 8011836:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011838:	9208      	str	r2, [sp, #32]
 801183a:	3b30      	subs	r3, #48	; 0x30
 801183c:	f100 0201 	add.w	r2, r0, #1
 8011840:	d013      	beq.n	801186a <_strtod_l+0x242>
 8011842:	9904      	ldr	r1, [sp, #16]
 8011844:	1905      	adds	r5, r0, r4
 8011846:	4411      	add	r1, r2
 8011848:	9104      	str	r1, [sp, #16]
 801184a:	4622      	mov	r2, r4
 801184c:	210a      	movs	r1, #10
 801184e:	42aa      	cmp	r2, r5
 8011850:	d113      	bne.n	801187a <_strtod_l+0x252>
 8011852:	1822      	adds	r2, r4, r0
 8011854:	2a08      	cmp	r2, #8
 8011856:	f104 0401 	add.w	r4, r4, #1
 801185a:	4404      	add	r4, r0
 801185c:	dc1b      	bgt.n	8011896 <_strtod_l+0x26e>
 801185e:	220a      	movs	r2, #10
 8011860:	9906      	ldr	r1, [sp, #24]
 8011862:	fb02 3301 	mla	r3, r2, r1, r3
 8011866:	9306      	str	r3, [sp, #24]
 8011868:	2200      	movs	r2, #0
 801186a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801186c:	4610      	mov	r0, r2
 801186e:	1c59      	adds	r1, r3, #1
 8011870:	911b      	str	r1, [sp, #108]	; 0x6c
 8011872:	785b      	ldrb	r3, [r3, #1]
 8011874:	e7ca      	b.n	801180c <_strtod_l+0x1e4>
 8011876:	4658      	mov	r0, fp
 8011878:	e7d3      	b.n	8011822 <_strtod_l+0x1fa>
 801187a:	2a08      	cmp	r2, #8
 801187c:	dc04      	bgt.n	8011888 <_strtod_l+0x260>
 801187e:	9f06      	ldr	r7, [sp, #24]
 8011880:	434f      	muls	r7, r1
 8011882:	9706      	str	r7, [sp, #24]
 8011884:	3201      	adds	r2, #1
 8011886:	e7e2      	b.n	801184e <_strtod_l+0x226>
 8011888:	1c57      	adds	r7, r2, #1
 801188a:	2f10      	cmp	r7, #16
 801188c:	bfde      	ittt	le
 801188e:	9f05      	ldrle	r7, [sp, #20]
 8011890:	434f      	mulle	r7, r1
 8011892:	9705      	strle	r7, [sp, #20]
 8011894:	e7f6      	b.n	8011884 <_strtod_l+0x25c>
 8011896:	2c10      	cmp	r4, #16
 8011898:	bfdf      	itttt	le
 801189a:	220a      	movle	r2, #10
 801189c:	9905      	ldrle	r1, [sp, #20]
 801189e:	fb02 3301 	mlale	r3, r2, r1, r3
 80118a2:	9305      	strle	r3, [sp, #20]
 80118a4:	e7e0      	b.n	8011868 <_strtod_l+0x240>
 80118a6:	2300      	movs	r3, #0
 80118a8:	2201      	movs	r2, #1
 80118aa:	9304      	str	r3, [sp, #16]
 80118ac:	e77c      	b.n	80117a8 <_strtod_l+0x180>
 80118ae:	2700      	movs	r7, #0
 80118b0:	1cb3      	adds	r3, r6, #2
 80118b2:	931b      	str	r3, [sp, #108]	; 0x6c
 80118b4:	78b3      	ldrb	r3, [r6, #2]
 80118b6:	e784      	b.n	80117c2 <_strtod_l+0x19a>
 80118b8:	2701      	movs	r7, #1
 80118ba:	e7f9      	b.n	80118b0 <_strtod_l+0x288>
 80118bc:	08017250 	.word	0x08017250
 80118c0:	08016ffc 	.word	0x08016ffc
 80118c4:	7ff00000 	.word	0x7ff00000
 80118c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118ca:	1c59      	adds	r1, r3, #1
 80118cc:	911b      	str	r1, [sp, #108]	; 0x6c
 80118ce:	785b      	ldrb	r3, [r3, #1]
 80118d0:	2b30      	cmp	r3, #48	; 0x30
 80118d2:	d0f9      	beq.n	80118c8 <_strtod_l+0x2a0>
 80118d4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80118d8:	2908      	cmp	r1, #8
 80118da:	f63f af78 	bhi.w	80117ce <_strtod_l+0x1a6>
 80118de:	f04f 0e0a 	mov.w	lr, #10
 80118e2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80118e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118e8:	9309      	str	r3, [sp, #36]	; 0x24
 80118ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80118ec:	1c59      	adds	r1, r3, #1
 80118ee:	911b      	str	r1, [sp, #108]	; 0x6c
 80118f0:	785b      	ldrb	r3, [r3, #1]
 80118f2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80118f6:	2d09      	cmp	r5, #9
 80118f8:	d935      	bls.n	8011966 <_strtod_l+0x33e>
 80118fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80118fc:	1b49      	subs	r1, r1, r5
 80118fe:	2908      	cmp	r1, #8
 8011900:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8011904:	dc02      	bgt.n	801190c <_strtod_l+0x2e4>
 8011906:	4565      	cmp	r5, ip
 8011908:	bfa8      	it	ge
 801190a:	4665      	movge	r5, ip
 801190c:	b107      	cbz	r7, 8011910 <_strtod_l+0x2e8>
 801190e:	426d      	negs	r5, r5
 8011910:	2c00      	cmp	r4, #0
 8011912:	d14c      	bne.n	80119ae <_strtod_l+0x386>
 8011914:	9907      	ldr	r1, [sp, #28]
 8011916:	4301      	orrs	r1, r0
 8011918:	f47f aec7 	bne.w	80116aa <_strtod_l+0x82>
 801191c:	2a00      	cmp	r2, #0
 801191e:	f47f aee0 	bne.w	80116e2 <_strtod_l+0xba>
 8011922:	2b69      	cmp	r3, #105	; 0x69
 8011924:	d026      	beq.n	8011974 <_strtod_l+0x34c>
 8011926:	dc23      	bgt.n	8011970 <_strtod_l+0x348>
 8011928:	2b49      	cmp	r3, #73	; 0x49
 801192a:	d023      	beq.n	8011974 <_strtod_l+0x34c>
 801192c:	2b4e      	cmp	r3, #78	; 0x4e
 801192e:	f47f aed8 	bne.w	80116e2 <_strtod_l+0xba>
 8011932:	499c      	ldr	r1, [pc, #624]	; (8011ba4 <_strtod_l+0x57c>)
 8011934:	a81b      	add	r0, sp, #108	; 0x6c
 8011936:	f001 ffd1 	bl	80138dc <__match>
 801193a:	2800      	cmp	r0, #0
 801193c:	f43f aed1 	beq.w	80116e2 <_strtod_l+0xba>
 8011940:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011942:	781b      	ldrb	r3, [r3, #0]
 8011944:	2b28      	cmp	r3, #40	; 0x28
 8011946:	d12c      	bne.n	80119a2 <_strtod_l+0x37a>
 8011948:	4997      	ldr	r1, [pc, #604]	; (8011ba8 <_strtod_l+0x580>)
 801194a:	aa1e      	add	r2, sp, #120	; 0x78
 801194c:	a81b      	add	r0, sp, #108	; 0x6c
 801194e:	f001 ffd9 	bl	8013904 <__hexnan>
 8011952:	2805      	cmp	r0, #5
 8011954:	d125      	bne.n	80119a2 <_strtod_l+0x37a>
 8011956:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011958:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 801195c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011964:	e6a1      	b.n	80116aa <_strtod_l+0x82>
 8011966:	fb0e 3c0c 	mla	ip, lr, ip, r3
 801196a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 801196e:	e7bc      	b.n	80118ea <_strtod_l+0x2c2>
 8011970:	2b6e      	cmp	r3, #110	; 0x6e
 8011972:	e7dc      	b.n	801192e <_strtod_l+0x306>
 8011974:	498d      	ldr	r1, [pc, #564]	; (8011bac <_strtod_l+0x584>)
 8011976:	a81b      	add	r0, sp, #108	; 0x6c
 8011978:	f001 ffb0 	bl	80138dc <__match>
 801197c:	2800      	cmp	r0, #0
 801197e:	f43f aeb0 	beq.w	80116e2 <_strtod_l+0xba>
 8011982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011984:	498a      	ldr	r1, [pc, #552]	; (8011bb0 <_strtod_l+0x588>)
 8011986:	3b01      	subs	r3, #1
 8011988:	a81b      	add	r0, sp, #108	; 0x6c
 801198a:	931b      	str	r3, [sp, #108]	; 0x6c
 801198c:	f001 ffa6 	bl	80138dc <__match>
 8011990:	b910      	cbnz	r0, 8011998 <_strtod_l+0x370>
 8011992:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011994:	3301      	adds	r3, #1
 8011996:	931b      	str	r3, [sp, #108]	; 0x6c
 8011998:	f04f 0800 	mov.w	r8, #0
 801199c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8011bc0 <_strtod_l+0x598>
 80119a0:	e683      	b.n	80116aa <_strtod_l+0x82>
 80119a2:	4884      	ldr	r0, [pc, #528]	; (8011bb4 <_strtod_l+0x58c>)
 80119a4:	f003 f8d0 	bl	8014b48 <nan>
 80119a8:	4680      	mov	r8, r0
 80119aa:	4689      	mov	r9, r1
 80119ac:	e67d      	b.n	80116aa <_strtod_l+0x82>
 80119ae:	9b04      	ldr	r3, [sp, #16]
 80119b0:	f1bb 0f00 	cmp.w	fp, #0
 80119b4:	bf08      	it	eq
 80119b6:	46a3      	moveq	fp, r4
 80119b8:	1aeb      	subs	r3, r5, r3
 80119ba:	2c10      	cmp	r4, #16
 80119bc:	9806      	ldr	r0, [sp, #24]
 80119be:	4626      	mov	r6, r4
 80119c0:	9307      	str	r3, [sp, #28]
 80119c2:	bfa8      	it	ge
 80119c4:	2610      	movge	r6, #16
 80119c6:	f7f1 fae5 	bl	8002f94 <__aeabi_ui2d>
 80119ca:	2c09      	cmp	r4, #9
 80119cc:	4680      	mov	r8, r0
 80119ce:	4689      	mov	r9, r1
 80119d0:	dd13      	ble.n	80119fa <_strtod_l+0x3d2>
 80119d2:	4b79      	ldr	r3, [pc, #484]	; (8011bb8 <_strtod_l+0x590>)
 80119d4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80119d8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80119dc:	f7f1 fb54 	bl	8003088 <__aeabi_dmul>
 80119e0:	4680      	mov	r8, r0
 80119e2:	9805      	ldr	r0, [sp, #20]
 80119e4:	4689      	mov	r9, r1
 80119e6:	f7f1 fad5 	bl	8002f94 <__aeabi_ui2d>
 80119ea:	4602      	mov	r2, r0
 80119ec:	460b      	mov	r3, r1
 80119ee:	4640      	mov	r0, r8
 80119f0:	4649      	mov	r1, r9
 80119f2:	f7f1 f993 	bl	8002d1c <__adddf3>
 80119f6:	4680      	mov	r8, r0
 80119f8:	4689      	mov	r9, r1
 80119fa:	2c0f      	cmp	r4, #15
 80119fc:	dc36      	bgt.n	8011a6c <_strtod_l+0x444>
 80119fe:	9b07      	ldr	r3, [sp, #28]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	f43f ae52 	beq.w	80116aa <_strtod_l+0x82>
 8011a06:	dd22      	ble.n	8011a4e <_strtod_l+0x426>
 8011a08:	2b16      	cmp	r3, #22
 8011a0a:	dc09      	bgt.n	8011a20 <_strtod_l+0x3f8>
 8011a0c:	4c6a      	ldr	r4, [pc, #424]	; (8011bb8 <_strtod_l+0x590>)
 8011a0e:	4642      	mov	r2, r8
 8011a10:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8011a14:	464b      	mov	r3, r9
 8011a16:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011a1a:	f7f1 fb35 	bl	8003088 <__aeabi_dmul>
 8011a1e:	e7c3      	b.n	80119a8 <_strtod_l+0x380>
 8011a20:	9a07      	ldr	r2, [sp, #28]
 8011a22:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011a26:	4293      	cmp	r3, r2
 8011a28:	db20      	blt.n	8011a6c <_strtod_l+0x444>
 8011a2a:	4d63      	ldr	r5, [pc, #396]	; (8011bb8 <_strtod_l+0x590>)
 8011a2c:	f1c4 040f 	rsb	r4, r4, #15
 8011a30:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011a34:	4642      	mov	r2, r8
 8011a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a3a:	464b      	mov	r3, r9
 8011a3c:	f7f1 fb24 	bl	8003088 <__aeabi_dmul>
 8011a40:	9b07      	ldr	r3, [sp, #28]
 8011a42:	1b1c      	subs	r4, r3, r4
 8011a44:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011a48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a4c:	e7e5      	b.n	8011a1a <_strtod_l+0x3f2>
 8011a4e:	9b07      	ldr	r3, [sp, #28]
 8011a50:	3316      	adds	r3, #22
 8011a52:	db0b      	blt.n	8011a6c <_strtod_l+0x444>
 8011a54:	9b04      	ldr	r3, [sp, #16]
 8011a56:	4a58      	ldr	r2, [pc, #352]	; (8011bb8 <_strtod_l+0x590>)
 8011a58:	1b5d      	subs	r5, r3, r5
 8011a5a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011a5e:	4640      	mov	r0, r8
 8011a60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a64:	4649      	mov	r1, r9
 8011a66:	f7f1 fc39 	bl	80032dc <__aeabi_ddiv>
 8011a6a:	e79d      	b.n	80119a8 <_strtod_l+0x380>
 8011a6c:	9b07      	ldr	r3, [sp, #28]
 8011a6e:	1ba6      	subs	r6, r4, r6
 8011a70:	441e      	add	r6, r3
 8011a72:	2e00      	cmp	r6, #0
 8011a74:	dd71      	ble.n	8011b5a <_strtod_l+0x532>
 8011a76:	f016 030f 	ands.w	r3, r6, #15
 8011a7a:	d00a      	beq.n	8011a92 <_strtod_l+0x46a>
 8011a7c:	494e      	ldr	r1, [pc, #312]	; (8011bb8 <_strtod_l+0x590>)
 8011a7e:	4642      	mov	r2, r8
 8011a80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a88:	464b      	mov	r3, r9
 8011a8a:	f7f1 fafd 	bl	8003088 <__aeabi_dmul>
 8011a8e:	4680      	mov	r8, r0
 8011a90:	4689      	mov	r9, r1
 8011a92:	f036 060f 	bics.w	r6, r6, #15
 8011a96:	d050      	beq.n	8011b3a <_strtod_l+0x512>
 8011a98:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8011a9c:	dd27      	ble.n	8011aee <_strtod_l+0x4c6>
 8011a9e:	f04f 0b00 	mov.w	fp, #0
 8011aa2:	f8cd b010 	str.w	fp, [sp, #16]
 8011aa6:	f8cd b020 	str.w	fp, [sp, #32]
 8011aaa:	f8cd b018 	str.w	fp, [sp, #24]
 8011aae:	2322      	movs	r3, #34	; 0x22
 8011ab0:	f04f 0800 	mov.w	r8, #0
 8011ab4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8011bc0 <_strtod_l+0x598>
 8011ab8:	f8ca 3000 	str.w	r3, [sl]
 8011abc:	9b08      	ldr	r3, [sp, #32]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	f43f adf3 	beq.w	80116aa <_strtod_l+0x82>
 8011ac4:	4650      	mov	r0, sl
 8011ac6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011ac8:	f002 f8a6 	bl	8013c18 <_Bfree>
 8011acc:	4650      	mov	r0, sl
 8011ace:	9906      	ldr	r1, [sp, #24]
 8011ad0:	f002 f8a2 	bl	8013c18 <_Bfree>
 8011ad4:	4650      	mov	r0, sl
 8011ad6:	9904      	ldr	r1, [sp, #16]
 8011ad8:	f002 f89e 	bl	8013c18 <_Bfree>
 8011adc:	4650      	mov	r0, sl
 8011ade:	9908      	ldr	r1, [sp, #32]
 8011ae0:	f002 f89a 	bl	8013c18 <_Bfree>
 8011ae4:	4659      	mov	r1, fp
 8011ae6:	4650      	mov	r0, sl
 8011ae8:	f002 f896 	bl	8013c18 <_Bfree>
 8011aec:	e5dd      	b.n	80116aa <_strtod_l+0x82>
 8011aee:	2300      	movs	r3, #0
 8011af0:	4640      	mov	r0, r8
 8011af2:	4649      	mov	r1, r9
 8011af4:	461f      	mov	r7, r3
 8011af6:	1136      	asrs	r6, r6, #4
 8011af8:	2e01      	cmp	r6, #1
 8011afa:	dc21      	bgt.n	8011b40 <_strtod_l+0x518>
 8011afc:	b10b      	cbz	r3, 8011b02 <_strtod_l+0x4da>
 8011afe:	4680      	mov	r8, r0
 8011b00:	4689      	mov	r9, r1
 8011b02:	4b2e      	ldr	r3, [pc, #184]	; (8011bbc <_strtod_l+0x594>)
 8011b04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8011b08:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011b0c:	4642      	mov	r2, r8
 8011b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011b12:	464b      	mov	r3, r9
 8011b14:	f7f1 fab8 	bl	8003088 <__aeabi_dmul>
 8011b18:	4b29      	ldr	r3, [pc, #164]	; (8011bc0 <_strtod_l+0x598>)
 8011b1a:	460a      	mov	r2, r1
 8011b1c:	400b      	ands	r3, r1
 8011b1e:	4929      	ldr	r1, [pc, #164]	; (8011bc4 <_strtod_l+0x59c>)
 8011b20:	4680      	mov	r8, r0
 8011b22:	428b      	cmp	r3, r1
 8011b24:	d8bb      	bhi.n	8011a9e <_strtod_l+0x476>
 8011b26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011b2a:	428b      	cmp	r3, r1
 8011b2c:	bf86      	itte	hi
 8011b2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8011b32:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8011bc8 <_strtod_l+0x5a0>
 8011b36:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	9305      	str	r3, [sp, #20]
 8011b3e:	e07e      	b.n	8011c3e <_strtod_l+0x616>
 8011b40:	07f2      	lsls	r2, r6, #31
 8011b42:	d507      	bpl.n	8011b54 <_strtod_l+0x52c>
 8011b44:	4b1d      	ldr	r3, [pc, #116]	; (8011bbc <_strtod_l+0x594>)
 8011b46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4e:	f7f1 fa9b 	bl	8003088 <__aeabi_dmul>
 8011b52:	2301      	movs	r3, #1
 8011b54:	3701      	adds	r7, #1
 8011b56:	1076      	asrs	r6, r6, #1
 8011b58:	e7ce      	b.n	8011af8 <_strtod_l+0x4d0>
 8011b5a:	d0ee      	beq.n	8011b3a <_strtod_l+0x512>
 8011b5c:	4276      	negs	r6, r6
 8011b5e:	f016 020f 	ands.w	r2, r6, #15
 8011b62:	d00a      	beq.n	8011b7a <_strtod_l+0x552>
 8011b64:	4b14      	ldr	r3, [pc, #80]	; (8011bb8 <_strtod_l+0x590>)
 8011b66:	4640      	mov	r0, r8
 8011b68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b6c:	4649      	mov	r1, r9
 8011b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b72:	f7f1 fbb3 	bl	80032dc <__aeabi_ddiv>
 8011b76:	4680      	mov	r8, r0
 8011b78:	4689      	mov	r9, r1
 8011b7a:	1136      	asrs	r6, r6, #4
 8011b7c:	d0dd      	beq.n	8011b3a <_strtod_l+0x512>
 8011b7e:	2e1f      	cmp	r6, #31
 8011b80:	dd24      	ble.n	8011bcc <_strtod_l+0x5a4>
 8011b82:	f04f 0b00 	mov.w	fp, #0
 8011b86:	f8cd b010 	str.w	fp, [sp, #16]
 8011b8a:	f8cd b020 	str.w	fp, [sp, #32]
 8011b8e:	f8cd b018 	str.w	fp, [sp, #24]
 8011b92:	2322      	movs	r3, #34	; 0x22
 8011b94:	f04f 0800 	mov.w	r8, #0
 8011b98:	f04f 0900 	mov.w	r9, #0
 8011b9c:	f8ca 3000 	str.w	r3, [sl]
 8011ba0:	e78c      	b.n	8011abc <_strtod_l+0x494>
 8011ba2:	bf00      	nop
 8011ba4:	08016fcd 	.word	0x08016fcd
 8011ba8:	08017010 	.word	0x08017010
 8011bac:	08016fc5 	.word	0x08016fc5
 8011bb0:	08017154 	.word	0x08017154
 8011bb4:	08017410 	.word	0x08017410
 8011bb8:	080172f0 	.word	0x080172f0
 8011bbc:	080172c8 	.word	0x080172c8
 8011bc0:	7ff00000 	.word	0x7ff00000
 8011bc4:	7ca00000 	.word	0x7ca00000
 8011bc8:	7fefffff 	.word	0x7fefffff
 8011bcc:	f016 0310 	ands.w	r3, r6, #16
 8011bd0:	bf18      	it	ne
 8011bd2:	236a      	movne	r3, #106	; 0x6a
 8011bd4:	4640      	mov	r0, r8
 8011bd6:	9305      	str	r3, [sp, #20]
 8011bd8:	4649      	mov	r1, r9
 8011bda:	2300      	movs	r3, #0
 8011bdc:	4fb2      	ldr	r7, [pc, #712]	; (8011ea8 <_strtod_l+0x880>)
 8011bde:	07f2      	lsls	r2, r6, #31
 8011be0:	d504      	bpl.n	8011bec <_strtod_l+0x5c4>
 8011be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011be6:	f7f1 fa4f 	bl	8003088 <__aeabi_dmul>
 8011bea:	2301      	movs	r3, #1
 8011bec:	1076      	asrs	r6, r6, #1
 8011bee:	f107 0708 	add.w	r7, r7, #8
 8011bf2:	d1f4      	bne.n	8011bde <_strtod_l+0x5b6>
 8011bf4:	b10b      	cbz	r3, 8011bfa <_strtod_l+0x5d2>
 8011bf6:	4680      	mov	r8, r0
 8011bf8:	4689      	mov	r9, r1
 8011bfa:	9b05      	ldr	r3, [sp, #20]
 8011bfc:	b1bb      	cbz	r3, 8011c2e <_strtod_l+0x606>
 8011bfe:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8011c02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	4649      	mov	r1, r9
 8011c0a:	dd10      	ble.n	8011c2e <_strtod_l+0x606>
 8011c0c:	2b1f      	cmp	r3, #31
 8011c0e:	f340 812b 	ble.w	8011e68 <_strtod_l+0x840>
 8011c12:	2b34      	cmp	r3, #52	; 0x34
 8011c14:	bfd8      	it	le
 8011c16:	f04f 32ff 	movle.w	r2, #4294967295
 8011c1a:	f04f 0800 	mov.w	r8, #0
 8011c1e:	bfcf      	iteee	gt
 8011c20:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011c24:	3b20      	suble	r3, #32
 8011c26:	fa02 f303 	lslle.w	r3, r2, r3
 8011c2a:	ea03 0901 	andle.w	r9, r3, r1
 8011c2e:	2200      	movs	r2, #0
 8011c30:	2300      	movs	r3, #0
 8011c32:	4640      	mov	r0, r8
 8011c34:	4649      	mov	r1, r9
 8011c36:	f7f1 fc8f 	bl	8003558 <__aeabi_dcmpeq>
 8011c3a:	2800      	cmp	r0, #0
 8011c3c:	d1a1      	bne.n	8011b82 <_strtod_l+0x55a>
 8011c3e:	9b06      	ldr	r3, [sp, #24]
 8011c40:	465a      	mov	r2, fp
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	4650      	mov	r0, sl
 8011c46:	4623      	mov	r3, r4
 8011c48:	9908      	ldr	r1, [sp, #32]
 8011c4a:	f002 f851 	bl	8013cf0 <__s2b>
 8011c4e:	9008      	str	r0, [sp, #32]
 8011c50:	2800      	cmp	r0, #0
 8011c52:	f43f af24 	beq.w	8011a9e <_strtod_l+0x476>
 8011c56:	9b04      	ldr	r3, [sp, #16]
 8011c58:	f04f 0b00 	mov.w	fp, #0
 8011c5c:	1b5d      	subs	r5, r3, r5
 8011c5e:	9b07      	ldr	r3, [sp, #28]
 8011c60:	f8cd b010 	str.w	fp, [sp, #16]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	bfb4      	ite	lt
 8011c68:	462b      	movlt	r3, r5
 8011c6a:	2300      	movge	r3, #0
 8011c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8011c6e:	9b07      	ldr	r3, [sp, #28]
 8011c70:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011c74:	9316      	str	r3, [sp, #88]	; 0x58
 8011c76:	9b08      	ldr	r3, [sp, #32]
 8011c78:	4650      	mov	r0, sl
 8011c7a:	6859      	ldr	r1, [r3, #4]
 8011c7c:	f001 ff8c 	bl	8013b98 <_Balloc>
 8011c80:	9006      	str	r0, [sp, #24]
 8011c82:	2800      	cmp	r0, #0
 8011c84:	f43f af13 	beq.w	8011aae <_strtod_l+0x486>
 8011c88:	9b08      	ldr	r3, [sp, #32]
 8011c8a:	300c      	adds	r0, #12
 8011c8c:	691a      	ldr	r2, [r3, #16]
 8011c8e:	f103 010c 	add.w	r1, r3, #12
 8011c92:	3202      	adds	r2, #2
 8011c94:	0092      	lsls	r2, r2, #2
 8011c96:	f7fe fca2 	bl	80105de <memcpy>
 8011c9a:	ab1e      	add	r3, sp, #120	; 0x78
 8011c9c:	9301      	str	r3, [sp, #4]
 8011c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8011ca0:	9300      	str	r3, [sp, #0]
 8011ca2:	4642      	mov	r2, r8
 8011ca4:	464b      	mov	r3, r9
 8011ca6:	4650      	mov	r0, sl
 8011ca8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8011cac:	f002 fb5e 	bl	801436c <__d2b>
 8011cb0:	901c      	str	r0, [sp, #112]	; 0x70
 8011cb2:	2800      	cmp	r0, #0
 8011cb4:	f43f aefb 	beq.w	8011aae <_strtod_l+0x486>
 8011cb8:	2101      	movs	r1, #1
 8011cba:	4650      	mov	r0, sl
 8011cbc:	f002 f8b0 	bl	8013e20 <__i2b>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	9004      	str	r0, [sp, #16]
 8011cc4:	2800      	cmp	r0, #0
 8011cc6:	f43f aef2 	beq.w	8011aae <_strtod_l+0x486>
 8011cca:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8011ccc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011cce:	2d00      	cmp	r5, #0
 8011cd0:	bfab      	itete	ge
 8011cd2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011cd4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011cd6:	18ee      	addge	r6, r5, r3
 8011cd8:	1b5c      	sublt	r4, r3, r5
 8011cda:	9b05      	ldr	r3, [sp, #20]
 8011cdc:	bfa8      	it	ge
 8011cde:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8011ce0:	eba5 0503 	sub.w	r5, r5, r3
 8011ce4:	4415      	add	r5, r2
 8011ce6:	4b71      	ldr	r3, [pc, #452]	; (8011eac <_strtod_l+0x884>)
 8011ce8:	f105 35ff 	add.w	r5, r5, #4294967295
 8011cec:	bfb8      	it	lt
 8011cee:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8011cf0:	429d      	cmp	r5, r3
 8011cf2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011cf6:	f280 80c9 	bge.w	8011e8c <_strtod_l+0x864>
 8011cfa:	1b5b      	subs	r3, r3, r5
 8011cfc:	2b1f      	cmp	r3, #31
 8011cfe:	f04f 0701 	mov.w	r7, #1
 8011d02:	eba2 0203 	sub.w	r2, r2, r3
 8011d06:	f300 80b6 	bgt.w	8011e76 <_strtod_l+0x84e>
 8011d0a:	2500      	movs	r5, #0
 8011d0c:	fa07 f303 	lsl.w	r3, r7, r3
 8011d10:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d12:	18b7      	adds	r7, r6, r2
 8011d14:	9b05      	ldr	r3, [sp, #20]
 8011d16:	42be      	cmp	r6, r7
 8011d18:	4414      	add	r4, r2
 8011d1a:	441c      	add	r4, r3
 8011d1c:	4633      	mov	r3, r6
 8011d1e:	bfa8      	it	ge
 8011d20:	463b      	movge	r3, r7
 8011d22:	42a3      	cmp	r3, r4
 8011d24:	bfa8      	it	ge
 8011d26:	4623      	movge	r3, r4
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bfc2      	ittt	gt
 8011d2c:	1aff      	subgt	r7, r7, r3
 8011d2e:	1ae4      	subgt	r4, r4, r3
 8011d30:	1af6      	subgt	r6, r6, r3
 8011d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	dd17      	ble.n	8011d68 <_strtod_l+0x740>
 8011d38:	461a      	mov	r2, r3
 8011d3a:	4650      	mov	r0, sl
 8011d3c:	9904      	ldr	r1, [sp, #16]
 8011d3e:	f002 f929 	bl	8013f94 <__pow5mult>
 8011d42:	9004      	str	r0, [sp, #16]
 8011d44:	2800      	cmp	r0, #0
 8011d46:	f43f aeb2 	beq.w	8011aae <_strtod_l+0x486>
 8011d4a:	4601      	mov	r1, r0
 8011d4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011d4e:	4650      	mov	r0, sl
 8011d50:	f002 f87c 	bl	8013e4c <__multiply>
 8011d54:	9009      	str	r0, [sp, #36]	; 0x24
 8011d56:	2800      	cmp	r0, #0
 8011d58:	f43f aea9 	beq.w	8011aae <_strtod_l+0x486>
 8011d5c:	4650      	mov	r0, sl
 8011d5e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d60:	f001 ff5a 	bl	8013c18 <_Bfree>
 8011d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d66:	931c      	str	r3, [sp, #112]	; 0x70
 8011d68:	2f00      	cmp	r7, #0
 8011d6a:	f300 8093 	bgt.w	8011e94 <_strtod_l+0x86c>
 8011d6e:	9b07      	ldr	r3, [sp, #28]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dd08      	ble.n	8011d86 <_strtod_l+0x75e>
 8011d74:	4650      	mov	r0, sl
 8011d76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011d78:	9906      	ldr	r1, [sp, #24]
 8011d7a:	f002 f90b 	bl	8013f94 <__pow5mult>
 8011d7e:	9006      	str	r0, [sp, #24]
 8011d80:	2800      	cmp	r0, #0
 8011d82:	f43f ae94 	beq.w	8011aae <_strtod_l+0x486>
 8011d86:	2c00      	cmp	r4, #0
 8011d88:	dd08      	ble.n	8011d9c <_strtod_l+0x774>
 8011d8a:	4622      	mov	r2, r4
 8011d8c:	4650      	mov	r0, sl
 8011d8e:	9906      	ldr	r1, [sp, #24]
 8011d90:	f002 f95a 	bl	8014048 <__lshift>
 8011d94:	9006      	str	r0, [sp, #24]
 8011d96:	2800      	cmp	r0, #0
 8011d98:	f43f ae89 	beq.w	8011aae <_strtod_l+0x486>
 8011d9c:	2e00      	cmp	r6, #0
 8011d9e:	dd08      	ble.n	8011db2 <_strtod_l+0x78a>
 8011da0:	4632      	mov	r2, r6
 8011da2:	4650      	mov	r0, sl
 8011da4:	9904      	ldr	r1, [sp, #16]
 8011da6:	f002 f94f 	bl	8014048 <__lshift>
 8011daa:	9004      	str	r0, [sp, #16]
 8011dac:	2800      	cmp	r0, #0
 8011dae:	f43f ae7e 	beq.w	8011aae <_strtod_l+0x486>
 8011db2:	4650      	mov	r0, sl
 8011db4:	9a06      	ldr	r2, [sp, #24]
 8011db6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011db8:	f002 f9ce 	bl	8014158 <__mdiff>
 8011dbc:	4683      	mov	fp, r0
 8011dbe:	2800      	cmp	r0, #0
 8011dc0:	f43f ae75 	beq.w	8011aae <_strtod_l+0x486>
 8011dc4:	2400      	movs	r4, #0
 8011dc6:	68c3      	ldr	r3, [r0, #12]
 8011dc8:	9904      	ldr	r1, [sp, #16]
 8011dca:	60c4      	str	r4, [r0, #12]
 8011dcc:	930d      	str	r3, [sp, #52]	; 0x34
 8011dce:	f002 f9a7 	bl	8014120 <__mcmp>
 8011dd2:	42a0      	cmp	r0, r4
 8011dd4:	da70      	bge.n	8011eb8 <_strtod_l+0x890>
 8011dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dd8:	ea53 0308 	orrs.w	r3, r3, r8
 8011ddc:	f040 8096 	bne.w	8011f0c <_strtod_l+0x8e4>
 8011de0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	f040 8091 	bne.w	8011f0c <_strtod_l+0x8e4>
 8011dea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011dee:	0d1b      	lsrs	r3, r3, #20
 8011df0:	051b      	lsls	r3, r3, #20
 8011df2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011df6:	f240 8089 	bls.w	8011f0c <_strtod_l+0x8e4>
 8011dfa:	f8db 3014 	ldr.w	r3, [fp, #20]
 8011dfe:	b923      	cbnz	r3, 8011e0a <_strtod_l+0x7e2>
 8011e00:	f8db 3010 	ldr.w	r3, [fp, #16]
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	f340 8081 	ble.w	8011f0c <_strtod_l+0x8e4>
 8011e0a:	4659      	mov	r1, fp
 8011e0c:	2201      	movs	r2, #1
 8011e0e:	4650      	mov	r0, sl
 8011e10:	f002 f91a 	bl	8014048 <__lshift>
 8011e14:	9904      	ldr	r1, [sp, #16]
 8011e16:	4683      	mov	fp, r0
 8011e18:	f002 f982 	bl	8014120 <__mcmp>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	dd75      	ble.n	8011f0c <_strtod_l+0x8e4>
 8011e20:	9905      	ldr	r1, [sp, #20]
 8011e22:	464b      	mov	r3, r9
 8011e24:	4a22      	ldr	r2, [pc, #136]	; (8011eb0 <_strtod_l+0x888>)
 8011e26:	2900      	cmp	r1, #0
 8011e28:	f000 8091 	beq.w	8011f4e <_strtod_l+0x926>
 8011e2c:	ea02 0109 	and.w	r1, r2, r9
 8011e30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011e34:	f300 808b 	bgt.w	8011f4e <_strtod_l+0x926>
 8011e38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011e3c:	f77f aea9 	ble.w	8011b92 <_strtod_l+0x56a>
 8011e40:	2300      	movs	r3, #0
 8011e42:	4a1c      	ldr	r2, [pc, #112]	; (8011eb4 <_strtod_l+0x88c>)
 8011e44:	4640      	mov	r0, r8
 8011e46:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011e4a:	4649      	mov	r1, r9
 8011e4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011e50:	f7f1 f91a 	bl	8003088 <__aeabi_dmul>
 8011e54:	460b      	mov	r3, r1
 8011e56:	4303      	orrs	r3, r0
 8011e58:	bf08      	it	eq
 8011e5a:	2322      	moveq	r3, #34	; 0x22
 8011e5c:	4680      	mov	r8, r0
 8011e5e:	4689      	mov	r9, r1
 8011e60:	bf08      	it	eq
 8011e62:	f8ca 3000 	streq.w	r3, [sl]
 8011e66:	e62d      	b.n	8011ac4 <_strtod_l+0x49c>
 8011e68:	f04f 32ff 	mov.w	r2, #4294967295
 8011e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8011e70:	ea03 0808 	and.w	r8, r3, r8
 8011e74:	e6db      	b.n	8011c2e <_strtod_l+0x606>
 8011e76:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8011e7a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8011e7e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8011e82:	35e2      	adds	r5, #226	; 0xe2
 8011e84:	fa07 f505 	lsl.w	r5, r7, r5
 8011e88:	970f      	str	r7, [sp, #60]	; 0x3c
 8011e8a:	e742      	b.n	8011d12 <_strtod_l+0x6ea>
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	2500      	movs	r5, #0
 8011e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e92:	e73e      	b.n	8011d12 <_strtod_l+0x6ea>
 8011e94:	463a      	mov	r2, r7
 8011e96:	4650      	mov	r0, sl
 8011e98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011e9a:	f002 f8d5 	bl	8014048 <__lshift>
 8011e9e:	901c      	str	r0, [sp, #112]	; 0x70
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	f47f af64 	bne.w	8011d6e <_strtod_l+0x746>
 8011ea6:	e602      	b.n	8011aae <_strtod_l+0x486>
 8011ea8:	08017028 	.word	0x08017028
 8011eac:	fffffc02 	.word	0xfffffc02
 8011eb0:	7ff00000 	.word	0x7ff00000
 8011eb4:	39500000 	.word	0x39500000
 8011eb8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8011ebc:	d166      	bne.n	8011f8c <_strtod_l+0x964>
 8011ebe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ec0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ec4:	b35a      	cbz	r2, 8011f1e <_strtod_l+0x8f6>
 8011ec6:	4a9c      	ldr	r2, [pc, #624]	; (8012138 <_strtod_l+0xb10>)
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	d12c      	bne.n	8011f26 <_strtod_l+0x8fe>
 8011ecc:	9b05      	ldr	r3, [sp, #20]
 8011ece:	4640      	mov	r0, r8
 8011ed0:	b303      	cbz	r3, 8011f14 <_strtod_l+0x8ec>
 8011ed2:	464b      	mov	r3, r9
 8011ed4:	4a99      	ldr	r2, [pc, #612]	; (801213c <_strtod_l+0xb14>)
 8011ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8011eda:	401a      	ands	r2, r3
 8011edc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011ee0:	d81b      	bhi.n	8011f1a <_strtod_l+0x8f2>
 8011ee2:	0d12      	lsrs	r2, r2, #20
 8011ee4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8011eec:	4298      	cmp	r0, r3
 8011eee:	d11a      	bne.n	8011f26 <_strtod_l+0x8fe>
 8011ef0:	4b93      	ldr	r3, [pc, #588]	; (8012140 <_strtod_l+0xb18>)
 8011ef2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d102      	bne.n	8011efe <_strtod_l+0x8d6>
 8011ef8:	3001      	adds	r0, #1
 8011efa:	f43f add8 	beq.w	8011aae <_strtod_l+0x486>
 8011efe:	f04f 0800 	mov.w	r8, #0
 8011f02:	4b8e      	ldr	r3, [pc, #568]	; (801213c <_strtod_l+0xb14>)
 8011f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f06:	401a      	ands	r2, r3
 8011f08:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8011f0c:	9b05      	ldr	r3, [sp, #20]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d196      	bne.n	8011e40 <_strtod_l+0x818>
 8011f12:	e5d7      	b.n	8011ac4 <_strtod_l+0x49c>
 8011f14:	f04f 33ff 	mov.w	r3, #4294967295
 8011f18:	e7e8      	b.n	8011eec <_strtod_l+0x8c4>
 8011f1a:	460b      	mov	r3, r1
 8011f1c:	e7e6      	b.n	8011eec <_strtod_l+0x8c4>
 8011f1e:	ea53 0308 	orrs.w	r3, r3, r8
 8011f22:	f43f af7d 	beq.w	8011e20 <_strtod_l+0x7f8>
 8011f26:	b1e5      	cbz	r5, 8011f62 <_strtod_l+0x93a>
 8011f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f2a:	421d      	tst	r5, r3
 8011f2c:	d0ee      	beq.n	8011f0c <_strtod_l+0x8e4>
 8011f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f30:	4640      	mov	r0, r8
 8011f32:	4649      	mov	r1, r9
 8011f34:	9a05      	ldr	r2, [sp, #20]
 8011f36:	b1c3      	cbz	r3, 8011f6a <_strtod_l+0x942>
 8011f38:	f7ff fb53 	bl	80115e2 <sulp>
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	460b      	mov	r3, r1
 8011f40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011f44:	f7f0 feea 	bl	8002d1c <__adddf3>
 8011f48:	4680      	mov	r8, r0
 8011f4a:	4689      	mov	r9, r1
 8011f4c:	e7de      	b.n	8011f0c <_strtod_l+0x8e4>
 8011f4e:	4013      	ands	r3, r2
 8011f50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011f54:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8011f58:	f04f 38ff 	mov.w	r8, #4294967295
 8011f5c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011f60:	e7d4      	b.n	8011f0c <_strtod_l+0x8e4>
 8011f62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f64:	ea13 0f08 	tst.w	r3, r8
 8011f68:	e7e0      	b.n	8011f2c <_strtod_l+0x904>
 8011f6a:	f7ff fb3a 	bl	80115e2 <sulp>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	460b      	mov	r3, r1
 8011f72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011f76:	f7f0 fecf 	bl	8002d18 <__aeabi_dsub>
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	4680      	mov	r8, r0
 8011f80:	4689      	mov	r9, r1
 8011f82:	f7f1 fae9 	bl	8003558 <__aeabi_dcmpeq>
 8011f86:	2800      	cmp	r0, #0
 8011f88:	d0c0      	beq.n	8011f0c <_strtod_l+0x8e4>
 8011f8a:	e602      	b.n	8011b92 <_strtod_l+0x56a>
 8011f8c:	4658      	mov	r0, fp
 8011f8e:	9904      	ldr	r1, [sp, #16]
 8011f90:	f002 fa48 	bl	8014424 <__ratio>
 8011f94:	2200      	movs	r2, #0
 8011f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011f9a:	4606      	mov	r6, r0
 8011f9c:	460f      	mov	r7, r1
 8011f9e:	f7f1 faef 	bl	8003580 <__aeabi_dcmple>
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	d075      	beq.n	8012092 <_strtod_l+0xa6a>
 8011fa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d047      	beq.n	801203c <_strtod_l+0xa14>
 8011fac:	2600      	movs	r6, #0
 8011fae:	4f65      	ldr	r7, [pc, #404]	; (8012144 <_strtod_l+0xb1c>)
 8011fb0:	4d64      	ldr	r5, [pc, #400]	; (8012144 <_strtod_l+0xb1c>)
 8011fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011fb8:	0d1b      	lsrs	r3, r3, #20
 8011fba:	051b      	lsls	r3, r3, #20
 8011fbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fc0:	4b61      	ldr	r3, [pc, #388]	; (8012148 <_strtod_l+0xb20>)
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	f040 80c8 	bne.w	8012158 <_strtod_l+0xb30>
 8011fc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011fcc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fd2:	4640      	mov	r0, r8
 8011fd4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8011fd8:	4649      	mov	r1, r9
 8011fda:	f002 f94d 	bl	8014278 <__ulp>
 8011fde:	4602      	mov	r2, r0
 8011fe0:	460b      	mov	r3, r1
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	4639      	mov	r1, r7
 8011fe6:	f7f1 f84f 	bl	8003088 <__aeabi_dmul>
 8011fea:	4642      	mov	r2, r8
 8011fec:	464b      	mov	r3, r9
 8011fee:	f7f0 fe95 	bl	8002d1c <__adddf3>
 8011ff2:	460b      	mov	r3, r1
 8011ff4:	4951      	ldr	r1, [pc, #324]	; (801213c <_strtod_l+0xb14>)
 8011ff6:	4a55      	ldr	r2, [pc, #340]	; (801214c <_strtod_l+0xb24>)
 8011ff8:	4019      	ands	r1, r3
 8011ffa:	4291      	cmp	r1, r2
 8011ffc:	4680      	mov	r8, r0
 8011ffe:	d95e      	bls.n	80120be <_strtod_l+0xa96>
 8012000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012002:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012006:	4293      	cmp	r3, r2
 8012008:	d103      	bne.n	8012012 <_strtod_l+0x9ea>
 801200a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801200c:	3301      	adds	r3, #1
 801200e:	f43f ad4e 	beq.w	8011aae <_strtod_l+0x486>
 8012012:	f04f 38ff 	mov.w	r8, #4294967295
 8012016:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8012140 <_strtod_l+0xb18>
 801201a:	4650      	mov	r0, sl
 801201c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801201e:	f001 fdfb 	bl	8013c18 <_Bfree>
 8012022:	4650      	mov	r0, sl
 8012024:	9906      	ldr	r1, [sp, #24]
 8012026:	f001 fdf7 	bl	8013c18 <_Bfree>
 801202a:	4650      	mov	r0, sl
 801202c:	9904      	ldr	r1, [sp, #16]
 801202e:	f001 fdf3 	bl	8013c18 <_Bfree>
 8012032:	4659      	mov	r1, fp
 8012034:	4650      	mov	r0, sl
 8012036:	f001 fdef 	bl	8013c18 <_Bfree>
 801203a:	e61c      	b.n	8011c76 <_strtod_l+0x64e>
 801203c:	f1b8 0f00 	cmp.w	r8, #0
 8012040:	d119      	bne.n	8012076 <_strtod_l+0xa4e>
 8012042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012048:	b9e3      	cbnz	r3, 8012084 <_strtod_l+0xa5c>
 801204a:	2200      	movs	r2, #0
 801204c:	4630      	mov	r0, r6
 801204e:	4639      	mov	r1, r7
 8012050:	4b3c      	ldr	r3, [pc, #240]	; (8012144 <_strtod_l+0xb1c>)
 8012052:	f7f1 fa8b 	bl	800356c <__aeabi_dcmplt>
 8012056:	b9c8      	cbnz	r0, 801208c <_strtod_l+0xa64>
 8012058:	2200      	movs	r2, #0
 801205a:	4630      	mov	r0, r6
 801205c:	4639      	mov	r1, r7
 801205e:	4b3c      	ldr	r3, [pc, #240]	; (8012150 <_strtod_l+0xb28>)
 8012060:	f7f1 f812 	bl	8003088 <__aeabi_dmul>
 8012064:	4604      	mov	r4, r0
 8012066:	460d      	mov	r5, r1
 8012068:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801206c:	9418      	str	r4, [sp, #96]	; 0x60
 801206e:	9319      	str	r3, [sp, #100]	; 0x64
 8012070:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8012074:	e79d      	b.n	8011fb2 <_strtod_l+0x98a>
 8012076:	f1b8 0f01 	cmp.w	r8, #1
 801207a:	d103      	bne.n	8012084 <_strtod_l+0xa5c>
 801207c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801207e:	2b00      	cmp	r3, #0
 8012080:	f43f ad87 	beq.w	8011b92 <_strtod_l+0x56a>
 8012084:	2600      	movs	r6, #0
 8012086:	2400      	movs	r4, #0
 8012088:	4f32      	ldr	r7, [pc, #200]	; (8012154 <_strtod_l+0xb2c>)
 801208a:	e791      	b.n	8011fb0 <_strtod_l+0x988>
 801208c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801208e:	4d30      	ldr	r5, [pc, #192]	; (8012150 <_strtod_l+0xb28>)
 8012090:	e7ea      	b.n	8012068 <_strtod_l+0xa40>
 8012092:	4b2f      	ldr	r3, [pc, #188]	; (8012150 <_strtod_l+0xb28>)
 8012094:	2200      	movs	r2, #0
 8012096:	4630      	mov	r0, r6
 8012098:	4639      	mov	r1, r7
 801209a:	f7f0 fff5 	bl	8003088 <__aeabi_dmul>
 801209e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80120a0:	4604      	mov	r4, r0
 80120a2:	460d      	mov	r5, r1
 80120a4:	b933      	cbnz	r3, 80120b4 <_strtod_l+0xa8c>
 80120a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80120aa:	9010      	str	r0, [sp, #64]	; 0x40
 80120ac:	9311      	str	r3, [sp, #68]	; 0x44
 80120ae:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80120b2:	e77e      	b.n	8011fb2 <_strtod_l+0x98a>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80120bc:	e7f7      	b.n	80120ae <_strtod_l+0xa86>
 80120be:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80120c2:	9b05      	ldr	r3, [sp, #20]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d1a8      	bne.n	801201a <_strtod_l+0x9f2>
 80120c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80120ce:	0d1b      	lsrs	r3, r3, #20
 80120d0:	051b      	lsls	r3, r3, #20
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d1a1      	bne.n	801201a <_strtod_l+0x9f2>
 80120d6:	4620      	mov	r0, r4
 80120d8:	4629      	mov	r1, r5
 80120da:	f7f1 feb1 	bl	8003e40 <__aeabi_d2lz>
 80120de:	f7f0 ffa5 	bl	800302c <__aeabi_l2d>
 80120e2:	4602      	mov	r2, r0
 80120e4:	460b      	mov	r3, r1
 80120e6:	4620      	mov	r0, r4
 80120e8:	4629      	mov	r1, r5
 80120ea:	f7f0 fe15 	bl	8002d18 <__aeabi_dsub>
 80120ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80120f4:	ea43 0308 	orr.w	r3, r3, r8
 80120f8:	4313      	orrs	r3, r2
 80120fa:	4604      	mov	r4, r0
 80120fc:	460d      	mov	r5, r1
 80120fe:	d066      	beq.n	80121ce <_strtod_l+0xba6>
 8012100:	a309      	add	r3, pc, #36	; (adr r3, 8012128 <_strtod_l+0xb00>)
 8012102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012106:	f7f1 fa31 	bl	800356c <__aeabi_dcmplt>
 801210a:	2800      	cmp	r0, #0
 801210c:	f47f acda 	bne.w	8011ac4 <_strtod_l+0x49c>
 8012110:	a307      	add	r3, pc, #28	; (adr r3, 8012130 <_strtod_l+0xb08>)
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	4620      	mov	r0, r4
 8012118:	4629      	mov	r1, r5
 801211a:	f7f1 fa45 	bl	80035a8 <__aeabi_dcmpgt>
 801211e:	2800      	cmp	r0, #0
 8012120:	f43f af7b 	beq.w	801201a <_strtod_l+0x9f2>
 8012124:	e4ce      	b.n	8011ac4 <_strtod_l+0x49c>
 8012126:	bf00      	nop
 8012128:	94a03595 	.word	0x94a03595
 801212c:	3fdfffff 	.word	0x3fdfffff
 8012130:	35afe535 	.word	0x35afe535
 8012134:	3fe00000 	.word	0x3fe00000
 8012138:	000fffff 	.word	0x000fffff
 801213c:	7ff00000 	.word	0x7ff00000
 8012140:	7fefffff 	.word	0x7fefffff
 8012144:	3ff00000 	.word	0x3ff00000
 8012148:	7fe00000 	.word	0x7fe00000
 801214c:	7c9fffff 	.word	0x7c9fffff
 8012150:	3fe00000 	.word	0x3fe00000
 8012154:	bff00000 	.word	0xbff00000
 8012158:	9b05      	ldr	r3, [sp, #20]
 801215a:	b313      	cbz	r3, 80121a2 <_strtod_l+0xb7a>
 801215c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801215e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012162:	d81e      	bhi.n	80121a2 <_strtod_l+0xb7a>
 8012164:	a326      	add	r3, pc, #152	; (adr r3, 8012200 <_strtod_l+0xbd8>)
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	4620      	mov	r0, r4
 801216c:	4629      	mov	r1, r5
 801216e:	f7f1 fa07 	bl	8003580 <__aeabi_dcmple>
 8012172:	b190      	cbz	r0, 801219a <_strtod_l+0xb72>
 8012174:	4629      	mov	r1, r5
 8012176:	4620      	mov	r0, r4
 8012178:	f7f1 fa5e 	bl	8003638 <__aeabi_d2uiz>
 801217c:	2801      	cmp	r0, #1
 801217e:	bf38      	it	cc
 8012180:	2001      	movcc	r0, #1
 8012182:	f7f0 ff07 	bl	8002f94 <__aeabi_ui2d>
 8012186:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012188:	4604      	mov	r4, r0
 801218a:	460d      	mov	r5, r1
 801218c:	b9d3      	cbnz	r3, 80121c4 <_strtod_l+0xb9c>
 801218e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012192:	9012      	str	r0, [sp, #72]	; 0x48
 8012194:	9313      	str	r3, [sp, #76]	; 0x4c
 8012196:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801219a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801219c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80121a0:	1a9f      	subs	r7, r3, r2
 80121a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80121a6:	f002 f867 	bl	8014278 <__ulp>
 80121aa:	4602      	mov	r2, r0
 80121ac:	460b      	mov	r3, r1
 80121ae:	4630      	mov	r0, r6
 80121b0:	4639      	mov	r1, r7
 80121b2:	f7f0 ff69 	bl	8003088 <__aeabi_dmul>
 80121b6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80121ba:	f7f0 fdaf 	bl	8002d1c <__adddf3>
 80121be:	4680      	mov	r8, r0
 80121c0:	4689      	mov	r9, r1
 80121c2:	e77e      	b.n	80120c2 <_strtod_l+0xa9a>
 80121c4:	4602      	mov	r2, r0
 80121c6:	460b      	mov	r3, r1
 80121c8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80121cc:	e7e3      	b.n	8012196 <_strtod_l+0xb6e>
 80121ce:	a30e      	add	r3, pc, #56	; (adr r3, 8012208 <_strtod_l+0xbe0>)
 80121d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d4:	f7f1 f9ca 	bl	800356c <__aeabi_dcmplt>
 80121d8:	e7a1      	b.n	801211e <_strtod_l+0xaf6>
 80121da:	2300      	movs	r3, #0
 80121dc:	930c      	str	r3, [sp, #48]	; 0x30
 80121de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80121e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80121e2:	6013      	str	r3, [r2, #0]
 80121e4:	f7ff ba65 	b.w	80116b2 <_strtod_l+0x8a>
 80121e8:	2b65      	cmp	r3, #101	; 0x65
 80121ea:	f43f ab5c 	beq.w	80118a6 <_strtod_l+0x27e>
 80121ee:	2b45      	cmp	r3, #69	; 0x45
 80121f0:	f43f ab59 	beq.w	80118a6 <_strtod_l+0x27e>
 80121f4:	2201      	movs	r2, #1
 80121f6:	f7ff bb8d 	b.w	8011914 <_strtod_l+0x2ec>
 80121fa:	bf00      	nop
 80121fc:	f3af 8000 	nop.w
 8012200:	ffc00000 	.word	0xffc00000
 8012204:	41dfffff 	.word	0x41dfffff
 8012208:	94a03595 	.word	0x94a03595
 801220c:	3fcfffff 	.word	0x3fcfffff

08012210 <_strtod_r>:
 8012210:	4b01      	ldr	r3, [pc, #4]	; (8012218 <_strtod_r+0x8>)
 8012212:	f7ff ba09 	b.w	8011628 <_strtod_l>
 8012216:	bf00      	nop
 8012218:	200000c4 	.word	0x200000c4

0801221c <_strtol_l.isra.0>:
 801221c:	2b01      	cmp	r3, #1
 801221e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012222:	4686      	mov	lr, r0
 8012224:	d001      	beq.n	801222a <_strtol_l.isra.0+0xe>
 8012226:	2b24      	cmp	r3, #36	; 0x24
 8012228:	d906      	bls.n	8012238 <_strtol_l.isra.0+0x1c>
 801222a:	f7fe f8a7 	bl	801037c <__errno>
 801222e:	2316      	movs	r3, #22
 8012230:	6003      	str	r3, [r0, #0]
 8012232:	2000      	movs	r0, #0
 8012234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012238:	468c      	mov	ip, r1
 801223a:	4e3a      	ldr	r6, [pc, #232]	; (8012324 <_strtol_l.isra.0+0x108>)
 801223c:	4660      	mov	r0, ip
 801223e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012242:	5da5      	ldrb	r5, [r4, r6]
 8012244:	f015 0508 	ands.w	r5, r5, #8
 8012248:	d1f8      	bne.n	801223c <_strtol_l.isra.0+0x20>
 801224a:	2c2d      	cmp	r4, #45	; 0x2d
 801224c:	d133      	bne.n	80122b6 <_strtol_l.isra.0+0x9a>
 801224e:	f04f 0801 	mov.w	r8, #1
 8012252:	f89c 4000 	ldrb.w	r4, [ip]
 8012256:	f100 0c02 	add.w	ip, r0, #2
 801225a:	2b00      	cmp	r3, #0
 801225c:	d05d      	beq.n	801231a <_strtol_l.isra.0+0xfe>
 801225e:	2b10      	cmp	r3, #16
 8012260:	d10c      	bne.n	801227c <_strtol_l.isra.0+0x60>
 8012262:	2c30      	cmp	r4, #48	; 0x30
 8012264:	d10a      	bne.n	801227c <_strtol_l.isra.0+0x60>
 8012266:	f89c 0000 	ldrb.w	r0, [ip]
 801226a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801226e:	2858      	cmp	r0, #88	; 0x58
 8012270:	d14e      	bne.n	8012310 <_strtol_l.isra.0+0xf4>
 8012272:	2310      	movs	r3, #16
 8012274:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012278:	f10c 0c02 	add.w	ip, ip, #2
 801227c:	2500      	movs	r5, #0
 801227e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8012282:	3f01      	subs	r7, #1
 8012284:	fbb7 f9f3 	udiv	r9, r7, r3
 8012288:	4628      	mov	r0, r5
 801228a:	fb03 7a19 	mls	sl, r3, r9, r7
 801228e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012292:	2e09      	cmp	r6, #9
 8012294:	d818      	bhi.n	80122c8 <_strtol_l.isra.0+0xac>
 8012296:	4634      	mov	r4, r6
 8012298:	42a3      	cmp	r3, r4
 801229a:	dd24      	ble.n	80122e6 <_strtol_l.isra.0+0xca>
 801229c:	2d00      	cmp	r5, #0
 801229e:	db1f      	blt.n	80122e0 <_strtol_l.isra.0+0xc4>
 80122a0:	4581      	cmp	r9, r0
 80122a2:	d31d      	bcc.n	80122e0 <_strtol_l.isra.0+0xc4>
 80122a4:	d101      	bne.n	80122aa <_strtol_l.isra.0+0x8e>
 80122a6:	45a2      	cmp	sl, r4
 80122a8:	db1a      	blt.n	80122e0 <_strtol_l.isra.0+0xc4>
 80122aa:	2501      	movs	r5, #1
 80122ac:	fb00 4003 	mla	r0, r0, r3, r4
 80122b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80122b4:	e7eb      	b.n	801228e <_strtol_l.isra.0+0x72>
 80122b6:	2c2b      	cmp	r4, #43	; 0x2b
 80122b8:	bf08      	it	eq
 80122ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 80122be:	46a8      	mov	r8, r5
 80122c0:	bf08      	it	eq
 80122c2:	f100 0c02 	addeq.w	ip, r0, #2
 80122c6:	e7c8      	b.n	801225a <_strtol_l.isra.0+0x3e>
 80122c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80122cc:	2e19      	cmp	r6, #25
 80122ce:	d801      	bhi.n	80122d4 <_strtol_l.isra.0+0xb8>
 80122d0:	3c37      	subs	r4, #55	; 0x37
 80122d2:	e7e1      	b.n	8012298 <_strtol_l.isra.0+0x7c>
 80122d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80122d8:	2e19      	cmp	r6, #25
 80122da:	d804      	bhi.n	80122e6 <_strtol_l.isra.0+0xca>
 80122dc:	3c57      	subs	r4, #87	; 0x57
 80122de:	e7db      	b.n	8012298 <_strtol_l.isra.0+0x7c>
 80122e0:	f04f 35ff 	mov.w	r5, #4294967295
 80122e4:	e7e4      	b.n	80122b0 <_strtol_l.isra.0+0x94>
 80122e6:	2d00      	cmp	r5, #0
 80122e8:	da08      	bge.n	80122fc <_strtol_l.isra.0+0xe0>
 80122ea:	2322      	movs	r3, #34	; 0x22
 80122ec:	4638      	mov	r0, r7
 80122ee:	f8ce 3000 	str.w	r3, [lr]
 80122f2:	2a00      	cmp	r2, #0
 80122f4:	d09e      	beq.n	8012234 <_strtol_l.isra.0+0x18>
 80122f6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80122fa:	e007      	b.n	801230c <_strtol_l.isra.0+0xf0>
 80122fc:	f1b8 0f00 	cmp.w	r8, #0
 8012300:	d000      	beq.n	8012304 <_strtol_l.isra.0+0xe8>
 8012302:	4240      	negs	r0, r0
 8012304:	2a00      	cmp	r2, #0
 8012306:	d095      	beq.n	8012234 <_strtol_l.isra.0+0x18>
 8012308:	2d00      	cmp	r5, #0
 801230a:	d1f4      	bne.n	80122f6 <_strtol_l.isra.0+0xda>
 801230c:	6011      	str	r1, [r2, #0]
 801230e:	e791      	b.n	8012234 <_strtol_l.isra.0+0x18>
 8012310:	2430      	movs	r4, #48	; 0x30
 8012312:	2b00      	cmp	r3, #0
 8012314:	d1b2      	bne.n	801227c <_strtol_l.isra.0+0x60>
 8012316:	2308      	movs	r3, #8
 8012318:	e7b0      	b.n	801227c <_strtol_l.isra.0+0x60>
 801231a:	2c30      	cmp	r4, #48	; 0x30
 801231c:	d0a3      	beq.n	8012266 <_strtol_l.isra.0+0x4a>
 801231e:	230a      	movs	r3, #10
 8012320:	e7ac      	b.n	801227c <_strtol_l.isra.0+0x60>
 8012322:	bf00      	nop
 8012324:	08017051 	.word	0x08017051

08012328 <_strtol_r>:
 8012328:	f7ff bf78 	b.w	801221c <_strtol_l.isra.0>

0801232c <__swbuf_r>:
 801232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801232e:	460e      	mov	r6, r1
 8012330:	4614      	mov	r4, r2
 8012332:	4605      	mov	r5, r0
 8012334:	b118      	cbz	r0, 801233e <__swbuf_r+0x12>
 8012336:	6983      	ldr	r3, [r0, #24]
 8012338:	b90b      	cbnz	r3, 801233e <__swbuf_r+0x12>
 801233a:	f7fe f87d 	bl	8010438 <__sinit>
 801233e:	4b21      	ldr	r3, [pc, #132]	; (80123c4 <__swbuf_r+0x98>)
 8012340:	429c      	cmp	r4, r3
 8012342:	d12b      	bne.n	801239c <__swbuf_r+0x70>
 8012344:	686c      	ldr	r4, [r5, #4]
 8012346:	69a3      	ldr	r3, [r4, #24]
 8012348:	60a3      	str	r3, [r4, #8]
 801234a:	89a3      	ldrh	r3, [r4, #12]
 801234c:	071a      	lsls	r2, r3, #28
 801234e:	d52f      	bpl.n	80123b0 <__swbuf_r+0x84>
 8012350:	6923      	ldr	r3, [r4, #16]
 8012352:	b36b      	cbz	r3, 80123b0 <__swbuf_r+0x84>
 8012354:	6923      	ldr	r3, [r4, #16]
 8012356:	6820      	ldr	r0, [r4, #0]
 8012358:	b2f6      	uxtb	r6, r6
 801235a:	1ac0      	subs	r0, r0, r3
 801235c:	6963      	ldr	r3, [r4, #20]
 801235e:	4637      	mov	r7, r6
 8012360:	4283      	cmp	r3, r0
 8012362:	dc04      	bgt.n	801236e <__swbuf_r+0x42>
 8012364:	4621      	mov	r1, r4
 8012366:	4628      	mov	r0, r5
 8012368:	f000 ffc6 	bl	80132f8 <_fflush_r>
 801236c:	bb30      	cbnz	r0, 80123bc <__swbuf_r+0x90>
 801236e:	68a3      	ldr	r3, [r4, #8]
 8012370:	3001      	adds	r0, #1
 8012372:	3b01      	subs	r3, #1
 8012374:	60a3      	str	r3, [r4, #8]
 8012376:	6823      	ldr	r3, [r4, #0]
 8012378:	1c5a      	adds	r2, r3, #1
 801237a:	6022      	str	r2, [r4, #0]
 801237c:	701e      	strb	r6, [r3, #0]
 801237e:	6963      	ldr	r3, [r4, #20]
 8012380:	4283      	cmp	r3, r0
 8012382:	d004      	beq.n	801238e <__swbuf_r+0x62>
 8012384:	89a3      	ldrh	r3, [r4, #12]
 8012386:	07db      	lsls	r3, r3, #31
 8012388:	d506      	bpl.n	8012398 <__swbuf_r+0x6c>
 801238a:	2e0a      	cmp	r6, #10
 801238c:	d104      	bne.n	8012398 <__swbuf_r+0x6c>
 801238e:	4621      	mov	r1, r4
 8012390:	4628      	mov	r0, r5
 8012392:	f000 ffb1 	bl	80132f8 <_fflush_r>
 8012396:	b988      	cbnz	r0, 80123bc <__swbuf_r+0x90>
 8012398:	4638      	mov	r0, r7
 801239a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801239c:	4b0a      	ldr	r3, [pc, #40]	; (80123c8 <__swbuf_r+0x9c>)
 801239e:	429c      	cmp	r4, r3
 80123a0:	d101      	bne.n	80123a6 <__swbuf_r+0x7a>
 80123a2:	68ac      	ldr	r4, [r5, #8]
 80123a4:	e7cf      	b.n	8012346 <__swbuf_r+0x1a>
 80123a6:	4b09      	ldr	r3, [pc, #36]	; (80123cc <__swbuf_r+0xa0>)
 80123a8:	429c      	cmp	r4, r3
 80123aa:	bf08      	it	eq
 80123ac:	68ec      	ldreq	r4, [r5, #12]
 80123ae:	e7ca      	b.n	8012346 <__swbuf_r+0x1a>
 80123b0:	4621      	mov	r1, r4
 80123b2:	4628      	mov	r0, r5
 80123b4:	f000 f81e 	bl	80123f4 <__swsetup_r>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d0cb      	beq.n	8012354 <__swbuf_r+0x28>
 80123bc:	f04f 37ff 	mov.w	r7, #4294967295
 80123c0:	e7ea      	b.n	8012398 <__swbuf_r+0x6c>
 80123c2:	bf00      	nop
 80123c4:	08016f7c 	.word	0x08016f7c
 80123c8:	08016f9c 	.word	0x08016f9c
 80123cc:	08016f5c 	.word	0x08016f5c

080123d0 <_write_r>:
 80123d0:	b538      	push	{r3, r4, r5, lr}
 80123d2:	4604      	mov	r4, r0
 80123d4:	4608      	mov	r0, r1
 80123d6:	4611      	mov	r1, r2
 80123d8:	2200      	movs	r2, #0
 80123da:	4d05      	ldr	r5, [pc, #20]	; (80123f0 <_write_r+0x20>)
 80123dc:	602a      	str	r2, [r5, #0]
 80123de:	461a      	mov	r2, r3
 80123e0:	f7f1 feea 	bl	80041b8 <_write>
 80123e4:	1c43      	adds	r3, r0, #1
 80123e6:	d102      	bne.n	80123ee <_write_r+0x1e>
 80123e8:	682b      	ldr	r3, [r5, #0]
 80123ea:	b103      	cbz	r3, 80123ee <_write_r+0x1e>
 80123ec:	6023      	str	r3, [r4, #0]
 80123ee:	bd38      	pop	{r3, r4, r5, pc}
 80123f0:	20001594 	.word	0x20001594

080123f4 <__swsetup_r>:
 80123f4:	4b32      	ldr	r3, [pc, #200]	; (80124c0 <__swsetup_r+0xcc>)
 80123f6:	b570      	push	{r4, r5, r6, lr}
 80123f8:	681d      	ldr	r5, [r3, #0]
 80123fa:	4606      	mov	r6, r0
 80123fc:	460c      	mov	r4, r1
 80123fe:	b125      	cbz	r5, 801240a <__swsetup_r+0x16>
 8012400:	69ab      	ldr	r3, [r5, #24]
 8012402:	b913      	cbnz	r3, 801240a <__swsetup_r+0x16>
 8012404:	4628      	mov	r0, r5
 8012406:	f7fe f817 	bl	8010438 <__sinit>
 801240a:	4b2e      	ldr	r3, [pc, #184]	; (80124c4 <__swsetup_r+0xd0>)
 801240c:	429c      	cmp	r4, r3
 801240e:	d10f      	bne.n	8012430 <__swsetup_r+0x3c>
 8012410:	686c      	ldr	r4, [r5, #4]
 8012412:	89a3      	ldrh	r3, [r4, #12]
 8012414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012418:	0719      	lsls	r1, r3, #28
 801241a:	d42c      	bmi.n	8012476 <__swsetup_r+0x82>
 801241c:	06dd      	lsls	r5, r3, #27
 801241e:	d411      	bmi.n	8012444 <__swsetup_r+0x50>
 8012420:	2309      	movs	r3, #9
 8012422:	6033      	str	r3, [r6, #0]
 8012424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012428:	f04f 30ff 	mov.w	r0, #4294967295
 801242c:	81a3      	strh	r3, [r4, #12]
 801242e:	e03e      	b.n	80124ae <__swsetup_r+0xba>
 8012430:	4b25      	ldr	r3, [pc, #148]	; (80124c8 <__swsetup_r+0xd4>)
 8012432:	429c      	cmp	r4, r3
 8012434:	d101      	bne.n	801243a <__swsetup_r+0x46>
 8012436:	68ac      	ldr	r4, [r5, #8]
 8012438:	e7eb      	b.n	8012412 <__swsetup_r+0x1e>
 801243a:	4b24      	ldr	r3, [pc, #144]	; (80124cc <__swsetup_r+0xd8>)
 801243c:	429c      	cmp	r4, r3
 801243e:	bf08      	it	eq
 8012440:	68ec      	ldreq	r4, [r5, #12]
 8012442:	e7e6      	b.n	8012412 <__swsetup_r+0x1e>
 8012444:	0758      	lsls	r0, r3, #29
 8012446:	d512      	bpl.n	801246e <__swsetup_r+0x7a>
 8012448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801244a:	b141      	cbz	r1, 801245e <__swsetup_r+0x6a>
 801244c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012450:	4299      	cmp	r1, r3
 8012452:	d002      	beq.n	801245a <__swsetup_r+0x66>
 8012454:	4630      	mov	r0, r6
 8012456:	f002 f865 	bl	8014524 <_free_r>
 801245a:	2300      	movs	r3, #0
 801245c:	6363      	str	r3, [r4, #52]	; 0x34
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012464:	81a3      	strh	r3, [r4, #12]
 8012466:	2300      	movs	r3, #0
 8012468:	6063      	str	r3, [r4, #4]
 801246a:	6923      	ldr	r3, [r4, #16]
 801246c:	6023      	str	r3, [r4, #0]
 801246e:	89a3      	ldrh	r3, [r4, #12]
 8012470:	f043 0308 	orr.w	r3, r3, #8
 8012474:	81a3      	strh	r3, [r4, #12]
 8012476:	6923      	ldr	r3, [r4, #16]
 8012478:	b94b      	cbnz	r3, 801248e <__swsetup_r+0x9a>
 801247a:	89a3      	ldrh	r3, [r4, #12]
 801247c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012484:	d003      	beq.n	801248e <__swsetup_r+0x9a>
 8012486:	4621      	mov	r1, r4
 8012488:	4630      	mov	r0, r6
 801248a:	f001 fb11 	bl	8013ab0 <__smakebuf_r>
 801248e:	89a0      	ldrh	r0, [r4, #12]
 8012490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012494:	f010 0301 	ands.w	r3, r0, #1
 8012498:	d00a      	beq.n	80124b0 <__swsetup_r+0xbc>
 801249a:	2300      	movs	r3, #0
 801249c:	60a3      	str	r3, [r4, #8]
 801249e:	6963      	ldr	r3, [r4, #20]
 80124a0:	425b      	negs	r3, r3
 80124a2:	61a3      	str	r3, [r4, #24]
 80124a4:	6923      	ldr	r3, [r4, #16]
 80124a6:	b943      	cbnz	r3, 80124ba <__swsetup_r+0xc6>
 80124a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80124ac:	d1ba      	bne.n	8012424 <__swsetup_r+0x30>
 80124ae:	bd70      	pop	{r4, r5, r6, pc}
 80124b0:	0781      	lsls	r1, r0, #30
 80124b2:	bf58      	it	pl
 80124b4:	6963      	ldrpl	r3, [r4, #20]
 80124b6:	60a3      	str	r3, [r4, #8]
 80124b8:	e7f4      	b.n	80124a4 <__swsetup_r+0xb0>
 80124ba:	2000      	movs	r0, #0
 80124bc:	e7f7      	b.n	80124ae <__swsetup_r+0xba>
 80124be:	bf00      	nop
 80124c0:	2000005c 	.word	0x2000005c
 80124c4:	08016f7c 	.word	0x08016f7c
 80124c8:	08016f9c 	.word	0x08016f9c
 80124cc:	08016f5c 	.word	0x08016f5c

080124d0 <_close_r>:
 80124d0:	b538      	push	{r3, r4, r5, lr}
 80124d2:	2300      	movs	r3, #0
 80124d4:	4d05      	ldr	r5, [pc, #20]	; (80124ec <_close_r+0x1c>)
 80124d6:	4604      	mov	r4, r0
 80124d8:	4608      	mov	r0, r1
 80124da:	602b      	str	r3, [r5, #0]
 80124dc:	f7f2 feb0 	bl	8005240 <_close>
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d102      	bne.n	80124ea <_close_r+0x1a>
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	b103      	cbz	r3, 80124ea <_close_r+0x1a>
 80124e8:	6023      	str	r3, [r4, #0]
 80124ea:	bd38      	pop	{r3, r4, r5, pc}
 80124ec:	20001594 	.word	0x20001594

080124f0 <quorem>:
 80124f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124f4:	6903      	ldr	r3, [r0, #16]
 80124f6:	690c      	ldr	r4, [r1, #16]
 80124f8:	4607      	mov	r7, r0
 80124fa:	42a3      	cmp	r3, r4
 80124fc:	f2c0 8083 	blt.w	8012606 <quorem+0x116>
 8012500:	3c01      	subs	r4, #1
 8012502:	f100 0514 	add.w	r5, r0, #20
 8012506:	f101 0814 	add.w	r8, r1, #20
 801250a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801250e:	9301      	str	r3, [sp, #4]
 8012510:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012514:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012518:	3301      	adds	r3, #1
 801251a:	429a      	cmp	r2, r3
 801251c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012520:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012524:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012528:	d332      	bcc.n	8012590 <quorem+0xa0>
 801252a:	f04f 0e00 	mov.w	lr, #0
 801252e:	4640      	mov	r0, r8
 8012530:	46ac      	mov	ip, r5
 8012532:	46f2      	mov	sl, lr
 8012534:	f850 2b04 	ldr.w	r2, [r0], #4
 8012538:	b293      	uxth	r3, r2
 801253a:	fb06 e303 	mla	r3, r6, r3, lr
 801253e:	0c12      	lsrs	r2, r2, #16
 8012540:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012544:	fb06 e202 	mla	r2, r6, r2, lr
 8012548:	b29b      	uxth	r3, r3
 801254a:	ebaa 0303 	sub.w	r3, sl, r3
 801254e:	f8dc a000 	ldr.w	sl, [ip]
 8012552:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012556:	fa1f fa8a 	uxth.w	sl, sl
 801255a:	4453      	add	r3, sl
 801255c:	fa1f fa82 	uxth.w	sl, r2
 8012560:	f8dc 2000 	ldr.w	r2, [ip]
 8012564:	4581      	cmp	r9, r0
 8012566:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801256a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801256e:	b29b      	uxth	r3, r3
 8012570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012574:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012578:	f84c 3b04 	str.w	r3, [ip], #4
 801257c:	d2da      	bcs.n	8012534 <quorem+0x44>
 801257e:	f855 300b 	ldr.w	r3, [r5, fp]
 8012582:	b92b      	cbnz	r3, 8012590 <quorem+0xa0>
 8012584:	9b01      	ldr	r3, [sp, #4]
 8012586:	3b04      	subs	r3, #4
 8012588:	429d      	cmp	r5, r3
 801258a:	461a      	mov	r2, r3
 801258c:	d32f      	bcc.n	80125ee <quorem+0xfe>
 801258e:	613c      	str	r4, [r7, #16]
 8012590:	4638      	mov	r0, r7
 8012592:	f001 fdc5 	bl	8014120 <__mcmp>
 8012596:	2800      	cmp	r0, #0
 8012598:	db25      	blt.n	80125e6 <quorem+0xf6>
 801259a:	4628      	mov	r0, r5
 801259c:	f04f 0c00 	mov.w	ip, #0
 80125a0:	3601      	adds	r6, #1
 80125a2:	f858 1b04 	ldr.w	r1, [r8], #4
 80125a6:	f8d0 e000 	ldr.w	lr, [r0]
 80125aa:	b28b      	uxth	r3, r1
 80125ac:	ebac 0303 	sub.w	r3, ip, r3
 80125b0:	fa1f f28e 	uxth.w	r2, lr
 80125b4:	4413      	add	r3, r2
 80125b6:	0c0a      	lsrs	r2, r1, #16
 80125b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80125bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80125c6:	45c1      	cmp	r9, r8
 80125c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80125cc:	f840 3b04 	str.w	r3, [r0], #4
 80125d0:	d2e7      	bcs.n	80125a2 <quorem+0xb2>
 80125d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80125d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80125da:	b922      	cbnz	r2, 80125e6 <quorem+0xf6>
 80125dc:	3b04      	subs	r3, #4
 80125de:	429d      	cmp	r5, r3
 80125e0:	461a      	mov	r2, r3
 80125e2:	d30a      	bcc.n	80125fa <quorem+0x10a>
 80125e4:	613c      	str	r4, [r7, #16]
 80125e6:	4630      	mov	r0, r6
 80125e8:	b003      	add	sp, #12
 80125ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ee:	6812      	ldr	r2, [r2, #0]
 80125f0:	3b04      	subs	r3, #4
 80125f2:	2a00      	cmp	r2, #0
 80125f4:	d1cb      	bne.n	801258e <quorem+0x9e>
 80125f6:	3c01      	subs	r4, #1
 80125f8:	e7c6      	b.n	8012588 <quorem+0x98>
 80125fa:	6812      	ldr	r2, [r2, #0]
 80125fc:	3b04      	subs	r3, #4
 80125fe:	2a00      	cmp	r2, #0
 8012600:	d1f0      	bne.n	80125e4 <quorem+0xf4>
 8012602:	3c01      	subs	r4, #1
 8012604:	e7eb      	b.n	80125de <quorem+0xee>
 8012606:	2000      	movs	r0, #0
 8012608:	e7ee      	b.n	80125e8 <quorem+0xf8>
 801260a:	0000      	movs	r0, r0
 801260c:	0000      	movs	r0, r0
	...

08012610 <_dtoa_r>:
 8012610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012614:	4616      	mov	r6, r2
 8012616:	461f      	mov	r7, r3
 8012618:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801261a:	b099      	sub	sp, #100	; 0x64
 801261c:	4605      	mov	r5, r0
 801261e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012622:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8012626:	b974      	cbnz	r4, 8012646 <_dtoa_r+0x36>
 8012628:	2010      	movs	r0, #16
 801262a:	f001 fa81 	bl	8013b30 <malloc>
 801262e:	4602      	mov	r2, r0
 8012630:	6268      	str	r0, [r5, #36]	; 0x24
 8012632:	b920      	cbnz	r0, 801263e <_dtoa_r+0x2e>
 8012634:	21ea      	movs	r1, #234	; 0xea
 8012636:	4bae      	ldr	r3, [pc, #696]	; (80128f0 <_dtoa_r+0x2e0>)
 8012638:	48ae      	ldr	r0, [pc, #696]	; (80128f4 <_dtoa_r+0x2e4>)
 801263a:	f002 faab 	bl	8014b94 <__assert_func>
 801263e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012642:	6004      	str	r4, [r0, #0]
 8012644:	60c4      	str	r4, [r0, #12]
 8012646:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012648:	6819      	ldr	r1, [r3, #0]
 801264a:	b151      	cbz	r1, 8012662 <_dtoa_r+0x52>
 801264c:	685a      	ldr	r2, [r3, #4]
 801264e:	2301      	movs	r3, #1
 8012650:	4093      	lsls	r3, r2
 8012652:	604a      	str	r2, [r1, #4]
 8012654:	608b      	str	r3, [r1, #8]
 8012656:	4628      	mov	r0, r5
 8012658:	f001 fade 	bl	8013c18 <_Bfree>
 801265c:	2200      	movs	r2, #0
 801265e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012660:	601a      	str	r2, [r3, #0]
 8012662:	1e3b      	subs	r3, r7, #0
 8012664:	bfaf      	iteee	ge
 8012666:	2300      	movge	r3, #0
 8012668:	2201      	movlt	r2, #1
 801266a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801266e:	9305      	strlt	r3, [sp, #20]
 8012670:	bfa8      	it	ge
 8012672:	f8c8 3000 	strge.w	r3, [r8]
 8012676:	f8dd 9014 	ldr.w	r9, [sp, #20]
 801267a:	4b9f      	ldr	r3, [pc, #636]	; (80128f8 <_dtoa_r+0x2e8>)
 801267c:	bfb8      	it	lt
 801267e:	f8c8 2000 	strlt.w	r2, [r8]
 8012682:	ea33 0309 	bics.w	r3, r3, r9
 8012686:	d119      	bne.n	80126bc <_dtoa_r+0xac>
 8012688:	f242 730f 	movw	r3, #9999	; 0x270f
 801268c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801268e:	6013      	str	r3, [r2, #0]
 8012690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012694:	4333      	orrs	r3, r6
 8012696:	f000 8580 	beq.w	801319a <_dtoa_r+0xb8a>
 801269a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801269c:	b953      	cbnz	r3, 80126b4 <_dtoa_r+0xa4>
 801269e:	4b97      	ldr	r3, [pc, #604]	; (80128fc <_dtoa_r+0x2ec>)
 80126a0:	e022      	b.n	80126e8 <_dtoa_r+0xd8>
 80126a2:	4b97      	ldr	r3, [pc, #604]	; (8012900 <_dtoa_r+0x2f0>)
 80126a4:	9308      	str	r3, [sp, #32]
 80126a6:	3308      	adds	r3, #8
 80126a8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80126aa:	6013      	str	r3, [r2, #0]
 80126ac:	9808      	ldr	r0, [sp, #32]
 80126ae:	b019      	add	sp, #100	; 0x64
 80126b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b4:	4b91      	ldr	r3, [pc, #580]	; (80128fc <_dtoa_r+0x2ec>)
 80126b6:	9308      	str	r3, [sp, #32]
 80126b8:	3303      	adds	r3, #3
 80126ba:	e7f5      	b.n	80126a8 <_dtoa_r+0x98>
 80126bc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80126c0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80126c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80126c8:	2200      	movs	r2, #0
 80126ca:	2300      	movs	r3, #0
 80126cc:	f7f0 ff44 	bl	8003558 <__aeabi_dcmpeq>
 80126d0:	4680      	mov	r8, r0
 80126d2:	b158      	cbz	r0, 80126ec <_dtoa_r+0xdc>
 80126d4:	2301      	movs	r3, #1
 80126d6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80126d8:	6013      	str	r3, [r2, #0]
 80126da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f000 8559 	beq.w	8013194 <_dtoa_r+0xb84>
 80126e2:	4888      	ldr	r0, [pc, #544]	; (8012904 <_dtoa_r+0x2f4>)
 80126e4:	6018      	str	r0, [r3, #0]
 80126e6:	1e43      	subs	r3, r0, #1
 80126e8:	9308      	str	r3, [sp, #32]
 80126ea:	e7df      	b.n	80126ac <_dtoa_r+0x9c>
 80126ec:	ab16      	add	r3, sp, #88	; 0x58
 80126ee:	9301      	str	r3, [sp, #4]
 80126f0:	ab17      	add	r3, sp, #92	; 0x5c
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	4628      	mov	r0, r5
 80126f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80126fa:	f001 fe37 	bl	801436c <__d2b>
 80126fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012702:	4682      	mov	sl, r0
 8012704:	2c00      	cmp	r4, #0
 8012706:	d07e      	beq.n	8012806 <_dtoa_r+0x1f6>
 8012708:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801270c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801270e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012716:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 801271a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801271e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8012722:	2200      	movs	r2, #0
 8012724:	4b78      	ldr	r3, [pc, #480]	; (8012908 <_dtoa_r+0x2f8>)
 8012726:	f7f0 faf7 	bl	8002d18 <__aeabi_dsub>
 801272a:	a36b      	add	r3, pc, #428	; (adr r3, 80128d8 <_dtoa_r+0x2c8>)
 801272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012730:	f7f0 fcaa 	bl	8003088 <__aeabi_dmul>
 8012734:	a36a      	add	r3, pc, #424	; (adr r3, 80128e0 <_dtoa_r+0x2d0>)
 8012736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273a:	f7f0 faef 	bl	8002d1c <__adddf3>
 801273e:	4606      	mov	r6, r0
 8012740:	4620      	mov	r0, r4
 8012742:	460f      	mov	r7, r1
 8012744:	f7f0 fc36 	bl	8002fb4 <__aeabi_i2d>
 8012748:	a367      	add	r3, pc, #412	; (adr r3, 80128e8 <_dtoa_r+0x2d8>)
 801274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274e:	f7f0 fc9b 	bl	8003088 <__aeabi_dmul>
 8012752:	4602      	mov	r2, r0
 8012754:	460b      	mov	r3, r1
 8012756:	4630      	mov	r0, r6
 8012758:	4639      	mov	r1, r7
 801275a:	f7f0 fadf 	bl	8002d1c <__adddf3>
 801275e:	4606      	mov	r6, r0
 8012760:	460f      	mov	r7, r1
 8012762:	f7f0 ff41 	bl	80035e8 <__aeabi_d2iz>
 8012766:	2200      	movs	r2, #0
 8012768:	4681      	mov	r9, r0
 801276a:	2300      	movs	r3, #0
 801276c:	4630      	mov	r0, r6
 801276e:	4639      	mov	r1, r7
 8012770:	f7f0 fefc 	bl	800356c <__aeabi_dcmplt>
 8012774:	b148      	cbz	r0, 801278a <_dtoa_r+0x17a>
 8012776:	4648      	mov	r0, r9
 8012778:	f7f0 fc1c 	bl	8002fb4 <__aeabi_i2d>
 801277c:	4632      	mov	r2, r6
 801277e:	463b      	mov	r3, r7
 8012780:	f7f0 feea 	bl	8003558 <__aeabi_dcmpeq>
 8012784:	b908      	cbnz	r0, 801278a <_dtoa_r+0x17a>
 8012786:	f109 39ff 	add.w	r9, r9, #4294967295
 801278a:	f1b9 0f16 	cmp.w	r9, #22
 801278e:	d857      	bhi.n	8012840 <_dtoa_r+0x230>
 8012790:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012794:	4b5d      	ldr	r3, [pc, #372]	; (801290c <_dtoa_r+0x2fc>)
 8012796:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801279a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801279e:	f7f0 fee5 	bl	800356c <__aeabi_dcmplt>
 80127a2:	2800      	cmp	r0, #0
 80127a4:	d04e      	beq.n	8012844 <_dtoa_r+0x234>
 80127a6:	2300      	movs	r3, #0
 80127a8:	f109 39ff 	add.w	r9, r9, #4294967295
 80127ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80127ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80127b0:	1b1c      	subs	r4, r3, r4
 80127b2:	1e63      	subs	r3, r4, #1
 80127b4:	9309      	str	r3, [sp, #36]	; 0x24
 80127b6:	bf49      	itett	mi
 80127b8:	f1c4 0301 	rsbmi	r3, r4, #1
 80127bc:	2300      	movpl	r3, #0
 80127be:	9306      	strmi	r3, [sp, #24]
 80127c0:	2300      	movmi	r3, #0
 80127c2:	bf54      	ite	pl
 80127c4:	9306      	strpl	r3, [sp, #24]
 80127c6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80127c8:	f1b9 0f00 	cmp.w	r9, #0
 80127cc:	db3c      	blt.n	8012848 <_dtoa_r+0x238>
 80127ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127d0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80127d4:	444b      	add	r3, r9
 80127d6:	9309      	str	r3, [sp, #36]	; 0x24
 80127d8:	2300      	movs	r3, #0
 80127da:	930a      	str	r3, [sp, #40]	; 0x28
 80127dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80127de:	2b09      	cmp	r3, #9
 80127e0:	d86c      	bhi.n	80128bc <_dtoa_r+0x2ac>
 80127e2:	2b05      	cmp	r3, #5
 80127e4:	bfc4      	itt	gt
 80127e6:	3b04      	subgt	r3, #4
 80127e8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80127ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80127ec:	bfc8      	it	gt
 80127ee:	2400      	movgt	r4, #0
 80127f0:	f1a3 0302 	sub.w	r3, r3, #2
 80127f4:	bfd8      	it	le
 80127f6:	2401      	movle	r4, #1
 80127f8:	2b03      	cmp	r3, #3
 80127fa:	f200 808b 	bhi.w	8012914 <_dtoa_r+0x304>
 80127fe:	e8df f003 	tbb	[pc, r3]
 8012802:	4f2d      	.short	0x4f2d
 8012804:	5b4d      	.short	0x5b4d
 8012806:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 801280a:	441c      	add	r4, r3
 801280c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8012810:	2b20      	cmp	r3, #32
 8012812:	bfc3      	ittte	gt
 8012814:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012818:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 801281c:	fa09 f303 	lslgt.w	r3, r9, r3
 8012820:	f1c3 0320 	rsble	r3, r3, #32
 8012824:	bfc6      	itte	gt
 8012826:	fa26 f000 	lsrgt.w	r0, r6, r0
 801282a:	4318      	orrgt	r0, r3
 801282c:	fa06 f003 	lslle.w	r0, r6, r3
 8012830:	f7f0 fbb0 	bl	8002f94 <__aeabi_ui2d>
 8012834:	2301      	movs	r3, #1
 8012836:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801283a:	3c01      	subs	r4, #1
 801283c:	9313      	str	r3, [sp, #76]	; 0x4c
 801283e:	e770      	b.n	8012722 <_dtoa_r+0x112>
 8012840:	2301      	movs	r3, #1
 8012842:	e7b3      	b.n	80127ac <_dtoa_r+0x19c>
 8012844:	900f      	str	r0, [sp, #60]	; 0x3c
 8012846:	e7b2      	b.n	80127ae <_dtoa_r+0x19e>
 8012848:	9b06      	ldr	r3, [sp, #24]
 801284a:	eba3 0309 	sub.w	r3, r3, r9
 801284e:	9306      	str	r3, [sp, #24]
 8012850:	f1c9 0300 	rsb	r3, r9, #0
 8012854:	930a      	str	r3, [sp, #40]	; 0x28
 8012856:	2300      	movs	r3, #0
 8012858:	930e      	str	r3, [sp, #56]	; 0x38
 801285a:	e7bf      	b.n	80127dc <_dtoa_r+0x1cc>
 801285c:	2300      	movs	r3, #0
 801285e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012860:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012862:	2b00      	cmp	r3, #0
 8012864:	dc59      	bgt.n	801291a <_dtoa_r+0x30a>
 8012866:	f04f 0b01 	mov.w	fp, #1
 801286a:	465b      	mov	r3, fp
 801286c:	f8cd b008 	str.w	fp, [sp, #8]
 8012870:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8012874:	2200      	movs	r2, #0
 8012876:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8012878:	6042      	str	r2, [r0, #4]
 801287a:	2204      	movs	r2, #4
 801287c:	f102 0614 	add.w	r6, r2, #20
 8012880:	429e      	cmp	r6, r3
 8012882:	6841      	ldr	r1, [r0, #4]
 8012884:	d94f      	bls.n	8012926 <_dtoa_r+0x316>
 8012886:	4628      	mov	r0, r5
 8012888:	f001 f986 	bl	8013b98 <_Balloc>
 801288c:	9008      	str	r0, [sp, #32]
 801288e:	2800      	cmp	r0, #0
 8012890:	d14d      	bne.n	801292e <_dtoa_r+0x31e>
 8012892:	4602      	mov	r2, r0
 8012894:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012898:	4b1d      	ldr	r3, [pc, #116]	; (8012910 <_dtoa_r+0x300>)
 801289a:	e6cd      	b.n	8012638 <_dtoa_r+0x28>
 801289c:	2301      	movs	r3, #1
 801289e:	e7de      	b.n	801285e <_dtoa_r+0x24e>
 80128a0:	2300      	movs	r3, #0
 80128a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80128a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80128a6:	eb09 0b03 	add.w	fp, r9, r3
 80128aa:	f10b 0301 	add.w	r3, fp, #1
 80128ae:	2b01      	cmp	r3, #1
 80128b0:	9302      	str	r3, [sp, #8]
 80128b2:	bfb8      	it	lt
 80128b4:	2301      	movlt	r3, #1
 80128b6:	e7dd      	b.n	8012874 <_dtoa_r+0x264>
 80128b8:	2301      	movs	r3, #1
 80128ba:	e7f2      	b.n	80128a2 <_dtoa_r+0x292>
 80128bc:	2401      	movs	r4, #1
 80128be:	2300      	movs	r3, #0
 80128c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80128c2:	9322      	str	r3, [sp, #136]	; 0x88
 80128c4:	f04f 3bff 	mov.w	fp, #4294967295
 80128c8:	2200      	movs	r2, #0
 80128ca:	2312      	movs	r3, #18
 80128cc:	f8cd b008 	str.w	fp, [sp, #8]
 80128d0:	9223      	str	r2, [sp, #140]	; 0x8c
 80128d2:	e7cf      	b.n	8012874 <_dtoa_r+0x264>
 80128d4:	f3af 8000 	nop.w
 80128d8:	636f4361 	.word	0x636f4361
 80128dc:	3fd287a7 	.word	0x3fd287a7
 80128e0:	8b60c8b3 	.word	0x8b60c8b3
 80128e4:	3fc68a28 	.word	0x3fc68a28
 80128e8:	509f79fb 	.word	0x509f79fb
 80128ec:	3fd34413 	.word	0x3fd34413
 80128f0:	0801715e 	.word	0x0801715e
 80128f4:	08017175 	.word	0x08017175
 80128f8:	7ff00000 	.word	0x7ff00000
 80128fc:	0801715a 	.word	0x0801715a
 8012900:	08017151 	.word	0x08017151
 8012904:	08016fd1 	.word	0x08016fd1
 8012908:	3ff80000 	.word	0x3ff80000
 801290c:	080172f0 	.word	0x080172f0
 8012910:	080171d4 	.word	0x080171d4
 8012914:	2301      	movs	r3, #1
 8012916:	930b      	str	r3, [sp, #44]	; 0x2c
 8012918:	e7d4      	b.n	80128c4 <_dtoa_r+0x2b4>
 801291a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 801291e:	465b      	mov	r3, fp
 8012920:	f8cd b008 	str.w	fp, [sp, #8]
 8012924:	e7a6      	b.n	8012874 <_dtoa_r+0x264>
 8012926:	3101      	adds	r1, #1
 8012928:	6041      	str	r1, [r0, #4]
 801292a:	0052      	lsls	r2, r2, #1
 801292c:	e7a6      	b.n	801287c <_dtoa_r+0x26c>
 801292e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012930:	9a08      	ldr	r2, [sp, #32]
 8012932:	601a      	str	r2, [r3, #0]
 8012934:	9b02      	ldr	r3, [sp, #8]
 8012936:	2b0e      	cmp	r3, #14
 8012938:	f200 80a8 	bhi.w	8012a8c <_dtoa_r+0x47c>
 801293c:	2c00      	cmp	r4, #0
 801293e:	f000 80a5 	beq.w	8012a8c <_dtoa_r+0x47c>
 8012942:	f1b9 0f00 	cmp.w	r9, #0
 8012946:	dd34      	ble.n	80129b2 <_dtoa_r+0x3a2>
 8012948:	4a9a      	ldr	r2, [pc, #616]	; (8012bb4 <_dtoa_r+0x5a4>)
 801294a:	f009 030f 	and.w	r3, r9, #15
 801294e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012952:	f419 7f80 	tst.w	r9, #256	; 0x100
 8012956:	e9d3 3400 	ldrd	r3, r4, [r3]
 801295a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 801295e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8012962:	d016      	beq.n	8012992 <_dtoa_r+0x382>
 8012964:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012968:	4b93      	ldr	r3, [pc, #588]	; (8012bb8 <_dtoa_r+0x5a8>)
 801296a:	2703      	movs	r7, #3
 801296c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012970:	f7f0 fcb4 	bl	80032dc <__aeabi_ddiv>
 8012974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012978:	f004 040f 	and.w	r4, r4, #15
 801297c:	4e8e      	ldr	r6, [pc, #568]	; (8012bb8 <_dtoa_r+0x5a8>)
 801297e:	b954      	cbnz	r4, 8012996 <_dtoa_r+0x386>
 8012980:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012984:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012988:	f7f0 fca8 	bl	80032dc <__aeabi_ddiv>
 801298c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012990:	e029      	b.n	80129e6 <_dtoa_r+0x3d6>
 8012992:	2702      	movs	r7, #2
 8012994:	e7f2      	b.n	801297c <_dtoa_r+0x36c>
 8012996:	07e1      	lsls	r1, r4, #31
 8012998:	d508      	bpl.n	80129ac <_dtoa_r+0x39c>
 801299a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801299e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80129a2:	f7f0 fb71 	bl	8003088 <__aeabi_dmul>
 80129a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80129aa:	3701      	adds	r7, #1
 80129ac:	1064      	asrs	r4, r4, #1
 80129ae:	3608      	adds	r6, #8
 80129b0:	e7e5      	b.n	801297e <_dtoa_r+0x36e>
 80129b2:	f000 80a5 	beq.w	8012b00 <_dtoa_r+0x4f0>
 80129b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129ba:	f1c9 0400 	rsb	r4, r9, #0
 80129be:	4b7d      	ldr	r3, [pc, #500]	; (8012bb4 <_dtoa_r+0x5a4>)
 80129c0:	f004 020f 	and.w	r2, r4, #15
 80129c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80129c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129cc:	f7f0 fb5c 	bl	8003088 <__aeabi_dmul>
 80129d0:	2702      	movs	r7, #2
 80129d2:	2300      	movs	r3, #0
 80129d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80129d8:	4e77      	ldr	r6, [pc, #476]	; (8012bb8 <_dtoa_r+0x5a8>)
 80129da:	1124      	asrs	r4, r4, #4
 80129dc:	2c00      	cmp	r4, #0
 80129de:	f040 8084 	bne.w	8012aea <_dtoa_r+0x4da>
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1d2      	bne.n	801298c <_dtoa_r+0x37c>
 80129e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f000 808b 	beq.w	8012b04 <_dtoa_r+0x4f4>
 80129ee:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80129f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80129f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80129fa:	2200      	movs	r2, #0
 80129fc:	4b6f      	ldr	r3, [pc, #444]	; (8012bbc <_dtoa_r+0x5ac>)
 80129fe:	f7f0 fdb5 	bl	800356c <__aeabi_dcmplt>
 8012a02:	2800      	cmp	r0, #0
 8012a04:	d07e      	beq.n	8012b04 <_dtoa_r+0x4f4>
 8012a06:	9b02      	ldr	r3, [sp, #8]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d07b      	beq.n	8012b04 <_dtoa_r+0x4f4>
 8012a0c:	f1bb 0f00 	cmp.w	fp, #0
 8012a10:	dd38      	ble.n	8012a84 <_dtoa_r+0x474>
 8012a12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012a16:	2200      	movs	r2, #0
 8012a18:	4b69      	ldr	r3, [pc, #420]	; (8012bc0 <_dtoa_r+0x5b0>)
 8012a1a:	f7f0 fb35 	bl	8003088 <__aeabi_dmul>
 8012a1e:	465c      	mov	r4, fp
 8012a20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a24:	f109 38ff 	add.w	r8, r9, #4294967295
 8012a28:	3701      	adds	r7, #1
 8012a2a:	4638      	mov	r0, r7
 8012a2c:	f7f0 fac2 	bl	8002fb4 <__aeabi_i2d>
 8012a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a34:	f7f0 fb28 	bl	8003088 <__aeabi_dmul>
 8012a38:	2200      	movs	r2, #0
 8012a3a:	4b62      	ldr	r3, [pc, #392]	; (8012bc4 <_dtoa_r+0x5b4>)
 8012a3c:	f7f0 f96e 	bl	8002d1c <__adddf3>
 8012a40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012a44:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012a48:	9611      	str	r6, [sp, #68]	; 0x44
 8012a4a:	2c00      	cmp	r4, #0
 8012a4c:	d15d      	bne.n	8012b0a <_dtoa_r+0x4fa>
 8012a4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a52:	2200      	movs	r2, #0
 8012a54:	4b5c      	ldr	r3, [pc, #368]	; (8012bc8 <_dtoa_r+0x5b8>)
 8012a56:	f7f0 f95f 	bl	8002d18 <__aeabi_dsub>
 8012a5a:	4602      	mov	r2, r0
 8012a5c:	460b      	mov	r3, r1
 8012a5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012a62:	4633      	mov	r3, r6
 8012a64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a66:	f7f0 fd9f 	bl	80035a8 <__aeabi_dcmpgt>
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	f040 829e 	bne.w	8012fac <_dtoa_r+0x99c>
 8012a70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012a76:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012a7a:	f7f0 fd77 	bl	800356c <__aeabi_dcmplt>
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	f040 8292 	bne.w	8012fa8 <_dtoa_r+0x998>
 8012a84:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8012a88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8012a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	f2c0 8153 	blt.w	8012d3a <_dtoa_r+0x72a>
 8012a94:	f1b9 0f0e 	cmp.w	r9, #14
 8012a98:	f300 814f 	bgt.w	8012d3a <_dtoa_r+0x72a>
 8012a9c:	4b45      	ldr	r3, [pc, #276]	; (8012bb4 <_dtoa_r+0x5a4>)
 8012a9e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8012aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8012aa6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8012aaa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f280 80db 	bge.w	8012c68 <_dtoa_r+0x658>
 8012ab2:	9b02      	ldr	r3, [sp, #8]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f300 80d7 	bgt.w	8012c68 <_dtoa_r+0x658>
 8012aba:	f040 8274 	bne.w	8012fa6 <_dtoa_r+0x996>
 8012abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	4b40      	ldr	r3, [pc, #256]	; (8012bc8 <_dtoa_r+0x5b8>)
 8012ac6:	f7f0 fadf 	bl	8003088 <__aeabi_dmul>
 8012aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ace:	f7f0 fd61 	bl	8003594 <__aeabi_dcmpge>
 8012ad2:	9c02      	ldr	r4, [sp, #8]
 8012ad4:	4626      	mov	r6, r4
 8012ad6:	2800      	cmp	r0, #0
 8012ad8:	f040 824a 	bne.w	8012f70 <_dtoa_r+0x960>
 8012adc:	2331      	movs	r3, #49	; 0x31
 8012ade:	9f08      	ldr	r7, [sp, #32]
 8012ae0:	f109 0901 	add.w	r9, r9, #1
 8012ae4:	f807 3b01 	strb.w	r3, [r7], #1
 8012ae8:	e246      	b.n	8012f78 <_dtoa_r+0x968>
 8012aea:	07e2      	lsls	r2, r4, #31
 8012aec:	d505      	bpl.n	8012afa <_dtoa_r+0x4ea>
 8012aee:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012af2:	f7f0 fac9 	bl	8003088 <__aeabi_dmul>
 8012af6:	2301      	movs	r3, #1
 8012af8:	3701      	adds	r7, #1
 8012afa:	1064      	asrs	r4, r4, #1
 8012afc:	3608      	adds	r6, #8
 8012afe:	e76d      	b.n	80129dc <_dtoa_r+0x3cc>
 8012b00:	2702      	movs	r7, #2
 8012b02:	e770      	b.n	80129e6 <_dtoa_r+0x3d6>
 8012b04:	46c8      	mov	r8, r9
 8012b06:	9c02      	ldr	r4, [sp, #8]
 8012b08:	e78f      	b.n	8012a2a <_dtoa_r+0x41a>
 8012b0a:	9908      	ldr	r1, [sp, #32]
 8012b0c:	4b29      	ldr	r3, [pc, #164]	; (8012bb4 <_dtoa_r+0x5a4>)
 8012b0e:	4421      	add	r1, r4
 8012b10:	9112      	str	r1, [sp, #72]	; 0x48
 8012b12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012b18:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8012b1c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012b20:	2900      	cmp	r1, #0
 8012b22:	d055      	beq.n	8012bd0 <_dtoa_r+0x5c0>
 8012b24:	2000      	movs	r0, #0
 8012b26:	4929      	ldr	r1, [pc, #164]	; (8012bcc <_dtoa_r+0x5bc>)
 8012b28:	f7f0 fbd8 	bl	80032dc <__aeabi_ddiv>
 8012b2c:	463b      	mov	r3, r7
 8012b2e:	4632      	mov	r2, r6
 8012b30:	f7f0 f8f2 	bl	8002d18 <__aeabi_dsub>
 8012b34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012b38:	9f08      	ldr	r7, [sp, #32]
 8012b3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b3e:	f7f0 fd53 	bl	80035e8 <__aeabi_d2iz>
 8012b42:	4604      	mov	r4, r0
 8012b44:	f7f0 fa36 	bl	8002fb4 <__aeabi_i2d>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	460b      	mov	r3, r1
 8012b4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012b50:	f7f0 f8e2 	bl	8002d18 <__aeabi_dsub>
 8012b54:	4602      	mov	r2, r0
 8012b56:	460b      	mov	r3, r1
 8012b58:	3430      	adds	r4, #48	; 0x30
 8012b5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012b5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012b62:	f807 4b01 	strb.w	r4, [r7], #1
 8012b66:	f7f0 fd01 	bl	800356c <__aeabi_dcmplt>
 8012b6a:	2800      	cmp	r0, #0
 8012b6c:	d174      	bne.n	8012c58 <_dtoa_r+0x648>
 8012b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b72:	2000      	movs	r0, #0
 8012b74:	4911      	ldr	r1, [pc, #68]	; (8012bbc <_dtoa_r+0x5ac>)
 8012b76:	f7f0 f8cf 	bl	8002d18 <__aeabi_dsub>
 8012b7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012b7e:	f7f0 fcf5 	bl	800356c <__aeabi_dcmplt>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	f040 80b6 	bne.w	8012cf4 <_dtoa_r+0x6e4>
 8012b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012b8a:	429f      	cmp	r7, r3
 8012b8c:	f43f af7a 	beq.w	8012a84 <_dtoa_r+0x474>
 8012b90:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012b94:	2200      	movs	r2, #0
 8012b96:	4b0a      	ldr	r3, [pc, #40]	; (8012bc0 <_dtoa_r+0x5b0>)
 8012b98:	f7f0 fa76 	bl	8003088 <__aeabi_dmul>
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ba6:	4b06      	ldr	r3, [pc, #24]	; (8012bc0 <_dtoa_r+0x5b0>)
 8012ba8:	f7f0 fa6e 	bl	8003088 <__aeabi_dmul>
 8012bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012bb0:	e7c3      	b.n	8012b3a <_dtoa_r+0x52a>
 8012bb2:	bf00      	nop
 8012bb4:	080172f0 	.word	0x080172f0
 8012bb8:	080172c8 	.word	0x080172c8
 8012bbc:	3ff00000 	.word	0x3ff00000
 8012bc0:	40240000 	.word	0x40240000
 8012bc4:	401c0000 	.word	0x401c0000
 8012bc8:	40140000 	.word	0x40140000
 8012bcc:	3fe00000 	.word	0x3fe00000
 8012bd0:	4630      	mov	r0, r6
 8012bd2:	4639      	mov	r1, r7
 8012bd4:	f7f0 fa58 	bl	8003088 <__aeabi_dmul>
 8012bd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012bda:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8012bde:	9c08      	ldr	r4, [sp, #32]
 8012be0:	9314      	str	r3, [sp, #80]	; 0x50
 8012be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012be6:	f7f0 fcff 	bl	80035e8 <__aeabi_d2iz>
 8012bea:	9015      	str	r0, [sp, #84]	; 0x54
 8012bec:	f7f0 f9e2 	bl	8002fb4 <__aeabi_i2d>
 8012bf0:	4602      	mov	r2, r0
 8012bf2:	460b      	mov	r3, r1
 8012bf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012bf8:	f7f0 f88e 	bl	8002d18 <__aeabi_dsub>
 8012bfc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012bfe:	4606      	mov	r6, r0
 8012c00:	3330      	adds	r3, #48	; 0x30
 8012c02:	f804 3b01 	strb.w	r3, [r4], #1
 8012c06:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012c08:	460f      	mov	r7, r1
 8012c0a:	429c      	cmp	r4, r3
 8012c0c:	f04f 0200 	mov.w	r2, #0
 8012c10:	d124      	bne.n	8012c5c <_dtoa_r+0x64c>
 8012c12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c16:	4bb3      	ldr	r3, [pc, #716]	; (8012ee4 <_dtoa_r+0x8d4>)
 8012c18:	f7f0 f880 	bl	8002d1c <__adddf3>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	460b      	mov	r3, r1
 8012c20:	4630      	mov	r0, r6
 8012c22:	4639      	mov	r1, r7
 8012c24:	f7f0 fcc0 	bl	80035a8 <__aeabi_dcmpgt>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d162      	bne.n	8012cf2 <_dtoa_r+0x6e2>
 8012c2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012c30:	2000      	movs	r0, #0
 8012c32:	49ac      	ldr	r1, [pc, #688]	; (8012ee4 <_dtoa_r+0x8d4>)
 8012c34:	f7f0 f870 	bl	8002d18 <__aeabi_dsub>
 8012c38:	4602      	mov	r2, r0
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	4630      	mov	r0, r6
 8012c3e:	4639      	mov	r1, r7
 8012c40:	f7f0 fc94 	bl	800356c <__aeabi_dcmplt>
 8012c44:	2800      	cmp	r0, #0
 8012c46:	f43f af1d 	beq.w	8012a84 <_dtoa_r+0x474>
 8012c4a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8012c4c:	1e7b      	subs	r3, r7, #1
 8012c4e:	9314      	str	r3, [sp, #80]	; 0x50
 8012c50:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8012c54:	2b30      	cmp	r3, #48	; 0x30
 8012c56:	d0f8      	beq.n	8012c4a <_dtoa_r+0x63a>
 8012c58:	46c1      	mov	r9, r8
 8012c5a:	e03a      	b.n	8012cd2 <_dtoa_r+0x6c2>
 8012c5c:	4ba2      	ldr	r3, [pc, #648]	; (8012ee8 <_dtoa_r+0x8d8>)
 8012c5e:	f7f0 fa13 	bl	8003088 <__aeabi_dmul>
 8012c62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012c66:	e7bc      	b.n	8012be2 <_dtoa_r+0x5d2>
 8012c68:	9f08      	ldr	r7, [sp, #32]
 8012c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012c6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c72:	f7f0 fb33 	bl	80032dc <__aeabi_ddiv>
 8012c76:	f7f0 fcb7 	bl	80035e8 <__aeabi_d2iz>
 8012c7a:	4604      	mov	r4, r0
 8012c7c:	f7f0 f99a 	bl	8002fb4 <__aeabi_i2d>
 8012c80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012c84:	f7f0 fa00 	bl	8003088 <__aeabi_dmul>
 8012c88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	4602      	mov	r2, r0
 8012c90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012c94:	f7f0 f840 	bl	8002d18 <__aeabi_dsub>
 8012c98:	f807 6b01 	strb.w	r6, [r7], #1
 8012c9c:	9e08      	ldr	r6, [sp, #32]
 8012c9e:	9b02      	ldr	r3, [sp, #8]
 8012ca0:	1bbe      	subs	r6, r7, r6
 8012ca2:	42b3      	cmp	r3, r6
 8012ca4:	d13a      	bne.n	8012d1c <_dtoa_r+0x70c>
 8012ca6:	4602      	mov	r2, r0
 8012ca8:	460b      	mov	r3, r1
 8012caa:	f7f0 f837 	bl	8002d1c <__adddf3>
 8012cae:	4602      	mov	r2, r0
 8012cb0:	460b      	mov	r3, r1
 8012cb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012cb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cba:	f7f0 fc75 	bl	80035a8 <__aeabi_dcmpgt>
 8012cbe:	bb58      	cbnz	r0, 8012d18 <_dtoa_r+0x708>
 8012cc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012cc8:	f7f0 fc46 	bl	8003558 <__aeabi_dcmpeq>
 8012ccc:	b108      	cbz	r0, 8012cd2 <_dtoa_r+0x6c2>
 8012cce:	07e1      	lsls	r1, r4, #31
 8012cd0:	d422      	bmi.n	8012d18 <_dtoa_r+0x708>
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	4651      	mov	r1, sl
 8012cd6:	f000 ff9f 	bl	8013c18 <_Bfree>
 8012cda:	2300      	movs	r3, #0
 8012cdc:	703b      	strb	r3, [r7, #0]
 8012cde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012ce0:	f109 0001 	add.w	r0, r9, #1
 8012ce4:	6018      	str	r0, [r3, #0]
 8012ce6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f43f acdf 	beq.w	80126ac <_dtoa_r+0x9c>
 8012cee:	601f      	str	r7, [r3, #0]
 8012cf0:	e4dc      	b.n	80126ac <_dtoa_r+0x9c>
 8012cf2:	4627      	mov	r7, r4
 8012cf4:	463b      	mov	r3, r7
 8012cf6:	461f      	mov	r7, r3
 8012cf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012cfc:	2a39      	cmp	r2, #57	; 0x39
 8012cfe:	d107      	bne.n	8012d10 <_dtoa_r+0x700>
 8012d00:	9a08      	ldr	r2, [sp, #32]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d1f7      	bne.n	8012cf6 <_dtoa_r+0x6e6>
 8012d06:	2230      	movs	r2, #48	; 0x30
 8012d08:	9908      	ldr	r1, [sp, #32]
 8012d0a:	f108 0801 	add.w	r8, r8, #1
 8012d0e:	700a      	strb	r2, [r1, #0]
 8012d10:	781a      	ldrb	r2, [r3, #0]
 8012d12:	3201      	adds	r2, #1
 8012d14:	701a      	strb	r2, [r3, #0]
 8012d16:	e79f      	b.n	8012c58 <_dtoa_r+0x648>
 8012d18:	46c8      	mov	r8, r9
 8012d1a:	e7eb      	b.n	8012cf4 <_dtoa_r+0x6e4>
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	4b72      	ldr	r3, [pc, #456]	; (8012ee8 <_dtoa_r+0x8d8>)
 8012d20:	f7f0 f9b2 	bl	8003088 <__aeabi_dmul>
 8012d24:	4602      	mov	r2, r0
 8012d26:	460b      	mov	r3, r1
 8012d28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	2300      	movs	r3, #0
 8012d30:	f7f0 fc12 	bl	8003558 <__aeabi_dcmpeq>
 8012d34:	2800      	cmp	r0, #0
 8012d36:	d098      	beq.n	8012c6a <_dtoa_r+0x65a>
 8012d38:	e7cb      	b.n	8012cd2 <_dtoa_r+0x6c2>
 8012d3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d3c:	2a00      	cmp	r2, #0
 8012d3e:	f000 80cd 	beq.w	8012edc <_dtoa_r+0x8cc>
 8012d42:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012d44:	2a01      	cmp	r2, #1
 8012d46:	f300 80af 	bgt.w	8012ea8 <_dtoa_r+0x898>
 8012d4a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012d4c:	2a00      	cmp	r2, #0
 8012d4e:	f000 80a7 	beq.w	8012ea0 <_dtoa_r+0x890>
 8012d52:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012d56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012d58:	9f06      	ldr	r7, [sp, #24]
 8012d5a:	9a06      	ldr	r2, [sp, #24]
 8012d5c:	2101      	movs	r1, #1
 8012d5e:	441a      	add	r2, r3
 8012d60:	9206      	str	r2, [sp, #24]
 8012d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d64:	4628      	mov	r0, r5
 8012d66:	441a      	add	r2, r3
 8012d68:	9209      	str	r2, [sp, #36]	; 0x24
 8012d6a:	f001 f859 	bl	8013e20 <__i2b>
 8012d6e:	4606      	mov	r6, r0
 8012d70:	2f00      	cmp	r7, #0
 8012d72:	dd0c      	ble.n	8012d8e <_dtoa_r+0x77e>
 8012d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	dd09      	ble.n	8012d8e <_dtoa_r+0x77e>
 8012d7a:	42bb      	cmp	r3, r7
 8012d7c:	bfa8      	it	ge
 8012d7e:	463b      	movge	r3, r7
 8012d80:	9a06      	ldr	r2, [sp, #24]
 8012d82:	1aff      	subs	r7, r7, r3
 8012d84:	1ad2      	subs	r2, r2, r3
 8012d86:	9206      	str	r2, [sp, #24]
 8012d88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8012d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d90:	b1f3      	cbz	r3, 8012dd0 <_dtoa_r+0x7c0>
 8012d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	f000 80a9 	beq.w	8012eec <_dtoa_r+0x8dc>
 8012d9a:	2c00      	cmp	r4, #0
 8012d9c:	dd10      	ble.n	8012dc0 <_dtoa_r+0x7b0>
 8012d9e:	4631      	mov	r1, r6
 8012da0:	4622      	mov	r2, r4
 8012da2:	4628      	mov	r0, r5
 8012da4:	f001 f8f6 	bl	8013f94 <__pow5mult>
 8012da8:	4652      	mov	r2, sl
 8012daa:	4601      	mov	r1, r0
 8012dac:	4606      	mov	r6, r0
 8012dae:	4628      	mov	r0, r5
 8012db0:	f001 f84c 	bl	8013e4c <__multiply>
 8012db4:	4680      	mov	r8, r0
 8012db6:	4651      	mov	r1, sl
 8012db8:	4628      	mov	r0, r5
 8012dba:	f000 ff2d 	bl	8013c18 <_Bfree>
 8012dbe:	46c2      	mov	sl, r8
 8012dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dc2:	1b1a      	subs	r2, r3, r4
 8012dc4:	d004      	beq.n	8012dd0 <_dtoa_r+0x7c0>
 8012dc6:	4651      	mov	r1, sl
 8012dc8:	4628      	mov	r0, r5
 8012dca:	f001 f8e3 	bl	8013f94 <__pow5mult>
 8012dce:	4682      	mov	sl, r0
 8012dd0:	2101      	movs	r1, #1
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	f001 f824 	bl	8013e20 <__i2b>
 8012dd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012dda:	4604      	mov	r4, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	f340 8087 	ble.w	8012ef0 <_dtoa_r+0x8e0>
 8012de2:	461a      	mov	r2, r3
 8012de4:	4601      	mov	r1, r0
 8012de6:	4628      	mov	r0, r5
 8012de8:	f001 f8d4 	bl	8013f94 <__pow5mult>
 8012dec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012dee:	4604      	mov	r4, r0
 8012df0:	2b01      	cmp	r3, #1
 8012df2:	f340 8080 	ble.w	8012ef6 <_dtoa_r+0x8e6>
 8012df6:	f04f 0800 	mov.w	r8, #0
 8012dfa:	6923      	ldr	r3, [r4, #16]
 8012dfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012e00:	6918      	ldr	r0, [r3, #16]
 8012e02:	f000 ffbf 	bl	8013d84 <__hi0bits>
 8012e06:	f1c0 0020 	rsb	r0, r0, #32
 8012e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e0c:	4418      	add	r0, r3
 8012e0e:	f010 001f 	ands.w	r0, r0, #31
 8012e12:	f000 8092 	beq.w	8012f3a <_dtoa_r+0x92a>
 8012e16:	f1c0 0320 	rsb	r3, r0, #32
 8012e1a:	2b04      	cmp	r3, #4
 8012e1c:	f340 808a 	ble.w	8012f34 <_dtoa_r+0x924>
 8012e20:	f1c0 001c 	rsb	r0, r0, #28
 8012e24:	9b06      	ldr	r3, [sp, #24]
 8012e26:	4407      	add	r7, r0
 8012e28:	4403      	add	r3, r0
 8012e2a:	9306      	str	r3, [sp, #24]
 8012e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e2e:	4403      	add	r3, r0
 8012e30:	9309      	str	r3, [sp, #36]	; 0x24
 8012e32:	9b06      	ldr	r3, [sp, #24]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	dd05      	ble.n	8012e44 <_dtoa_r+0x834>
 8012e38:	4651      	mov	r1, sl
 8012e3a:	461a      	mov	r2, r3
 8012e3c:	4628      	mov	r0, r5
 8012e3e:	f001 f903 	bl	8014048 <__lshift>
 8012e42:	4682      	mov	sl, r0
 8012e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	dd05      	ble.n	8012e56 <_dtoa_r+0x846>
 8012e4a:	4621      	mov	r1, r4
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	4628      	mov	r0, r5
 8012e50:	f001 f8fa 	bl	8014048 <__lshift>
 8012e54:	4604      	mov	r4, r0
 8012e56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d070      	beq.n	8012f3e <_dtoa_r+0x92e>
 8012e5c:	4621      	mov	r1, r4
 8012e5e:	4650      	mov	r0, sl
 8012e60:	f001 f95e 	bl	8014120 <__mcmp>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	da6a      	bge.n	8012f3e <_dtoa_r+0x92e>
 8012e68:	2300      	movs	r3, #0
 8012e6a:	4651      	mov	r1, sl
 8012e6c:	220a      	movs	r2, #10
 8012e6e:	4628      	mov	r0, r5
 8012e70:	f000 fef4 	bl	8013c5c <__multadd>
 8012e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e76:	4682      	mov	sl, r0
 8012e78:	f109 39ff 	add.w	r9, r9, #4294967295
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f000 8193 	beq.w	80131a8 <_dtoa_r+0xb98>
 8012e82:	4631      	mov	r1, r6
 8012e84:	2300      	movs	r3, #0
 8012e86:	220a      	movs	r2, #10
 8012e88:	4628      	mov	r0, r5
 8012e8a:	f000 fee7 	bl	8013c5c <__multadd>
 8012e8e:	f1bb 0f00 	cmp.w	fp, #0
 8012e92:	4606      	mov	r6, r0
 8012e94:	f300 8093 	bgt.w	8012fbe <_dtoa_r+0x9ae>
 8012e98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012e9a:	2b02      	cmp	r3, #2
 8012e9c:	dc57      	bgt.n	8012f4e <_dtoa_r+0x93e>
 8012e9e:	e08e      	b.n	8012fbe <_dtoa_r+0x9ae>
 8012ea0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012ea2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ea6:	e756      	b.n	8012d56 <_dtoa_r+0x746>
 8012ea8:	9b02      	ldr	r3, [sp, #8]
 8012eaa:	1e5c      	subs	r4, r3, #1
 8012eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012eae:	42a3      	cmp	r3, r4
 8012eb0:	bfb7      	itett	lt
 8012eb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8012eb4:	1b1c      	subge	r4, r3, r4
 8012eb6:	1ae2      	sublt	r2, r4, r3
 8012eb8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012eba:	bfbe      	ittt	lt
 8012ebc:	940a      	strlt	r4, [sp, #40]	; 0x28
 8012ebe:	189b      	addlt	r3, r3, r2
 8012ec0:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012ec2:	9b02      	ldr	r3, [sp, #8]
 8012ec4:	bfb8      	it	lt
 8012ec6:	2400      	movlt	r4, #0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	bfbb      	ittet	lt
 8012ecc:	9b06      	ldrlt	r3, [sp, #24]
 8012ece:	9a02      	ldrlt	r2, [sp, #8]
 8012ed0:	9f06      	ldrge	r7, [sp, #24]
 8012ed2:	1a9f      	sublt	r7, r3, r2
 8012ed4:	bfac      	ite	ge
 8012ed6:	9b02      	ldrge	r3, [sp, #8]
 8012ed8:	2300      	movlt	r3, #0
 8012eda:	e73e      	b.n	8012d5a <_dtoa_r+0x74a>
 8012edc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012ede:	9f06      	ldr	r7, [sp, #24]
 8012ee0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8012ee2:	e745      	b.n	8012d70 <_dtoa_r+0x760>
 8012ee4:	3fe00000 	.word	0x3fe00000
 8012ee8:	40240000 	.word	0x40240000
 8012eec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012eee:	e76a      	b.n	8012dc6 <_dtoa_r+0x7b6>
 8012ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	dc19      	bgt.n	8012f2a <_dtoa_r+0x91a>
 8012ef6:	9b04      	ldr	r3, [sp, #16]
 8012ef8:	b9bb      	cbnz	r3, 8012f2a <_dtoa_r+0x91a>
 8012efa:	9b05      	ldr	r3, [sp, #20]
 8012efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f00:	b99b      	cbnz	r3, 8012f2a <_dtoa_r+0x91a>
 8012f02:	9b05      	ldr	r3, [sp, #20]
 8012f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012f08:	0d1b      	lsrs	r3, r3, #20
 8012f0a:	051b      	lsls	r3, r3, #20
 8012f0c:	b183      	cbz	r3, 8012f30 <_dtoa_r+0x920>
 8012f0e:	f04f 0801 	mov.w	r8, #1
 8012f12:	9b06      	ldr	r3, [sp, #24]
 8012f14:	3301      	adds	r3, #1
 8012f16:	9306      	str	r3, [sp, #24]
 8012f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8012f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	f47f af6a 	bne.w	8012dfa <_dtoa_r+0x7ea>
 8012f26:	2001      	movs	r0, #1
 8012f28:	e76f      	b.n	8012e0a <_dtoa_r+0x7fa>
 8012f2a:	f04f 0800 	mov.w	r8, #0
 8012f2e:	e7f6      	b.n	8012f1e <_dtoa_r+0x90e>
 8012f30:	4698      	mov	r8, r3
 8012f32:	e7f4      	b.n	8012f1e <_dtoa_r+0x90e>
 8012f34:	f43f af7d 	beq.w	8012e32 <_dtoa_r+0x822>
 8012f38:	4618      	mov	r0, r3
 8012f3a:	301c      	adds	r0, #28
 8012f3c:	e772      	b.n	8012e24 <_dtoa_r+0x814>
 8012f3e:	9b02      	ldr	r3, [sp, #8]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	dc36      	bgt.n	8012fb2 <_dtoa_r+0x9a2>
 8012f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012f46:	2b02      	cmp	r3, #2
 8012f48:	dd33      	ble.n	8012fb2 <_dtoa_r+0x9a2>
 8012f4a:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012f4e:	f1bb 0f00 	cmp.w	fp, #0
 8012f52:	d10d      	bne.n	8012f70 <_dtoa_r+0x960>
 8012f54:	4621      	mov	r1, r4
 8012f56:	465b      	mov	r3, fp
 8012f58:	2205      	movs	r2, #5
 8012f5a:	4628      	mov	r0, r5
 8012f5c:	f000 fe7e 	bl	8013c5c <__multadd>
 8012f60:	4601      	mov	r1, r0
 8012f62:	4604      	mov	r4, r0
 8012f64:	4650      	mov	r0, sl
 8012f66:	f001 f8db 	bl	8014120 <__mcmp>
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	f73f adb6 	bgt.w	8012adc <_dtoa_r+0x4cc>
 8012f70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012f72:	9f08      	ldr	r7, [sp, #32]
 8012f74:	ea6f 0903 	mvn.w	r9, r3
 8012f78:	f04f 0800 	mov.w	r8, #0
 8012f7c:	4621      	mov	r1, r4
 8012f7e:	4628      	mov	r0, r5
 8012f80:	f000 fe4a 	bl	8013c18 <_Bfree>
 8012f84:	2e00      	cmp	r6, #0
 8012f86:	f43f aea4 	beq.w	8012cd2 <_dtoa_r+0x6c2>
 8012f8a:	f1b8 0f00 	cmp.w	r8, #0
 8012f8e:	d005      	beq.n	8012f9c <_dtoa_r+0x98c>
 8012f90:	45b0      	cmp	r8, r6
 8012f92:	d003      	beq.n	8012f9c <_dtoa_r+0x98c>
 8012f94:	4641      	mov	r1, r8
 8012f96:	4628      	mov	r0, r5
 8012f98:	f000 fe3e 	bl	8013c18 <_Bfree>
 8012f9c:	4631      	mov	r1, r6
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	f000 fe3a 	bl	8013c18 <_Bfree>
 8012fa4:	e695      	b.n	8012cd2 <_dtoa_r+0x6c2>
 8012fa6:	2400      	movs	r4, #0
 8012fa8:	4626      	mov	r6, r4
 8012faa:	e7e1      	b.n	8012f70 <_dtoa_r+0x960>
 8012fac:	46c1      	mov	r9, r8
 8012fae:	4626      	mov	r6, r4
 8012fb0:	e594      	b.n	8012adc <_dtoa_r+0x4cc>
 8012fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012fb4:	f8dd b008 	ldr.w	fp, [sp, #8]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	f000 80fc 	beq.w	80131b6 <_dtoa_r+0xba6>
 8012fbe:	2f00      	cmp	r7, #0
 8012fc0:	dd05      	ble.n	8012fce <_dtoa_r+0x9be>
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	463a      	mov	r2, r7
 8012fc6:	4628      	mov	r0, r5
 8012fc8:	f001 f83e 	bl	8014048 <__lshift>
 8012fcc:	4606      	mov	r6, r0
 8012fce:	f1b8 0f00 	cmp.w	r8, #0
 8012fd2:	d05c      	beq.n	801308e <_dtoa_r+0xa7e>
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	6871      	ldr	r1, [r6, #4]
 8012fd8:	f000 fdde 	bl	8013b98 <_Balloc>
 8012fdc:	4607      	mov	r7, r0
 8012fde:	b928      	cbnz	r0, 8012fec <_dtoa_r+0x9dc>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012fe6:	4b7e      	ldr	r3, [pc, #504]	; (80131e0 <_dtoa_r+0xbd0>)
 8012fe8:	f7ff bb26 	b.w	8012638 <_dtoa_r+0x28>
 8012fec:	6932      	ldr	r2, [r6, #16]
 8012fee:	f106 010c 	add.w	r1, r6, #12
 8012ff2:	3202      	adds	r2, #2
 8012ff4:	0092      	lsls	r2, r2, #2
 8012ff6:	300c      	adds	r0, #12
 8012ff8:	f7fd faf1 	bl	80105de <memcpy>
 8012ffc:	2201      	movs	r2, #1
 8012ffe:	4639      	mov	r1, r7
 8013000:	4628      	mov	r0, r5
 8013002:	f001 f821 	bl	8014048 <__lshift>
 8013006:	46b0      	mov	r8, r6
 8013008:	4606      	mov	r6, r0
 801300a:	9b08      	ldr	r3, [sp, #32]
 801300c:	3301      	adds	r3, #1
 801300e:	9302      	str	r3, [sp, #8]
 8013010:	9b08      	ldr	r3, [sp, #32]
 8013012:	445b      	add	r3, fp
 8013014:	930a      	str	r3, [sp, #40]	; 0x28
 8013016:	9b04      	ldr	r3, [sp, #16]
 8013018:	f003 0301 	and.w	r3, r3, #1
 801301c:	9309      	str	r3, [sp, #36]	; 0x24
 801301e:	9b02      	ldr	r3, [sp, #8]
 8013020:	4621      	mov	r1, r4
 8013022:	4650      	mov	r0, sl
 8013024:	f103 3bff 	add.w	fp, r3, #4294967295
 8013028:	f7ff fa62 	bl	80124f0 <quorem>
 801302c:	4603      	mov	r3, r0
 801302e:	4641      	mov	r1, r8
 8013030:	3330      	adds	r3, #48	; 0x30
 8013032:	9004      	str	r0, [sp, #16]
 8013034:	4650      	mov	r0, sl
 8013036:	930b      	str	r3, [sp, #44]	; 0x2c
 8013038:	f001 f872 	bl	8014120 <__mcmp>
 801303c:	4632      	mov	r2, r6
 801303e:	9006      	str	r0, [sp, #24]
 8013040:	4621      	mov	r1, r4
 8013042:	4628      	mov	r0, r5
 8013044:	f001 f888 	bl	8014158 <__mdiff>
 8013048:	68c2      	ldr	r2, [r0, #12]
 801304a:	4607      	mov	r7, r0
 801304c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801304e:	bb02      	cbnz	r2, 8013092 <_dtoa_r+0xa82>
 8013050:	4601      	mov	r1, r0
 8013052:	4650      	mov	r0, sl
 8013054:	f001 f864 	bl	8014120 <__mcmp>
 8013058:	4602      	mov	r2, r0
 801305a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801305c:	4639      	mov	r1, r7
 801305e:	4628      	mov	r0, r5
 8013060:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8013064:	f000 fdd8 	bl	8013c18 <_Bfree>
 8013068:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801306a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801306c:	9f02      	ldr	r7, [sp, #8]
 801306e:	ea43 0102 	orr.w	r1, r3, r2
 8013072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013074:	430b      	orrs	r3, r1
 8013076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013078:	d10d      	bne.n	8013096 <_dtoa_r+0xa86>
 801307a:	2b39      	cmp	r3, #57	; 0x39
 801307c:	d027      	beq.n	80130ce <_dtoa_r+0xabe>
 801307e:	9a06      	ldr	r2, [sp, #24]
 8013080:	2a00      	cmp	r2, #0
 8013082:	dd01      	ble.n	8013088 <_dtoa_r+0xa78>
 8013084:	9b04      	ldr	r3, [sp, #16]
 8013086:	3331      	adds	r3, #49	; 0x31
 8013088:	f88b 3000 	strb.w	r3, [fp]
 801308c:	e776      	b.n	8012f7c <_dtoa_r+0x96c>
 801308e:	4630      	mov	r0, r6
 8013090:	e7b9      	b.n	8013006 <_dtoa_r+0x9f6>
 8013092:	2201      	movs	r2, #1
 8013094:	e7e2      	b.n	801305c <_dtoa_r+0xa4c>
 8013096:	9906      	ldr	r1, [sp, #24]
 8013098:	2900      	cmp	r1, #0
 801309a:	db04      	blt.n	80130a6 <_dtoa_r+0xa96>
 801309c:	9822      	ldr	r0, [sp, #136]	; 0x88
 801309e:	4301      	orrs	r1, r0
 80130a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130a2:	4301      	orrs	r1, r0
 80130a4:	d120      	bne.n	80130e8 <_dtoa_r+0xad8>
 80130a6:	2a00      	cmp	r2, #0
 80130a8:	ddee      	ble.n	8013088 <_dtoa_r+0xa78>
 80130aa:	4651      	mov	r1, sl
 80130ac:	2201      	movs	r2, #1
 80130ae:	4628      	mov	r0, r5
 80130b0:	9302      	str	r3, [sp, #8]
 80130b2:	f000 ffc9 	bl	8014048 <__lshift>
 80130b6:	4621      	mov	r1, r4
 80130b8:	4682      	mov	sl, r0
 80130ba:	f001 f831 	bl	8014120 <__mcmp>
 80130be:	2800      	cmp	r0, #0
 80130c0:	9b02      	ldr	r3, [sp, #8]
 80130c2:	dc02      	bgt.n	80130ca <_dtoa_r+0xaba>
 80130c4:	d1e0      	bne.n	8013088 <_dtoa_r+0xa78>
 80130c6:	07da      	lsls	r2, r3, #31
 80130c8:	d5de      	bpl.n	8013088 <_dtoa_r+0xa78>
 80130ca:	2b39      	cmp	r3, #57	; 0x39
 80130cc:	d1da      	bne.n	8013084 <_dtoa_r+0xa74>
 80130ce:	2339      	movs	r3, #57	; 0x39
 80130d0:	f88b 3000 	strb.w	r3, [fp]
 80130d4:	463b      	mov	r3, r7
 80130d6:	461f      	mov	r7, r3
 80130d8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80130dc:	3b01      	subs	r3, #1
 80130de:	2a39      	cmp	r2, #57	; 0x39
 80130e0:	d050      	beq.n	8013184 <_dtoa_r+0xb74>
 80130e2:	3201      	adds	r2, #1
 80130e4:	701a      	strb	r2, [r3, #0]
 80130e6:	e749      	b.n	8012f7c <_dtoa_r+0x96c>
 80130e8:	2a00      	cmp	r2, #0
 80130ea:	dd03      	ble.n	80130f4 <_dtoa_r+0xae4>
 80130ec:	2b39      	cmp	r3, #57	; 0x39
 80130ee:	d0ee      	beq.n	80130ce <_dtoa_r+0xabe>
 80130f0:	3301      	adds	r3, #1
 80130f2:	e7c9      	b.n	8013088 <_dtoa_r+0xa78>
 80130f4:	9a02      	ldr	r2, [sp, #8]
 80130f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80130f8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80130fc:	428a      	cmp	r2, r1
 80130fe:	d02a      	beq.n	8013156 <_dtoa_r+0xb46>
 8013100:	4651      	mov	r1, sl
 8013102:	2300      	movs	r3, #0
 8013104:	220a      	movs	r2, #10
 8013106:	4628      	mov	r0, r5
 8013108:	f000 fda8 	bl	8013c5c <__multadd>
 801310c:	45b0      	cmp	r8, r6
 801310e:	4682      	mov	sl, r0
 8013110:	f04f 0300 	mov.w	r3, #0
 8013114:	f04f 020a 	mov.w	r2, #10
 8013118:	4641      	mov	r1, r8
 801311a:	4628      	mov	r0, r5
 801311c:	d107      	bne.n	801312e <_dtoa_r+0xb1e>
 801311e:	f000 fd9d 	bl	8013c5c <__multadd>
 8013122:	4680      	mov	r8, r0
 8013124:	4606      	mov	r6, r0
 8013126:	9b02      	ldr	r3, [sp, #8]
 8013128:	3301      	adds	r3, #1
 801312a:	9302      	str	r3, [sp, #8]
 801312c:	e777      	b.n	801301e <_dtoa_r+0xa0e>
 801312e:	f000 fd95 	bl	8013c5c <__multadd>
 8013132:	4631      	mov	r1, r6
 8013134:	4680      	mov	r8, r0
 8013136:	2300      	movs	r3, #0
 8013138:	220a      	movs	r2, #10
 801313a:	4628      	mov	r0, r5
 801313c:	f000 fd8e 	bl	8013c5c <__multadd>
 8013140:	4606      	mov	r6, r0
 8013142:	e7f0      	b.n	8013126 <_dtoa_r+0xb16>
 8013144:	f1bb 0f00 	cmp.w	fp, #0
 8013148:	bfcc      	ite	gt
 801314a:	465f      	movgt	r7, fp
 801314c:	2701      	movle	r7, #1
 801314e:	f04f 0800 	mov.w	r8, #0
 8013152:	9a08      	ldr	r2, [sp, #32]
 8013154:	4417      	add	r7, r2
 8013156:	4651      	mov	r1, sl
 8013158:	2201      	movs	r2, #1
 801315a:	4628      	mov	r0, r5
 801315c:	9302      	str	r3, [sp, #8]
 801315e:	f000 ff73 	bl	8014048 <__lshift>
 8013162:	4621      	mov	r1, r4
 8013164:	4682      	mov	sl, r0
 8013166:	f000 ffdb 	bl	8014120 <__mcmp>
 801316a:	2800      	cmp	r0, #0
 801316c:	dcb2      	bgt.n	80130d4 <_dtoa_r+0xac4>
 801316e:	d102      	bne.n	8013176 <_dtoa_r+0xb66>
 8013170:	9b02      	ldr	r3, [sp, #8]
 8013172:	07db      	lsls	r3, r3, #31
 8013174:	d4ae      	bmi.n	80130d4 <_dtoa_r+0xac4>
 8013176:	463b      	mov	r3, r7
 8013178:	461f      	mov	r7, r3
 801317a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801317e:	2a30      	cmp	r2, #48	; 0x30
 8013180:	d0fa      	beq.n	8013178 <_dtoa_r+0xb68>
 8013182:	e6fb      	b.n	8012f7c <_dtoa_r+0x96c>
 8013184:	9a08      	ldr	r2, [sp, #32]
 8013186:	429a      	cmp	r2, r3
 8013188:	d1a5      	bne.n	80130d6 <_dtoa_r+0xac6>
 801318a:	2331      	movs	r3, #49	; 0x31
 801318c:	f109 0901 	add.w	r9, r9, #1
 8013190:	7013      	strb	r3, [r2, #0]
 8013192:	e6f3      	b.n	8012f7c <_dtoa_r+0x96c>
 8013194:	4b13      	ldr	r3, [pc, #76]	; (80131e4 <_dtoa_r+0xbd4>)
 8013196:	f7ff baa7 	b.w	80126e8 <_dtoa_r+0xd8>
 801319a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801319c:	2b00      	cmp	r3, #0
 801319e:	f47f aa80 	bne.w	80126a2 <_dtoa_r+0x92>
 80131a2:	4b11      	ldr	r3, [pc, #68]	; (80131e8 <_dtoa_r+0xbd8>)
 80131a4:	f7ff baa0 	b.w	80126e8 <_dtoa_r+0xd8>
 80131a8:	f1bb 0f00 	cmp.w	fp, #0
 80131ac:	dc03      	bgt.n	80131b6 <_dtoa_r+0xba6>
 80131ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80131b0:	2b02      	cmp	r3, #2
 80131b2:	f73f aecc 	bgt.w	8012f4e <_dtoa_r+0x93e>
 80131b6:	9f08      	ldr	r7, [sp, #32]
 80131b8:	4621      	mov	r1, r4
 80131ba:	4650      	mov	r0, sl
 80131bc:	f7ff f998 	bl	80124f0 <quorem>
 80131c0:	9a08      	ldr	r2, [sp, #32]
 80131c2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80131c6:	f807 3b01 	strb.w	r3, [r7], #1
 80131ca:	1aba      	subs	r2, r7, r2
 80131cc:	4593      	cmp	fp, r2
 80131ce:	ddb9      	ble.n	8013144 <_dtoa_r+0xb34>
 80131d0:	4651      	mov	r1, sl
 80131d2:	2300      	movs	r3, #0
 80131d4:	220a      	movs	r2, #10
 80131d6:	4628      	mov	r0, r5
 80131d8:	f000 fd40 	bl	8013c5c <__multadd>
 80131dc:	4682      	mov	sl, r0
 80131de:	e7eb      	b.n	80131b8 <_dtoa_r+0xba8>
 80131e0:	080171d4 	.word	0x080171d4
 80131e4:	08016fd0 	.word	0x08016fd0
 80131e8:	08017151 	.word	0x08017151

080131ec <__sflush_r>:
 80131ec:	898a      	ldrh	r2, [r1, #12]
 80131ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f2:	4605      	mov	r5, r0
 80131f4:	0710      	lsls	r0, r2, #28
 80131f6:	460c      	mov	r4, r1
 80131f8:	d458      	bmi.n	80132ac <__sflush_r+0xc0>
 80131fa:	684b      	ldr	r3, [r1, #4]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	dc05      	bgt.n	801320c <__sflush_r+0x20>
 8013200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013202:	2b00      	cmp	r3, #0
 8013204:	dc02      	bgt.n	801320c <__sflush_r+0x20>
 8013206:	2000      	movs	r0, #0
 8013208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801320c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801320e:	2e00      	cmp	r6, #0
 8013210:	d0f9      	beq.n	8013206 <__sflush_r+0x1a>
 8013212:	2300      	movs	r3, #0
 8013214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013218:	682f      	ldr	r7, [r5, #0]
 801321a:	602b      	str	r3, [r5, #0]
 801321c:	d032      	beq.n	8013284 <__sflush_r+0x98>
 801321e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013220:	89a3      	ldrh	r3, [r4, #12]
 8013222:	075a      	lsls	r2, r3, #29
 8013224:	d505      	bpl.n	8013232 <__sflush_r+0x46>
 8013226:	6863      	ldr	r3, [r4, #4]
 8013228:	1ac0      	subs	r0, r0, r3
 801322a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801322c:	b10b      	cbz	r3, 8013232 <__sflush_r+0x46>
 801322e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013230:	1ac0      	subs	r0, r0, r3
 8013232:	2300      	movs	r3, #0
 8013234:	4602      	mov	r2, r0
 8013236:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013238:	4628      	mov	r0, r5
 801323a:	6a21      	ldr	r1, [r4, #32]
 801323c:	47b0      	blx	r6
 801323e:	1c43      	adds	r3, r0, #1
 8013240:	89a3      	ldrh	r3, [r4, #12]
 8013242:	d106      	bne.n	8013252 <__sflush_r+0x66>
 8013244:	6829      	ldr	r1, [r5, #0]
 8013246:	291d      	cmp	r1, #29
 8013248:	d82c      	bhi.n	80132a4 <__sflush_r+0xb8>
 801324a:	4a2a      	ldr	r2, [pc, #168]	; (80132f4 <__sflush_r+0x108>)
 801324c:	40ca      	lsrs	r2, r1
 801324e:	07d6      	lsls	r6, r2, #31
 8013250:	d528      	bpl.n	80132a4 <__sflush_r+0xb8>
 8013252:	2200      	movs	r2, #0
 8013254:	6062      	str	r2, [r4, #4]
 8013256:	6922      	ldr	r2, [r4, #16]
 8013258:	04d9      	lsls	r1, r3, #19
 801325a:	6022      	str	r2, [r4, #0]
 801325c:	d504      	bpl.n	8013268 <__sflush_r+0x7c>
 801325e:	1c42      	adds	r2, r0, #1
 8013260:	d101      	bne.n	8013266 <__sflush_r+0x7a>
 8013262:	682b      	ldr	r3, [r5, #0]
 8013264:	b903      	cbnz	r3, 8013268 <__sflush_r+0x7c>
 8013266:	6560      	str	r0, [r4, #84]	; 0x54
 8013268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801326a:	602f      	str	r7, [r5, #0]
 801326c:	2900      	cmp	r1, #0
 801326e:	d0ca      	beq.n	8013206 <__sflush_r+0x1a>
 8013270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013274:	4299      	cmp	r1, r3
 8013276:	d002      	beq.n	801327e <__sflush_r+0x92>
 8013278:	4628      	mov	r0, r5
 801327a:	f001 f953 	bl	8014524 <_free_r>
 801327e:	2000      	movs	r0, #0
 8013280:	6360      	str	r0, [r4, #52]	; 0x34
 8013282:	e7c1      	b.n	8013208 <__sflush_r+0x1c>
 8013284:	6a21      	ldr	r1, [r4, #32]
 8013286:	2301      	movs	r3, #1
 8013288:	4628      	mov	r0, r5
 801328a:	47b0      	blx	r6
 801328c:	1c41      	adds	r1, r0, #1
 801328e:	d1c7      	bne.n	8013220 <__sflush_r+0x34>
 8013290:	682b      	ldr	r3, [r5, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d0c4      	beq.n	8013220 <__sflush_r+0x34>
 8013296:	2b1d      	cmp	r3, #29
 8013298:	d001      	beq.n	801329e <__sflush_r+0xb2>
 801329a:	2b16      	cmp	r3, #22
 801329c:	d101      	bne.n	80132a2 <__sflush_r+0xb6>
 801329e:	602f      	str	r7, [r5, #0]
 80132a0:	e7b1      	b.n	8013206 <__sflush_r+0x1a>
 80132a2:	89a3      	ldrh	r3, [r4, #12]
 80132a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132a8:	81a3      	strh	r3, [r4, #12]
 80132aa:	e7ad      	b.n	8013208 <__sflush_r+0x1c>
 80132ac:	690f      	ldr	r7, [r1, #16]
 80132ae:	2f00      	cmp	r7, #0
 80132b0:	d0a9      	beq.n	8013206 <__sflush_r+0x1a>
 80132b2:	0793      	lsls	r3, r2, #30
 80132b4:	bf18      	it	ne
 80132b6:	2300      	movne	r3, #0
 80132b8:	680e      	ldr	r6, [r1, #0]
 80132ba:	bf08      	it	eq
 80132bc:	694b      	ldreq	r3, [r1, #20]
 80132be:	eba6 0807 	sub.w	r8, r6, r7
 80132c2:	600f      	str	r7, [r1, #0]
 80132c4:	608b      	str	r3, [r1, #8]
 80132c6:	f1b8 0f00 	cmp.w	r8, #0
 80132ca:	dd9c      	ble.n	8013206 <__sflush_r+0x1a>
 80132cc:	4643      	mov	r3, r8
 80132ce:	463a      	mov	r2, r7
 80132d0:	4628      	mov	r0, r5
 80132d2:	6a21      	ldr	r1, [r4, #32]
 80132d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132d6:	47b0      	blx	r6
 80132d8:	2800      	cmp	r0, #0
 80132da:	dc06      	bgt.n	80132ea <__sflush_r+0xfe>
 80132dc:	89a3      	ldrh	r3, [r4, #12]
 80132de:	f04f 30ff 	mov.w	r0, #4294967295
 80132e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132e6:	81a3      	strh	r3, [r4, #12]
 80132e8:	e78e      	b.n	8013208 <__sflush_r+0x1c>
 80132ea:	4407      	add	r7, r0
 80132ec:	eba8 0800 	sub.w	r8, r8, r0
 80132f0:	e7e9      	b.n	80132c6 <__sflush_r+0xda>
 80132f2:	bf00      	nop
 80132f4:	20400001 	.word	0x20400001

080132f8 <_fflush_r>:
 80132f8:	b538      	push	{r3, r4, r5, lr}
 80132fa:	690b      	ldr	r3, [r1, #16]
 80132fc:	4605      	mov	r5, r0
 80132fe:	460c      	mov	r4, r1
 8013300:	b913      	cbnz	r3, 8013308 <_fflush_r+0x10>
 8013302:	2500      	movs	r5, #0
 8013304:	4628      	mov	r0, r5
 8013306:	bd38      	pop	{r3, r4, r5, pc}
 8013308:	b118      	cbz	r0, 8013312 <_fflush_r+0x1a>
 801330a:	6983      	ldr	r3, [r0, #24]
 801330c:	b90b      	cbnz	r3, 8013312 <_fflush_r+0x1a>
 801330e:	f7fd f893 	bl	8010438 <__sinit>
 8013312:	4b14      	ldr	r3, [pc, #80]	; (8013364 <_fflush_r+0x6c>)
 8013314:	429c      	cmp	r4, r3
 8013316:	d11b      	bne.n	8013350 <_fflush_r+0x58>
 8013318:	686c      	ldr	r4, [r5, #4]
 801331a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d0ef      	beq.n	8013302 <_fflush_r+0xa>
 8013322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013324:	07d0      	lsls	r0, r2, #31
 8013326:	d404      	bmi.n	8013332 <_fflush_r+0x3a>
 8013328:	0599      	lsls	r1, r3, #22
 801332a:	d402      	bmi.n	8013332 <_fflush_r+0x3a>
 801332c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801332e:	f7fd f946 	bl	80105be <__retarget_lock_acquire_recursive>
 8013332:	4628      	mov	r0, r5
 8013334:	4621      	mov	r1, r4
 8013336:	f7ff ff59 	bl	80131ec <__sflush_r>
 801333a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801333c:	4605      	mov	r5, r0
 801333e:	07da      	lsls	r2, r3, #31
 8013340:	d4e0      	bmi.n	8013304 <_fflush_r+0xc>
 8013342:	89a3      	ldrh	r3, [r4, #12]
 8013344:	059b      	lsls	r3, r3, #22
 8013346:	d4dd      	bmi.n	8013304 <_fflush_r+0xc>
 8013348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801334a:	f7fd f939 	bl	80105c0 <__retarget_lock_release_recursive>
 801334e:	e7d9      	b.n	8013304 <_fflush_r+0xc>
 8013350:	4b05      	ldr	r3, [pc, #20]	; (8013368 <_fflush_r+0x70>)
 8013352:	429c      	cmp	r4, r3
 8013354:	d101      	bne.n	801335a <_fflush_r+0x62>
 8013356:	68ac      	ldr	r4, [r5, #8]
 8013358:	e7df      	b.n	801331a <_fflush_r+0x22>
 801335a:	4b04      	ldr	r3, [pc, #16]	; (801336c <_fflush_r+0x74>)
 801335c:	429c      	cmp	r4, r3
 801335e:	bf08      	it	eq
 8013360:	68ec      	ldreq	r4, [r5, #12]
 8013362:	e7da      	b.n	801331a <_fflush_r+0x22>
 8013364:	08016f7c 	.word	0x08016f7c
 8013368:	08016f9c 	.word	0x08016f9c
 801336c:	08016f5c 	.word	0x08016f5c

08013370 <rshift>:
 8013370:	6903      	ldr	r3, [r0, #16]
 8013372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013376:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801337a:	f100 0414 	add.w	r4, r0, #20
 801337e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8013382:	dd46      	ble.n	8013412 <rshift+0xa2>
 8013384:	f011 011f 	ands.w	r1, r1, #31
 8013388:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801338c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8013390:	d10c      	bne.n	80133ac <rshift+0x3c>
 8013392:	4629      	mov	r1, r5
 8013394:	f100 0710 	add.w	r7, r0, #16
 8013398:	42b1      	cmp	r1, r6
 801339a:	d335      	bcc.n	8013408 <rshift+0x98>
 801339c:	1a9b      	subs	r3, r3, r2
 801339e:	009b      	lsls	r3, r3, #2
 80133a0:	1eea      	subs	r2, r5, #3
 80133a2:	4296      	cmp	r6, r2
 80133a4:	bf38      	it	cc
 80133a6:	2300      	movcc	r3, #0
 80133a8:	4423      	add	r3, r4
 80133aa:	e015      	b.n	80133d8 <rshift+0x68>
 80133ac:	46a1      	mov	r9, r4
 80133ae:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80133b2:	f1c1 0820 	rsb	r8, r1, #32
 80133b6:	40cf      	lsrs	r7, r1
 80133b8:	f105 0e04 	add.w	lr, r5, #4
 80133bc:	4576      	cmp	r6, lr
 80133be:	46f4      	mov	ip, lr
 80133c0:	d816      	bhi.n	80133f0 <rshift+0x80>
 80133c2:	1a9b      	subs	r3, r3, r2
 80133c4:	009a      	lsls	r2, r3, #2
 80133c6:	3a04      	subs	r2, #4
 80133c8:	3501      	adds	r5, #1
 80133ca:	42ae      	cmp	r6, r5
 80133cc:	bf38      	it	cc
 80133ce:	2200      	movcc	r2, #0
 80133d0:	18a3      	adds	r3, r4, r2
 80133d2:	50a7      	str	r7, [r4, r2]
 80133d4:	b107      	cbz	r7, 80133d8 <rshift+0x68>
 80133d6:	3304      	adds	r3, #4
 80133d8:	42a3      	cmp	r3, r4
 80133da:	eba3 0204 	sub.w	r2, r3, r4
 80133de:	bf08      	it	eq
 80133e0:	2300      	moveq	r3, #0
 80133e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133e6:	6102      	str	r2, [r0, #16]
 80133e8:	bf08      	it	eq
 80133ea:	6143      	streq	r3, [r0, #20]
 80133ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133f0:	f8dc c000 	ldr.w	ip, [ip]
 80133f4:	fa0c fc08 	lsl.w	ip, ip, r8
 80133f8:	ea4c 0707 	orr.w	r7, ip, r7
 80133fc:	f849 7b04 	str.w	r7, [r9], #4
 8013400:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013404:	40cf      	lsrs	r7, r1
 8013406:	e7d9      	b.n	80133bc <rshift+0x4c>
 8013408:	f851 cb04 	ldr.w	ip, [r1], #4
 801340c:	f847 cf04 	str.w	ip, [r7, #4]!
 8013410:	e7c2      	b.n	8013398 <rshift+0x28>
 8013412:	4623      	mov	r3, r4
 8013414:	e7e0      	b.n	80133d8 <rshift+0x68>

08013416 <__hexdig_fun>:
 8013416:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801341a:	2b09      	cmp	r3, #9
 801341c:	d802      	bhi.n	8013424 <__hexdig_fun+0xe>
 801341e:	3820      	subs	r0, #32
 8013420:	b2c0      	uxtb	r0, r0
 8013422:	4770      	bx	lr
 8013424:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013428:	2b05      	cmp	r3, #5
 801342a:	d801      	bhi.n	8013430 <__hexdig_fun+0x1a>
 801342c:	3847      	subs	r0, #71	; 0x47
 801342e:	e7f7      	b.n	8013420 <__hexdig_fun+0xa>
 8013430:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013434:	2b05      	cmp	r3, #5
 8013436:	d801      	bhi.n	801343c <__hexdig_fun+0x26>
 8013438:	3827      	subs	r0, #39	; 0x27
 801343a:	e7f1      	b.n	8013420 <__hexdig_fun+0xa>
 801343c:	2000      	movs	r0, #0
 801343e:	4770      	bx	lr

08013440 <__gethex>:
 8013440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013444:	b08b      	sub	sp, #44	; 0x2c
 8013446:	9306      	str	r3, [sp, #24]
 8013448:	4bb9      	ldr	r3, [pc, #740]	; (8013730 <__gethex+0x2f0>)
 801344a:	9002      	str	r0, [sp, #8]
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	468b      	mov	fp, r1
 8013450:	4618      	mov	r0, r3
 8013452:	4690      	mov	r8, r2
 8013454:	9303      	str	r3, [sp, #12]
 8013456:	f7ef fc53 	bl	8002d00 <strlen>
 801345a:	4682      	mov	sl, r0
 801345c:	9b03      	ldr	r3, [sp, #12]
 801345e:	f8db 2000 	ldr.w	r2, [fp]
 8013462:	4403      	add	r3, r0
 8013464:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013468:	9307      	str	r3, [sp, #28]
 801346a:	1c93      	adds	r3, r2, #2
 801346c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8013470:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013474:	32fe      	adds	r2, #254	; 0xfe
 8013476:	18d1      	adds	r1, r2, r3
 8013478:	461f      	mov	r7, r3
 801347a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801347e:	9101      	str	r1, [sp, #4]
 8013480:	2830      	cmp	r0, #48	; 0x30
 8013482:	d0f8      	beq.n	8013476 <__gethex+0x36>
 8013484:	f7ff ffc7 	bl	8013416 <__hexdig_fun>
 8013488:	4604      	mov	r4, r0
 801348a:	2800      	cmp	r0, #0
 801348c:	d13a      	bne.n	8013504 <__gethex+0xc4>
 801348e:	4652      	mov	r2, sl
 8013490:	4638      	mov	r0, r7
 8013492:	9903      	ldr	r1, [sp, #12]
 8013494:	f001 fb5e 	bl	8014b54 <strncmp>
 8013498:	4605      	mov	r5, r0
 801349a:	2800      	cmp	r0, #0
 801349c:	d166      	bne.n	801356c <__gethex+0x12c>
 801349e:	f817 000a 	ldrb.w	r0, [r7, sl]
 80134a2:	eb07 060a 	add.w	r6, r7, sl
 80134a6:	f7ff ffb6 	bl	8013416 <__hexdig_fun>
 80134aa:	2800      	cmp	r0, #0
 80134ac:	d060      	beq.n	8013570 <__gethex+0x130>
 80134ae:	4633      	mov	r3, r6
 80134b0:	7818      	ldrb	r0, [r3, #0]
 80134b2:	461f      	mov	r7, r3
 80134b4:	2830      	cmp	r0, #48	; 0x30
 80134b6:	f103 0301 	add.w	r3, r3, #1
 80134ba:	d0f9      	beq.n	80134b0 <__gethex+0x70>
 80134bc:	f7ff ffab 	bl	8013416 <__hexdig_fun>
 80134c0:	2301      	movs	r3, #1
 80134c2:	fab0 f480 	clz	r4, r0
 80134c6:	4635      	mov	r5, r6
 80134c8:	0964      	lsrs	r4, r4, #5
 80134ca:	9301      	str	r3, [sp, #4]
 80134cc:	463a      	mov	r2, r7
 80134ce:	4616      	mov	r6, r2
 80134d0:	7830      	ldrb	r0, [r6, #0]
 80134d2:	3201      	adds	r2, #1
 80134d4:	f7ff ff9f 	bl	8013416 <__hexdig_fun>
 80134d8:	2800      	cmp	r0, #0
 80134da:	d1f8      	bne.n	80134ce <__gethex+0x8e>
 80134dc:	4652      	mov	r2, sl
 80134de:	4630      	mov	r0, r6
 80134e0:	9903      	ldr	r1, [sp, #12]
 80134e2:	f001 fb37 	bl	8014b54 <strncmp>
 80134e6:	b980      	cbnz	r0, 801350a <__gethex+0xca>
 80134e8:	b94d      	cbnz	r5, 80134fe <__gethex+0xbe>
 80134ea:	eb06 050a 	add.w	r5, r6, sl
 80134ee:	462a      	mov	r2, r5
 80134f0:	4616      	mov	r6, r2
 80134f2:	7830      	ldrb	r0, [r6, #0]
 80134f4:	3201      	adds	r2, #1
 80134f6:	f7ff ff8e 	bl	8013416 <__hexdig_fun>
 80134fa:	2800      	cmp	r0, #0
 80134fc:	d1f8      	bne.n	80134f0 <__gethex+0xb0>
 80134fe:	1bad      	subs	r5, r5, r6
 8013500:	00ad      	lsls	r5, r5, #2
 8013502:	e004      	b.n	801350e <__gethex+0xce>
 8013504:	2400      	movs	r4, #0
 8013506:	4625      	mov	r5, r4
 8013508:	e7e0      	b.n	80134cc <__gethex+0x8c>
 801350a:	2d00      	cmp	r5, #0
 801350c:	d1f7      	bne.n	80134fe <__gethex+0xbe>
 801350e:	7833      	ldrb	r3, [r6, #0]
 8013510:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013514:	2b50      	cmp	r3, #80	; 0x50
 8013516:	d139      	bne.n	801358c <__gethex+0x14c>
 8013518:	7873      	ldrb	r3, [r6, #1]
 801351a:	2b2b      	cmp	r3, #43	; 0x2b
 801351c:	d02a      	beq.n	8013574 <__gethex+0x134>
 801351e:	2b2d      	cmp	r3, #45	; 0x2d
 8013520:	d02c      	beq.n	801357c <__gethex+0x13c>
 8013522:	f04f 0900 	mov.w	r9, #0
 8013526:	1c71      	adds	r1, r6, #1
 8013528:	7808      	ldrb	r0, [r1, #0]
 801352a:	f7ff ff74 	bl	8013416 <__hexdig_fun>
 801352e:	1e43      	subs	r3, r0, #1
 8013530:	b2db      	uxtb	r3, r3
 8013532:	2b18      	cmp	r3, #24
 8013534:	d82a      	bhi.n	801358c <__gethex+0x14c>
 8013536:	f1a0 0210 	sub.w	r2, r0, #16
 801353a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801353e:	f7ff ff6a 	bl	8013416 <__hexdig_fun>
 8013542:	1e43      	subs	r3, r0, #1
 8013544:	b2db      	uxtb	r3, r3
 8013546:	2b18      	cmp	r3, #24
 8013548:	d91b      	bls.n	8013582 <__gethex+0x142>
 801354a:	f1b9 0f00 	cmp.w	r9, #0
 801354e:	d000      	beq.n	8013552 <__gethex+0x112>
 8013550:	4252      	negs	r2, r2
 8013552:	4415      	add	r5, r2
 8013554:	f8cb 1000 	str.w	r1, [fp]
 8013558:	b1d4      	cbz	r4, 8013590 <__gethex+0x150>
 801355a:	9b01      	ldr	r3, [sp, #4]
 801355c:	2b00      	cmp	r3, #0
 801355e:	bf14      	ite	ne
 8013560:	2700      	movne	r7, #0
 8013562:	2706      	moveq	r7, #6
 8013564:	4638      	mov	r0, r7
 8013566:	b00b      	add	sp, #44	; 0x2c
 8013568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801356c:	463e      	mov	r6, r7
 801356e:	4625      	mov	r5, r4
 8013570:	2401      	movs	r4, #1
 8013572:	e7cc      	b.n	801350e <__gethex+0xce>
 8013574:	f04f 0900 	mov.w	r9, #0
 8013578:	1cb1      	adds	r1, r6, #2
 801357a:	e7d5      	b.n	8013528 <__gethex+0xe8>
 801357c:	f04f 0901 	mov.w	r9, #1
 8013580:	e7fa      	b.n	8013578 <__gethex+0x138>
 8013582:	230a      	movs	r3, #10
 8013584:	fb03 0202 	mla	r2, r3, r2, r0
 8013588:	3a10      	subs	r2, #16
 801358a:	e7d6      	b.n	801353a <__gethex+0xfa>
 801358c:	4631      	mov	r1, r6
 801358e:	e7e1      	b.n	8013554 <__gethex+0x114>
 8013590:	4621      	mov	r1, r4
 8013592:	1bf3      	subs	r3, r6, r7
 8013594:	3b01      	subs	r3, #1
 8013596:	2b07      	cmp	r3, #7
 8013598:	dc0a      	bgt.n	80135b0 <__gethex+0x170>
 801359a:	9802      	ldr	r0, [sp, #8]
 801359c:	f000 fafc 	bl	8013b98 <_Balloc>
 80135a0:	4604      	mov	r4, r0
 80135a2:	b940      	cbnz	r0, 80135b6 <__gethex+0x176>
 80135a4:	4602      	mov	r2, r0
 80135a6:	21de      	movs	r1, #222	; 0xde
 80135a8:	4b62      	ldr	r3, [pc, #392]	; (8013734 <__gethex+0x2f4>)
 80135aa:	4863      	ldr	r0, [pc, #396]	; (8013738 <__gethex+0x2f8>)
 80135ac:	f001 faf2 	bl	8014b94 <__assert_func>
 80135b0:	3101      	adds	r1, #1
 80135b2:	105b      	asrs	r3, r3, #1
 80135b4:	e7ef      	b.n	8013596 <__gethex+0x156>
 80135b6:	f04f 0b00 	mov.w	fp, #0
 80135ba:	f100 0914 	add.w	r9, r0, #20
 80135be:	f1ca 0301 	rsb	r3, sl, #1
 80135c2:	f8cd 9010 	str.w	r9, [sp, #16]
 80135c6:	f8cd b004 	str.w	fp, [sp, #4]
 80135ca:	9308      	str	r3, [sp, #32]
 80135cc:	42b7      	cmp	r7, r6
 80135ce:	d33f      	bcc.n	8013650 <__gethex+0x210>
 80135d0:	9f04      	ldr	r7, [sp, #16]
 80135d2:	9b01      	ldr	r3, [sp, #4]
 80135d4:	f847 3b04 	str.w	r3, [r7], #4
 80135d8:	eba7 0709 	sub.w	r7, r7, r9
 80135dc:	10bf      	asrs	r7, r7, #2
 80135de:	6127      	str	r7, [r4, #16]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f000 fbcf 	bl	8013d84 <__hi0bits>
 80135e6:	017f      	lsls	r7, r7, #5
 80135e8:	f8d8 6000 	ldr.w	r6, [r8]
 80135ec:	1a3f      	subs	r7, r7, r0
 80135ee:	42b7      	cmp	r7, r6
 80135f0:	dd62      	ble.n	80136b8 <__gethex+0x278>
 80135f2:	1bbf      	subs	r7, r7, r6
 80135f4:	4639      	mov	r1, r7
 80135f6:	4620      	mov	r0, r4
 80135f8:	f000 ff65 	bl	80144c6 <__any_on>
 80135fc:	4682      	mov	sl, r0
 80135fe:	b1a8      	cbz	r0, 801362c <__gethex+0x1ec>
 8013600:	f04f 0a01 	mov.w	sl, #1
 8013604:	1e7b      	subs	r3, r7, #1
 8013606:	1159      	asrs	r1, r3, #5
 8013608:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801360c:	f003 021f 	and.w	r2, r3, #31
 8013610:	fa0a f202 	lsl.w	r2, sl, r2
 8013614:	420a      	tst	r2, r1
 8013616:	d009      	beq.n	801362c <__gethex+0x1ec>
 8013618:	4553      	cmp	r3, sl
 801361a:	dd05      	ble.n	8013628 <__gethex+0x1e8>
 801361c:	4620      	mov	r0, r4
 801361e:	1eb9      	subs	r1, r7, #2
 8013620:	f000 ff51 	bl	80144c6 <__any_on>
 8013624:	2800      	cmp	r0, #0
 8013626:	d144      	bne.n	80136b2 <__gethex+0x272>
 8013628:	f04f 0a02 	mov.w	sl, #2
 801362c:	4639      	mov	r1, r7
 801362e:	4620      	mov	r0, r4
 8013630:	f7ff fe9e 	bl	8013370 <rshift>
 8013634:	443d      	add	r5, r7
 8013636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801363a:	42ab      	cmp	r3, r5
 801363c:	da4a      	bge.n	80136d4 <__gethex+0x294>
 801363e:	4621      	mov	r1, r4
 8013640:	9802      	ldr	r0, [sp, #8]
 8013642:	f000 fae9 	bl	8013c18 <_Bfree>
 8013646:	2300      	movs	r3, #0
 8013648:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801364a:	27a3      	movs	r7, #163	; 0xa3
 801364c:	6013      	str	r3, [r2, #0]
 801364e:	e789      	b.n	8013564 <__gethex+0x124>
 8013650:	1e73      	subs	r3, r6, #1
 8013652:	9a07      	ldr	r2, [sp, #28]
 8013654:	9305      	str	r3, [sp, #20]
 8013656:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801365a:	4293      	cmp	r3, r2
 801365c:	d019      	beq.n	8013692 <__gethex+0x252>
 801365e:	f1bb 0f20 	cmp.w	fp, #32
 8013662:	d107      	bne.n	8013674 <__gethex+0x234>
 8013664:	9b04      	ldr	r3, [sp, #16]
 8013666:	9a01      	ldr	r2, [sp, #4]
 8013668:	f843 2b04 	str.w	r2, [r3], #4
 801366c:	9304      	str	r3, [sp, #16]
 801366e:	2300      	movs	r3, #0
 8013670:	469b      	mov	fp, r3
 8013672:	9301      	str	r3, [sp, #4]
 8013674:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013678:	f7ff fecd 	bl	8013416 <__hexdig_fun>
 801367c:	9b01      	ldr	r3, [sp, #4]
 801367e:	f000 000f 	and.w	r0, r0, #15
 8013682:	fa00 f00b 	lsl.w	r0, r0, fp
 8013686:	4303      	orrs	r3, r0
 8013688:	9301      	str	r3, [sp, #4]
 801368a:	f10b 0b04 	add.w	fp, fp, #4
 801368e:	9b05      	ldr	r3, [sp, #20]
 8013690:	e00d      	b.n	80136ae <__gethex+0x26e>
 8013692:	9b05      	ldr	r3, [sp, #20]
 8013694:	9a08      	ldr	r2, [sp, #32]
 8013696:	4413      	add	r3, r2
 8013698:	42bb      	cmp	r3, r7
 801369a:	d3e0      	bcc.n	801365e <__gethex+0x21e>
 801369c:	4618      	mov	r0, r3
 801369e:	4652      	mov	r2, sl
 80136a0:	9903      	ldr	r1, [sp, #12]
 80136a2:	9309      	str	r3, [sp, #36]	; 0x24
 80136a4:	f001 fa56 	bl	8014b54 <strncmp>
 80136a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136aa:	2800      	cmp	r0, #0
 80136ac:	d1d7      	bne.n	801365e <__gethex+0x21e>
 80136ae:	461e      	mov	r6, r3
 80136b0:	e78c      	b.n	80135cc <__gethex+0x18c>
 80136b2:	f04f 0a03 	mov.w	sl, #3
 80136b6:	e7b9      	b.n	801362c <__gethex+0x1ec>
 80136b8:	da09      	bge.n	80136ce <__gethex+0x28e>
 80136ba:	1bf7      	subs	r7, r6, r7
 80136bc:	4621      	mov	r1, r4
 80136be:	463a      	mov	r2, r7
 80136c0:	9802      	ldr	r0, [sp, #8]
 80136c2:	f000 fcc1 	bl	8014048 <__lshift>
 80136c6:	4604      	mov	r4, r0
 80136c8:	1bed      	subs	r5, r5, r7
 80136ca:	f100 0914 	add.w	r9, r0, #20
 80136ce:	f04f 0a00 	mov.w	sl, #0
 80136d2:	e7b0      	b.n	8013636 <__gethex+0x1f6>
 80136d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80136d8:	42a8      	cmp	r0, r5
 80136da:	dd71      	ble.n	80137c0 <__gethex+0x380>
 80136dc:	1b45      	subs	r5, r0, r5
 80136de:	42ae      	cmp	r6, r5
 80136e0:	dc34      	bgt.n	801374c <__gethex+0x30c>
 80136e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80136e6:	2b02      	cmp	r3, #2
 80136e8:	d028      	beq.n	801373c <__gethex+0x2fc>
 80136ea:	2b03      	cmp	r3, #3
 80136ec:	d02a      	beq.n	8013744 <__gethex+0x304>
 80136ee:	2b01      	cmp	r3, #1
 80136f0:	d115      	bne.n	801371e <__gethex+0x2de>
 80136f2:	42ae      	cmp	r6, r5
 80136f4:	d113      	bne.n	801371e <__gethex+0x2de>
 80136f6:	2e01      	cmp	r6, #1
 80136f8:	d10b      	bne.n	8013712 <__gethex+0x2d2>
 80136fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136fe:	9a06      	ldr	r2, [sp, #24]
 8013700:	2762      	movs	r7, #98	; 0x62
 8013702:	6013      	str	r3, [r2, #0]
 8013704:	2301      	movs	r3, #1
 8013706:	6123      	str	r3, [r4, #16]
 8013708:	f8c9 3000 	str.w	r3, [r9]
 801370c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801370e:	601c      	str	r4, [r3, #0]
 8013710:	e728      	b.n	8013564 <__gethex+0x124>
 8013712:	4620      	mov	r0, r4
 8013714:	1e71      	subs	r1, r6, #1
 8013716:	f000 fed6 	bl	80144c6 <__any_on>
 801371a:	2800      	cmp	r0, #0
 801371c:	d1ed      	bne.n	80136fa <__gethex+0x2ba>
 801371e:	4621      	mov	r1, r4
 8013720:	9802      	ldr	r0, [sp, #8]
 8013722:	f000 fa79 	bl	8013c18 <_Bfree>
 8013726:	2300      	movs	r3, #0
 8013728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801372a:	2750      	movs	r7, #80	; 0x50
 801372c:	6013      	str	r3, [r2, #0]
 801372e:	e719      	b.n	8013564 <__gethex+0x124>
 8013730:	08017250 	.word	0x08017250
 8013734:	080171d4 	.word	0x080171d4
 8013738:	080171e5 	.word	0x080171e5
 801373c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1ed      	bne.n	801371e <__gethex+0x2de>
 8013742:	e7da      	b.n	80136fa <__gethex+0x2ba>
 8013744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013746:	2b00      	cmp	r3, #0
 8013748:	d1d7      	bne.n	80136fa <__gethex+0x2ba>
 801374a:	e7e8      	b.n	801371e <__gethex+0x2de>
 801374c:	1e6f      	subs	r7, r5, #1
 801374e:	f1ba 0f00 	cmp.w	sl, #0
 8013752:	d132      	bne.n	80137ba <__gethex+0x37a>
 8013754:	b127      	cbz	r7, 8013760 <__gethex+0x320>
 8013756:	4639      	mov	r1, r7
 8013758:	4620      	mov	r0, r4
 801375a:	f000 feb4 	bl	80144c6 <__any_on>
 801375e:	4682      	mov	sl, r0
 8013760:	2101      	movs	r1, #1
 8013762:	117b      	asrs	r3, r7, #5
 8013764:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8013768:	f007 071f 	and.w	r7, r7, #31
 801376c:	fa01 f707 	lsl.w	r7, r1, r7
 8013770:	421f      	tst	r7, r3
 8013772:	f04f 0702 	mov.w	r7, #2
 8013776:	4629      	mov	r1, r5
 8013778:	4620      	mov	r0, r4
 801377a:	bf18      	it	ne
 801377c:	f04a 0a02 	orrne.w	sl, sl, #2
 8013780:	1b76      	subs	r6, r6, r5
 8013782:	f7ff fdf5 	bl	8013370 <rshift>
 8013786:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801378a:	f1ba 0f00 	cmp.w	sl, #0
 801378e:	d048      	beq.n	8013822 <__gethex+0x3e2>
 8013790:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013794:	2b02      	cmp	r3, #2
 8013796:	d015      	beq.n	80137c4 <__gethex+0x384>
 8013798:	2b03      	cmp	r3, #3
 801379a:	d017      	beq.n	80137cc <__gethex+0x38c>
 801379c:	2b01      	cmp	r3, #1
 801379e:	d109      	bne.n	80137b4 <__gethex+0x374>
 80137a0:	f01a 0f02 	tst.w	sl, #2
 80137a4:	d006      	beq.n	80137b4 <__gethex+0x374>
 80137a6:	f8d9 0000 	ldr.w	r0, [r9]
 80137aa:	ea4a 0a00 	orr.w	sl, sl, r0
 80137ae:	f01a 0f01 	tst.w	sl, #1
 80137b2:	d10e      	bne.n	80137d2 <__gethex+0x392>
 80137b4:	f047 0710 	orr.w	r7, r7, #16
 80137b8:	e033      	b.n	8013822 <__gethex+0x3e2>
 80137ba:	f04f 0a01 	mov.w	sl, #1
 80137be:	e7cf      	b.n	8013760 <__gethex+0x320>
 80137c0:	2701      	movs	r7, #1
 80137c2:	e7e2      	b.n	801378a <__gethex+0x34a>
 80137c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137c6:	f1c3 0301 	rsb	r3, r3, #1
 80137ca:	9315      	str	r3, [sp, #84]	; 0x54
 80137cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d0f0      	beq.n	80137b4 <__gethex+0x374>
 80137d2:	f04f 0c00 	mov.w	ip, #0
 80137d6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80137da:	f104 0314 	add.w	r3, r4, #20
 80137de:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80137e2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80137e6:	4618      	mov	r0, r3
 80137e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80137f0:	d01c      	beq.n	801382c <__gethex+0x3ec>
 80137f2:	3201      	adds	r2, #1
 80137f4:	6002      	str	r2, [r0, #0]
 80137f6:	2f02      	cmp	r7, #2
 80137f8:	f104 0314 	add.w	r3, r4, #20
 80137fc:	d13d      	bne.n	801387a <__gethex+0x43a>
 80137fe:	f8d8 2000 	ldr.w	r2, [r8]
 8013802:	3a01      	subs	r2, #1
 8013804:	42b2      	cmp	r2, r6
 8013806:	d10a      	bne.n	801381e <__gethex+0x3de>
 8013808:	2201      	movs	r2, #1
 801380a:	1171      	asrs	r1, r6, #5
 801380c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013810:	f006 061f 	and.w	r6, r6, #31
 8013814:	fa02 f606 	lsl.w	r6, r2, r6
 8013818:	421e      	tst	r6, r3
 801381a:	bf18      	it	ne
 801381c:	4617      	movne	r7, r2
 801381e:	f047 0720 	orr.w	r7, r7, #32
 8013822:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013824:	601c      	str	r4, [r3, #0]
 8013826:	9b06      	ldr	r3, [sp, #24]
 8013828:	601d      	str	r5, [r3, #0]
 801382a:	e69b      	b.n	8013564 <__gethex+0x124>
 801382c:	4299      	cmp	r1, r3
 801382e:	f843 cc04 	str.w	ip, [r3, #-4]
 8013832:	d8d8      	bhi.n	80137e6 <__gethex+0x3a6>
 8013834:	68a3      	ldr	r3, [r4, #8]
 8013836:	459b      	cmp	fp, r3
 8013838:	db17      	blt.n	801386a <__gethex+0x42a>
 801383a:	6861      	ldr	r1, [r4, #4]
 801383c:	9802      	ldr	r0, [sp, #8]
 801383e:	3101      	adds	r1, #1
 8013840:	f000 f9aa 	bl	8013b98 <_Balloc>
 8013844:	4681      	mov	r9, r0
 8013846:	b918      	cbnz	r0, 8013850 <__gethex+0x410>
 8013848:	4602      	mov	r2, r0
 801384a:	2184      	movs	r1, #132	; 0x84
 801384c:	4b19      	ldr	r3, [pc, #100]	; (80138b4 <__gethex+0x474>)
 801384e:	e6ac      	b.n	80135aa <__gethex+0x16a>
 8013850:	6922      	ldr	r2, [r4, #16]
 8013852:	f104 010c 	add.w	r1, r4, #12
 8013856:	3202      	adds	r2, #2
 8013858:	0092      	lsls	r2, r2, #2
 801385a:	300c      	adds	r0, #12
 801385c:	f7fc febf 	bl	80105de <memcpy>
 8013860:	4621      	mov	r1, r4
 8013862:	9802      	ldr	r0, [sp, #8]
 8013864:	f000 f9d8 	bl	8013c18 <_Bfree>
 8013868:	464c      	mov	r4, r9
 801386a:	6923      	ldr	r3, [r4, #16]
 801386c:	1c5a      	adds	r2, r3, #1
 801386e:	6122      	str	r2, [r4, #16]
 8013870:	2201      	movs	r2, #1
 8013872:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013876:	615a      	str	r2, [r3, #20]
 8013878:	e7bd      	b.n	80137f6 <__gethex+0x3b6>
 801387a:	6922      	ldr	r2, [r4, #16]
 801387c:	455a      	cmp	r2, fp
 801387e:	dd0b      	ble.n	8013898 <__gethex+0x458>
 8013880:	2101      	movs	r1, #1
 8013882:	4620      	mov	r0, r4
 8013884:	f7ff fd74 	bl	8013370 <rshift>
 8013888:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801388c:	3501      	adds	r5, #1
 801388e:	42ab      	cmp	r3, r5
 8013890:	f6ff aed5 	blt.w	801363e <__gethex+0x1fe>
 8013894:	2701      	movs	r7, #1
 8013896:	e7c2      	b.n	801381e <__gethex+0x3de>
 8013898:	f016 061f 	ands.w	r6, r6, #31
 801389c:	d0fa      	beq.n	8013894 <__gethex+0x454>
 801389e:	449a      	add	sl, r3
 80138a0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80138a4:	f000 fa6e 	bl	8013d84 <__hi0bits>
 80138a8:	f1c6 0620 	rsb	r6, r6, #32
 80138ac:	42b0      	cmp	r0, r6
 80138ae:	dbe7      	blt.n	8013880 <__gethex+0x440>
 80138b0:	e7f0      	b.n	8013894 <__gethex+0x454>
 80138b2:	bf00      	nop
 80138b4:	080171d4 	.word	0x080171d4

080138b8 <L_shift>:
 80138b8:	f1c2 0208 	rsb	r2, r2, #8
 80138bc:	0092      	lsls	r2, r2, #2
 80138be:	b570      	push	{r4, r5, r6, lr}
 80138c0:	f1c2 0620 	rsb	r6, r2, #32
 80138c4:	6843      	ldr	r3, [r0, #4]
 80138c6:	6804      	ldr	r4, [r0, #0]
 80138c8:	fa03 f506 	lsl.w	r5, r3, r6
 80138cc:	432c      	orrs	r4, r5
 80138ce:	40d3      	lsrs	r3, r2
 80138d0:	6004      	str	r4, [r0, #0]
 80138d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80138d6:	4288      	cmp	r0, r1
 80138d8:	d3f4      	bcc.n	80138c4 <L_shift+0xc>
 80138da:	bd70      	pop	{r4, r5, r6, pc}

080138dc <__match>:
 80138dc:	b530      	push	{r4, r5, lr}
 80138de:	6803      	ldr	r3, [r0, #0]
 80138e0:	3301      	adds	r3, #1
 80138e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80138e6:	b914      	cbnz	r4, 80138ee <__match+0x12>
 80138e8:	6003      	str	r3, [r0, #0]
 80138ea:	2001      	movs	r0, #1
 80138ec:	bd30      	pop	{r4, r5, pc}
 80138ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80138f6:	2d19      	cmp	r5, #25
 80138f8:	bf98      	it	ls
 80138fa:	3220      	addls	r2, #32
 80138fc:	42a2      	cmp	r2, r4
 80138fe:	d0f0      	beq.n	80138e2 <__match+0x6>
 8013900:	2000      	movs	r0, #0
 8013902:	e7f3      	b.n	80138ec <__match+0x10>

08013904 <__hexnan>:
 8013904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013908:	2500      	movs	r5, #0
 801390a:	680b      	ldr	r3, [r1, #0]
 801390c:	4682      	mov	sl, r0
 801390e:	115e      	asrs	r6, r3, #5
 8013910:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013914:	f013 031f 	ands.w	r3, r3, #31
 8013918:	bf18      	it	ne
 801391a:	3604      	addne	r6, #4
 801391c:	1f37      	subs	r7, r6, #4
 801391e:	4690      	mov	r8, r2
 8013920:	46b9      	mov	r9, r7
 8013922:	463c      	mov	r4, r7
 8013924:	46ab      	mov	fp, r5
 8013926:	b087      	sub	sp, #28
 8013928:	6801      	ldr	r1, [r0, #0]
 801392a:	9301      	str	r3, [sp, #4]
 801392c:	f846 5c04 	str.w	r5, [r6, #-4]
 8013930:	9502      	str	r5, [sp, #8]
 8013932:	784a      	ldrb	r2, [r1, #1]
 8013934:	1c4b      	adds	r3, r1, #1
 8013936:	9303      	str	r3, [sp, #12]
 8013938:	b342      	cbz	r2, 801398c <__hexnan+0x88>
 801393a:	4610      	mov	r0, r2
 801393c:	9105      	str	r1, [sp, #20]
 801393e:	9204      	str	r2, [sp, #16]
 8013940:	f7ff fd69 	bl	8013416 <__hexdig_fun>
 8013944:	2800      	cmp	r0, #0
 8013946:	d14f      	bne.n	80139e8 <__hexnan+0xe4>
 8013948:	9a04      	ldr	r2, [sp, #16]
 801394a:	9905      	ldr	r1, [sp, #20]
 801394c:	2a20      	cmp	r2, #32
 801394e:	d818      	bhi.n	8013982 <__hexnan+0x7e>
 8013950:	9b02      	ldr	r3, [sp, #8]
 8013952:	459b      	cmp	fp, r3
 8013954:	dd13      	ble.n	801397e <__hexnan+0x7a>
 8013956:	454c      	cmp	r4, r9
 8013958:	d206      	bcs.n	8013968 <__hexnan+0x64>
 801395a:	2d07      	cmp	r5, #7
 801395c:	dc04      	bgt.n	8013968 <__hexnan+0x64>
 801395e:	462a      	mov	r2, r5
 8013960:	4649      	mov	r1, r9
 8013962:	4620      	mov	r0, r4
 8013964:	f7ff ffa8 	bl	80138b8 <L_shift>
 8013968:	4544      	cmp	r4, r8
 801396a:	d950      	bls.n	8013a0e <__hexnan+0x10a>
 801396c:	2300      	movs	r3, #0
 801396e:	f1a4 0904 	sub.w	r9, r4, #4
 8013972:	f844 3c04 	str.w	r3, [r4, #-4]
 8013976:	461d      	mov	r5, r3
 8013978:	464c      	mov	r4, r9
 801397a:	f8cd b008 	str.w	fp, [sp, #8]
 801397e:	9903      	ldr	r1, [sp, #12]
 8013980:	e7d7      	b.n	8013932 <__hexnan+0x2e>
 8013982:	2a29      	cmp	r2, #41	; 0x29
 8013984:	d156      	bne.n	8013a34 <__hexnan+0x130>
 8013986:	3102      	adds	r1, #2
 8013988:	f8ca 1000 	str.w	r1, [sl]
 801398c:	f1bb 0f00 	cmp.w	fp, #0
 8013990:	d050      	beq.n	8013a34 <__hexnan+0x130>
 8013992:	454c      	cmp	r4, r9
 8013994:	d206      	bcs.n	80139a4 <__hexnan+0xa0>
 8013996:	2d07      	cmp	r5, #7
 8013998:	dc04      	bgt.n	80139a4 <__hexnan+0xa0>
 801399a:	462a      	mov	r2, r5
 801399c:	4649      	mov	r1, r9
 801399e:	4620      	mov	r0, r4
 80139a0:	f7ff ff8a 	bl	80138b8 <L_shift>
 80139a4:	4544      	cmp	r4, r8
 80139a6:	d934      	bls.n	8013a12 <__hexnan+0x10e>
 80139a8:	4623      	mov	r3, r4
 80139aa:	f1a8 0204 	sub.w	r2, r8, #4
 80139ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80139b2:	429f      	cmp	r7, r3
 80139b4:	f842 1f04 	str.w	r1, [r2, #4]!
 80139b8:	d2f9      	bcs.n	80139ae <__hexnan+0xaa>
 80139ba:	1b3b      	subs	r3, r7, r4
 80139bc:	f023 0303 	bic.w	r3, r3, #3
 80139c0:	3304      	adds	r3, #4
 80139c2:	3401      	adds	r4, #1
 80139c4:	3e03      	subs	r6, #3
 80139c6:	42b4      	cmp	r4, r6
 80139c8:	bf88      	it	hi
 80139ca:	2304      	movhi	r3, #4
 80139cc:	2200      	movs	r2, #0
 80139ce:	4443      	add	r3, r8
 80139d0:	f843 2b04 	str.w	r2, [r3], #4
 80139d4:	429f      	cmp	r7, r3
 80139d6:	d2fb      	bcs.n	80139d0 <__hexnan+0xcc>
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	b91b      	cbnz	r3, 80139e4 <__hexnan+0xe0>
 80139dc:	4547      	cmp	r7, r8
 80139de:	d127      	bne.n	8013a30 <__hexnan+0x12c>
 80139e0:	2301      	movs	r3, #1
 80139e2:	603b      	str	r3, [r7, #0]
 80139e4:	2005      	movs	r0, #5
 80139e6:	e026      	b.n	8013a36 <__hexnan+0x132>
 80139e8:	3501      	adds	r5, #1
 80139ea:	2d08      	cmp	r5, #8
 80139ec:	f10b 0b01 	add.w	fp, fp, #1
 80139f0:	dd06      	ble.n	8013a00 <__hexnan+0xfc>
 80139f2:	4544      	cmp	r4, r8
 80139f4:	d9c3      	bls.n	801397e <__hexnan+0x7a>
 80139f6:	2300      	movs	r3, #0
 80139f8:	2501      	movs	r5, #1
 80139fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80139fe:	3c04      	subs	r4, #4
 8013a00:	6822      	ldr	r2, [r4, #0]
 8013a02:	f000 000f 	and.w	r0, r0, #15
 8013a06:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013a0a:	6022      	str	r2, [r4, #0]
 8013a0c:	e7b7      	b.n	801397e <__hexnan+0x7a>
 8013a0e:	2508      	movs	r5, #8
 8013a10:	e7b5      	b.n	801397e <__hexnan+0x7a>
 8013a12:	9b01      	ldr	r3, [sp, #4]
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d0df      	beq.n	80139d8 <__hexnan+0xd4>
 8013a18:	f04f 32ff 	mov.w	r2, #4294967295
 8013a1c:	f1c3 0320 	rsb	r3, r3, #32
 8013a20:	fa22 f303 	lsr.w	r3, r2, r3
 8013a24:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013a28:	401a      	ands	r2, r3
 8013a2a:	f846 2c04 	str.w	r2, [r6, #-4]
 8013a2e:	e7d3      	b.n	80139d8 <__hexnan+0xd4>
 8013a30:	3f04      	subs	r7, #4
 8013a32:	e7d1      	b.n	80139d8 <__hexnan+0xd4>
 8013a34:	2004      	movs	r0, #4
 8013a36:	b007      	add	sp, #28
 8013a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a3c <_localeconv_r>:
 8013a3c:	4800      	ldr	r0, [pc, #0]	; (8013a40 <_localeconv_r+0x4>)
 8013a3e:	4770      	bx	lr
 8013a40:	200001b4 	.word	0x200001b4

08013a44 <_lseek_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	4604      	mov	r4, r0
 8013a48:	4608      	mov	r0, r1
 8013a4a:	4611      	mov	r1, r2
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	4d05      	ldr	r5, [pc, #20]	; (8013a64 <_lseek_r+0x20>)
 8013a50:	602a      	str	r2, [r5, #0]
 8013a52:	461a      	mov	r2, r3
 8013a54:	f7f1 fc18 	bl	8005288 <_lseek>
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d102      	bne.n	8013a62 <_lseek_r+0x1e>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	b103      	cbz	r3, 8013a62 <_lseek_r+0x1e>
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	20001594 	.word	0x20001594

08013a68 <__swhatbuf_r>:
 8013a68:	b570      	push	{r4, r5, r6, lr}
 8013a6a:	460e      	mov	r6, r1
 8013a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a70:	4614      	mov	r4, r2
 8013a72:	2900      	cmp	r1, #0
 8013a74:	461d      	mov	r5, r3
 8013a76:	b096      	sub	sp, #88	; 0x58
 8013a78:	da07      	bge.n	8013a8a <__swhatbuf_r+0x22>
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	602b      	str	r3, [r5, #0]
 8013a7e:	89b3      	ldrh	r3, [r6, #12]
 8013a80:	061a      	lsls	r2, r3, #24
 8013a82:	d410      	bmi.n	8013aa6 <__swhatbuf_r+0x3e>
 8013a84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a88:	e00e      	b.n	8013aa8 <__swhatbuf_r+0x40>
 8013a8a:	466a      	mov	r2, sp
 8013a8c:	f001 f8b2 	bl	8014bf4 <_fstat_r>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	dbf2      	blt.n	8013a7a <__swhatbuf_r+0x12>
 8013a94:	9a01      	ldr	r2, [sp, #4]
 8013a96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013a9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013a9e:	425a      	negs	r2, r3
 8013aa0:	415a      	adcs	r2, r3
 8013aa2:	602a      	str	r2, [r5, #0]
 8013aa4:	e7ee      	b.n	8013a84 <__swhatbuf_r+0x1c>
 8013aa6:	2340      	movs	r3, #64	; 0x40
 8013aa8:	2000      	movs	r0, #0
 8013aaa:	6023      	str	r3, [r4, #0]
 8013aac:	b016      	add	sp, #88	; 0x58
 8013aae:	bd70      	pop	{r4, r5, r6, pc}

08013ab0 <__smakebuf_r>:
 8013ab0:	898b      	ldrh	r3, [r1, #12]
 8013ab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013ab4:	079d      	lsls	r5, r3, #30
 8013ab6:	4606      	mov	r6, r0
 8013ab8:	460c      	mov	r4, r1
 8013aba:	d507      	bpl.n	8013acc <__smakebuf_r+0x1c>
 8013abc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ac0:	6023      	str	r3, [r4, #0]
 8013ac2:	6123      	str	r3, [r4, #16]
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	6163      	str	r3, [r4, #20]
 8013ac8:	b002      	add	sp, #8
 8013aca:	bd70      	pop	{r4, r5, r6, pc}
 8013acc:	466a      	mov	r2, sp
 8013ace:	ab01      	add	r3, sp, #4
 8013ad0:	f7ff ffca 	bl	8013a68 <__swhatbuf_r>
 8013ad4:	9900      	ldr	r1, [sp, #0]
 8013ad6:	4605      	mov	r5, r0
 8013ad8:	4630      	mov	r0, r6
 8013ada:	f7fc fdb1 	bl	8010640 <_malloc_r>
 8013ade:	b948      	cbnz	r0, 8013af4 <__smakebuf_r+0x44>
 8013ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ae4:	059a      	lsls	r2, r3, #22
 8013ae6:	d4ef      	bmi.n	8013ac8 <__smakebuf_r+0x18>
 8013ae8:	f023 0303 	bic.w	r3, r3, #3
 8013aec:	f043 0302 	orr.w	r3, r3, #2
 8013af0:	81a3      	strh	r3, [r4, #12]
 8013af2:	e7e3      	b.n	8013abc <__smakebuf_r+0xc>
 8013af4:	4b0d      	ldr	r3, [pc, #52]	; (8013b2c <__smakebuf_r+0x7c>)
 8013af6:	62b3      	str	r3, [r6, #40]	; 0x28
 8013af8:	89a3      	ldrh	r3, [r4, #12]
 8013afa:	6020      	str	r0, [r4, #0]
 8013afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b00:	81a3      	strh	r3, [r4, #12]
 8013b02:	9b00      	ldr	r3, [sp, #0]
 8013b04:	6120      	str	r0, [r4, #16]
 8013b06:	6163      	str	r3, [r4, #20]
 8013b08:	9b01      	ldr	r3, [sp, #4]
 8013b0a:	b15b      	cbz	r3, 8013b24 <__smakebuf_r+0x74>
 8013b0c:	4630      	mov	r0, r6
 8013b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b12:	f001 f881 	bl	8014c18 <_isatty_r>
 8013b16:	b128      	cbz	r0, 8013b24 <__smakebuf_r+0x74>
 8013b18:	89a3      	ldrh	r3, [r4, #12]
 8013b1a:	f023 0303 	bic.w	r3, r3, #3
 8013b1e:	f043 0301 	orr.w	r3, r3, #1
 8013b22:	81a3      	strh	r3, [r4, #12]
 8013b24:	89a0      	ldrh	r0, [r4, #12]
 8013b26:	4305      	orrs	r5, r0
 8013b28:	81a5      	strh	r5, [r4, #12]
 8013b2a:	e7cd      	b.n	8013ac8 <__smakebuf_r+0x18>
 8013b2c:	080103d1 	.word	0x080103d1

08013b30 <malloc>:
 8013b30:	4b02      	ldr	r3, [pc, #8]	; (8013b3c <malloc+0xc>)
 8013b32:	4601      	mov	r1, r0
 8013b34:	6818      	ldr	r0, [r3, #0]
 8013b36:	f7fc bd83 	b.w	8010640 <_malloc_r>
 8013b3a:	bf00      	nop
 8013b3c:	2000005c 	.word	0x2000005c

08013b40 <__ascii_mbtowc>:
 8013b40:	b082      	sub	sp, #8
 8013b42:	b901      	cbnz	r1, 8013b46 <__ascii_mbtowc+0x6>
 8013b44:	a901      	add	r1, sp, #4
 8013b46:	b142      	cbz	r2, 8013b5a <__ascii_mbtowc+0x1a>
 8013b48:	b14b      	cbz	r3, 8013b5e <__ascii_mbtowc+0x1e>
 8013b4a:	7813      	ldrb	r3, [r2, #0]
 8013b4c:	600b      	str	r3, [r1, #0]
 8013b4e:	7812      	ldrb	r2, [r2, #0]
 8013b50:	1e10      	subs	r0, r2, #0
 8013b52:	bf18      	it	ne
 8013b54:	2001      	movne	r0, #1
 8013b56:	b002      	add	sp, #8
 8013b58:	4770      	bx	lr
 8013b5a:	4610      	mov	r0, r2
 8013b5c:	e7fb      	b.n	8013b56 <__ascii_mbtowc+0x16>
 8013b5e:	f06f 0001 	mvn.w	r0, #1
 8013b62:	e7f8      	b.n	8013b56 <__ascii_mbtowc+0x16>

08013b64 <memchr>:
 8013b64:	4603      	mov	r3, r0
 8013b66:	b510      	push	{r4, lr}
 8013b68:	b2c9      	uxtb	r1, r1
 8013b6a:	4402      	add	r2, r0
 8013b6c:	4293      	cmp	r3, r2
 8013b6e:	4618      	mov	r0, r3
 8013b70:	d101      	bne.n	8013b76 <memchr+0x12>
 8013b72:	2000      	movs	r0, #0
 8013b74:	e003      	b.n	8013b7e <memchr+0x1a>
 8013b76:	7804      	ldrb	r4, [r0, #0]
 8013b78:	3301      	adds	r3, #1
 8013b7a:	428c      	cmp	r4, r1
 8013b7c:	d1f6      	bne.n	8013b6c <memchr+0x8>
 8013b7e:	bd10      	pop	{r4, pc}

08013b80 <__malloc_lock>:
 8013b80:	4801      	ldr	r0, [pc, #4]	; (8013b88 <__malloc_lock+0x8>)
 8013b82:	f7fc bd1c 	b.w	80105be <__retarget_lock_acquire_recursive>
 8013b86:	bf00      	nop
 8013b88:	2000158c 	.word	0x2000158c

08013b8c <__malloc_unlock>:
 8013b8c:	4801      	ldr	r0, [pc, #4]	; (8013b94 <__malloc_unlock+0x8>)
 8013b8e:	f7fc bd17 	b.w	80105c0 <__retarget_lock_release_recursive>
 8013b92:	bf00      	nop
 8013b94:	2000158c 	.word	0x2000158c

08013b98 <_Balloc>:
 8013b98:	b570      	push	{r4, r5, r6, lr}
 8013b9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	460d      	mov	r5, r1
 8013ba0:	b976      	cbnz	r6, 8013bc0 <_Balloc+0x28>
 8013ba2:	2010      	movs	r0, #16
 8013ba4:	f7ff ffc4 	bl	8013b30 <malloc>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	6260      	str	r0, [r4, #36]	; 0x24
 8013bac:	b920      	cbnz	r0, 8013bb8 <_Balloc+0x20>
 8013bae:	2166      	movs	r1, #102	; 0x66
 8013bb0:	4b17      	ldr	r3, [pc, #92]	; (8013c10 <_Balloc+0x78>)
 8013bb2:	4818      	ldr	r0, [pc, #96]	; (8013c14 <_Balloc+0x7c>)
 8013bb4:	f000 ffee 	bl	8014b94 <__assert_func>
 8013bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bbc:	6006      	str	r6, [r0, #0]
 8013bbe:	60c6      	str	r6, [r0, #12]
 8013bc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013bc2:	68f3      	ldr	r3, [r6, #12]
 8013bc4:	b183      	cbz	r3, 8013be8 <_Balloc+0x50>
 8013bc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013bc8:	68db      	ldr	r3, [r3, #12]
 8013bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013bce:	b9b8      	cbnz	r0, 8013c00 <_Balloc+0x68>
 8013bd0:	2101      	movs	r1, #1
 8013bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8013bd6:	1d72      	adds	r2, r6, #5
 8013bd8:	4620      	mov	r0, r4
 8013bda:	0092      	lsls	r2, r2, #2
 8013bdc:	f000 fc94 	bl	8014508 <_calloc_r>
 8013be0:	b160      	cbz	r0, 8013bfc <_Balloc+0x64>
 8013be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013be6:	e00e      	b.n	8013c06 <_Balloc+0x6e>
 8013be8:	2221      	movs	r2, #33	; 0x21
 8013bea:	2104      	movs	r1, #4
 8013bec:	4620      	mov	r0, r4
 8013bee:	f000 fc8b 	bl	8014508 <_calloc_r>
 8013bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013bf4:	60f0      	str	r0, [r6, #12]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d1e4      	bne.n	8013bc6 <_Balloc+0x2e>
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	bd70      	pop	{r4, r5, r6, pc}
 8013c00:	6802      	ldr	r2, [r0, #0]
 8013c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013c06:	2300      	movs	r3, #0
 8013c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013c0c:	e7f7      	b.n	8013bfe <_Balloc+0x66>
 8013c0e:	bf00      	nop
 8013c10:	0801715e 	.word	0x0801715e
 8013c14:	08017264 	.word	0x08017264

08013c18 <_Bfree>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	460c      	mov	r4, r1
 8013c20:	b976      	cbnz	r6, 8013c40 <_Bfree+0x28>
 8013c22:	2010      	movs	r0, #16
 8013c24:	f7ff ff84 	bl	8013b30 <malloc>
 8013c28:	4602      	mov	r2, r0
 8013c2a:	6268      	str	r0, [r5, #36]	; 0x24
 8013c2c:	b920      	cbnz	r0, 8013c38 <_Bfree+0x20>
 8013c2e:	218a      	movs	r1, #138	; 0x8a
 8013c30:	4b08      	ldr	r3, [pc, #32]	; (8013c54 <_Bfree+0x3c>)
 8013c32:	4809      	ldr	r0, [pc, #36]	; (8013c58 <_Bfree+0x40>)
 8013c34:	f000 ffae 	bl	8014b94 <__assert_func>
 8013c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013c3c:	6006      	str	r6, [r0, #0]
 8013c3e:	60c6      	str	r6, [r0, #12]
 8013c40:	b13c      	cbz	r4, 8013c52 <_Bfree+0x3a>
 8013c42:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013c44:	6862      	ldr	r2, [r4, #4]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013c4c:	6021      	str	r1, [r4, #0]
 8013c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013c52:	bd70      	pop	{r4, r5, r6, pc}
 8013c54:	0801715e 	.word	0x0801715e
 8013c58:	08017264 	.word	0x08017264

08013c5c <__multadd>:
 8013c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c60:	4698      	mov	r8, r3
 8013c62:	460c      	mov	r4, r1
 8013c64:	2300      	movs	r3, #0
 8013c66:	690e      	ldr	r6, [r1, #16]
 8013c68:	4607      	mov	r7, r0
 8013c6a:	f101 0014 	add.w	r0, r1, #20
 8013c6e:	6805      	ldr	r5, [r0, #0]
 8013c70:	3301      	adds	r3, #1
 8013c72:	b2a9      	uxth	r1, r5
 8013c74:	fb02 8101 	mla	r1, r2, r1, r8
 8013c78:	0c2d      	lsrs	r5, r5, #16
 8013c7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013c7e:	fb02 c505 	mla	r5, r2, r5, ip
 8013c82:	b289      	uxth	r1, r1
 8013c84:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013c88:	429e      	cmp	r6, r3
 8013c8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013c8e:	f840 1b04 	str.w	r1, [r0], #4
 8013c92:	dcec      	bgt.n	8013c6e <__multadd+0x12>
 8013c94:	f1b8 0f00 	cmp.w	r8, #0
 8013c98:	d022      	beq.n	8013ce0 <__multadd+0x84>
 8013c9a:	68a3      	ldr	r3, [r4, #8]
 8013c9c:	42b3      	cmp	r3, r6
 8013c9e:	dc19      	bgt.n	8013cd4 <__multadd+0x78>
 8013ca0:	6861      	ldr	r1, [r4, #4]
 8013ca2:	4638      	mov	r0, r7
 8013ca4:	3101      	adds	r1, #1
 8013ca6:	f7ff ff77 	bl	8013b98 <_Balloc>
 8013caa:	4605      	mov	r5, r0
 8013cac:	b928      	cbnz	r0, 8013cba <__multadd+0x5e>
 8013cae:	4602      	mov	r2, r0
 8013cb0:	21b5      	movs	r1, #181	; 0xb5
 8013cb2:	4b0d      	ldr	r3, [pc, #52]	; (8013ce8 <__multadd+0x8c>)
 8013cb4:	480d      	ldr	r0, [pc, #52]	; (8013cec <__multadd+0x90>)
 8013cb6:	f000 ff6d 	bl	8014b94 <__assert_func>
 8013cba:	6922      	ldr	r2, [r4, #16]
 8013cbc:	f104 010c 	add.w	r1, r4, #12
 8013cc0:	3202      	adds	r2, #2
 8013cc2:	0092      	lsls	r2, r2, #2
 8013cc4:	300c      	adds	r0, #12
 8013cc6:	f7fc fc8a 	bl	80105de <memcpy>
 8013cca:	4621      	mov	r1, r4
 8013ccc:	4638      	mov	r0, r7
 8013cce:	f7ff ffa3 	bl	8013c18 <_Bfree>
 8013cd2:	462c      	mov	r4, r5
 8013cd4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013cd8:	3601      	adds	r6, #1
 8013cda:	f8c3 8014 	str.w	r8, [r3, #20]
 8013cde:	6126      	str	r6, [r4, #16]
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce6:	bf00      	nop
 8013ce8:	080171d4 	.word	0x080171d4
 8013cec:	08017264 	.word	0x08017264

08013cf0 <__s2b>:
 8013cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cf4:	4615      	mov	r5, r2
 8013cf6:	2209      	movs	r2, #9
 8013cf8:	461f      	mov	r7, r3
 8013cfa:	3308      	adds	r3, #8
 8013cfc:	460c      	mov	r4, r1
 8013cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8013d02:	4606      	mov	r6, r0
 8013d04:	2201      	movs	r2, #1
 8013d06:	2100      	movs	r1, #0
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	db09      	blt.n	8013d20 <__s2b+0x30>
 8013d0c:	4630      	mov	r0, r6
 8013d0e:	f7ff ff43 	bl	8013b98 <_Balloc>
 8013d12:	b940      	cbnz	r0, 8013d26 <__s2b+0x36>
 8013d14:	4602      	mov	r2, r0
 8013d16:	21ce      	movs	r1, #206	; 0xce
 8013d18:	4b18      	ldr	r3, [pc, #96]	; (8013d7c <__s2b+0x8c>)
 8013d1a:	4819      	ldr	r0, [pc, #100]	; (8013d80 <__s2b+0x90>)
 8013d1c:	f000 ff3a 	bl	8014b94 <__assert_func>
 8013d20:	0052      	lsls	r2, r2, #1
 8013d22:	3101      	adds	r1, #1
 8013d24:	e7f0      	b.n	8013d08 <__s2b+0x18>
 8013d26:	9b08      	ldr	r3, [sp, #32]
 8013d28:	2d09      	cmp	r5, #9
 8013d2a:	6143      	str	r3, [r0, #20]
 8013d2c:	f04f 0301 	mov.w	r3, #1
 8013d30:	6103      	str	r3, [r0, #16]
 8013d32:	dd16      	ble.n	8013d62 <__s2b+0x72>
 8013d34:	f104 0909 	add.w	r9, r4, #9
 8013d38:	46c8      	mov	r8, r9
 8013d3a:	442c      	add	r4, r5
 8013d3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013d40:	4601      	mov	r1, r0
 8013d42:	220a      	movs	r2, #10
 8013d44:	4630      	mov	r0, r6
 8013d46:	3b30      	subs	r3, #48	; 0x30
 8013d48:	f7ff ff88 	bl	8013c5c <__multadd>
 8013d4c:	45a0      	cmp	r8, r4
 8013d4e:	d1f5      	bne.n	8013d3c <__s2b+0x4c>
 8013d50:	f1a5 0408 	sub.w	r4, r5, #8
 8013d54:	444c      	add	r4, r9
 8013d56:	1b2d      	subs	r5, r5, r4
 8013d58:	1963      	adds	r3, r4, r5
 8013d5a:	42bb      	cmp	r3, r7
 8013d5c:	db04      	blt.n	8013d68 <__s2b+0x78>
 8013d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d62:	2509      	movs	r5, #9
 8013d64:	340a      	adds	r4, #10
 8013d66:	e7f6      	b.n	8013d56 <__s2b+0x66>
 8013d68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013d6c:	4601      	mov	r1, r0
 8013d6e:	220a      	movs	r2, #10
 8013d70:	4630      	mov	r0, r6
 8013d72:	3b30      	subs	r3, #48	; 0x30
 8013d74:	f7ff ff72 	bl	8013c5c <__multadd>
 8013d78:	e7ee      	b.n	8013d58 <__s2b+0x68>
 8013d7a:	bf00      	nop
 8013d7c:	080171d4 	.word	0x080171d4
 8013d80:	08017264 	.word	0x08017264

08013d84 <__hi0bits>:
 8013d84:	0c02      	lsrs	r2, r0, #16
 8013d86:	0412      	lsls	r2, r2, #16
 8013d88:	4603      	mov	r3, r0
 8013d8a:	b9ca      	cbnz	r2, 8013dc0 <__hi0bits+0x3c>
 8013d8c:	0403      	lsls	r3, r0, #16
 8013d8e:	2010      	movs	r0, #16
 8013d90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013d94:	bf04      	itt	eq
 8013d96:	021b      	lsleq	r3, r3, #8
 8013d98:	3008      	addeq	r0, #8
 8013d9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013d9e:	bf04      	itt	eq
 8013da0:	011b      	lsleq	r3, r3, #4
 8013da2:	3004      	addeq	r0, #4
 8013da4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013da8:	bf04      	itt	eq
 8013daa:	009b      	lsleq	r3, r3, #2
 8013dac:	3002      	addeq	r0, #2
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	db05      	blt.n	8013dbe <__hi0bits+0x3a>
 8013db2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8013db6:	f100 0001 	add.w	r0, r0, #1
 8013dba:	bf08      	it	eq
 8013dbc:	2020      	moveq	r0, #32
 8013dbe:	4770      	bx	lr
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	e7e5      	b.n	8013d90 <__hi0bits+0xc>

08013dc4 <__lo0bits>:
 8013dc4:	6803      	ldr	r3, [r0, #0]
 8013dc6:	4602      	mov	r2, r0
 8013dc8:	f013 0007 	ands.w	r0, r3, #7
 8013dcc:	d00b      	beq.n	8013de6 <__lo0bits+0x22>
 8013dce:	07d9      	lsls	r1, r3, #31
 8013dd0:	d422      	bmi.n	8013e18 <__lo0bits+0x54>
 8013dd2:	0798      	lsls	r0, r3, #30
 8013dd4:	bf49      	itett	mi
 8013dd6:	085b      	lsrmi	r3, r3, #1
 8013dd8:	089b      	lsrpl	r3, r3, #2
 8013dda:	2001      	movmi	r0, #1
 8013ddc:	6013      	strmi	r3, [r2, #0]
 8013dde:	bf5c      	itt	pl
 8013de0:	2002      	movpl	r0, #2
 8013de2:	6013      	strpl	r3, [r2, #0]
 8013de4:	4770      	bx	lr
 8013de6:	b299      	uxth	r1, r3
 8013de8:	b909      	cbnz	r1, 8013dee <__lo0bits+0x2a>
 8013dea:	2010      	movs	r0, #16
 8013dec:	0c1b      	lsrs	r3, r3, #16
 8013dee:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013df2:	bf04      	itt	eq
 8013df4:	0a1b      	lsreq	r3, r3, #8
 8013df6:	3008      	addeq	r0, #8
 8013df8:	0719      	lsls	r1, r3, #28
 8013dfa:	bf04      	itt	eq
 8013dfc:	091b      	lsreq	r3, r3, #4
 8013dfe:	3004      	addeq	r0, #4
 8013e00:	0799      	lsls	r1, r3, #30
 8013e02:	bf04      	itt	eq
 8013e04:	089b      	lsreq	r3, r3, #2
 8013e06:	3002      	addeq	r0, #2
 8013e08:	07d9      	lsls	r1, r3, #31
 8013e0a:	d403      	bmi.n	8013e14 <__lo0bits+0x50>
 8013e0c:	085b      	lsrs	r3, r3, #1
 8013e0e:	f100 0001 	add.w	r0, r0, #1
 8013e12:	d003      	beq.n	8013e1c <__lo0bits+0x58>
 8013e14:	6013      	str	r3, [r2, #0]
 8013e16:	4770      	bx	lr
 8013e18:	2000      	movs	r0, #0
 8013e1a:	4770      	bx	lr
 8013e1c:	2020      	movs	r0, #32
 8013e1e:	4770      	bx	lr

08013e20 <__i2b>:
 8013e20:	b510      	push	{r4, lr}
 8013e22:	460c      	mov	r4, r1
 8013e24:	2101      	movs	r1, #1
 8013e26:	f7ff feb7 	bl	8013b98 <_Balloc>
 8013e2a:	4602      	mov	r2, r0
 8013e2c:	b928      	cbnz	r0, 8013e3a <__i2b+0x1a>
 8013e2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013e32:	4b04      	ldr	r3, [pc, #16]	; (8013e44 <__i2b+0x24>)
 8013e34:	4804      	ldr	r0, [pc, #16]	; (8013e48 <__i2b+0x28>)
 8013e36:	f000 fead 	bl	8014b94 <__assert_func>
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	6144      	str	r4, [r0, #20]
 8013e3e:	6103      	str	r3, [r0, #16]
 8013e40:	bd10      	pop	{r4, pc}
 8013e42:	bf00      	nop
 8013e44:	080171d4 	.word	0x080171d4
 8013e48:	08017264 	.word	0x08017264

08013e4c <__multiply>:
 8013e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e50:	4614      	mov	r4, r2
 8013e52:	690a      	ldr	r2, [r1, #16]
 8013e54:	6923      	ldr	r3, [r4, #16]
 8013e56:	460d      	mov	r5, r1
 8013e58:	429a      	cmp	r2, r3
 8013e5a:	bfbe      	ittt	lt
 8013e5c:	460b      	movlt	r3, r1
 8013e5e:	4625      	movlt	r5, r4
 8013e60:	461c      	movlt	r4, r3
 8013e62:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013e66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013e6a:	68ab      	ldr	r3, [r5, #8]
 8013e6c:	6869      	ldr	r1, [r5, #4]
 8013e6e:	eb0a 0709 	add.w	r7, sl, r9
 8013e72:	42bb      	cmp	r3, r7
 8013e74:	b085      	sub	sp, #20
 8013e76:	bfb8      	it	lt
 8013e78:	3101      	addlt	r1, #1
 8013e7a:	f7ff fe8d 	bl	8013b98 <_Balloc>
 8013e7e:	b930      	cbnz	r0, 8013e8e <__multiply+0x42>
 8013e80:	4602      	mov	r2, r0
 8013e82:	f240 115d 	movw	r1, #349	; 0x15d
 8013e86:	4b41      	ldr	r3, [pc, #260]	; (8013f8c <__multiply+0x140>)
 8013e88:	4841      	ldr	r0, [pc, #260]	; (8013f90 <__multiply+0x144>)
 8013e8a:	f000 fe83 	bl	8014b94 <__assert_func>
 8013e8e:	f100 0614 	add.w	r6, r0, #20
 8013e92:	4633      	mov	r3, r6
 8013e94:	2200      	movs	r2, #0
 8013e96:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8013e9a:	4543      	cmp	r3, r8
 8013e9c:	d31e      	bcc.n	8013edc <__multiply+0x90>
 8013e9e:	f105 0c14 	add.w	ip, r5, #20
 8013ea2:	f104 0314 	add.w	r3, r4, #20
 8013ea6:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8013eaa:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013eae:	9202      	str	r2, [sp, #8]
 8013eb0:	ebac 0205 	sub.w	r2, ip, r5
 8013eb4:	3a15      	subs	r2, #21
 8013eb6:	f022 0203 	bic.w	r2, r2, #3
 8013eba:	3204      	adds	r2, #4
 8013ebc:	f105 0115 	add.w	r1, r5, #21
 8013ec0:	458c      	cmp	ip, r1
 8013ec2:	bf38      	it	cc
 8013ec4:	2204      	movcc	r2, #4
 8013ec6:	9201      	str	r2, [sp, #4]
 8013ec8:	9a02      	ldr	r2, [sp, #8]
 8013eca:	9303      	str	r3, [sp, #12]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d808      	bhi.n	8013ee2 <__multiply+0x96>
 8013ed0:	2f00      	cmp	r7, #0
 8013ed2:	dc55      	bgt.n	8013f80 <__multiply+0x134>
 8013ed4:	6107      	str	r7, [r0, #16]
 8013ed6:	b005      	add	sp, #20
 8013ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013edc:	f843 2b04 	str.w	r2, [r3], #4
 8013ee0:	e7db      	b.n	8013e9a <__multiply+0x4e>
 8013ee2:	f8b3 a000 	ldrh.w	sl, [r3]
 8013ee6:	f1ba 0f00 	cmp.w	sl, #0
 8013eea:	d020      	beq.n	8013f2e <__multiply+0xe2>
 8013eec:	46b1      	mov	r9, r6
 8013eee:	2200      	movs	r2, #0
 8013ef0:	f105 0e14 	add.w	lr, r5, #20
 8013ef4:	f85e 4b04 	ldr.w	r4, [lr], #4
 8013ef8:	f8d9 b000 	ldr.w	fp, [r9]
 8013efc:	b2a1      	uxth	r1, r4
 8013efe:	fa1f fb8b 	uxth.w	fp, fp
 8013f02:	fb0a b101 	mla	r1, sl, r1, fp
 8013f06:	4411      	add	r1, r2
 8013f08:	f8d9 2000 	ldr.w	r2, [r9]
 8013f0c:	0c24      	lsrs	r4, r4, #16
 8013f0e:	0c12      	lsrs	r2, r2, #16
 8013f10:	fb0a 2404 	mla	r4, sl, r4, r2
 8013f14:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8013f18:	b289      	uxth	r1, r1
 8013f1a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013f1e:	45f4      	cmp	ip, lr
 8013f20:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8013f24:	f849 1b04 	str.w	r1, [r9], #4
 8013f28:	d8e4      	bhi.n	8013ef4 <__multiply+0xa8>
 8013f2a:	9901      	ldr	r1, [sp, #4]
 8013f2c:	5072      	str	r2, [r6, r1]
 8013f2e:	9a03      	ldr	r2, [sp, #12]
 8013f30:	3304      	adds	r3, #4
 8013f32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013f36:	f1b9 0f00 	cmp.w	r9, #0
 8013f3a:	d01f      	beq.n	8013f7c <__multiply+0x130>
 8013f3c:	46b6      	mov	lr, r6
 8013f3e:	f04f 0a00 	mov.w	sl, #0
 8013f42:	6834      	ldr	r4, [r6, #0]
 8013f44:	f105 0114 	add.w	r1, r5, #20
 8013f48:	880a      	ldrh	r2, [r1, #0]
 8013f4a:	f8be b002 	ldrh.w	fp, [lr, #2]
 8013f4e:	b2a4      	uxth	r4, r4
 8013f50:	fb09 b202 	mla	r2, r9, r2, fp
 8013f54:	4492      	add	sl, r2
 8013f56:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8013f5a:	f84e 4b04 	str.w	r4, [lr], #4
 8013f5e:	f851 4b04 	ldr.w	r4, [r1], #4
 8013f62:	f8be 2000 	ldrh.w	r2, [lr]
 8013f66:	0c24      	lsrs	r4, r4, #16
 8013f68:	fb09 2404 	mla	r4, r9, r4, r2
 8013f6c:	458c      	cmp	ip, r1
 8013f6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8013f72:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013f76:	d8e7      	bhi.n	8013f48 <__multiply+0xfc>
 8013f78:	9a01      	ldr	r2, [sp, #4]
 8013f7a:	50b4      	str	r4, [r6, r2]
 8013f7c:	3604      	adds	r6, #4
 8013f7e:	e7a3      	b.n	8013ec8 <__multiply+0x7c>
 8013f80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d1a5      	bne.n	8013ed4 <__multiply+0x88>
 8013f88:	3f01      	subs	r7, #1
 8013f8a:	e7a1      	b.n	8013ed0 <__multiply+0x84>
 8013f8c:	080171d4 	.word	0x080171d4
 8013f90:	08017264 	.word	0x08017264

08013f94 <__pow5mult>:
 8013f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f98:	4615      	mov	r5, r2
 8013f9a:	f012 0203 	ands.w	r2, r2, #3
 8013f9e:	4606      	mov	r6, r0
 8013fa0:	460f      	mov	r7, r1
 8013fa2:	d007      	beq.n	8013fb4 <__pow5mult+0x20>
 8013fa4:	4c25      	ldr	r4, [pc, #148]	; (801403c <__pow5mult+0xa8>)
 8013fa6:	3a01      	subs	r2, #1
 8013fa8:	2300      	movs	r3, #0
 8013faa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013fae:	f7ff fe55 	bl	8013c5c <__multadd>
 8013fb2:	4607      	mov	r7, r0
 8013fb4:	10ad      	asrs	r5, r5, #2
 8013fb6:	d03d      	beq.n	8014034 <__pow5mult+0xa0>
 8013fb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013fba:	b97c      	cbnz	r4, 8013fdc <__pow5mult+0x48>
 8013fbc:	2010      	movs	r0, #16
 8013fbe:	f7ff fdb7 	bl	8013b30 <malloc>
 8013fc2:	4602      	mov	r2, r0
 8013fc4:	6270      	str	r0, [r6, #36]	; 0x24
 8013fc6:	b928      	cbnz	r0, 8013fd4 <__pow5mult+0x40>
 8013fc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013fcc:	4b1c      	ldr	r3, [pc, #112]	; (8014040 <__pow5mult+0xac>)
 8013fce:	481d      	ldr	r0, [pc, #116]	; (8014044 <__pow5mult+0xb0>)
 8013fd0:	f000 fde0 	bl	8014b94 <__assert_func>
 8013fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013fd8:	6004      	str	r4, [r0, #0]
 8013fda:	60c4      	str	r4, [r0, #12]
 8013fdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013fe0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013fe4:	b94c      	cbnz	r4, 8013ffa <__pow5mult+0x66>
 8013fe6:	f240 2171 	movw	r1, #625	; 0x271
 8013fea:	4630      	mov	r0, r6
 8013fec:	f7ff ff18 	bl	8013e20 <__i2b>
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	f8c8 0008 	str.w	r0, [r8, #8]
 8013ff8:	6003      	str	r3, [r0, #0]
 8013ffa:	f04f 0900 	mov.w	r9, #0
 8013ffe:	07eb      	lsls	r3, r5, #31
 8014000:	d50a      	bpl.n	8014018 <__pow5mult+0x84>
 8014002:	4639      	mov	r1, r7
 8014004:	4622      	mov	r2, r4
 8014006:	4630      	mov	r0, r6
 8014008:	f7ff ff20 	bl	8013e4c <__multiply>
 801400c:	4680      	mov	r8, r0
 801400e:	4639      	mov	r1, r7
 8014010:	4630      	mov	r0, r6
 8014012:	f7ff fe01 	bl	8013c18 <_Bfree>
 8014016:	4647      	mov	r7, r8
 8014018:	106d      	asrs	r5, r5, #1
 801401a:	d00b      	beq.n	8014034 <__pow5mult+0xa0>
 801401c:	6820      	ldr	r0, [r4, #0]
 801401e:	b938      	cbnz	r0, 8014030 <__pow5mult+0x9c>
 8014020:	4622      	mov	r2, r4
 8014022:	4621      	mov	r1, r4
 8014024:	4630      	mov	r0, r6
 8014026:	f7ff ff11 	bl	8013e4c <__multiply>
 801402a:	6020      	str	r0, [r4, #0]
 801402c:	f8c0 9000 	str.w	r9, [r0]
 8014030:	4604      	mov	r4, r0
 8014032:	e7e4      	b.n	8013ffe <__pow5mult+0x6a>
 8014034:	4638      	mov	r0, r7
 8014036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801403a:	bf00      	nop
 801403c:	080173b8 	.word	0x080173b8
 8014040:	0801715e 	.word	0x0801715e
 8014044:	08017264 	.word	0x08017264

08014048 <__lshift>:
 8014048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801404c:	460c      	mov	r4, r1
 801404e:	4607      	mov	r7, r0
 8014050:	4691      	mov	r9, r2
 8014052:	6923      	ldr	r3, [r4, #16]
 8014054:	6849      	ldr	r1, [r1, #4]
 8014056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801405a:	68a3      	ldr	r3, [r4, #8]
 801405c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014060:	f108 0601 	add.w	r6, r8, #1
 8014064:	42b3      	cmp	r3, r6
 8014066:	db0b      	blt.n	8014080 <__lshift+0x38>
 8014068:	4638      	mov	r0, r7
 801406a:	f7ff fd95 	bl	8013b98 <_Balloc>
 801406e:	4605      	mov	r5, r0
 8014070:	b948      	cbnz	r0, 8014086 <__lshift+0x3e>
 8014072:	4602      	mov	r2, r0
 8014074:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014078:	4b27      	ldr	r3, [pc, #156]	; (8014118 <__lshift+0xd0>)
 801407a:	4828      	ldr	r0, [pc, #160]	; (801411c <__lshift+0xd4>)
 801407c:	f000 fd8a 	bl	8014b94 <__assert_func>
 8014080:	3101      	adds	r1, #1
 8014082:	005b      	lsls	r3, r3, #1
 8014084:	e7ee      	b.n	8014064 <__lshift+0x1c>
 8014086:	2300      	movs	r3, #0
 8014088:	f100 0114 	add.w	r1, r0, #20
 801408c:	f100 0210 	add.w	r2, r0, #16
 8014090:	4618      	mov	r0, r3
 8014092:	4553      	cmp	r3, sl
 8014094:	db33      	blt.n	80140fe <__lshift+0xb6>
 8014096:	6920      	ldr	r0, [r4, #16]
 8014098:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801409c:	f104 0314 	add.w	r3, r4, #20
 80140a0:	f019 091f 	ands.w	r9, r9, #31
 80140a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80140a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80140ac:	d02b      	beq.n	8014106 <__lshift+0xbe>
 80140ae:	468a      	mov	sl, r1
 80140b0:	2200      	movs	r2, #0
 80140b2:	f1c9 0e20 	rsb	lr, r9, #32
 80140b6:	6818      	ldr	r0, [r3, #0]
 80140b8:	fa00 f009 	lsl.w	r0, r0, r9
 80140bc:	4302      	orrs	r2, r0
 80140be:	f84a 2b04 	str.w	r2, [sl], #4
 80140c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80140c6:	459c      	cmp	ip, r3
 80140c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80140cc:	d8f3      	bhi.n	80140b6 <__lshift+0x6e>
 80140ce:	ebac 0304 	sub.w	r3, ip, r4
 80140d2:	3b15      	subs	r3, #21
 80140d4:	f023 0303 	bic.w	r3, r3, #3
 80140d8:	3304      	adds	r3, #4
 80140da:	f104 0015 	add.w	r0, r4, #21
 80140de:	4584      	cmp	ip, r0
 80140e0:	bf38      	it	cc
 80140e2:	2304      	movcc	r3, #4
 80140e4:	50ca      	str	r2, [r1, r3]
 80140e6:	b10a      	cbz	r2, 80140ec <__lshift+0xa4>
 80140e8:	f108 0602 	add.w	r6, r8, #2
 80140ec:	3e01      	subs	r6, #1
 80140ee:	4638      	mov	r0, r7
 80140f0:	4621      	mov	r1, r4
 80140f2:	612e      	str	r6, [r5, #16]
 80140f4:	f7ff fd90 	bl	8013c18 <_Bfree>
 80140f8:	4628      	mov	r0, r5
 80140fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8014102:	3301      	adds	r3, #1
 8014104:	e7c5      	b.n	8014092 <__lshift+0x4a>
 8014106:	3904      	subs	r1, #4
 8014108:	f853 2b04 	ldr.w	r2, [r3], #4
 801410c:	459c      	cmp	ip, r3
 801410e:	f841 2f04 	str.w	r2, [r1, #4]!
 8014112:	d8f9      	bhi.n	8014108 <__lshift+0xc0>
 8014114:	e7ea      	b.n	80140ec <__lshift+0xa4>
 8014116:	bf00      	nop
 8014118:	080171d4 	.word	0x080171d4
 801411c:	08017264 	.word	0x08017264

08014120 <__mcmp>:
 8014120:	4603      	mov	r3, r0
 8014122:	690a      	ldr	r2, [r1, #16]
 8014124:	6900      	ldr	r0, [r0, #16]
 8014126:	b530      	push	{r4, r5, lr}
 8014128:	1a80      	subs	r0, r0, r2
 801412a:	d10d      	bne.n	8014148 <__mcmp+0x28>
 801412c:	3314      	adds	r3, #20
 801412e:	3114      	adds	r1, #20
 8014130:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014134:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014138:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801413c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014140:	4295      	cmp	r5, r2
 8014142:	d002      	beq.n	801414a <__mcmp+0x2a>
 8014144:	d304      	bcc.n	8014150 <__mcmp+0x30>
 8014146:	2001      	movs	r0, #1
 8014148:	bd30      	pop	{r4, r5, pc}
 801414a:	42a3      	cmp	r3, r4
 801414c:	d3f4      	bcc.n	8014138 <__mcmp+0x18>
 801414e:	e7fb      	b.n	8014148 <__mcmp+0x28>
 8014150:	f04f 30ff 	mov.w	r0, #4294967295
 8014154:	e7f8      	b.n	8014148 <__mcmp+0x28>
	...

08014158 <__mdiff>:
 8014158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415c:	460c      	mov	r4, r1
 801415e:	4606      	mov	r6, r0
 8014160:	4611      	mov	r1, r2
 8014162:	4620      	mov	r0, r4
 8014164:	4692      	mov	sl, r2
 8014166:	f7ff ffdb 	bl	8014120 <__mcmp>
 801416a:	1e05      	subs	r5, r0, #0
 801416c:	d111      	bne.n	8014192 <__mdiff+0x3a>
 801416e:	4629      	mov	r1, r5
 8014170:	4630      	mov	r0, r6
 8014172:	f7ff fd11 	bl	8013b98 <_Balloc>
 8014176:	4602      	mov	r2, r0
 8014178:	b928      	cbnz	r0, 8014186 <__mdiff+0x2e>
 801417a:	f240 2132 	movw	r1, #562	; 0x232
 801417e:	4b3c      	ldr	r3, [pc, #240]	; (8014270 <__mdiff+0x118>)
 8014180:	483c      	ldr	r0, [pc, #240]	; (8014274 <__mdiff+0x11c>)
 8014182:	f000 fd07 	bl	8014b94 <__assert_func>
 8014186:	2301      	movs	r3, #1
 8014188:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801418c:	4610      	mov	r0, r2
 801418e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014192:	bfa4      	itt	ge
 8014194:	4653      	movge	r3, sl
 8014196:	46a2      	movge	sl, r4
 8014198:	4630      	mov	r0, r6
 801419a:	f8da 1004 	ldr.w	r1, [sl, #4]
 801419e:	bfa6      	itte	ge
 80141a0:	461c      	movge	r4, r3
 80141a2:	2500      	movge	r5, #0
 80141a4:	2501      	movlt	r5, #1
 80141a6:	f7ff fcf7 	bl	8013b98 <_Balloc>
 80141aa:	4602      	mov	r2, r0
 80141ac:	b918      	cbnz	r0, 80141b6 <__mdiff+0x5e>
 80141ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80141b2:	4b2f      	ldr	r3, [pc, #188]	; (8014270 <__mdiff+0x118>)
 80141b4:	e7e4      	b.n	8014180 <__mdiff+0x28>
 80141b6:	f100 0814 	add.w	r8, r0, #20
 80141ba:	f8da 7010 	ldr.w	r7, [sl, #16]
 80141be:	60c5      	str	r5, [r0, #12]
 80141c0:	f04f 0c00 	mov.w	ip, #0
 80141c4:	f10a 0514 	add.w	r5, sl, #20
 80141c8:	f10a 0010 	add.w	r0, sl, #16
 80141cc:	46c2      	mov	sl, r8
 80141ce:	6926      	ldr	r6, [r4, #16]
 80141d0:	f104 0914 	add.w	r9, r4, #20
 80141d4:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80141d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80141dc:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80141e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80141e4:	fa1f f18b 	uxth.w	r1, fp
 80141e8:	4461      	add	r1, ip
 80141ea:	fa1f fc83 	uxth.w	ip, r3
 80141ee:	0c1b      	lsrs	r3, r3, #16
 80141f0:	eba1 010c 	sub.w	r1, r1, ip
 80141f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80141f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80141fc:	b289      	uxth	r1, r1
 80141fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8014202:	454e      	cmp	r6, r9
 8014204:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014208:	f84a 3b04 	str.w	r3, [sl], #4
 801420c:	d8e6      	bhi.n	80141dc <__mdiff+0x84>
 801420e:	1b33      	subs	r3, r6, r4
 8014210:	3b15      	subs	r3, #21
 8014212:	f023 0303 	bic.w	r3, r3, #3
 8014216:	3415      	adds	r4, #21
 8014218:	3304      	adds	r3, #4
 801421a:	42a6      	cmp	r6, r4
 801421c:	bf38      	it	cc
 801421e:	2304      	movcc	r3, #4
 8014220:	441d      	add	r5, r3
 8014222:	4443      	add	r3, r8
 8014224:	461e      	mov	r6, r3
 8014226:	462c      	mov	r4, r5
 8014228:	4574      	cmp	r4, lr
 801422a:	d30e      	bcc.n	801424a <__mdiff+0xf2>
 801422c:	f10e 0103 	add.w	r1, lr, #3
 8014230:	1b49      	subs	r1, r1, r5
 8014232:	f021 0103 	bic.w	r1, r1, #3
 8014236:	3d03      	subs	r5, #3
 8014238:	45ae      	cmp	lr, r5
 801423a:	bf38      	it	cc
 801423c:	2100      	movcc	r1, #0
 801423e:	4419      	add	r1, r3
 8014240:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8014244:	b18b      	cbz	r3, 801426a <__mdiff+0x112>
 8014246:	6117      	str	r7, [r2, #16]
 8014248:	e7a0      	b.n	801418c <__mdiff+0x34>
 801424a:	f854 8b04 	ldr.w	r8, [r4], #4
 801424e:	fa1f f188 	uxth.w	r1, r8
 8014252:	4461      	add	r1, ip
 8014254:	1408      	asrs	r0, r1, #16
 8014256:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 801425a:	b289      	uxth	r1, r1
 801425c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014260:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014264:	f846 1b04 	str.w	r1, [r6], #4
 8014268:	e7de      	b.n	8014228 <__mdiff+0xd0>
 801426a:	3f01      	subs	r7, #1
 801426c:	e7e8      	b.n	8014240 <__mdiff+0xe8>
 801426e:	bf00      	nop
 8014270:	080171d4 	.word	0x080171d4
 8014274:	08017264 	.word	0x08017264

08014278 <__ulp>:
 8014278:	4b11      	ldr	r3, [pc, #68]	; (80142c0 <__ulp+0x48>)
 801427a:	400b      	ands	r3, r1
 801427c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8014280:	2b00      	cmp	r3, #0
 8014282:	dd02      	ble.n	801428a <__ulp+0x12>
 8014284:	2000      	movs	r0, #0
 8014286:	4619      	mov	r1, r3
 8014288:	4770      	bx	lr
 801428a:	425b      	negs	r3, r3
 801428c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8014290:	f04f 0000 	mov.w	r0, #0
 8014294:	f04f 0100 	mov.w	r1, #0
 8014298:	ea4f 5223 	mov.w	r2, r3, asr #20
 801429c:	da04      	bge.n	80142a8 <__ulp+0x30>
 801429e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80142a2:	fa43 f102 	asr.w	r1, r3, r2
 80142a6:	4770      	bx	lr
 80142a8:	f1a2 0314 	sub.w	r3, r2, #20
 80142ac:	2b1e      	cmp	r3, #30
 80142ae:	bfd6      	itet	le
 80142b0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80142b4:	2301      	movgt	r3, #1
 80142b6:	fa22 f303 	lsrle.w	r3, r2, r3
 80142ba:	4618      	mov	r0, r3
 80142bc:	4770      	bx	lr
 80142be:	bf00      	nop
 80142c0:	7ff00000 	.word	0x7ff00000

080142c4 <__b2d>:
 80142c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142c8:	6907      	ldr	r7, [r0, #16]
 80142ca:	f100 0914 	add.w	r9, r0, #20
 80142ce:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80142d2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80142d6:	f1a7 0804 	sub.w	r8, r7, #4
 80142da:	4630      	mov	r0, r6
 80142dc:	f7ff fd52 	bl	8013d84 <__hi0bits>
 80142e0:	f1c0 0320 	rsb	r3, r0, #32
 80142e4:	280a      	cmp	r0, #10
 80142e6:	600b      	str	r3, [r1, #0]
 80142e8:	491f      	ldr	r1, [pc, #124]	; (8014368 <__b2d+0xa4>)
 80142ea:	dc17      	bgt.n	801431c <__b2d+0x58>
 80142ec:	45c1      	cmp	r9, r8
 80142ee:	bf28      	it	cs
 80142f0:	2200      	movcs	r2, #0
 80142f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80142f6:	fa26 f30c 	lsr.w	r3, r6, ip
 80142fa:	bf38      	it	cc
 80142fc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014300:	ea43 0501 	orr.w	r5, r3, r1
 8014304:	f100 0315 	add.w	r3, r0, #21
 8014308:	fa06 f303 	lsl.w	r3, r6, r3
 801430c:	fa22 f20c 	lsr.w	r2, r2, ip
 8014310:	ea43 0402 	orr.w	r4, r3, r2
 8014314:	4620      	mov	r0, r4
 8014316:	4629      	mov	r1, r5
 8014318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801431c:	45c1      	cmp	r9, r8
 801431e:	bf2e      	itee	cs
 8014320:	2200      	movcs	r2, #0
 8014322:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8014326:	f1a7 0808 	subcc.w	r8, r7, #8
 801432a:	f1b0 030b 	subs.w	r3, r0, #11
 801432e:	d016      	beq.n	801435e <__b2d+0x9a>
 8014330:	f1c3 0720 	rsb	r7, r3, #32
 8014334:	fa22 f107 	lsr.w	r1, r2, r7
 8014338:	45c8      	cmp	r8, r9
 801433a:	fa06 f603 	lsl.w	r6, r6, r3
 801433e:	ea46 0601 	orr.w	r6, r6, r1
 8014342:	bf94      	ite	ls
 8014344:	2100      	movls	r1, #0
 8014346:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801434a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 801434e:	fa02 f003 	lsl.w	r0, r2, r3
 8014352:	40f9      	lsrs	r1, r7
 8014354:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014358:	ea40 0401 	orr.w	r4, r0, r1
 801435c:	e7da      	b.n	8014314 <__b2d+0x50>
 801435e:	4614      	mov	r4, r2
 8014360:	ea46 0501 	orr.w	r5, r6, r1
 8014364:	e7d6      	b.n	8014314 <__b2d+0x50>
 8014366:	bf00      	nop
 8014368:	3ff00000 	.word	0x3ff00000

0801436c <__d2b>:
 801436c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014370:	2101      	movs	r1, #1
 8014372:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8014376:	4690      	mov	r8, r2
 8014378:	461d      	mov	r5, r3
 801437a:	f7ff fc0d 	bl	8013b98 <_Balloc>
 801437e:	4604      	mov	r4, r0
 8014380:	b930      	cbnz	r0, 8014390 <__d2b+0x24>
 8014382:	4602      	mov	r2, r0
 8014384:	f240 310a 	movw	r1, #778	; 0x30a
 8014388:	4b24      	ldr	r3, [pc, #144]	; (801441c <__d2b+0xb0>)
 801438a:	4825      	ldr	r0, [pc, #148]	; (8014420 <__d2b+0xb4>)
 801438c:	f000 fc02 	bl	8014b94 <__assert_func>
 8014390:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8014394:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8014398:	bb2d      	cbnz	r5, 80143e6 <__d2b+0x7a>
 801439a:	9301      	str	r3, [sp, #4]
 801439c:	f1b8 0300 	subs.w	r3, r8, #0
 80143a0:	d026      	beq.n	80143f0 <__d2b+0x84>
 80143a2:	4668      	mov	r0, sp
 80143a4:	9300      	str	r3, [sp, #0]
 80143a6:	f7ff fd0d 	bl	8013dc4 <__lo0bits>
 80143aa:	9900      	ldr	r1, [sp, #0]
 80143ac:	b1f0      	cbz	r0, 80143ec <__d2b+0x80>
 80143ae:	9a01      	ldr	r2, [sp, #4]
 80143b0:	f1c0 0320 	rsb	r3, r0, #32
 80143b4:	fa02 f303 	lsl.w	r3, r2, r3
 80143b8:	430b      	orrs	r3, r1
 80143ba:	40c2      	lsrs	r2, r0
 80143bc:	6163      	str	r3, [r4, #20]
 80143be:	9201      	str	r2, [sp, #4]
 80143c0:	9b01      	ldr	r3, [sp, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	bf14      	ite	ne
 80143c6:	2102      	movne	r1, #2
 80143c8:	2101      	moveq	r1, #1
 80143ca:	61a3      	str	r3, [r4, #24]
 80143cc:	6121      	str	r1, [r4, #16]
 80143ce:	b1c5      	cbz	r5, 8014402 <__d2b+0x96>
 80143d0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80143d4:	4405      	add	r5, r0
 80143d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80143da:	603d      	str	r5, [r7, #0]
 80143dc:	6030      	str	r0, [r6, #0]
 80143de:	4620      	mov	r0, r4
 80143e0:	b002      	add	sp, #8
 80143e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80143ea:	e7d6      	b.n	801439a <__d2b+0x2e>
 80143ec:	6161      	str	r1, [r4, #20]
 80143ee:	e7e7      	b.n	80143c0 <__d2b+0x54>
 80143f0:	a801      	add	r0, sp, #4
 80143f2:	f7ff fce7 	bl	8013dc4 <__lo0bits>
 80143f6:	2101      	movs	r1, #1
 80143f8:	9b01      	ldr	r3, [sp, #4]
 80143fa:	6121      	str	r1, [r4, #16]
 80143fc:	6163      	str	r3, [r4, #20]
 80143fe:	3020      	adds	r0, #32
 8014400:	e7e5      	b.n	80143ce <__d2b+0x62>
 8014402:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8014406:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801440a:	6038      	str	r0, [r7, #0]
 801440c:	6918      	ldr	r0, [r3, #16]
 801440e:	f7ff fcb9 	bl	8013d84 <__hi0bits>
 8014412:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8014416:	6031      	str	r1, [r6, #0]
 8014418:	e7e1      	b.n	80143de <__d2b+0x72>
 801441a:	bf00      	nop
 801441c:	080171d4 	.word	0x080171d4
 8014420:	08017264 	.word	0x08017264

08014424 <__ratio>:
 8014424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014428:	4688      	mov	r8, r1
 801442a:	4669      	mov	r1, sp
 801442c:	4681      	mov	r9, r0
 801442e:	f7ff ff49 	bl	80142c4 <__b2d>
 8014432:	460f      	mov	r7, r1
 8014434:	4604      	mov	r4, r0
 8014436:	460d      	mov	r5, r1
 8014438:	4640      	mov	r0, r8
 801443a:	a901      	add	r1, sp, #4
 801443c:	f7ff ff42 	bl	80142c4 <__b2d>
 8014440:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014444:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014448:	468b      	mov	fp, r1
 801444a:	eba3 0c02 	sub.w	ip, r3, r2
 801444e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014452:	1a9b      	subs	r3, r3, r2
 8014454:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014458:	2b00      	cmp	r3, #0
 801445a:	bfd5      	itete	le
 801445c:	460a      	movle	r2, r1
 801445e:	462a      	movgt	r2, r5
 8014460:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014464:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014468:	bfd8      	it	le
 801446a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801446e:	465b      	mov	r3, fp
 8014470:	4602      	mov	r2, r0
 8014472:	4639      	mov	r1, r7
 8014474:	4620      	mov	r0, r4
 8014476:	f7ee ff31 	bl	80032dc <__aeabi_ddiv>
 801447a:	b003      	add	sp, #12
 801447c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014480 <__copybits>:
 8014480:	3901      	subs	r1, #1
 8014482:	b570      	push	{r4, r5, r6, lr}
 8014484:	1149      	asrs	r1, r1, #5
 8014486:	6914      	ldr	r4, [r2, #16]
 8014488:	3101      	adds	r1, #1
 801448a:	f102 0314 	add.w	r3, r2, #20
 801448e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014492:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014496:	1f05      	subs	r5, r0, #4
 8014498:	42a3      	cmp	r3, r4
 801449a:	d30c      	bcc.n	80144b6 <__copybits+0x36>
 801449c:	1aa3      	subs	r3, r4, r2
 801449e:	3b11      	subs	r3, #17
 80144a0:	f023 0303 	bic.w	r3, r3, #3
 80144a4:	3211      	adds	r2, #17
 80144a6:	42a2      	cmp	r2, r4
 80144a8:	bf88      	it	hi
 80144aa:	2300      	movhi	r3, #0
 80144ac:	4418      	add	r0, r3
 80144ae:	2300      	movs	r3, #0
 80144b0:	4288      	cmp	r0, r1
 80144b2:	d305      	bcc.n	80144c0 <__copybits+0x40>
 80144b4:	bd70      	pop	{r4, r5, r6, pc}
 80144b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80144ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80144be:	e7eb      	b.n	8014498 <__copybits+0x18>
 80144c0:	f840 3b04 	str.w	r3, [r0], #4
 80144c4:	e7f4      	b.n	80144b0 <__copybits+0x30>

080144c6 <__any_on>:
 80144c6:	f100 0214 	add.w	r2, r0, #20
 80144ca:	6900      	ldr	r0, [r0, #16]
 80144cc:	114b      	asrs	r3, r1, #5
 80144ce:	4298      	cmp	r0, r3
 80144d0:	b510      	push	{r4, lr}
 80144d2:	db11      	blt.n	80144f8 <__any_on+0x32>
 80144d4:	dd0a      	ble.n	80144ec <__any_on+0x26>
 80144d6:	f011 011f 	ands.w	r1, r1, #31
 80144da:	d007      	beq.n	80144ec <__any_on+0x26>
 80144dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80144e0:	fa24 f001 	lsr.w	r0, r4, r1
 80144e4:	fa00 f101 	lsl.w	r1, r0, r1
 80144e8:	428c      	cmp	r4, r1
 80144ea:	d10b      	bne.n	8014504 <__any_on+0x3e>
 80144ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80144f0:	4293      	cmp	r3, r2
 80144f2:	d803      	bhi.n	80144fc <__any_on+0x36>
 80144f4:	2000      	movs	r0, #0
 80144f6:	bd10      	pop	{r4, pc}
 80144f8:	4603      	mov	r3, r0
 80144fa:	e7f7      	b.n	80144ec <__any_on+0x26>
 80144fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014500:	2900      	cmp	r1, #0
 8014502:	d0f5      	beq.n	80144f0 <__any_on+0x2a>
 8014504:	2001      	movs	r0, #1
 8014506:	e7f6      	b.n	80144f6 <__any_on+0x30>

08014508 <_calloc_r>:
 8014508:	b538      	push	{r3, r4, r5, lr}
 801450a:	fb02 f501 	mul.w	r5, r2, r1
 801450e:	4629      	mov	r1, r5
 8014510:	f7fc f896 	bl	8010640 <_malloc_r>
 8014514:	4604      	mov	r4, r0
 8014516:	b118      	cbz	r0, 8014520 <_calloc_r+0x18>
 8014518:	462a      	mov	r2, r5
 801451a:	2100      	movs	r1, #0
 801451c:	f7fc f887 	bl	801062e <memset>
 8014520:	4620      	mov	r0, r4
 8014522:	bd38      	pop	{r3, r4, r5, pc}

08014524 <_free_r>:
 8014524:	b538      	push	{r3, r4, r5, lr}
 8014526:	4605      	mov	r5, r0
 8014528:	2900      	cmp	r1, #0
 801452a:	d043      	beq.n	80145b4 <_free_r+0x90>
 801452c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014530:	1f0c      	subs	r4, r1, #4
 8014532:	2b00      	cmp	r3, #0
 8014534:	bfb8      	it	lt
 8014536:	18e4      	addlt	r4, r4, r3
 8014538:	f7ff fb22 	bl	8013b80 <__malloc_lock>
 801453c:	4a1e      	ldr	r2, [pc, #120]	; (80145b8 <_free_r+0x94>)
 801453e:	6813      	ldr	r3, [r2, #0]
 8014540:	4610      	mov	r0, r2
 8014542:	b933      	cbnz	r3, 8014552 <_free_r+0x2e>
 8014544:	6063      	str	r3, [r4, #4]
 8014546:	6014      	str	r4, [r2, #0]
 8014548:	4628      	mov	r0, r5
 801454a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801454e:	f7ff bb1d 	b.w	8013b8c <__malloc_unlock>
 8014552:	42a3      	cmp	r3, r4
 8014554:	d90a      	bls.n	801456c <_free_r+0x48>
 8014556:	6821      	ldr	r1, [r4, #0]
 8014558:	1862      	adds	r2, r4, r1
 801455a:	4293      	cmp	r3, r2
 801455c:	bf01      	itttt	eq
 801455e:	681a      	ldreq	r2, [r3, #0]
 8014560:	685b      	ldreq	r3, [r3, #4]
 8014562:	1852      	addeq	r2, r2, r1
 8014564:	6022      	streq	r2, [r4, #0]
 8014566:	6063      	str	r3, [r4, #4]
 8014568:	6004      	str	r4, [r0, #0]
 801456a:	e7ed      	b.n	8014548 <_free_r+0x24>
 801456c:	461a      	mov	r2, r3
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	b10b      	cbz	r3, 8014576 <_free_r+0x52>
 8014572:	42a3      	cmp	r3, r4
 8014574:	d9fa      	bls.n	801456c <_free_r+0x48>
 8014576:	6811      	ldr	r1, [r2, #0]
 8014578:	1850      	adds	r0, r2, r1
 801457a:	42a0      	cmp	r0, r4
 801457c:	d10b      	bne.n	8014596 <_free_r+0x72>
 801457e:	6820      	ldr	r0, [r4, #0]
 8014580:	4401      	add	r1, r0
 8014582:	1850      	adds	r0, r2, r1
 8014584:	4283      	cmp	r3, r0
 8014586:	6011      	str	r1, [r2, #0]
 8014588:	d1de      	bne.n	8014548 <_free_r+0x24>
 801458a:	6818      	ldr	r0, [r3, #0]
 801458c:	685b      	ldr	r3, [r3, #4]
 801458e:	4401      	add	r1, r0
 8014590:	6011      	str	r1, [r2, #0]
 8014592:	6053      	str	r3, [r2, #4]
 8014594:	e7d8      	b.n	8014548 <_free_r+0x24>
 8014596:	d902      	bls.n	801459e <_free_r+0x7a>
 8014598:	230c      	movs	r3, #12
 801459a:	602b      	str	r3, [r5, #0]
 801459c:	e7d4      	b.n	8014548 <_free_r+0x24>
 801459e:	6820      	ldr	r0, [r4, #0]
 80145a0:	1821      	adds	r1, r4, r0
 80145a2:	428b      	cmp	r3, r1
 80145a4:	bf01      	itttt	eq
 80145a6:	6819      	ldreq	r1, [r3, #0]
 80145a8:	685b      	ldreq	r3, [r3, #4]
 80145aa:	1809      	addeq	r1, r1, r0
 80145ac:	6021      	streq	r1, [r4, #0]
 80145ae:	6063      	str	r3, [r4, #4]
 80145b0:	6054      	str	r4, [r2, #4]
 80145b2:	e7c9      	b.n	8014548 <_free_r+0x24>
 80145b4:	bd38      	pop	{r3, r4, r5, pc}
 80145b6:	bf00      	nop
 80145b8:	20000ee4 	.word	0x20000ee4

080145bc <__ssputs_r>:
 80145bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145c0:	688e      	ldr	r6, [r1, #8]
 80145c2:	4682      	mov	sl, r0
 80145c4:	429e      	cmp	r6, r3
 80145c6:	460c      	mov	r4, r1
 80145c8:	4690      	mov	r8, r2
 80145ca:	461f      	mov	r7, r3
 80145cc:	d838      	bhi.n	8014640 <__ssputs_r+0x84>
 80145ce:	898a      	ldrh	r2, [r1, #12]
 80145d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80145d4:	d032      	beq.n	801463c <__ssputs_r+0x80>
 80145d6:	6825      	ldr	r5, [r4, #0]
 80145d8:	6909      	ldr	r1, [r1, #16]
 80145da:	3301      	adds	r3, #1
 80145dc:	eba5 0901 	sub.w	r9, r5, r1
 80145e0:	6965      	ldr	r5, [r4, #20]
 80145e2:	444b      	add	r3, r9
 80145e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80145ec:	106d      	asrs	r5, r5, #1
 80145ee:	429d      	cmp	r5, r3
 80145f0:	bf38      	it	cc
 80145f2:	461d      	movcc	r5, r3
 80145f4:	0553      	lsls	r3, r2, #21
 80145f6:	d531      	bpl.n	801465c <__ssputs_r+0xa0>
 80145f8:	4629      	mov	r1, r5
 80145fa:	f7fc f821 	bl	8010640 <_malloc_r>
 80145fe:	4606      	mov	r6, r0
 8014600:	b950      	cbnz	r0, 8014618 <__ssputs_r+0x5c>
 8014602:	230c      	movs	r3, #12
 8014604:	f04f 30ff 	mov.w	r0, #4294967295
 8014608:	f8ca 3000 	str.w	r3, [sl]
 801460c:	89a3      	ldrh	r3, [r4, #12]
 801460e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014612:	81a3      	strh	r3, [r4, #12]
 8014614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014618:	464a      	mov	r2, r9
 801461a:	6921      	ldr	r1, [r4, #16]
 801461c:	f7fb ffdf 	bl	80105de <memcpy>
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014626:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801462a:	81a3      	strh	r3, [r4, #12]
 801462c:	6126      	str	r6, [r4, #16]
 801462e:	444e      	add	r6, r9
 8014630:	6026      	str	r6, [r4, #0]
 8014632:	463e      	mov	r6, r7
 8014634:	6165      	str	r5, [r4, #20]
 8014636:	eba5 0509 	sub.w	r5, r5, r9
 801463a:	60a5      	str	r5, [r4, #8]
 801463c:	42be      	cmp	r6, r7
 801463e:	d900      	bls.n	8014642 <__ssputs_r+0x86>
 8014640:	463e      	mov	r6, r7
 8014642:	4632      	mov	r2, r6
 8014644:	4641      	mov	r1, r8
 8014646:	6820      	ldr	r0, [r4, #0]
 8014648:	f7fb ffd7 	bl	80105fa <memmove>
 801464c:	68a3      	ldr	r3, [r4, #8]
 801464e:	6822      	ldr	r2, [r4, #0]
 8014650:	1b9b      	subs	r3, r3, r6
 8014652:	4432      	add	r2, r6
 8014654:	2000      	movs	r0, #0
 8014656:	60a3      	str	r3, [r4, #8]
 8014658:	6022      	str	r2, [r4, #0]
 801465a:	e7db      	b.n	8014614 <__ssputs_r+0x58>
 801465c:	462a      	mov	r2, r5
 801465e:	f000 faeb 	bl	8014c38 <_realloc_r>
 8014662:	4606      	mov	r6, r0
 8014664:	2800      	cmp	r0, #0
 8014666:	d1e1      	bne.n	801462c <__ssputs_r+0x70>
 8014668:	4650      	mov	r0, sl
 801466a:	6921      	ldr	r1, [r4, #16]
 801466c:	f7ff ff5a 	bl	8014524 <_free_r>
 8014670:	e7c7      	b.n	8014602 <__ssputs_r+0x46>
	...

08014674 <_svfiprintf_r>:
 8014674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014678:	4698      	mov	r8, r3
 801467a:	898b      	ldrh	r3, [r1, #12]
 801467c:	4607      	mov	r7, r0
 801467e:	061b      	lsls	r3, r3, #24
 8014680:	460d      	mov	r5, r1
 8014682:	4614      	mov	r4, r2
 8014684:	b09d      	sub	sp, #116	; 0x74
 8014686:	d50e      	bpl.n	80146a6 <_svfiprintf_r+0x32>
 8014688:	690b      	ldr	r3, [r1, #16]
 801468a:	b963      	cbnz	r3, 80146a6 <_svfiprintf_r+0x32>
 801468c:	2140      	movs	r1, #64	; 0x40
 801468e:	f7fb ffd7 	bl	8010640 <_malloc_r>
 8014692:	6028      	str	r0, [r5, #0]
 8014694:	6128      	str	r0, [r5, #16]
 8014696:	b920      	cbnz	r0, 80146a2 <_svfiprintf_r+0x2e>
 8014698:	230c      	movs	r3, #12
 801469a:	603b      	str	r3, [r7, #0]
 801469c:	f04f 30ff 	mov.w	r0, #4294967295
 80146a0:	e0d1      	b.n	8014846 <_svfiprintf_r+0x1d2>
 80146a2:	2340      	movs	r3, #64	; 0x40
 80146a4:	616b      	str	r3, [r5, #20]
 80146a6:	2300      	movs	r3, #0
 80146a8:	9309      	str	r3, [sp, #36]	; 0x24
 80146aa:	2320      	movs	r3, #32
 80146ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146b0:	2330      	movs	r3, #48	; 0x30
 80146b2:	f04f 0901 	mov.w	r9, #1
 80146b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80146ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014860 <_svfiprintf_r+0x1ec>
 80146be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146c2:	4623      	mov	r3, r4
 80146c4:	469a      	mov	sl, r3
 80146c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146ca:	b10a      	cbz	r2, 80146d0 <_svfiprintf_r+0x5c>
 80146cc:	2a25      	cmp	r2, #37	; 0x25
 80146ce:	d1f9      	bne.n	80146c4 <_svfiprintf_r+0x50>
 80146d0:	ebba 0b04 	subs.w	fp, sl, r4
 80146d4:	d00b      	beq.n	80146ee <_svfiprintf_r+0x7a>
 80146d6:	465b      	mov	r3, fp
 80146d8:	4622      	mov	r2, r4
 80146da:	4629      	mov	r1, r5
 80146dc:	4638      	mov	r0, r7
 80146de:	f7ff ff6d 	bl	80145bc <__ssputs_r>
 80146e2:	3001      	adds	r0, #1
 80146e4:	f000 80aa 	beq.w	801483c <_svfiprintf_r+0x1c8>
 80146e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146ea:	445a      	add	r2, fp
 80146ec:	9209      	str	r2, [sp, #36]	; 0x24
 80146ee:	f89a 3000 	ldrb.w	r3, [sl]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	f000 80a2 	beq.w	801483c <_svfiprintf_r+0x1c8>
 80146f8:	2300      	movs	r3, #0
 80146fa:	f04f 32ff 	mov.w	r2, #4294967295
 80146fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014702:	f10a 0a01 	add.w	sl, sl, #1
 8014706:	9304      	str	r3, [sp, #16]
 8014708:	9307      	str	r3, [sp, #28]
 801470a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801470e:	931a      	str	r3, [sp, #104]	; 0x68
 8014710:	4654      	mov	r4, sl
 8014712:	2205      	movs	r2, #5
 8014714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014718:	4851      	ldr	r0, [pc, #324]	; (8014860 <_svfiprintf_r+0x1ec>)
 801471a:	f7ff fa23 	bl	8013b64 <memchr>
 801471e:	9a04      	ldr	r2, [sp, #16]
 8014720:	b9d8      	cbnz	r0, 801475a <_svfiprintf_r+0xe6>
 8014722:	06d0      	lsls	r0, r2, #27
 8014724:	bf44      	itt	mi
 8014726:	2320      	movmi	r3, #32
 8014728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801472c:	0711      	lsls	r1, r2, #28
 801472e:	bf44      	itt	mi
 8014730:	232b      	movmi	r3, #43	; 0x2b
 8014732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014736:	f89a 3000 	ldrb.w	r3, [sl]
 801473a:	2b2a      	cmp	r3, #42	; 0x2a
 801473c:	d015      	beq.n	801476a <_svfiprintf_r+0xf6>
 801473e:	4654      	mov	r4, sl
 8014740:	2000      	movs	r0, #0
 8014742:	f04f 0c0a 	mov.w	ip, #10
 8014746:	9a07      	ldr	r2, [sp, #28]
 8014748:	4621      	mov	r1, r4
 801474a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801474e:	3b30      	subs	r3, #48	; 0x30
 8014750:	2b09      	cmp	r3, #9
 8014752:	d94e      	bls.n	80147f2 <_svfiprintf_r+0x17e>
 8014754:	b1b0      	cbz	r0, 8014784 <_svfiprintf_r+0x110>
 8014756:	9207      	str	r2, [sp, #28]
 8014758:	e014      	b.n	8014784 <_svfiprintf_r+0x110>
 801475a:	eba0 0308 	sub.w	r3, r0, r8
 801475e:	fa09 f303 	lsl.w	r3, r9, r3
 8014762:	4313      	orrs	r3, r2
 8014764:	46a2      	mov	sl, r4
 8014766:	9304      	str	r3, [sp, #16]
 8014768:	e7d2      	b.n	8014710 <_svfiprintf_r+0x9c>
 801476a:	9b03      	ldr	r3, [sp, #12]
 801476c:	1d19      	adds	r1, r3, #4
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	9103      	str	r1, [sp, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	bfbb      	ittet	lt
 8014776:	425b      	neglt	r3, r3
 8014778:	f042 0202 	orrlt.w	r2, r2, #2
 801477c:	9307      	strge	r3, [sp, #28]
 801477e:	9307      	strlt	r3, [sp, #28]
 8014780:	bfb8      	it	lt
 8014782:	9204      	strlt	r2, [sp, #16]
 8014784:	7823      	ldrb	r3, [r4, #0]
 8014786:	2b2e      	cmp	r3, #46	; 0x2e
 8014788:	d10c      	bne.n	80147a4 <_svfiprintf_r+0x130>
 801478a:	7863      	ldrb	r3, [r4, #1]
 801478c:	2b2a      	cmp	r3, #42	; 0x2a
 801478e:	d135      	bne.n	80147fc <_svfiprintf_r+0x188>
 8014790:	9b03      	ldr	r3, [sp, #12]
 8014792:	3402      	adds	r4, #2
 8014794:	1d1a      	adds	r2, r3, #4
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	9203      	str	r2, [sp, #12]
 801479a:	2b00      	cmp	r3, #0
 801479c:	bfb8      	it	lt
 801479e:	f04f 33ff 	movlt.w	r3, #4294967295
 80147a2:	9305      	str	r3, [sp, #20]
 80147a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014870 <_svfiprintf_r+0x1fc>
 80147a8:	2203      	movs	r2, #3
 80147aa:	4650      	mov	r0, sl
 80147ac:	7821      	ldrb	r1, [r4, #0]
 80147ae:	f7ff f9d9 	bl	8013b64 <memchr>
 80147b2:	b140      	cbz	r0, 80147c6 <_svfiprintf_r+0x152>
 80147b4:	2340      	movs	r3, #64	; 0x40
 80147b6:	eba0 000a 	sub.w	r0, r0, sl
 80147ba:	fa03 f000 	lsl.w	r0, r3, r0
 80147be:	9b04      	ldr	r3, [sp, #16]
 80147c0:	3401      	adds	r4, #1
 80147c2:	4303      	orrs	r3, r0
 80147c4:	9304      	str	r3, [sp, #16]
 80147c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147ca:	2206      	movs	r2, #6
 80147cc:	4825      	ldr	r0, [pc, #148]	; (8014864 <_svfiprintf_r+0x1f0>)
 80147ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147d2:	f7ff f9c7 	bl	8013b64 <memchr>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d038      	beq.n	801484c <_svfiprintf_r+0x1d8>
 80147da:	4b23      	ldr	r3, [pc, #140]	; (8014868 <_svfiprintf_r+0x1f4>)
 80147dc:	bb1b      	cbnz	r3, 8014826 <_svfiprintf_r+0x1b2>
 80147de:	9b03      	ldr	r3, [sp, #12]
 80147e0:	3307      	adds	r3, #7
 80147e2:	f023 0307 	bic.w	r3, r3, #7
 80147e6:	3308      	adds	r3, #8
 80147e8:	9303      	str	r3, [sp, #12]
 80147ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80147ec:	4433      	add	r3, r6
 80147ee:	9309      	str	r3, [sp, #36]	; 0x24
 80147f0:	e767      	b.n	80146c2 <_svfiprintf_r+0x4e>
 80147f2:	460c      	mov	r4, r1
 80147f4:	2001      	movs	r0, #1
 80147f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80147fa:	e7a5      	b.n	8014748 <_svfiprintf_r+0xd4>
 80147fc:	2300      	movs	r3, #0
 80147fe:	f04f 0c0a 	mov.w	ip, #10
 8014802:	4619      	mov	r1, r3
 8014804:	3401      	adds	r4, #1
 8014806:	9305      	str	r3, [sp, #20]
 8014808:	4620      	mov	r0, r4
 801480a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801480e:	3a30      	subs	r2, #48	; 0x30
 8014810:	2a09      	cmp	r2, #9
 8014812:	d903      	bls.n	801481c <_svfiprintf_r+0x1a8>
 8014814:	2b00      	cmp	r3, #0
 8014816:	d0c5      	beq.n	80147a4 <_svfiprintf_r+0x130>
 8014818:	9105      	str	r1, [sp, #20]
 801481a:	e7c3      	b.n	80147a4 <_svfiprintf_r+0x130>
 801481c:	4604      	mov	r4, r0
 801481e:	2301      	movs	r3, #1
 8014820:	fb0c 2101 	mla	r1, ip, r1, r2
 8014824:	e7f0      	b.n	8014808 <_svfiprintf_r+0x194>
 8014826:	ab03      	add	r3, sp, #12
 8014828:	9300      	str	r3, [sp, #0]
 801482a:	462a      	mov	r2, r5
 801482c:	4638      	mov	r0, r7
 801482e:	4b0f      	ldr	r3, [pc, #60]	; (801486c <_svfiprintf_r+0x1f8>)
 8014830:	a904      	add	r1, sp, #16
 8014832:	f7fb fffd 	bl	8010830 <_printf_float>
 8014836:	1c42      	adds	r2, r0, #1
 8014838:	4606      	mov	r6, r0
 801483a:	d1d6      	bne.n	80147ea <_svfiprintf_r+0x176>
 801483c:	89ab      	ldrh	r3, [r5, #12]
 801483e:	065b      	lsls	r3, r3, #25
 8014840:	f53f af2c 	bmi.w	801469c <_svfiprintf_r+0x28>
 8014844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014846:	b01d      	add	sp, #116	; 0x74
 8014848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801484c:	ab03      	add	r3, sp, #12
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	462a      	mov	r2, r5
 8014852:	4638      	mov	r0, r7
 8014854:	4b05      	ldr	r3, [pc, #20]	; (801486c <_svfiprintf_r+0x1f8>)
 8014856:	a904      	add	r1, sp, #16
 8014858:	f7fc fa86 	bl	8010d68 <_printf_i>
 801485c:	e7eb      	b.n	8014836 <_svfiprintf_r+0x1c2>
 801485e:	bf00      	nop
 8014860:	080173c4 	.word	0x080173c4
 8014864:	080173ce 	.word	0x080173ce
 8014868:	08010831 	.word	0x08010831
 801486c:	080145bd 	.word	0x080145bd
 8014870:	080173ca 	.word	0x080173ca

08014874 <__sfputc_r>:
 8014874:	6893      	ldr	r3, [r2, #8]
 8014876:	b410      	push	{r4}
 8014878:	3b01      	subs	r3, #1
 801487a:	2b00      	cmp	r3, #0
 801487c:	6093      	str	r3, [r2, #8]
 801487e:	da07      	bge.n	8014890 <__sfputc_r+0x1c>
 8014880:	6994      	ldr	r4, [r2, #24]
 8014882:	42a3      	cmp	r3, r4
 8014884:	db01      	blt.n	801488a <__sfputc_r+0x16>
 8014886:	290a      	cmp	r1, #10
 8014888:	d102      	bne.n	8014890 <__sfputc_r+0x1c>
 801488a:	bc10      	pop	{r4}
 801488c:	f7fd bd4e 	b.w	801232c <__swbuf_r>
 8014890:	6813      	ldr	r3, [r2, #0]
 8014892:	1c58      	adds	r0, r3, #1
 8014894:	6010      	str	r0, [r2, #0]
 8014896:	7019      	strb	r1, [r3, #0]
 8014898:	4608      	mov	r0, r1
 801489a:	bc10      	pop	{r4}
 801489c:	4770      	bx	lr

0801489e <__sfputs_r>:
 801489e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a0:	4606      	mov	r6, r0
 80148a2:	460f      	mov	r7, r1
 80148a4:	4614      	mov	r4, r2
 80148a6:	18d5      	adds	r5, r2, r3
 80148a8:	42ac      	cmp	r4, r5
 80148aa:	d101      	bne.n	80148b0 <__sfputs_r+0x12>
 80148ac:	2000      	movs	r0, #0
 80148ae:	e007      	b.n	80148c0 <__sfputs_r+0x22>
 80148b0:	463a      	mov	r2, r7
 80148b2:	4630      	mov	r0, r6
 80148b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148b8:	f7ff ffdc 	bl	8014874 <__sfputc_r>
 80148bc:	1c43      	adds	r3, r0, #1
 80148be:	d1f3      	bne.n	80148a8 <__sfputs_r+0xa>
 80148c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148c4 <_vfiprintf_r>:
 80148c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148c8:	460d      	mov	r5, r1
 80148ca:	4614      	mov	r4, r2
 80148cc:	4698      	mov	r8, r3
 80148ce:	4606      	mov	r6, r0
 80148d0:	b09d      	sub	sp, #116	; 0x74
 80148d2:	b118      	cbz	r0, 80148dc <_vfiprintf_r+0x18>
 80148d4:	6983      	ldr	r3, [r0, #24]
 80148d6:	b90b      	cbnz	r3, 80148dc <_vfiprintf_r+0x18>
 80148d8:	f7fb fdae 	bl	8010438 <__sinit>
 80148dc:	4b89      	ldr	r3, [pc, #548]	; (8014b04 <_vfiprintf_r+0x240>)
 80148de:	429d      	cmp	r5, r3
 80148e0:	d11b      	bne.n	801491a <_vfiprintf_r+0x56>
 80148e2:	6875      	ldr	r5, [r6, #4]
 80148e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148e6:	07d9      	lsls	r1, r3, #31
 80148e8:	d405      	bmi.n	80148f6 <_vfiprintf_r+0x32>
 80148ea:	89ab      	ldrh	r3, [r5, #12]
 80148ec:	059a      	lsls	r2, r3, #22
 80148ee:	d402      	bmi.n	80148f6 <_vfiprintf_r+0x32>
 80148f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148f2:	f7fb fe64 	bl	80105be <__retarget_lock_acquire_recursive>
 80148f6:	89ab      	ldrh	r3, [r5, #12]
 80148f8:	071b      	lsls	r3, r3, #28
 80148fa:	d501      	bpl.n	8014900 <_vfiprintf_r+0x3c>
 80148fc:	692b      	ldr	r3, [r5, #16]
 80148fe:	b9eb      	cbnz	r3, 801493c <_vfiprintf_r+0x78>
 8014900:	4629      	mov	r1, r5
 8014902:	4630      	mov	r0, r6
 8014904:	f7fd fd76 	bl	80123f4 <__swsetup_r>
 8014908:	b1c0      	cbz	r0, 801493c <_vfiprintf_r+0x78>
 801490a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801490c:	07dc      	lsls	r4, r3, #31
 801490e:	d50e      	bpl.n	801492e <_vfiprintf_r+0x6a>
 8014910:	f04f 30ff 	mov.w	r0, #4294967295
 8014914:	b01d      	add	sp, #116	; 0x74
 8014916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801491a:	4b7b      	ldr	r3, [pc, #492]	; (8014b08 <_vfiprintf_r+0x244>)
 801491c:	429d      	cmp	r5, r3
 801491e:	d101      	bne.n	8014924 <_vfiprintf_r+0x60>
 8014920:	68b5      	ldr	r5, [r6, #8]
 8014922:	e7df      	b.n	80148e4 <_vfiprintf_r+0x20>
 8014924:	4b79      	ldr	r3, [pc, #484]	; (8014b0c <_vfiprintf_r+0x248>)
 8014926:	429d      	cmp	r5, r3
 8014928:	bf08      	it	eq
 801492a:	68f5      	ldreq	r5, [r6, #12]
 801492c:	e7da      	b.n	80148e4 <_vfiprintf_r+0x20>
 801492e:	89ab      	ldrh	r3, [r5, #12]
 8014930:	0598      	lsls	r0, r3, #22
 8014932:	d4ed      	bmi.n	8014910 <_vfiprintf_r+0x4c>
 8014934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014936:	f7fb fe43 	bl	80105c0 <__retarget_lock_release_recursive>
 801493a:	e7e9      	b.n	8014910 <_vfiprintf_r+0x4c>
 801493c:	2300      	movs	r3, #0
 801493e:	9309      	str	r3, [sp, #36]	; 0x24
 8014940:	2320      	movs	r3, #32
 8014942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014946:	2330      	movs	r3, #48	; 0x30
 8014948:	f04f 0901 	mov.w	r9, #1
 801494c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014950:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8014b10 <_vfiprintf_r+0x24c>
 8014954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014958:	4623      	mov	r3, r4
 801495a:	469a      	mov	sl, r3
 801495c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014960:	b10a      	cbz	r2, 8014966 <_vfiprintf_r+0xa2>
 8014962:	2a25      	cmp	r2, #37	; 0x25
 8014964:	d1f9      	bne.n	801495a <_vfiprintf_r+0x96>
 8014966:	ebba 0b04 	subs.w	fp, sl, r4
 801496a:	d00b      	beq.n	8014984 <_vfiprintf_r+0xc0>
 801496c:	465b      	mov	r3, fp
 801496e:	4622      	mov	r2, r4
 8014970:	4629      	mov	r1, r5
 8014972:	4630      	mov	r0, r6
 8014974:	f7ff ff93 	bl	801489e <__sfputs_r>
 8014978:	3001      	adds	r0, #1
 801497a:	f000 80aa 	beq.w	8014ad2 <_vfiprintf_r+0x20e>
 801497e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014980:	445a      	add	r2, fp
 8014982:	9209      	str	r2, [sp, #36]	; 0x24
 8014984:	f89a 3000 	ldrb.w	r3, [sl]
 8014988:	2b00      	cmp	r3, #0
 801498a:	f000 80a2 	beq.w	8014ad2 <_vfiprintf_r+0x20e>
 801498e:	2300      	movs	r3, #0
 8014990:	f04f 32ff 	mov.w	r2, #4294967295
 8014994:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014998:	f10a 0a01 	add.w	sl, sl, #1
 801499c:	9304      	str	r3, [sp, #16]
 801499e:	9307      	str	r3, [sp, #28]
 80149a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80149a4:	931a      	str	r3, [sp, #104]	; 0x68
 80149a6:	4654      	mov	r4, sl
 80149a8:	2205      	movs	r2, #5
 80149aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80149ae:	4858      	ldr	r0, [pc, #352]	; (8014b10 <_vfiprintf_r+0x24c>)
 80149b0:	f7ff f8d8 	bl	8013b64 <memchr>
 80149b4:	9a04      	ldr	r2, [sp, #16]
 80149b6:	b9d8      	cbnz	r0, 80149f0 <_vfiprintf_r+0x12c>
 80149b8:	06d1      	lsls	r1, r2, #27
 80149ba:	bf44      	itt	mi
 80149bc:	2320      	movmi	r3, #32
 80149be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149c2:	0713      	lsls	r3, r2, #28
 80149c4:	bf44      	itt	mi
 80149c6:	232b      	movmi	r3, #43	; 0x2b
 80149c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80149cc:	f89a 3000 	ldrb.w	r3, [sl]
 80149d0:	2b2a      	cmp	r3, #42	; 0x2a
 80149d2:	d015      	beq.n	8014a00 <_vfiprintf_r+0x13c>
 80149d4:	4654      	mov	r4, sl
 80149d6:	2000      	movs	r0, #0
 80149d8:	f04f 0c0a 	mov.w	ip, #10
 80149dc:	9a07      	ldr	r2, [sp, #28]
 80149de:	4621      	mov	r1, r4
 80149e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149e4:	3b30      	subs	r3, #48	; 0x30
 80149e6:	2b09      	cmp	r3, #9
 80149e8:	d94e      	bls.n	8014a88 <_vfiprintf_r+0x1c4>
 80149ea:	b1b0      	cbz	r0, 8014a1a <_vfiprintf_r+0x156>
 80149ec:	9207      	str	r2, [sp, #28]
 80149ee:	e014      	b.n	8014a1a <_vfiprintf_r+0x156>
 80149f0:	eba0 0308 	sub.w	r3, r0, r8
 80149f4:	fa09 f303 	lsl.w	r3, r9, r3
 80149f8:	4313      	orrs	r3, r2
 80149fa:	46a2      	mov	sl, r4
 80149fc:	9304      	str	r3, [sp, #16]
 80149fe:	e7d2      	b.n	80149a6 <_vfiprintf_r+0xe2>
 8014a00:	9b03      	ldr	r3, [sp, #12]
 8014a02:	1d19      	adds	r1, r3, #4
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	9103      	str	r1, [sp, #12]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	bfbb      	ittet	lt
 8014a0c:	425b      	neglt	r3, r3
 8014a0e:	f042 0202 	orrlt.w	r2, r2, #2
 8014a12:	9307      	strge	r3, [sp, #28]
 8014a14:	9307      	strlt	r3, [sp, #28]
 8014a16:	bfb8      	it	lt
 8014a18:	9204      	strlt	r2, [sp, #16]
 8014a1a:	7823      	ldrb	r3, [r4, #0]
 8014a1c:	2b2e      	cmp	r3, #46	; 0x2e
 8014a1e:	d10c      	bne.n	8014a3a <_vfiprintf_r+0x176>
 8014a20:	7863      	ldrb	r3, [r4, #1]
 8014a22:	2b2a      	cmp	r3, #42	; 0x2a
 8014a24:	d135      	bne.n	8014a92 <_vfiprintf_r+0x1ce>
 8014a26:	9b03      	ldr	r3, [sp, #12]
 8014a28:	3402      	adds	r4, #2
 8014a2a:	1d1a      	adds	r2, r3, #4
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	9203      	str	r2, [sp, #12]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	bfb8      	it	lt
 8014a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8014a38:	9305      	str	r3, [sp, #20]
 8014a3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014b20 <_vfiprintf_r+0x25c>
 8014a3e:	2203      	movs	r2, #3
 8014a40:	4650      	mov	r0, sl
 8014a42:	7821      	ldrb	r1, [r4, #0]
 8014a44:	f7ff f88e 	bl	8013b64 <memchr>
 8014a48:	b140      	cbz	r0, 8014a5c <_vfiprintf_r+0x198>
 8014a4a:	2340      	movs	r3, #64	; 0x40
 8014a4c:	eba0 000a 	sub.w	r0, r0, sl
 8014a50:	fa03 f000 	lsl.w	r0, r3, r0
 8014a54:	9b04      	ldr	r3, [sp, #16]
 8014a56:	3401      	adds	r4, #1
 8014a58:	4303      	orrs	r3, r0
 8014a5a:	9304      	str	r3, [sp, #16]
 8014a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a60:	2206      	movs	r2, #6
 8014a62:	482c      	ldr	r0, [pc, #176]	; (8014b14 <_vfiprintf_r+0x250>)
 8014a64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a68:	f7ff f87c 	bl	8013b64 <memchr>
 8014a6c:	2800      	cmp	r0, #0
 8014a6e:	d03f      	beq.n	8014af0 <_vfiprintf_r+0x22c>
 8014a70:	4b29      	ldr	r3, [pc, #164]	; (8014b18 <_vfiprintf_r+0x254>)
 8014a72:	bb1b      	cbnz	r3, 8014abc <_vfiprintf_r+0x1f8>
 8014a74:	9b03      	ldr	r3, [sp, #12]
 8014a76:	3307      	adds	r3, #7
 8014a78:	f023 0307 	bic.w	r3, r3, #7
 8014a7c:	3308      	adds	r3, #8
 8014a7e:	9303      	str	r3, [sp, #12]
 8014a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a82:	443b      	add	r3, r7
 8014a84:	9309      	str	r3, [sp, #36]	; 0x24
 8014a86:	e767      	b.n	8014958 <_vfiprintf_r+0x94>
 8014a88:	460c      	mov	r4, r1
 8014a8a:	2001      	movs	r0, #1
 8014a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a90:	e7a5      	b.n	80149de <_vfiprintf_r+0x11a>
 8014a92:	2300      	movs	r3, #0
 8014a94:	f04f 0c0a 	mov.w	ip, #10
 8014a98:	4619      	mov	r1, r3
 8014a9a:	3401      	adds	r4, #1
 8014a9c:	9305      	str	r3, [sp, #20]
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014aa4:	3a30      	subs	r2, #48	; 0x30
 8014aa6:	2a09      	cmp	r2, #9
 8014aa8:	d903      	bls.n	8014ab2 <_vfiprintf_r+0x1ee>
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d0c5      	beq.n	8014a3a <_vfiprintf_r+0x176>
 8014aae:	9105      	str	r1, [sp, #20]
 8014ab0:	e7c3      	b.n	8014a3a <_vfiprintf_r+0x176>
 8014ab2:	4604      	mov	r4, r0
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014aba:	e7f0      	b.n	8014a9e <_vfiprintf_r+0x1da>
 8014abc:	ab03      	add	r3, sp, #12
 8014abe:	9300      	str	r3, [sp, #0]
 8014ac0:	462a      	mov	r2, r5
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	4b15      	ldr	r3, [pc, #84]	; (8014b1c <_vfiprintf_r+0x258>)
 8014ac6:	a904      	add	r1, sp, #16
 8014ac8:	f7fb feb2 	bl	8010830 <_printf_float>
 8014acc:	4607      	mov	r7, r0
 8014ace:	1c78      	adds	r0, r7, #1
 8014ad0:	d1d6      	bne.n	8014a80 <_vfiprintf_r+0x1bc>
 8014ad2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ad4:	07d9      	lsls	r1, r3, #31
 8014ad6:	d405      	bmi.n	8014ae4 <_vfiprintf_r+0x220>
 8014ad8:	89ab      	ldrh	r3, [r5, #12]
 8014ada:	059a      	lsls	r2, r3, #22
 8014adc:	d402      	bmi.n	8014ae4 <_vfiprintf_r+0x220>
 8014ade:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ae0:	f7fb fd6e 	bl	80105c0 <__retarget_lock_release_recursive>
 8014ae4:	89ab      	ldrh	r3, [r5, #12]
 8014ae6:	065b      	lsls	r3, r3, #25
 8014ae8:	f53f af12 	bmi.w	8014910 <_vfiprintf_r+0x4c>
 8014aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014aee:	e711      	b.n	8014914 <_vfiprintf_r+0x50>
 8014af0:	ab03      	add	r3, sp, #12
 8014af2:	9300      	str	r3, [sp, #0]
 8014af4:	462a      	mov	r2, r5
 8014af6:	4630      	mov	r0, r6
 8014af8:	4b08      	ldr	r3, [pc, #32]	; (8014b1c <_vfiprintf_r+0x258>)
 8014afa:	a904      	add	r1, sp, #16
 8014afc:	f7fc f934 	bl	8010d68 <_printf_i>
 8014b00:	e7e4      	b.n	8014acc <_vfiprintf_r+0x208>
 8014b02:	bf00      	nop
 8014b04:	08016f7c 	.word	0x08016f7c
 8014b08:	08016f9c 	.word	0x08016f9c
 8014b0c:	08016f5c 	.word	0x08016f5c
 8014b10:	080173c4 	.word	0x080173c4
 8014b14:	080173ce 	.word	0x080173ce
 8014b18:	08010831 	.word	0x08010831
 8014b1c:	0801489f 	.word	0x0801489f
 8014b20:	080173ca 	.word	0x080173ca

08014b24 <_read_r>:
 8014b24:	b538      	push	{r3, r4, r5, lr}
 8014b26:	4604      	mov	r4, r0
 8014b28:	4608      	mov	r0, r1
 8014b2a:	4611      	mov	r1, r2
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	4d05      	ldr	r5, [pc, #20]	; (8014b44 <_read_r+0x20>)
 8014b30:	602a      	str	r2, [r5, #0]
 8014b32:	461a      	mov	r2, r3
 8014b34:	f7f0 fb67 	bl	8005206 <_read>
 8014b38:	1c43      	adds	r3, r0, #1
 8014b3a:	d102      	bne.n	8014b42 <_read_r+0x1e>
 8014b3c:	682b      	ldr	r3, [r5, #0]
 8014b3e:	b103      	cbz	r3, 8014b42 <_read_r+0x1e>
 8014b40:	6023      	str	r3, [r4, #0]
 8014b42:	bd38      	pop	{r3, r4, r5, pc}
 8014b44:	20001594 	.word	0x20001594

08014b48 <nan>:
 8014b48:	2000      	movs	r0, #0
 8014b4a:	4901      	ldr	r1, [pc, #4]	; (8014b50 <nan+0x8>)
 8014b4c:	4770      	bx	lr
 8014b4e:	bf00      	nop
 8014b50:	7ff80000 	.word	0x7ff80000

08014b54 <strncmp>:
 8014b54:	b510      	push	{r4, lr}
 8014b56:	b16a      	cbz	r2, 8014b74 <strncmp+0x20>
 8014b58:	3901      	subs	r1, #1
 8014b5a:	1884      	adds	r4, r0, r2
 8014b5c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014b60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014b64:	4293      	cmp	r3, r2
 8014b66:	d103      	bne.n	8014b70 <strncmp+0x1c>
 8014b68:	42a0      	cmp	r0, r4
 8014b6a:	d001      	beq.n	8014b70 <strncmp+0x1c>
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d1f5      	bne.n	8014b5c <strncmp+0x8>
 8014b70:	1a98      	subs	r0, r3, r2
 8014b72:	bd10      	pop	{r4, pc}
 8014b74:	4610      	mov	r0, r2
 8014b76:	e7fc      	b.n	8014b72 <strncmp+0x1e>

08014b78 <__ascii_wctomb>:
 8014b78:	4603      	mov	r3, r0
 8014b7a:	4608      	mov	r0, r1
 8014b7c:	b141      	cbz	r1, 8014b90 <__ascii_wctomb+0x18>
 8014b7e:	2aff      	cmp	r2, #255	; 0xff
 8014b80:	d904      	bls.n	8014b8c <__ascii_wctomb+0x14>
 8014b82:	228a      	movs	r2, #138	; 0x8a
 8014b84:	f04f 30ff 	mov.w	r0, #4294967295
 8014b88:	601a      	str	r2, [r3, #0]
 8014b8a:	4770      	bx	lr
 8014b8c:	2001      	movs	r0, #1
 8014b8e:	700a      	strb	r2, [r1, #0]
 8014b90:	4770      	bx	lr
	...

08014b94 <__assert_func>:
 8014b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b96:	4614      	mov	r4, r2
 8014b98:	461a      	mov	r2, r3
 8014b9a:	4b09      	ldr	r3, [pc, #36]	; (8014bc0 <__assert_func+0x2c>)
 8014b9c:	4605      	mov	r5, r0
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	68d8      	ldr	r0, [r3, #12]
 8014ba2:	b14c      	cbz	r4, 8014bb8 <__assert_func+0x24>
 8014ba4:	4b07      	ldr	r3, [pc, #28]	; (8014bc4 <__assert_func+0x30>)
 8014ba6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014baa:	9100      	str	r1, [sp, #0]
 8014bac:	462b      	mov	r3, r5
 8014bae:	4906      	ldr	r1, [pc, #24]	; (8014bc8 <__assert_func+0x34>)
 8014bb0:	f000 f80e 	bl	8014bd0 <fiprintf>
 8014bb4:	f000 f866 	bl	8014c84 <abort>
 8014bb8:	4b04      	ldr	r3, [pc, #16]	; (8014bcc <__assert_func+0x38>)
 8014bba:	461c      	mov	r4, r3
 8014bbc:	e7f3      	b.n	8014ba6 <__assert_func+0x12>
 8014bbe:	bf00      	nop
 8014bc0:	2000005c 	.word	0x2000005c
 8014bc4:	080173d5 	.word	0x080173d5
 8014bc8:	080173e2 	.word	0x080173e2
 8014bcc:	08017410 	.word	0x08017410

08014bd0 <fiprintf>:
 8014bd0:	b40e      	push	{r1, r2, r3}
 8014bd2:	b503      	push	{r0, r1, lr}
 8014bd4:	4601      	mov	r1, r0
 8014bd6:	ab03      	add	r3, sp, #12
 8014bd8:	4805      	ldr	r0, [pc, #20]	; (8014bf0 <fiprintf+0x20>)
 8014bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bde:	6800      	ldr	r0, [r0, #0]
 8014be0:	9301      	str	r3, [sp, #4]
 8014be2:	f7ff fe6f 	bl	80148c4 <_vfiprintf_r>
 8014be6:	b002      	add	sp, #8
 8014be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bec:	b003      	add	sp, #12
 8014bee:	4770      	bx	lr
 8014bf0:	2000005c 	.word	0x2000005c

08014bf4 <_fstat_r>:
 8014bf4:	b538      	push	{r3, r4, r5, lr}
 8014bf6:	2300      	movs	r3, #0
 8014bf8:	4d06      	ldr	r5, [pc, #24]	; (8014c14 <_fstat_r+0x20>)
 8014bfa:	4604      	mov	r4, r0
 8014bfc:	4608      	mov	r0, r1
 8014bfe:	4611      	mov	r1, r2
 8014c00:	602b      	str	r3, [r5, #0]
 8014c02:	f7f0 fb28 	bl	8005256 <_fstat>
 8014c06:	1c43      	adds	r3, r0, #1
 8014c08:	d102      	bne.n	8014c10 <_fstat_r+0x1c>
 8014c0a:	682b      	ldr	r3, [r5, #0]
 8014c0c:	b103      	cbz	r3, 8014c10 <_fstat_r+0x1c>
 8014c0e:	6023      	str	r3, [r4, #0]
 8014c10:	bd38      	pop	{r3, r4, r5, pc}
 8014c12:	bf00      	nop
 8014c14:	20001594 	.word	0x20001594

08014c18 <_isatty_r>:
 8014c18:	b538      	push	{r3, r4, r5, lr}
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	4d05      	ldr	r5, [pc, #20]	; (8014c34 <_isatty_r+0x1c>)
 8014c1e:	4604      	mov	r4, r0
 8014c20:	4608      	mov	r0, r1
 8014c22:	602b      	str	r3, [r5, #0]
 8014c24:	f7f0 fb26 	bl	8005274 <_isatty>
 8014c28:	1c43      	adds	r3, r0, #1
 8014c2a:	d102      	bne.n	8014c32 <_isatty_r+0x1a>
 8014c2c:	682b      	ldr	r3, [r5, #0]
 8014c2e:	b103      	cbz	r3, 8014c32 <_isatty_r+0x1a>
 8014c30:	6023      	str	r3, [r4, #0]
 8014c32:	bd38      	pop	{r3, r4, r5, pc}
 8014c34:	20001594 	.word	0x20001594

08014c38 <_realloc_r>:
 8014c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c3a:	4607      	mov	r7, r0
 8014c3c:	4614      	mov	r4, r2
 8014c3e:	460e      	mov	r6, r1
 8014c40:	b921      	cbnz	r1, 8014c4c <_realloc_r+0x14>
 8014c42:	4611      	mov	r1, r2
 8014c44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014c48:	f7fb bcfa 	b.w	8010640 <_malloc_r>
 8014c4c:	b922      	cbnz	r2, 8014c58 <_realloc_r+0x20>
 8014c4e:	f7ff fc69 	bl	8014524 <_free_r>
 8014c52:	4625      	mov	r5, r4
 8014c54:	4628      	mov	r0, r5
 8014c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c58:	f000 f81b 	bl	8014c92 <_malloc_usable_size_r>
 8014c5c:	42a0      	cmp	r0, r4
 8014c5e:	d20f      	bcs.n	8014c80 <_realloc_r+0x48>
 8014c60:	4621      	mov	r1, r4
 8014c62:	4638      	mov	r0, r7
 8014c64:	f7fb fcec 	bl	8010640 <_malloc_r>
 8014c68:	4605      	mov	r5, r0
 8014c6a:	2800      	cmp	r0, #0
 8014c6c:	d0f2      	beq.n	8014c54 <_realloc_r+0x1c>
 8014c6e:	4631      	mov	r1, r6
 8014c70:	4622      	mov	r2, r4
 8014c72:	f7fb fcb4 	bl	80105de <memcpy>
 8014c76:	4631      	mov	r1, r6
 8014c78:	4638      	mov	r0, r7
 8014c7a:	f7ff fc53 	bl	8014524 <_free_r>
 8014c7e:	e7e9      	b.n	8014c54 <_realloc_r+0x1c>
 8014c80:	4635      	mov	r5, r6
 8014c82:	e7e7      	b.n	8014c54 <_realloc_r+0x1c>

08014c84 <abort>:
 8014c84:	2006      	movs	r0, #6
 8014c86:	b508      	push	{r3, lr}
 8014c88:	f000 f834 	bl	8014cf4 <raise>
 8014c8c:	2001      	movs	r0, #1
 8014c8e:	f7f0 fab0 	bl	80051f2 <_exit>

08014c92 <_malloc_usable_size_r>:
 8014c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014c96:	1f18      	subs	r0, r3, #4
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	bfbc      	itt	lt
 8014c9c:	580b      	ldrlt	r3, [r1, r0]
 8014c9e:	18c0      	addlt	r0, r0, r3
 8014ca0:	4770      	bx	lr

08014ca2 <_raise_r>:
 8014ca2:	291f      	cmp	r1, #31
 8014ca4:	b538      	push	{r3, r4, r5, lr}
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	460d      	mov	r5, r1
 8014caa:	d904      	bls.n	8014cb6 <_raise_r+0x14>
 8014cac:	2316      	movs	r3, #22
 8014cae:	6003      	str	r3, [r0, #0]
 8014cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8014cb4:	bd38      	pop	{r3, r4, r5, pc}
 8014cb6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014cb8:	b112      	cbz	r2, 8014cc0 <_raise_r+0x1e>
 8014cba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014cbe:	b94b      	cbnz	r3, 8014cd4 <_raise_r+0x32>
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f000 f831 	bl	8014d28 <_getpid_r>
 8014cc6:	462a      	mov	r2, r5
 8014cc8:	4601      	mov	r1, r0
 8014cca:	4620      	mov	r0, r4
 8014ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cd0:	f000 b818 	b.w	8014d04 <_kill_r>
 8014cd4:	2b01      	cmp	r3, #1
 8014cd6:	d00a      	beq.n	8014cee <_raise_r+0x4c>
 8014cd8:	1c59      	adds	r1, r3, #1
 8014cda:	d103      	bne.n	8014ce4 <_raise_r+0x42>
 8014cdc:	2316      	movs	r3, #22
 8014cde:	6003      	str	r3, [r0, #0]
 8014ce0:	2001      	movs	r0, #1
 8014ce2:	e7e7      	b.n	8014cb4 <_raise_r+0x12>
 8014ce4:	2400      	movs	r4, #0
 8014ce6:	4628      	mov	r0, r5
 8014ce8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014cec:	4798      	blx	r3
 8014cee:	2000      	movs	r0, #0
 8014cf0:	e7e0      	b.n	8014cb4 <_raise_r+0x12>
	...

08014cf4 <raise>:
 8014cf4:	4b02      	ldr	r3, [pc, #8]	; (8014d00 <raise+0xc>)
 8014cf6:	4601      	mov	r1, r0
 8014cf8:	6818      	ldr	r0, [r3, #0]
 8014cfa:	f7ff bfd2 	b.w	8014ca2 <_raise_r>
 8014cfe:	bf00      	nop
 8014d00:	2000005c 	.word	0x2000005c

08014d04 <_kill_r>:
 8014d04:	b538      	push	{r3, r4, r5, lr}
 8014d06:	2300      	movs	r3, #0
 8014d08:	4d06      	ldr	r5, [pc, #24]	; (8014d24 <_kill_r+0x20>)
 8014d0a:	4604      	mov	r4, r0
 8014d0c:	4608      	mov	r0, r1
 8014d0e:	4611      	mov	r1, r2
 8014d10:	602b      	str	r3, [r5, #0]
 8014d12:	f7f0 fa5e 	bl	80051d2 <_kill>
 8014d16:	1c43      	adds	r3, r0, #1
 8014d18:	d102      	bne.n	8014d20 <_kill_r+0x1c>
 8014d1a:	682b      	ldr	r3, [r5, #0]
 8014d1c:	b103      	cbz	r3, 8014d20 <_kill_r+0x1c>
 8014d1e:	6023      	str	r3, [r4, #0]
 8014d20:	bd38      	pop	{r3, r4, r5, pc}
 8014d22:	bf00      	nop
 8014d24:	20001594 	.word	0x20001594

08014d28 <_getpid_r>:
 8014d28:	f7f0 ba4c 	b.w	80051c4 <_getpid>

08014d2c <cosf>:
 8014d2c:	b507      	push	{r0, r1, r2, lr}
 8014d2e:	4a18      	ldr	r2, [pc, #96]	; (8014d90 <cosf+0x64>)
 8014d30:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014d34:	4293      	cmp	r3, r2
 8014d36:	4601      	mov	r1, r0
 8014d38:	dc03      	bgt.n	8014d42 <cosf+0x16>
 8014d3a:	2100      	movs	r1, #0
 8014d3c:	f000 fc42 	bl	80155c4 <__kernel_cosf>
 8014d40:	e004      	b.n	8014d4c <cosf+0x20>
 8014d42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014d46:	db04      	blt.n	8014d52 <cosf+0x26>
 8014d48:	f7ee fcea 	bl	8003720 <__aeabi_fsub>
 8014d4c:	b003      	add	sp, #12
 8014d4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d52:	4669      	mov	r1, sp
 8014d54:	f000 fa86 	bl	8015264 <__ieee754_rem_pio2f>
 8014d58:	f000 0203 	and.w	r2, r0, #3
 8014d5c:	2a01      	cmp	r2, #1
 8014d5e:	d005      	beq.n	8014d6c <cosf+0x40>
 8014d60:	2a02      	cmp	r2, #2
 8014d62:	d00a      	beq.n	8014d7a <cosf+0x4e>
 8014d64:	b972      	cbnz	r2, 8014d84 <cosf+0x58>
 8014d66:	9901      	ldr	r1, [sp, #4]
 8014d68:	9800      	ldr	r0, [sp, #0]
 8014d6a:	e7e7      	b.n	8014d3c <cosf+0x10>
 8014d6c:	9901      	ldr	r1, [sp, #4]
 8014d6e:	9800      	ldr	r0, [sp, #0]
 8014d70:	f000 ff5e 	bl	8015c30 <__kernel_sinf>
 8014d74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8014d78:	e7e8      	b.n	8014d4c <cosf+0x20>
 8014d7a:	9901      	ldr	r1, [sp, #4]
 8014d7c:	9800      	ldr	r0, [sp, #0]
 8014d7e:	f000 fc21 	bl	80155c4 <__kernel_cosf>
 8014d82:	e7f7      	b.n	8014d74 <cosf+0x48>
 8014d84:	2201      	movs	r2, #1
 8014d86:	9901      	ldr	r1, [sp, #4]
 8014d88:	9800      	ldr	r0, [sp, #0]
 8014d8a:	f000 ff51 	bl	8015c30 <__kernel_sinf>
 8014d8e:	e7dd      	b.n	8014d4c <cosf+0x20>
 8014d90:	3f490fd8 	.word	0x3f490fd8

08014d94 <sinf>:
 8014d94:	b507      	push	{r0, r1, r2, lr}
 8014d96:	4a19      	ldr	r2, [pc, #100]	; (8014dfc <sinf+0x68>)
 8014d98:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8014d9c:	4293      	cmp	r3, r2
 8014d9e:	4601      	mov	r1, r0
 8014da0:	dc04      	bgt.n	8014dac <sinf+0x18>
 8014da2:	2200      	movs	r2, #0
 8014da4:	2100      	movs	r1, #0
 8014da6:	f000 ff43 	bl	8015c30 <__kernel_sinf>
 8014daa:	e004      	b.n	8014db6 <sinf+0x22>
 8014dac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014db0:	db04      	blt.n	8014dbc <sinf+0x28>
 8014db2:	f7ee fcb5 	bl	8003720 <__aeabi_fsub>
 8014db6:	b003      	add	sp, #12
 8014db8:	f85d fb04 	ldr.w	pc, [sp], #4
 8014dbc:	4669      	mov	r1, sp
 8014dbe:	f000 fa51 	bl	8015264 <__ieee754_rem_pio2f>
 8014dc2:	f000 0003 	and.w	r0, r0, #3
 8014dc6:	2801      	cmp	r0, #1
 8014dc8:	d006      	beq.n	8014dd8 <sinf+0x44>
 8014dca:	2802      	cmp	r0, #2
 8014dcc:	d009      	beq.n	8014de2 <sinf+0x4e>
 8014dce:	b980      	cbnz	r0, 8014df2 <sinf+0x5e>
 8014dd0:	2201      	movs	r2, #1
 8014dd2:	9901      	ldr	r1, [sp, #4]
 8014dd4:	9800      	ldr	r0, [sp, #0]
 8014dd6:	e7e6      	b.n	8014da6 <sinf+0x12>
 8014dd8:	9901      	ldr	r1, [sp, #4]
 8014dda:	9800      	ldr	r0, [sp, #0]
 8014ddc:	f000 fbf2 	bl	80155c4 <__kernel_cosf>
 8014de0:	e7e9      	b.n	8014db6 <sinf+0x22>
 8014de2:	2201      	movs	r2, #1
 8014de4:	9901      	ldr	r1, [sp, #4]
 8014de6:	9800      	ldr	r0, [sp, #0]
 8014de8:	f000 ff22 	bl	8015c30 <__kernel_sinf>
 8014dec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8014df0:	e7e1      	b.n	8014db6 <sinf+0x22>
 8014df2:	9901      	ldr	r1, [sp, #4]
 8014df4:	9800      	ldr	r0, [sp, #0]
 8014df6:	f000 fbe5 	bl	80155c4 <__kernel_cosf>
 8014dfa:	e7f7      	b.n	8014dec <sinf+0x58>
 8014dfc:	3f490fd8 	.word	0x3f490fd8

08014e00 <acosf>:
 8014e00:	b538      	push	{r3, r4, r5, lr}
 8014e02:	4604      	mov	r4, r0
 8014e04:	f000 f846 	bl	8014e94 <__ieee754_acosf>
 8014e08:	4b0e      	ldr	r3, [pc, #56]	; (8014e44 <acosf+0x44>)
 8014e0a:	4605      	mov	r5, r0
 8014e0c:	f993 3000 	ldrsb.w	r3, [r3]
 8014e10:	3301      	adds	r3, #1
 8014e12:	d015      	beq.n	8014e40 <acosf+0x40>
 8014e14:	4621      	mov	r1, r4
 8014e16:	4620      	mov	r0, r4
 8014e18:	f7ee ff52 	bl	8003cc0 <__aeabi_fcmpun>
 8014e1c:	b980      	cbnz	r0, 8014e40 <acosf+0x40>
 8014e1e:	4620      	mov	r0, r4
 8014e20:	f001 f888 	bl	8015f34 <fabsf>
 8014e24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8014e28:	f7ee ff40 	bl	8003cac <__aeabi_fcmpgt>
 8014e2c:	b140      	cbz	r0, 8014e40 <acosf+0x40>
 8014e2e:	f7fb faa5 	bl	801037c <__errno>
 8014e32:	2321      	movs	r3, #33	; 0x21
 8014e34:	6003      	str	r3, [r0, #0]
 8014e36:	4804      	ldr	r0, [pc, #16]	; (8014e48 <acosf+0x48>)
 8014e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014e3c:	f7fc bb6a 	b.w	8011514 <nanf>
 8014e40:	4628      	mov	r0, r5
 8014e42:	bd38      	pop	{r3, r4, r5, pc}
 8014e44:	20000230 	.word	0x20000230
 8014e48:	08017410 	.word	0x08017410

08014e4c <atan2f>:
 8014e4c:	f000 b984 	b.w	8015158 <__ieee754_atan2f>

08014e50 <sqrtf>:
 8014e50:	b538      	push	{r3, r4, r5, lr}
 8014e52:	4605      	mov	r5, r0
 8014e54:	f000 fb64 	bl	8015520 <__ieee754_sqrtf>
 8014e58:	4b0d      	ldr	r3, [pc, #52]	; (8014e90 <sqrtf+0x40>)
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8014e60:	3301      	adds	r3, #1
 8014e62:	d012      	beq.n	8014e8a <sqrtf+0x3a>
 8014e64:	4629      	mov	r1, r5
 8014e66:	4628      	mov	r0, r5
 8014e68:	f7ee ff2a 	bl	8003cc0 <__aeabi_fcmpun>
 8014e6c:	b968      	cbnz	r0, 8014e8a <sqrtf+0x3a>
 8014e6e:	2100      	movs	r1, #0
 8014e70:	4628      	mov	r0, r5
 8014e72:	f7ee fefd 	bl	8003c70 <__aeabi_fcmplt>
 8014e76:	b140      	cbz	r0, 8014e8a <sqrtf+0x3a>
 8014e78:	f7fb fa80 	bl	801037c <__errno>
 8014e7c:	2321      	movs	r3, #33	; 0x21
 8014e7e:	2100      	movs	r1, #0
 8014e80:	6003      	str	r3, [r0, #0]
 8014e82:	4608      	mov	r0, r1
 8014e84:	f7ee fe0a 	bl	8003a9c <__aeabi_fdiv>
 8014e88:	4604      	mov	r4, r0
 8014e8a:	4620      	mov	r0, r4
 8014e8c:	bd38      	pop	{r3, r4, r5, pc}
 8014e8e:	bf00      	nop
 8014e90:	20000230 	.word	0x20000230

08014e94 <__ieee754_acosf>:
 8014e94:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8014e98:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8014e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e9e:	4605      	mov	r5, r0
 8014ea0:	d104      	bne.n	8014eac <__ieee754_acosf+0x18>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	f300 8135 	bgt.w	8015112 <__ieee754_acosf+0x27e>
 8014ea8:	489c      	ldr	r0, [pc, #624]	; (801511c <__ieee754_acosf+0x288>)
 8014eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eac:	dd06      	ble.n	8014ebc <__ieee754_acosf+0x28>
 8014eae:	4601      	mov	r1, r0
 8014eb0:	f7ee fc36 	bl	8003720 <__aeabi_fsub>
 8014eb4:	4601      	mov	r1, r0
 8014eb6:	f7ee fdf1 	bl	8003a9c <__aeabi_fdiv>
 8014eba:	e7f6      	b.n	8014eaa <__ieee754_acosf+0x16>
 8014ebc:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8014ec0:	da57      	bge.n	8014f72 <__ieee754_acosf+0xde>
 8014ec2:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8014ec6:	f340 8126 	ble.w	8015116 <__ieee754_acosf+0x282>
 8014eca:	4601      	mov	r1, r0
 8014ecc:	f7ee fd32 	bl	8003934 <__aeabi_fmul>
 8014ed0:	4604      	mov	r4, r0
 8014ed2:	4993      	ldr	r1, [pc, #588]	; (8015120 <__ieee754_acosf+0x28c>)
 8014ed4:	f7ee fd2e 	bl	8003934 <__aeabi_fmul>
 8014ed8:	4992      	ldr	r1, [pc, #584]	; (8015124 <__ieee754_acosf+0x290>)
 8014eda:	f7ee fc23 	bl	8003724 <__addsf3>
 8014ede:	4621      	mov	r1, r4
 8014ee0:	f7ee fd28 	bl	8003934 <__aeabi_fmul>
 8014ee4:	4990      	ldr	r1, [pc, #576]	; (8015128 <__ieee754_acosf+0x294>)
 8014ee6:	f7ee fc1b 	bl	8003720 <__aeabi_fsub>
 8014eea:	4621      	mov	r1, r4
 8014eec:	f7ee fd22 	bl	8003934 <__aeabi_fmul>
 8014ef0:	498e      	ldr	r1, [pc, #568]	; (801512c <__ieee754_acosf+0x298>)
 8014ef2:	f7ee fc17 	bl	8003724 <__addsf3>
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	f7ee fd1c 	bl	8003934 <__aeabi_fmul>
 8014efc:	498c      	ldr	r1, [pc, #560]	; (8015130 <__ieee754_acosf+0x29c>)
 8014efe:	f7ee fc0f 	bl	8003720 <__aeabi_fsub>
 8014f02:	4621      	mov	r1, r4
 8014f04:	f7ee fd16 	bl	8003934 <__aeabi_fmul>
 8014f08:	498a      	ldr	r1, [pc, #552]	; (8015134 <__ieee754_acosf+0x2a0>)
 8014f0a:	f7ee fc0b 	bl	8003724 <__addsf3>
 8014f0e:	4621      	mov	r1, r4
 8014f10:	f7ee fd10 	bl	8003934 <__aeabi_fmul>
 8014f14:	4988      	ldr	r1, [pc, #544]	; (8015138 <__ieee754_acosf+0x2a4>)
 8014f16:	4606      	mov	r6, r0
 8014f18:	4620      	mov	r0, r4
 8014f1a:	f7ee fd0b 	bl	8003934 <__aeabi_fmul>
 8014f1e:	4987      	ldr	r1, [pc, #540]	; (801513c <__ieee754_acosf+0x2a8>)
 8014f20:	f7ee fbfe 	bl	8003720 <__aeabi_fsub>
 8014f24:	4621      	mov	r1, r4
 8014f26:	f7ee fd05 	bl	8003934 <__aeabi_fmul>
 8014f2a:	4985      	ldr	r1, [pc, #532]	; (8015140 <__ieee754_acosf+0x2ac>)
 8014f2c:	f7ee fbfa 	bl	8003724 <__addsf3>
 8014f30:	4621      	mov	r1, r4
 8014f32:	f7ee fcff 	bl	8003934 <__aeabi_fmul>
 8014f36:	4983      	ldr	r1, [pc, #524]	; (8015144 <__ieee754_acosf+0x2b0>)
 8014f38:	f7ee fbf2 	bl	8003720 <__aeabi_fsub>
 8014f3c:	4621      	mov	r1, r4
 8014f3e:	f7ee fcf9 	bl	8003934 <__aeabi_fmul>
 8014f42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8014f46:	f7ee fbed 	bl	8003724 <__addsf3>
 8014f4a:	4601      	mov	r1, r0
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	f7ee fda5 	bl	8003a9c <__aeabi_fdiv>
 8014f52:	4629      	mov	r1, r5
 8014f54:	f7ee fcee 	bl	8003934 <__aeabi_fmul>
 8014f58:	4601      	mov	r1, r0
 8014f5a:	487b      	ldr	r0, [pc, #492]	; (8015148 <__ieee754_acosf+0x2b4>)
 8014f5c:	f7ee fbe0 	bl	8003720 <__aeabi_fsub>
 8014f60:	4601      	mov	r1, r0
 8014f62:	4628      	mov	r0, r5
 8014f64:	f7ee fbdc 	bl	8003720 <__aeabi_fsub>
 8014f68:	4601      	mov	r1, r0
 8014f6a:	4878      	ldr	r0, [pc, #480]	; (801514c <__ieee754_acosf+0x2b8>)
 8014f6c:	f7ee fbd8 	bl	8003720 <__aeabi_fsub>
 8014f70:	e79b      	b.n	8014eaa <__ieee754_acosf+0x16>
 8014f72:	2800      	cmp	r0, #0
 8014f74:	da5b      	bge.n	801502e <__ieee754_acosf+0x19a>
 8014f76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8014f7a:	f7ee fbd3 	bl	8003724 <__addsf3>
 8014f7e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8014f82:	f7ee fcd7 	bl	8003934 <__aeabi_fmul>
 8014f86:	4604      	mov	r4, r0
 8014f88:	4965      	ldr	r1, [pc, #404]	; (8015120 <__ieee754_acosf+0x28c>)
 8014f8a:	f7ee fcd3 	bl	8003934 <__aeabi_fmul>
 8014f8e:	4965      	ldr	r1, [pc, #404]	; (8015124 <__ieee754_acosf+0x290>)
 8014f90:	f7ee fbc8 	bl	8003724 <__addsf3>
 8014f94:	4621      	mov	r1, r4
 8014f96:	f7ee fccd 	bl	8003934 <__aeabi_fmul>
 8014f9a:	4963      	ldr	r1, [pc, #396]	; (8015128 <__ieee754_acosf+0x294>)
 8014f9c:	f7ee fbc0 	bl	8003720 <__aeabi_fsub>
 8014fa0:	4621      	mov	r1, r4
 8014fa2:	f7ee fcc7 	bl	8003934 <__aeabi_fmul>
 8014fa6:	4961      	ldr	r1, [pc, #388]	; (801512c <__ieee754_acosf+0x298>)
 8014fa8:	f7ee fbbc 	bl	8003724 <__addsf3>
 8014fac:	4621      	mov	r1, r4
 8014fae:	f7ee fcc1 	bl	8003934 <__aeabi_fmul>
 8014fb2:	495f      	ldr	r1, [pc, #380]	; (8015130 <__ieee754_acosf+0x29c>)
 8014fb4:	f7ee fbb4 	bl	8003720 <__aeabi_fsub>
 8014fb8:	4621      	mov	r1, r4
 8014fba:	f7ee fcbb 	bl	8003934 <__aeabi_fmul>
 8014fbe:	495d      	ldr	r1, [pc, #372]	; (8015134 <__ieee754_acosf+0x2a0>)
 8014fc0:	f7ee fbb0 	bl	8003724 <__addsf3>
 8014fc4:	4621      	mov	r1, r4
 8014fc6:	f7ee fcb5 	bl	8003934 <__aeabi_fmul>
 8014fca:	4606      	mov	r6, r0
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f000 faa7 	bl	8015520 <__ieee754_sqrtf>
 8014fd2:	4959      	ldr	r1, [pc, #356]	; (8015138 <__ieee754_acosf+0x2a4>)
 8014fd4:	4605      	mov	r5, r0
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f7ee fcac 	bl	8003934 <__aeabi_fmul>
 8014fdc:	4957      	ldr	r1, [pc, #348]	; (801513c <__ieee754_acosf+0x2a8>)
 8014fde:	f7ee fb9f 	bl	8003720 <__aeabi_fsub>
 8014fe2:	4621      	mov	r1, r4
 8014fe4:	f7ee fca6 	bl	8003934 <__aeabi_fmul>
 8014fe8:	4955      	ldr	r1, [pc, #340]	; (8015140 <__ieee754_acosf+0x2ac>)
 8014fea:	f7ee fb9b 	bl	8003724 <__addsf3>
 8014fee:	4621      	mov	r1, r4
 8014ff0:	f7ee fca0 	bl	8003934 <__aeabi_fmul>
 8014ff4:	4953      	ldr	r1, [pc, #332]	; (8015144 <__ieee754_acosf+0x2b0>)
 8014ff6:	f7ee fb93 	bl	8003720 <__aeabi_fsub>
 8014ffa:	4621      	mov	r1, r4
 8014ffc:	f7ee fc9a 	bl	8003934 <__aeabi_fmul>
 8015000:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015004:	f7ee fb8e 	bl	8003724 <__addsf3>
 8015008:	4601      	mov	r1, r0
 801500a:	4630      	mov	r0, r6
 801500c:	f7ee fd46 	bl	8003a9c <__aeabi_fdiv>
 8015010:	4629      	mov	r1, r5
 8015012:	f7ee fc8f 	bl	8003934 <__aeabi_fmul>
 8015016:	494c      	ldr	r1, [pc, #304]	; (8015148 <__ieee754_acosf+0x2b4>)
 8015018:	f7ee fb82 	bl	8003720 <__aeabi_fsub>
 801501c:	4629      	mov	r1, r5
 801501e:	f7ee fb81 	bl	8003724 <__addsf3>
 8015022:	4601      	mov	r1, r0
 8015024:	f7ee fb7e 	bl	8003724 <__addsf3>
 8015028:	4601      	mov	r1, r0
 801502a:	4849      	ldr	r0, [pc, #292]	; (8015150 <__ieee754_acosf+0x2bc>)
 801502c:	e79e      	b.n	8014f6c <__ieee754_acosf+0xd8>
 801502e:	4601      	mov	r1, r0
 8015030:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015034:	f7ee fb74 	bl	8003720 <__aeabi_fsub>
 8015038:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801503c:	f7ee fc7a 	bl	8003934 <__aeabi_fmul>
 8015040:	4604      	mov	r4, r0
 8015042:	f000 fa6d 	bl	8015520 <__ieee754_sqrtf>
 8015046:	4936      	ldr	r1, [pc, #216]	; (8015120 <__ieee754_acosf+0x28c>)
 8015048:	4606      	mov	r6, r0
 801504a:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 801504e:	4620      	mov	r0, r4
 8015050:	f7ee fc70 	bl	8003934 <__aeabi_fmul>
 8015054:	4933      	ldr	r1, [pc, #204]	; (8015124 <__ieee754_acosf+0x290>)
 8015056:	f7ee fb65 	bl	8003724 <__addsf3>
 801505a:	4621      	mov	r1, r4
 801505c:	f7ee fc6a 	bl	8003934 <__aeabi_fmul>
 8015060:	4931      	ldr	r1, [pc, #196]	; (8015128 <__ieee754_acosf+0x294>)
 8015062:	f7ee fb5d 	bl	8003720 <__aeabi_fsub>
 8015066:	4621      	mov	r1, r4
 8015068:	f7ee fc64 	bl	8003934 <__aeabi_fmul>
 801506c:	492f      	ldr	r1, [pc, #188]	; (801512c <__ieee754_acosf+0x298>)
 801506e:	f7ee fb59 	bl	8003724 <__addsf3>
 8015072:	4621      	mov	r1, r4
 8015074:	f7ee fc5e 	bl	8003934 <__aeabi_fmul>
 8015078:	492d      	ldr	r1, [pc, #180]	; (8015130 <__ieee754_acosf+0x29c>)
 801507a:	f7ee fb51 	bl	8003720 <__aeabi_fsub>
 801507e:	4621      	mov	r1, r4
 8015080:	f7ee fc58 	bl	8003934 <__aeabi_fmul>
 8015084:	492b      	ldr	r1, [pc, #172]	; (8015134 <__ieee754_acosf+0x2a0>)
 8015086:	f7ee fb4d 	bl	8003724 <__addsf3>
 801508a:	4621      	mov	r1, r4
 801508c:	f7ee fc52 	bl	8003934 <__aeabi_fmul>
 8015090:	4929      	ldr	r1, [pc, #164]	; (8015138 <__ieee754_acosf+0x2a4>)
 8015092:	4607      	mov	r7, r0
 8015094:	4620      	mov	r0, r4
 8015096:	f7ee fc4d 	bl	8003934 <__aeabi_fmul>
 801509a:	4928      	ldr	r1, [pc, #160]	; (801513c <__ieee754_acosf+0x2a8>)
 801509c:	f7ee fb40 	bl	8003720 <__aeabi_fsub>
 80150a0:	4621      	mov	r1, r4
 80150a2:	f7ee fc47 	bl	8003934 <__aeabi_fmul>
 80150a6:	4926      	ldr	r1, [pc, #152]	; (8015140 <__ieee754_acosf+0x2ac>)
 80150a8:	f7ee fb3c 	bl	8003724 <__addsf3>
 80150ac:	4621      	mov	r1, r4
 80150ae:	f7ee fc41 	bl	8003934 <__aeabi_fmul>
 80150b2:	4924      	ldr	r1, [pc, #144]	; (8015144 <__ieee754_acosf+0x2b0>)
 80150b4:	f7ee fb34 	bl	8003720 <__aeabi_fsub>
 80150b8:	4621      	mov	r1, r4
 80150ba:	f7ee fc3b 	bl	8003934 <__aeabi_fmul>
 80150be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80150c2:	f7ee fb2f 	bl	8003724 <__addsf3>
 80150c6:	4601      	mov	r1, r0
 80150c8:	4638      	mov	r0, r7
 80150ca:	f7ee fce7 	bl	8003a9c <__aeabi_fdiv>
 80150ce:	4631      	mov	r1, r6
 80150d0:	f7ee fc30 	bl	8003934 <__aeabi_fmul>
 80150d4:	f025 050f 	bic.w	r5, r5, #15
 80150d8:	4607      	mov	r7, r0
 80150da:	4629      	mov	r1, r5
 80150dc:	4628      	mov	r0, r5
 80150de:	f7ee fc29 	bl	8003934 <__aeabi_fmul>
 80150e2:	4601      	mov	r1, r0
 80150e4:	4620      	mov	r0, r4
 80150e6:	f7ee fb1b 	bl	8003720 <__aeabi_fsub>
 80150ea:	4629      	mov	r1, r5
 80150ec:	4604      	mov	r4, r0
 80150ee:	4630      	mov	r0, r6
 80150f0:	f7ee fb18 	bl	8003724 <__addsf3>
 80150f4:	4601      	mov	r1, r0
 80150f6:	4620      	mov	r0, r4
 80150f8:	f7ee fcd0 	bl	8003a9c <__aeabi_fdiv>
 80150fc:	4601      	mov	r1, r0
 80150fe:	4638      	mov	r0, r7
 8015100:	f7ee fb10 	bl	8003724 <__addsf3>
 8015104:	4629      	mov	r1, r5
 8015106:	f7ee fb0d 	bl	8003724 <__addsf3>
 801510a:	4601      	mov	r1, r0
 801510c:	f7ee fb0a 	bl	8003724 <__addsf3>
 8015110:	e6cb      	b.n	8014eaa <__ieee754_acosf+0x16>
 8015112:	2000      	movs	r0, #0
 8015114:	e6c9      	b.n	8014eaa <__ieee754_acosf+0x16>
 8015116:	480f      	ldr	r0, [pc, #60]	; (8015154 <__ieee754_acosf+0x2c0>)
 8015118:	e6c7      	b.n	8014eaa <__ieee754_acosf+0x16>
 801511a:	bf00      	nop
 801511c:	40490fdb 	.word	0x40490fdb
 8015120:	3811ef08 	.word	0x3811ef08
 8015124:	3a4f7f04 	.word	0x3a4f7f04
 8015128:	3d241146 	.word	0x3d241146
 801512c:	3e4e0aa8 	.word	0x3e4e0aa8
 8015130:	3ea6b090 	.word	0x3ea6b090
 8015134:	3e2aaaab 	.word	0x3e2aaaab
 8015138:	3d9dc62e 	.word	0x3d9dc62e
 801513c:	3f303361 	.word	0x3f303361
 8015140:	4001572d 	.word	0x4001572d
 8015144:	4019d139 	.word	0x4019d139
 8015148:	33a22168 	.word	0x33a22168
 801514c:	3fc90fda 	.word	0x3fc90fda
 8015150:	40490fda 	.word	0x40490fda
 8015154:	3fc90fdb 	.word	0x3fc90fdb

08015158 <__ieee754_atan2f>:
 8015158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801515a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801515e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8015162:	4603      	mov	r3, r0
 8015164:	dc05      	bgt.n	8015172 <__ieee754_atan2f+0x1a>
 8015166:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 801516a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801516e:	4607      	mov	r7, r0
 8015170:	dd04      	ble.n	801517c <__ieee754_atan2f+0x24>
 8015172:	4618      	mov	r0, r3
 8015174:	f7ee fad6 	bl	8003724 <__addsf3>
 8015178:	4603      	mov	r3, r0
 801517a:	e011      	b.n	80151a0 <__ieee754_atan2f+0x48>
 801517c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8015180:	d103      	bne.n	801518a <__ieee754_atan2f+0x32>
 8015182:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015186:	f000 bdc9 	b.w	8015d1c <atanf>
 801518a:	178c      	asrs	r4, r1, #30
 801518c:	f004 0402 	and.w	r4, r4, #2
 8015190:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8015194:	b932      	cbnz	r2, 80151a4 <__ieee754_atan2f+0x4c>
 8015196:	2c02      	cmp	r4, #2
 8015198:	d04c      	beq.n	8015234 <__ieee754_atan2f+0xdc>
 801519a:	2c03      	cmp	r4, #3
 801519c:	d100      	bne.n	80151a0 <__ieee754_atan2f+0x48>
 801519e:	4b29      	ldr	r3, [pc, #164]	; (8015244 <__ieee754_atan2f+0xec>)
 80151a0:	4618      	mov	r0, r3
 80151a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151a4:	b91e      	cbnz	r6, 80151ae <__ieee754_atan2f+0x56>
 80151a6:	2f00      	cmp	r7, #0
 80151a8:	da4a      	bge.n	8015240 <__ieee754_atan2f+0xe8>
 80151aa:	4b27      	ldr	r3, [pc, #156]	; (8015248 <__ieee754_atan2f+0xf0>)
 80151ac:	e7f8      	b.n	80151a0 <__ieee754_atan2f+0x48>
 80151ae:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80151b2:	d10e      	bne.n	80151d2 <__ieee754_atan2f+0x7a>
 80151b4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80151b8:	f104 34ff 	add.w	r4, r4, #4294967295
 80151bc:	d105      	bne.n	80151ca <__ieee754_atan2f+0x72>
 80151be:	2c02      	cmp	r4, #2
 80151c0:	d83a      	bhi.n	8015238 <__ieee754_atan2f+0xe0>
 80151c2:	4b22      	ldr	r3, [pc, #136]	; (801524c <__ieee754_atan2f+0xf4>)
 80151c4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80151c8:	e7ea      	b.n	80151a0 <__ieee754_atan2f+0x48>
 80151ca:	2c02      	cmp	r4, #2
 80151cc:	d836      	bhi.n	801523c <__ieee754_atan2f+0xe4>
 80151ce:	4b20      	ldr	r3, [pc, #128]	; (8015250 <__ieee754_atan2f+0xf8>)
 80151d0:	e7f8      	b.n	80151c4 <__ieee754_atan2f+0x6c>
 80151d2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80151d6:	d0e6      	beq.n	80151a6 <__ieee754_atan2f+0x4e>
 80151d8:	1b92      	subs	r2, r2, r6
 80151da:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 80151de:	ea4f 50e2 	mov.w	r0, r2, asr #23
 80151e2:	da17      	bge.n	8015214 <__ieee754_atan2f+0xbc>
 80151e4:	2900      	cmp	r1, #0
 80151e6:	da01      	bge.n	80151ec <__ieee754_atan2f+0x94>
 80151e8:	303c      	adds	r0, #60	; 0x3c
 80151ea:	db15      	blt.n	8015218 <__ieee754_atan2f+0xc0>
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7ee fc55 	bl	8003a9c <__aeabi_fdiv>
 80151f2:	f000 fe9f 	bl	8015f34 <fabsf>
 80151f6:	f000 fd91 	bl	8015d1c <atanf>
 80151fa:	4603      	mov	r3, r0
 80151fc:	2c01      	cmp	r4, #1
 80151fe:	d00d      	beq.n	801521c <__ieee754_atan2f+0xc4>
 8015200:	2c02      	cmp	r4, #2
 8015202:	d00e      	beq.n	8015222 <__ieee754_atan2f+0xca>
 8015204:	2c00      	cmp	r4, #0
 8015206:	d0cb      	beq.n	80151a0 <__ieee754_atan2f+0x48>
 8015208:	4912      	ldr	r1, [pc, #72]	; (8015254 <__ieee754_atan2f+0xfc>)
 801520a:	4618      	mov	r0, r3
 801520c:	f7ee fa8a 	bl	8003724 <__addsf3>
 8015210:	4911      	ldr	r1, [pc, #68]	; (8015258 <__ieee754_atan2f+0x100>)
 8015212:	e00c      	b.n	801522e <__ieee754_atan2f+0xd6>
 8015214:	4b11      	ldr	r3, [pc, #68]	; (801525c <__ieee754_atan2f+0x104>)
 8015216:	e7f1      	b.n	80151fc <__ieee754_atan2f+0xa4>
 8015218:	2300      	movs	r3, #0
 801521a:	e7ef      	b.n	80151fc <__ieee754_atan2f+0xa4>
 801521c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015220:	e7be      	b.n	80151a0 <__ieee754_atan2f+0x48>
 8015222:	490c      	ldr	r1, [pc, #48]	; (8015254 <__ieee754_atan2f+0xfc>)
 8015224:	4618      	mov	r0, r3
 8015226:	f7ee fa7d 	bl	8003724 <__addsf3>
 801522a:	4601      	mov	r1, r0
 801522c:	480a      	ldr	r0, [pc, #40]	; (8015258 <__ieee754_atan2f+0x100>)
 801522e:	f7ee fa77 	bl	8003720 <__aeabi_fsub>
 8015232:	e7a1      	b.n	8015178 <__ieee754_atan2f+0x20>
 8015234:	4b08      	ldr	r3, [pc, #32]	; (8015258 <__ieee754_atan2f+0x100>)
 8015236:	e7b3      	b.n	80151a0 <__ieee754_atan2f+0x48>
 8015238:	4b09      	ldr	r3, [pc, #36]	; (8015260 <__ieee754_atan2f+0x108>)
 801523a:	e7b1      	b.n	80151a0 <__ieee754_atan2f+0x48>
 801523c:	2300      	movs	r3, #0
 801523e:	e7af      	b.n	80151a0 <__ieee754_atan2f+0x48>
 8015240:	4b06      	ldr	r3, [pc, #24]	; (801525c <__ieee754_atan2f+0x104>)
 8015242:	e7ad      	b.n	80151a0 <__ieee754_atan2f+0x48>
 8015244:	c0490fdb 	.word	0xc0490fdb
 8015248:	bfc90fdb 	.word	0xbfc90fdb
 801524c:	08017414 	.word	0x08017414
 8015250:	08017420 	.word	0x08017420
 8015254:	33bbbd2e 	.word	0x33bbbd2e
 8015258:	40490fdb 	.word	0x40490fdb
 801525c:	3fc90fdb 	.word	0x3fc90fdb
 8015260:	3f490fdb 	.word	0x3f490fdb

08015264 <__ieee754_rem_pio2f>:
 8015264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015268:	4aa0      	ldr	r2, [pc, #640]	; (80154ec <__ieee754_rem_pio2f+0x288>)
 801526a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801526e:	4296      	cmp	r6, r2
 8015270:	460c      	mov	r4, r1
 8015272:	4682      	mov	sl, r0
 8015274:	b087      	sub	sp, #28
 8015276:	dc04      	bgt.n	8015282 <__ieee754_rem_pio2f+0x1e>
 8015278:	2300      	movs	r3, #0
 801527a:	6008      	str	r0, [r1, #0]
 801527c:	604b      	str	r3, [r1, #4]
 801527e:	2500      	movs	r5, #0
 8015280:	e01a      	b.n	80152b8 <__ieee754_rem_pio2f+0x54>
 8015282:	4a9b      	ldr	r2, [pc, #620]	; (80154f0 <__ieee754_rem_pio2f+0x28c>)
 8015284:	4296      	cmp	r6, r2
 8015286:	dc4b      	bgt.n	8015320 <__ieee754_rem_pio2f+0xbc>
 8015288:	2800      	cmp	r0, #0
 801528a:	499a      	ldr	r1, [pc, #616]	; (80154f4 <__ieee754_rem_pio2f+0x290>)
 801528c:	4f9a      	ldr	r7, [pc, #616]	; (80154f8 <__ieee754_rem_pio2f+0x294>)
 801528e:	f026 060f 	bic.w	r6, r6, #15
 8015292:	dd23      	ble.n	80152dc <__ieee754_rem_pio2f+0x78>
 8015294:	f7ee fa44 	bl	8003720 <__aeabi_fsub>
 8015298:	42be      	cmp	r6, r7
 801529a:	4605      	mov	r5, r0
 801529c:	d010      	beq.n	80152c0 <__ieee754_rem_pio2f+0x5c>
 801529e:	4997      	ldr	r1, [pc, #604]	; (80154fc <__ieee754_rem_pio2f+0x298>)
 80152a0:	f7ee fa3e 	bl	8003720 <__aeabi_fsub>
 80152a4:	4601      	mov	r1, r0
 80152a6:	6020      	str	r0, [r4, #0]
 80152a8:	4628      	mov	r0, r5
 80152aa:	f7ee fa39 	bl	8003720 <__aeabi_fsub>
 80152ae:	4993      	ldr	r1, [pc, #588]	; (80154fc <__ieee754_rem_pio2f+0x298>)
 80152b0:	f7ee fa36 	bl	8003720 <__aeabi_fsub>
 80152b4:	2501      	movs	r5, #1
 80152b6:	6060      	str	r0, [r4, #4]
 80152b8:	4628      	mov	r0, r5
 80152ba:	b007      	add	sp, #28
 80152bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c0:	498f      	ldr	r1, [pc, #572]	; (8015500 <__ieee754_rem_pio2f+0x29c>)
 80152c2:	f7ee fa2d 	bl	8003720 <__aeabi_fsub>
 80152c6:	498f      	ldr	r1, [pc, #572]	; (8015504 <__ieee754_rem_pio2f+0x2a0>)
 80152c8:	4605      	mov	r5, r0
 80152ca:	f7ee fa29 	bl	8003720 <__aeabi_fsub>
 80152ce:	4601      	mov	r1, r0
 80152d0:	6020      	str	r0, [r4, #0]
 80152d2:	4628      	mov	r0, r5
 80152d4:	f7ee fa24 	bl	8003720 <__aeabi_fsub>
 80152d8:	498a      	ldr	r1, [pc, #552]	; (8015504 <__ieee754_rem_pio2f+0x2a0>)
 80152da:	e7e9      	b.n	80152b0 <__ieee754_rem_pio2f+0x4c>
 80152dc:	f7ee fa22 	bl	8003724 <__addsf3>
 80152e0:	42be      	cmp	r6, r7
 80152e2:	4605      	mov	r5, r0
 80152e4:	d00e      	beq.n	8015304 <__ieee754_rem_pio2f+0xa0>
 80152e6:	4985      	ldr	r1, [pc, #532]	; (80154fc <__ieee754_rem_pio2f+0x298>)
 80152e8:	f7ee fa1c 	bl	8003724 <__addsf3>
 80152ec:	4601      	mov	r1, r0
 80152ee:	6020      	str	r0, [r4, #0]
 80152f0:	4628      	mov	r0, r5
 80152f2:	f7ee fa15 	bl	8003720 <__aeabi_fsub>
 80152f6:	4981      	ldr	r1, [pc, #516]	; (80154fc <__ieee754_rem_pio2f+0x298>)
 80152f8:	f7ee fa14 	bl	8003724 <__addsf3>
 80152fc:	f04f 35ff 	mov.w	r5, #4294967295
 8015300:	6060      	str	r0, [r4, #4]
 8015302:	e7d9      	b.n	80152b8 <__ieee754_rem_pio2f+0x54>
 8015304:	497e      	ldr	r1, [pc, #504]	; (8015500 <__ieee754_rem_pio2f+0x29c>)
 8015306:	f7ee fa0d 	bl	8003724 <__addsf3>
 801530a:	497e      	ldr	r1, [pc, #504]	; (8015504 <__ieee754_rem_pio2f+0x2a0>)
 801530c:	4605      	mov	r5, r0
 801530e:	f7ee fa09 	bl	8003724 <__addsf3>
 8015312:	4601      	mov	r1, r0
 8015314:	6020      	str	r0, [r4, #0]
 8015316:	4628      	mov	r0, r5
 8015318:	f7ee fa02 	bl	8003720 <__aeabi_fsub>
 801531c:	4979      	ldr	r1, [pc, #484]	; (8015504 <__ieee754_rem_pio2f+0x2a0>)
 801531e:	e7eb      	b.n	80152f8 <__ieee754_rem_pio2f+0x94>
 8015320:	4a79      	ldr	r2, [pc, #484]	; (8015508 <__ieee754_rem_pio2f+0x2a4>)
 8015322:	4296      	cmp	r6, r2
 8015324:	f300 8091 	bgt.w	801544a <__ieee754_rem_pio2f+0x1e6>
 8015328:	f000 fe04 	bl	8015f34 <fabsf>
 801532c:	4977      	ldr	r1, [pc, #476]	; (801550c <__ieee754_rem_pio2f+0x2a8>)
 801532e:	4607      	mov	r7, r0
 8015330:	f7ee fb00 	bl	8003934 <__aeabi_fmul>
 8015334:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015338:	f7ee f9f4 	bl	8003724 <__addsf3>
 801533c:	f7ee fcd6 	bl	8003cec <__aeabi_f2iz>
 8015340:	4605      	mov	r5, r0
 8015342:	f7ee faa3 	bl	800388c <__aeabi_i2f>
 8015346:	496b      	ldr	r1, [pc, #428]	; (80154f4 <__ieee754_rem_pio2f+0x290>)
 8015348:	4681      	mov	r9, r0
 801534a:	f7ee faf3 	bl	8003934 <__aeabi_fmul>
 801534e:	4601      	mov	r1, r0
 8015350:	4638      	mov	r0, r7
 8015352:	f7ee f9e5 	bl	8003720 <__aeabi_fsub>
 8015356:	4969      	ldr	r1, [pc, #420]	; (80154fc <__ieee754_rem_pio2f+0x298>)
 8015358:	4680      	mov	r8, r0
 801535a:	4648      	mov	r0, r9
 801535c:	f7ee faea 	bl	8003934 <__aeabi_fmul>
 8015360:	2d1f      	cmp	r5, #31
 8015362:	4607      	mov	r7, r0
 8015364:	dc0c      	bgt.n	8015380 <__ieee754_rem_pio2f+0x11c>
 8015366:	4a6a      	ldr	r2, [pc, #424]	; (8015510 <__ieee754_rem_pio2f+0x2ac>)
 8015368:	1e69      	subs	r1, r5, #1
 801536a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801536e:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 8015372:	4293      	cmp	r3, r2
 8015374:	d004      	beq.n	8015380 <__ieee754_rem_pio2f+0x11c>
 8015376:	4639      	mov	r1, r7
 8015378:	4640      	mov	r0, r8
 801537a:	f7ee f9d1 	bl	8003720 <__aeabi_fsub>
 801537e:	e00b      	b.n	8015398 <__ieee754_rem_pio2f+0x134>
 8015380:	4639      	mov	r1, r7
 8015382:	4640      	mov	r0, r8
 8015384:	f7ee f9cc 	bl	8003720 <__aeabi_fsub>
 8015388:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801538c:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8015390:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8015394:	2e08      	cmp	r6, #8
 8015396:	dc01      	bgt.n	801539c <__ieee754_rem_pio2f+0x138>
 8015398:	6020      	str	r0, [r4, #0]
 801539a:	e026      	b.n	80153ea <__ieee754_rem_pio2f+0x186>
 801539c:	4958      	ldr	r1, [pc, #352]	; (8015500 <__ieee754_rem_pio2f+0x29c>)
 801539e:	4648      	mov	r0, r9
 80153a0:	f7ee fac8 	bl	8003934 <__aeabi_fmul>
 80153a4:	4607      	mov	r7, r0
 80153a6:	4601      	mov	r1, r0
 80153a8:	4640      	mov	r0, r8
 80153aa:	f7ee f9b9 	bl	8003720 <__aeabi_fsub>
 80153ae:	4601      	mov	r1, r0
 80153b0:	4606      	mov	r6, r0
 80153b2:	4640      	mov	r0, r8
 80153b4:	f7ee f9b4 	bl	8003720 <__aeabi_fsub>
 80153b8:	4639      	mov	r1, r7
 80153ba:	f7ee f9b1 	bl	8003720 <__aeabi_fsub>
 80153be:	4607      	mov	r7, r0
 80153c0:	4950      	ldr	r1, [pc, #320]	; (8015504 <__ieee754_rem_pio2f+0x2a0>)
 80153c2:	4648      	mov	r0, r9
 80153c4:	f7ee fab6 	bl	8003934 <__aeabi_fmul>
 80153c8:	4639      	mov	r1, r7
 80153ca:	f7ee f9a9 	bl	8003720 <__aeabi_fsub>
 80153ce:	4601      	mov	r1, r0
 80153d0:	4607      	mov	r7, r0
 80153d2:	4630      	mov	r0, r6
 80153d4:	f7ee f9a4 	bl	8003720 <__aeabi_fsub>
 80153d8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80153dc:	ebab 0b03 	sub.w	fp, fp, r3
 80153e0:	f1bb 0f19 	cmp.w	fp, #25
 80153e4:	dc16      	bgt.n	8015414 <__ieee754_rem_pio2f+0x1b0>
 80153e6:	46b0      	mov	r8, r6
 80153e8:	6020      	str	r0, [r4, #0]
 80153ea:	6826      	ldr	r6, [r4, #0]
 80153ec:	4640      	mov	r0, r8
 80153ee:	4631      	mov	r1, r6
 80153f0:	f7ee f996 	bl	8003720 <__aeabi_fsub>
 80153f4:	4639      	mov	r1, r7
 80153f6:	f7ee f993 	bl	8003720 <__aeabi_fsub>
 80153fa:	f1ba 0f00 	cmp.w	sl, #0
 80153fe:	6060      	str	r0, [r4, #4]
 8015400:	f6bf af5a 	bge.w	80152b8 <__ieee754_rem_pio2f+0x54>
 8015404:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8015408:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801540c:	6026      	str	r6, [r4, #0]
 801540e:	6060      	str	r0, [r4, #4]
 8015410:	426d      	negs	r5, r5
 8015412:	e751      	b.n	80152b8 <__ieee754_rem_pio2f+0x54>
 8015414:	493f      	ldr	r1, [pc, #252]	; (8015514 <__ieee754_rem_pio2f+0x2b0>)
 8015416:	4648      	mov	r0, r9
 8015418:	f7ee fa8c 	bl	8003934 <__aeabi_fmul>
 801541c:	4607      	mov	r7, r0
 801541e:	4601      	mov	r1, r0
 8015420:	4630      	mov	r0, r6
 8015422:	f7ee f97d 	bl	8003720 <__aeabi_fsub>
 8015426:	4601      	mov	r1, r0
 8015428:	4680      	mov	r8, r0
 801542a:	4630      	mov	r0, r6
 801542c:	f7ee f978 	bl	8003720 <__aeabi_fsub>
 8015430:	4639      	mov	r1, r7
 8015432:	f7ee f975 	bl	8003720 <__aeabi_fsub>
 8015436:	4606      	mov	r6, r0
 8015438:	4937      	ldr	r1, [pc, #220]	; (8015518 <__ieee754_rem_pio2f+0x2b4>)
 801543a:	4648      	mov	r0, r9
 801543c:	f7ee fa7a 	bl	8003934 <__aeabi_fmul>
 8015440:	4631      	mov	r1, r6
 8015442:	f7ee f96d 	bl	8003720 <__aeabi_fsub>
 8015446:	4607      	mov	r7, r0
 8015448:	e795      	b.n	8015376 <__ieee754_rem_pio2f+0x112>
 801544a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801544e:	db05      	blt.n	801545c <__ieee754_rem_pio2f+0x1f8>
 8015450:	4601      	mov	r1, r0
 8015452:	f7ee f965 	bl	8003720 <__aeabi_fsub>
 8015456:	6060      	str	r0, [r4, #4]
 8015458:	6020      	str	r0, [r4, #0]
 801545a:	e710      	b.n	801527e <__ieee754_rem_pio2f+0x1a>
 801545c:	15f7      	asrs	r7, r6, #23
 801545e:	3f86      	subs	r7, #134	; 0x86
 8015460:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 8015464:	4630      	mov	r0, r6
 8015466:	f7ee fc41 	bl	8003cec <__aeabi_f2iz>
 801546a:	f7ee fa0f 	bl	800388c <__aeabi_i2f>
 801546e:	4601      	mov	r1, r0
 8015470:	9003      	str	r0, [sp, #12]
 8015472:	4630      	mov	r0, r6
 8015474:	f7ee f954 	bl	8003720 <__aeabi_fsub>
 8015478:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801547c:	f7ee fa5a 	bl	8003934 <__aeabi_fmul>
 8015480:	4606      	mov	r6, r0
 8015482:	f7ee fc33 	bl	8003cec <__aeabi_f2iz>
 8015486:	f7ee fa01 	bl	800388c <__aeabi_i2f>
 801548a:	4601      	mov	r1, r0
 801548c:	9004      	str	r0, [sp, #16]
 801548e:	4605      	mov	r5, r0
 8015490:	4630      	mov	r0, r6
 8015492:	f7ee f945 	bl	8003720 <__aeabi_fsub>
 8015496:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 801549a:	f7ee fa4b 	bl	8003934 <__aeabi_fmul>
 801549e:	2100      	movs	r1, #0
 80154a0:	9005      	str	r0, [sp, #20]
 80154a2:	f7ee fbdb 	bl	8003c5c <__aeabi_fcmpeq>
 80154a6:	b1f0      	cbz	r0, 80154e6 <__ieee754_rem_pio2f+0x282>
 80154a8:	2100      	movs	r1, #0
 80154aa:	4628      	mov	r0, r5
 80154ac:	f7ee fbd6 	bl	8003c5c <__aeabi_fcmpeq>
 80154b0:	2800      	cmp	r0, #0
 80154b2:	bf14      	ite	ne
 80154b4:	2301      	movne	r3, #1
 80154b6:	2302      	moveq	r3, #2
 80154b8:	4a18      	ldr	r2, [pc, #96]	; (801551c <__ieee754_rem_pio2f+0x2b8>)
 80154ba:	4621      	mov	r1, r4
 80154bc:	9201      	str	r2, [sp, #4]
 80154be:	2202      	movs	r2, #2
 80154c0:	a803      	add	r0, sp, #12
 80154c2:	9200      	str	r2, [sp, #0]
 80154c4:	463a      	mov	r2, r7
 80154c6:	f000 f8fd 	bl	80156c4 <__kernel_rem_pio2f>
 80154ca:	f1ba 0f00 	cmp.w	sl, #0
 80154ce:	4605      	mov	r5, r0
 80154d0:	f6bf aef2 	bge.w	80152b8 <__ieee754_rem_pio2f+0x54>
 80154d4:	6823      	ldr	r3, [r4, #0]
 80154d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80154da:	6023      	str	r3, [r4, #0]
 80154dc:	6863      	ldr	r3, [r4, #4]
 80154de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80154e2:	6063      	str	r3, [r4, #4]
 80154e4:	e794      	b.n	8015410 <__ieee754_rem_pio2f+0x1ac>
 80154e6:	2303      	movs	r3, #3
 80154e8:	e7e6      	b.n	80154b8 <__ieee754_rem_pio2f+0x254>
 80154ea:	bf00      	nop
 80154ec:	3f490fd8 	.word	0x3f490fd8
 80154f0:	4016cbe3 	.word	0x4016cbe3
 80154f4:	3fc90f80 	.word	0x3fc90f80
 80154f8:	3fc90fd0 	.word	0x3fc90fd0
 80154fc:	37354443 	.word	0x37354443
 8015500:	37354400 	.word	0x37354400
 8015504:	2e85a308 	.word	0x2e85a308
 8015508:	43490f80 	.word	0x43490f80
 801550c:	3f22f984 	.word	0x3f22f984
 8015510:	0801742c 	.word	0x0801742c
 8015514:	2e85a300 	.word	0x2e85a300
 8015518:	248d3132 	.word	0x248d3132
 801551c:	080174ac 	.word	0x080174ac

08015520 <__ieee754_sqrtf>:
 8015520:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8015524:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015528:	b570      	push	{r4, r5, r6, lr}
 801552a:	4603      	mov	r3, r0
 801552c:	4604      	mov	r4, r0
 801552e:	d309      	bcc.n	8015544 <__ieee754_sqrtf+0x24>
 8015530:	4601      	mov	r1, r0
 8015532:	f7ee f9ff 	bl	8003934 <__aeabi_fmul>
 8015536:	4601      	mov	r1, r0
 8015538:	4620      	mov	r0, r4
 801553a:	f7ee f8f3 	bl	8003724 <__addsf3>
 801553e:	4604      	mov	r4, r0
 8015540:	4620      	mov	r0, r4
 8015542:	bd70      	pop	{r4, r5, r6, pc}
 8015544:	2a00      	cmp	r2, #0
 8015546:	d0fb      	beq.n	8015540 <__ieee754_sqrtf+0x20>
 8015548:	2800      	cmp	r0, #0
 801554a:	da06      	bge.n	801555a <__ieee754_sqrtf+0x3a>
 801554c:	4601      	mov	r1, r0
 801554e:	f7ee f8e7 	bl	8003720 <__aeabi_fsub>
 8015552:	4601      	mov	r1, r0
 8015554:	f7ee faa2 	bl	8003a9c <__aeabi_fdiv>
 8015558:	e7f1      	b.n	801553e <__ieee754_sqrtf+0x1e>
 801555a:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 801555e:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8015562:	d029      	beq.n	80155b8 <__ieee754_sqrtf+0x98>
 8015564:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8015568:	07cb      	lsls	r3, r1, #31
 801556a:	f04f 0300 	mov.w	r3, #0
 801556e:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8015572:	f04f 0419 	mov.w	r4, #25
 8015576:	461e      	mov	r6, r3
 8015578:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 801557c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8015580:	bf58      	it	pl
 8015582:	0052      	lslpl	r2, r2, #1
 8015584:	1040      	asrs	r0, r0, #1
 8015586:	0052      	lsls	r2, r2, #1
 8015588:	1875      	adds	r5, r6, r1
 801558a:	4295      	cmp	r5, r2
 801558c:	bfde      	ittt	le
 801558e:	186e      	addle	r6, r5, r1
 8015590:	1b52      	suble	r2, r2, r5
 8015592:	185b      	addle	r3, r3, r1
 8015594:	3c01      	subs	r4, #1
 8015596:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801559a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801559e:	d1f3      	bne.n	8015588 <__ieee754_sqrtf+0x68>
 80155a0:	b112      	cbz	r2, 80155a8 <__ieee754_sqrtf+0x88>
 80155a2:	3301      	adds	r3, #1
 80155a4:	f023 0301 	bic.w	r3, r3, #1
 80155a8:	105c      	asrs	r4, r3, #1
 80155aa:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80155ae:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 80155b2:	e7c5      	b.n	8015540 <__ieee754_sqrtf+0x20>
 80155b4:	005b      	lsls	r3, r3, #1
 80155b6:	3201      	adds	r2, #1
 80155b8:	0218      	lsls	r0, r3, #8
 80155ba:	d5fb      	bpl.n	80155b4 <__ieee754_sqrtf+0x94>
 80155bc:	3a01      	subs	r2, #1
 80155be:	1a89      	subs	r1, r1, r2
 80155c0:	e7d0      	b.n	8015564 <__ieee754_sqrtf+0x44>
	...

080155c4 <__kernel_cosf>:
 80155c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155c8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 80155cc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80155d0:	4606      	mov	r6, r0
 80155d2:	4688      	mov	r8, r1
 80155d4:	da03      	bge.n	80155de <__kernel_cosf+0x1a>
 80155d6:	f7ee fb89 	bl	8003cec <__aeabi_f2iz>
 80155da:	2800      	cmp	r0, #0
 80155dc:	d05c      	beq.n	8015698 <__kernel_cosf+0xd4>
 80155de:	4631      	mov	r1, r6
 80155e0:	4630      	mov	r0, r6
 80155e2:	f7ee f9a7 	bl	8003934 <__aeabi_fmul>
 80155e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80155ea:	4605      	mov	r5, r0
 80155ec:	f7ee f9a2 	bl	8003934 <__aeabi_fmul>
 80155f0:	492b      	ldr	r1, [pc, #172]	; (80156a0 <__kernel_cosf+0xdc>)
 80155f2:	4607      	mov	r7, r0
 80155f4:	4628      	mov	r0, r5
 80155f6:	f7ee f99d 	bl	8003934 <__aeabi_fmul>
 80155fa:	492a      	ldr	r1, [pc, #168]	; (80156a4 <__kernel_cosf+0xe0>)
 80155fc:	f7ee f892 	bl	8003724 <__addsf3>
 8015600:	4629      	mov	r1, r5
 8015602:	f7ee f997 	bl	8003934 <__aeabi_fmul>
 8015606:	4928      	ldr	r1, [pc, #160]	; (80156a8 <__kernel_cosf+0xe4>)
 8015608:	f7ee f88a 	bl	8003720 <__aeabi_fsub>
 801560c:	4629      	mov	r1, r5
 801560e:	f7ee f991 	bl	8003934 <__aeabi_fmul>
 8015612:	4926      	ldr	r1, [pc, #152]	; (80156ac <__kernel_cosf+0xe8>)
 8015614:	f7ee f886 	bl	8003724 <__addsf3>
 8015618:	4629      	mov	r1, r5
 801561a:	f7ee f98b 	bl	8003934 <__aeabi_fmul>
 801561e:	4924      	ldr	r1, [pc, #144]	; (80156b0 <__kernel_cosf+0xec>)
 8015620:	f7ee f87e 	bl	8003720 <__aeabi_fsub>
 8015624:	4629      	mov	r1, r5
 8015626:	f7ee f985 	bl	8003934 <__aeabi_fmul>
 801562a:	4922      	ldr	r1, [pc, #136]	; (80156b4 <__kernel_cosf+0xf0>)
 801562c:	f7ee f87a 	bl	8003724 <__addsf3>
 8015630:	4629      	mov	r1, r5
 8015632:	f7ee f97f 	bl	8003934 <__aeabi_fmul>
 8015636:	4629      	mov	r1, r5
 8015638:	f7ee f97c 	bl	8003934 <__aeabi_fmul>
 801563c:	4641      	mov	r1, r8
 801563e:	4605      	mov	r5, r0
 8015640:	4630      	mov	r0, r6
 8015642:	f7ee f977 	bl	8003934 <__aeabi_fmul>
 8015646:	4601      	mov	r1, r0
 8015648:	4628      	mov	r0, r5
 801564a:	f7ee f869 	bl	8003720 <__aeabi_fsub>
 801564e:	4b1a      	ldr	r3, [pc, #104]	; (80156b8 <__kernel_cosf+0xf4>)
 8015650:	4605      	mov	r5, r0
 8015652:	429c      	cmp	r4, r3
 8015654:	dc0a      	bgt.n	801566c <__kernel_cosf+0xa8>
 8015656:	4601      	mov	r1, r0
 8015658:	4638      	mov	r0, r7
 801565a:	f7ee f861 	bl	8003720 <__aeabi_fsub>
 801565e:	4601      	mov	r1, r0
 8015660:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015664:	f7ee f85c 	bl	8003720 <__aeabi_fsub>
 8015668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801566c:	4b13      	ldr	r3, [pc, #76]	; (80156bc <__kernel_cosf+0xf8>)
 801566e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015672:	429c      	cmp	r4, r3
 8015674:	bfcc      	ite	gt
 8015676:	4c12      	ldrgt	r4, [pc, #72]	; (80156c0 <__kernel_cosf+0xfc>)
 8015678:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 801567c:	4621      	mov	r1, r4
 801567e:	f7ee f84f 	bl	8003720 <__aeabi_fsub>
 8015682:	4621      	mov	r1, r4
 8015684:	4606      	mov	r6, r0
 8015686:	4638      	mov	r0, r7
 8015688:	f7ee f84a 	bl	8003720 <__aeabi_fsub>
 801568c:	4629      	mov	r1, r5
 801568e:	f7ee f847 	bl	8003720 <__aeabi_fsub>
 8015692:	4601      	mov	r1, r0
 8015694:	4630      	mov	r0, r6
 8015696:	e7e5      	b.n	8015664 <__kernel_cosf+0xa0>
 8015698:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801569c:	e7e4      	b.n	8015668 <__kernel_cosf+0xa4>
 801569e:	bf00      	nop
 80156a0:	ad47d74e 	.word	0xad47d74e
 80156a4:	310f74f6 	.word	0x310f74f6
 80156a8:	3493f27c 	.word	0x3493f27c
 80156ac:	37d00d01 	.word	0x37d00d01
 80156b0:	3ab60b61 	.word	0x3ab60b61
 80156b4:	3d2aaaab 	.word	0x3d2aaaab
 80156b8:	3e999999 	.word	0x3e999999
 80156bc:	3f480000 	.word	0x3f480000
 80156c0:	3e900000 	.word	0x3e900000

080156c4 <__kernel_rem_pio2f>:
 80156c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156c8:	b0db      	sub	sp, #364	; 0x16c
 80156ca:	9202      	str	r2, [sp, #8]
 80156cc:	9304      	str	r3, [sp, #16]
 80156ce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80156d0:	4bc5      	ldr	r3, [pc, #788]	; (80159e8 <__kernel_rem_pio2f+0x324>)
 80156d2:	9005      	str	r0, [sp, #20]
 80156d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156d8:	9100      	str	r1, [sp, #0]
 80156da:	9301      	str	r3, [sp, #4]
 80156dc:	9b04      	ldr	r3, [sp, #16]
 80156de:	3b01      	subs	r3, #1
 80156e0:	9303      	str	r3, [sp, #12]
 80156e2:	9b02      	ldr	r3, [sp, #8]
 80156e4:	1d1a      	adds	r2, r3, #4
 80156e6:	f2c0 809b 	blt.w	8015820 <__kernel_rem_pio2f+0x15c>
 80156ea:	1edc      	subs	r4, r3, #3
 80156ec:	bf48      	it	mi
 80156ee:	1d1c      	addmi	r4, r3, #4
 80156f0:	10e4      	asrs	r4, r4, #3
 80156f2:	2500      	movs	r5, #0
 80156f4:	f04f 0a00 	mov.w	sl, #0
 80156f8:	1c67      	adds	r7, r4, #1
 80156fa:	00fb      	lsls	r3, r7, #3
 80156fc:	9306      	str	r3, [sp, #24]
 80156fe:	9b02      	ldr	r3, [sp, #8]
 8015700:	9a03      	ldr	r2, [sp, #12]
 8015702:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8015706:	9b01      	ldr	r3, [sp, #4]
 8015708:	1aa6      	subs	r6, r4, r2
 801570a:	eb03 0802 	add.w	r8, r3, r2
 801570e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8015710:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 8015714:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 8015718:	4545      	cmp	r5, r8
 801571a:	f340 8083 	ble.w	8015824 <__kernel_rem_pio2f+0x160>
 801571e:	f04f 0800 	mov.w	r8, #0
 8015722:	f04f 0b00 	mov.w	fp, #0
 8015726:	9b04      	ldr	r3, [sp, #16]
 8015728:	aa1e      	add	r2, sp, #120	; 0x78
 801572a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801572e:	ab46      	add	r3, sp, #280	; 0x118
 8015730:	9a01      	ldr	r2, [sp, #4]
 8015732:	4590      	cmp	r8, r2
 8015734:	f340 809c 	ble.w	8015870 <__kernel_rem_pio2f+0x1ac>
 8015738:	4613      	mov	r3, r2
 801573a:	aa0a      	add	r2, sp, #40	; 0x28
 801573c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015740:	9308      	str	r3, [sp, #32]
 8015742:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8015744:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015748:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801574c:	9307      	str	r3, [sp, #28]
 801574e:	ad0a      	add	r5, sp, #40	; 0x28
 8015750:	462e      	mov	r6, r5
 8015752:	46c3      	mov	fp, r8
 8015754:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8015758:	ab5a      	add	r3, sp, #360	; 0x168
 801575a:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801575e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 8015762:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8015766:	f1bb 0f00 	cmp.w	fp, #0
 801576a:	f300 8086 	bgt.w	801587a <__kernel_rem_pio2f+0x1b6>
 801576e:	4639      	mov	r1, r7
 8015770:	4620      	mov	r0, r4
 8015772:	f000 fc25 	bl	8015fc0 <scalbnf>
 8015776:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 801577a:	4604      	mov	r4, r0
 801577c:	f7ee f8da 	bl	8003934 <__aeabi_fmul>
 8015780:	f000 fbdc 	bl	8015f3c <floorf>
 8015784:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8015788:	f7ee f8d4 	bl	8003934 <__aeabi_fmul>
 801578c:	4601      	mov	r1, r0
 801578e:	4620      	mov	r0, r4
 8015790:	f7ed ffc6 	bl	8003720 <__aeabi_fsub>
 8015794:	4604      	mov	r4, r0
 8015796:	f7ee faa9 	bl	8003cec <__aeabi_f2iz>
 801579a:	4606      	mov	r6, r0
 801579c:	f7ee f876 	bl	800388c <__aeabi_i2f>
 80157a0:	4601      	mov	r1, r0
 80157a2:	4620      	mov	r0, r4
 80157a4:	f7ed ffbc 	bl	8003720 <__aeabi_fsub>
 80157a8:	2f00      	cmp	r7, #0
 80157aa:	4681      	mov	r9, r0
 80157ac:	f340 8084 	ble.w	80158b8 <__kernel_rem_pio2f+0x1f4>
 80157b0:	f108 32ff 	add.w	r2, r8, #4294967295
 80157b4:	ab0a      	add	r3, sp, #40	; 0x28
 80157b6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 80157ba:	f1c7 0108 	rsb	r1, r7, #8
 80157be:	fa44 f301 	asr.w	r3, r4, r1
 80157c2:	441e      	add	r6, r3
 80157c4:	408b      	lsls	r3, r1
 80157c6:	1ae4      	subs	r4, r4, r3
 80157c8:	f1c7 0007 	rsb	r0, r7, #7
 80157cc:	ab0a      	add	r3, sp, #40	; 0x28
 80157ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80157d2:	4104      	asrs	r4, r0
 80157d4:	2c00      	cmp	r4, #0
 80157d6:	dd7e      	ble.n	80158d6 <__kernel_rem_pio2f+0x212>
 80157d8:	2200      	movs	r2, #0
 80157da:	4692      	mov	sl, r2
 80157dc:	3601      	adds	r6, #1
 80157de:	4590      	cmp	r8, r2
 80157e0:	f300 80b0 	bgt.w	8015944 <__kernel_rem_pio2f+0x280>
 80157e4:	2f00      	cmp	r7, #0
 80157e6:	dd05      	ble.n	80157f4 <__kernel_rem_pio2f+0x130>
 80157e8:	2f01      	cmp	r7, #1
 80157ea:	f000 80bd 	beq.w	8015968 <__kernel_rem_pio2f+0x2a4>
 80157ee:	2f02      	cmp	r7, #2
 80157f0:	f000 80c5 	beq.w	801597e <__kernel_rem_pio2f+0x2ba>
 80157f4:	2c02      	cmp	r4, #2
 80157f6:	d16e      	bne.n	80158d6 <__kernel_rem_pio2f+0x212>
 80157f8:	4649      	mov	r1, r9
 80157fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80157fe:	f7ed ff8f 	bl	8003720 <__aeabi_fsub>
 8015802:	4681      	mov	r9, r0
 8015804:	f1ba 0f00 	cmp.w	sl, #0
 8015808:	d065      	beq.n	80158d6 <__kernel_rem_pio2f+0x212>
 801580a:	4639      	mov	r1, r7
 801580c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8015810:	f000 fbd6 	bl	8015fc0 <scalbnf>
 8015814:	4601      	mov	r1, r0
 8015816:	4648      	mov	r0, r9
 8015818:	f7ed ff82 	bl	8003720 <__aeabi_fsub>
 801581c:	4681      	mov	r9, r0
 801581e:	e05a      	b.n	80158d6 <__kernel_rem_pio2f+0x212>
 8015820:	2400      	movs	r4, #0
 8015822:	e766      	b.n	80156f2 <__kernel_rem_pio2f+0x2e>
 8015824:	42ee      	cmn	r6, r5
 8015826:	d407      	bmi.n	8015838 <__kernel_rem_pio2f+0x174>
 8015828:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801582c:	f7ee f82e 	bl	800388c <__aeabi_i2f>
 8015830:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 8015834:	3501      	adds	r5, #1
 8015836:	e76f      	b.n	8015718 <__kernel_rem_pio2f+0x54>
 8015838:	4650      	mov	r0, sl
 801583a:	e7f9      	b.n	8015830 <__kernel_rem_pio2f+0x16c>
 801583c:	9b05      	ldr	r3, [sp, #20]
 801583e:	f8da 1000 	ldr.w	r1, [sl]
 8015842:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 8015846:	f7ee f875 	bl	8003934 <__aeabi_fmul>
 801584a:	4601      	mov	r1, r0
 801584c:	4630      	mov	r0, r6
 801584e:	f7ed ff69 	bl	8003724 <__addsf3>
 8015852:	4606      	mov	r6, r0
 8015854:	f109 0901 	add.w	r9, r9, #1
 8015858:	ab46      	add	r3, sp, #280	; 0x118
 801585a:	9a03      	ldr	r2, [sp, #12]
 801585c:	f1aa 0a04 	sub.w	sl, sl, #4
 8015860:	4591      	cmp	r9, r2
 8015862:	ddeb      	ble.n	801583c <__kernel_rem_pio2f+0x178>
 8015864:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8015868:	3504      	adds	r5, #4
 801586a:	f108 0801 	add.w	r8, r8, #1
 801586e:	e75f      	b.n	8015730 <__kernel_rem_pio2f+0x6c>
 8015870:	46aa      	mov	sl, r5
 8015872:	465e      	mov	r6, fp
 8015874:	f04f 0900 	mov.w	r9, #0
 8015878:	e7ef      	b.n	801585a <__kernel_rem_pio2f+0x196>
 801587a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 801587e:	4620      	mov	r0, r4
 8015880:	f7ee f858 	bl	8003934 <__aeabi_fmul>
 8015884:	f7ee fa32 	bl	8003cec <__aeabi_f2iz>
 8015888:	f7ee f800 	bl	800388c <__aeabi_i2f>
 801588c:	4649      	mov	r1, r9
 801588e:	9009      	str	r0, [sp, #36]	; 0x24
 8015890:	f7ee f850 	bl	8003934 <__aeabi_fmul>
 8015894:	4601      	mov	r1, r0
 8015896:	4620      	mov	r0, r4
 8015898:	f7ed ff42 	bl	8003720 <__aeabi_fsub>
 801589c:	f7ee fa26 	bl	8003cec <__aeabi_f2iz>
 80158a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80158a6:	f846 0b04 	str.w	r0, [r6], #4
 80158aa:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7ed ff38 	bl	8003724 <__addsf3>
 80158b4:	4604      	mov	r4, r0
 80158b6:	e756      	b.n	8015766 <__kernel_rem_pio2f+0xa2>
 80158b8:	d106      	bne.n	80158c8 <__kernel_rem_pio2f+0x204>
 80158ba:	f108 33ff 	add.w	r3, r8, #4294967295
 80158be:	aa0a      	add	r2, sp, #40	; 0x28
 80158c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80158c4:	1224      	asrs	r4, r4, #8
 80158c6:	e785      	b.n	80157d4 <__kernel_rem_pio2f+0x110>
 80158c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80158cc:	f7ee f9e4 	bl	8003c98 <__aeabi_fcmpge>
 80158d0:	4604      	mov	r4, r0
 80158d2:	2800      	cmp	r0, #0
 80158d4:	d134      	bne.n	8015940 <__kernel_rem_pio2f+0x27c>
 80158d6:	2100      	movs	r1, #0
 80158d8:	4648      	mov	r0, r9
 80158da:	f7ee f9bf 	bl	8003c5c <__aeabi_fcmpeq>
 80158de:	2800      	cmp	r0, #0
 80158e0:	f000 809a 	beq.w	8015a18 <__kernel_rem_pio2f+0x354>
 80158e4:	f108 35ff 	add.w	r5, r8, #4294967295
 80158e8:	462b      	mov	r3, r5
 80158ea:	2200      	movs	r2, #0
 80158ec:	9901      	ldr	r1, [sp, #4]
 80158ee:	428b      	cmp	r3, r1
 80158f0:	da4d      	bge.n	801598e <__kernel_rem_pio2f+0x2ca>
 80158f2:	2a00      	cmp	r2, #0
 80158f4:	d07c      	beq.n	80159f0 <__kernel_rem_pio2f+0x32c>
 80158f6:	ab0a      	add	r3, sp, #40	; 0x28
 80158f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80158fc:	3f08      	subs	r7, #8
 80158fe:	2b00      	cmp	r3, #0
 8015900:	f000 8088 	beq.w	8015a14 <__kernel_rem_pio2f+0x350>
 8015904:	4639      	mov	r1, r7
 8015906:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 801590a:	f000 fb59 	bl	8015fc0 <scalbnf>
 801590e:	46aa      	mov	sl, r5
 8015910:	4681      	mov	r9, r0
 8015912:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8015916:	af46      	add	r7, sp, #280	; 0x118
 8015918:	f1ba 0f00 	cmp.w	sl, #0
 801591c:	f280 80b1 	bge.w	8015a82 <__kernel_rem_pio2f+0x3be>
 8015920:	46a9      	mov	r9, r5
 8015922:	f04f 0a00 	mov.w	sl, #0
 8015926:	2200      	movs	r2, #0
 8015928:	f1b9 0f00 	cmp.w	r9, #0
 801592c:	f2c0 80db 	blt.w	8015ae6 <__kernel_rem_pio2f+0x422>
 8015930:	a946      	add	r1, sp, #280	; 0x118
 8015932:	4617      	mov	r7, r2
 8015934:	f04f 0800 	mov.w	r8, #0
 8015938:	4b2c      	ldr	r3, [pc, #176]	; (80159ec <__kernel_rem_pio2f+0x328>)
 801593a:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 801593e:	e0c3      	b.n	8015ac8 <__kernel_rem_pio2f+0x404>
 8015940:	2402      	movs	r4, #2
 8015942:	e749      	b.n	80157d8 <__kernel_rem_pio2f+0x114>
 8015944:	682b      	ldr	r3, [r5, #0]
 8015946:	f1ba 0f00 	cmp.w	sl, #0
 801594a:	d108      	bne.n	801595e <__kernel_rem_pio2f+0x29a>
 801594c:	b11b      	cbz	r3, 8015956 <__kernel_rem_pio2f+0x292>
 801594e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8015952:	602b      	str	r3, [r5, #0]
 8015954:	2301      	movs	r3, #1
 8015956:	469a      	mov	sl, r3
 8015958:	3201      	adds	r2, #1
 801595a:	3504      	adds	r5, #4
 801595c:	e73f      	b.n	80157de <__kernel_rem_pio2f+0x11a>
 801595e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8015962:	602b      	str	r3, [r5, #0]
 8015964:	4653      	mov	r3, sl
 8015966:	e7f6      	b.n	8015956 <__kernel_rem_pio2f+0x292>
 8015968:	f108 32ff 	add.w	r2, r8, #4294967295
 801596c:	ab0a      	add	r3, sp, #40	; 0x28
 801596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015976:	a90a      	add	r1, sp, #40	; 0x28
 8015978:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801597c:	e73a      	b.n	80157f4 <__kernel_rem_pio2f+0x130>
 801597e:	f108 32ff 	add.w	r2, r8, #4294967295
 8015982:	ab0a      	add	r3, sp, #40	; 0x28
 8015984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015988:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801598c:	e7f3      	b.n	8015976 <__kernel_rem_pio2f+0x2b2>
 801598e:	a90a      	add	r1, sp, #40	; 0x28
 8015990:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015994:	3b01      	subs	r3, #1
 8015996:	430a      	orrs	r2, r1
 8015998:	e7a8      	b.n	80158ec <__kernel_rem_pio2f+0x228>
 801599a:	3301      	adds	r3, #1
 801599c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80159a0:	2900      	cmp	r1, #0
 80159a2:	d0fa      	beq.n	801599a <__kernel_rem_pio2f+0x2d6>
 80159a4:	9a04      	ldr	r2, [sp, #16]
 80159a6:	f108 0501 	add.w	r5, r8, #1
 80159aa:	eb08 0402 	add.w	r4, r8, r2
 80159ae:	aa1e      	add	r2, sp, #120	; 0x78
 80159b0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80159b4:	4498      	add	r8, r3
 80159b6:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 80159ba:	45a8      	cmp	r8, r5
 80159bc:	f6ff aec7 	blt.w	801574e <__kernel_rem_pio2f+0x8a>
 80159c0:	9b07      	ldr	r3, [sp, #28]
 80159c2:	46a3      	mov	fp, r4
 80159c4:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80159c8:	f7ed ff60 	bl	800388c <__aeabi_i2f>
 80159cc:	f04f 0a00 	mov.w	sl, #0
 80159d0:	2600      	movs	r6, #0
 80159d2:	f84b 0b04 	str.w	r0, [fp], #4
 80159d6:	9b03      	ldr	r3, [sp, #12]
 80159d8:	459a      	cmp	sl, r3
 80159da:	dd0c      	ble.n	80159f6 <__kernel_rem_pio2f+0x332>
 80159dc:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 80159e0:	465c      	mov	r4, fp
 80159e2:	3501      	adds	r5, #1
 80159e4:	e7e9      	b.n	80159ba <__kernel_rem_pio2f+0x2f6>
 80159e6:	bf00      	nop
 80159e8:	080177f0 	.word	0x080177f0
 80159ec:	080177c4 	.word	0x080177c4
 80159f0:	2301      	movs	r3, #1
 80159f2:	9a08      	ldr	r2, [sp, #32]
 80159f4:	e7d2      	b.n	801599c <__kernel_rem_pio2f+0x2d8>
 80159f6:	9b05      	ldr	r3, [sp, #20]
 80159f8:	f854 0904 	ldr.w	r0, [r4], #-4
 80159fc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8015a00:	f7ed ff98 	bl	8003934 <__aeabi_fmul>
 8015a04:	4601      	mov	r1, r0
 8015a06:	4630      	mov	r0, r6
 8015a08:	f7ed fe8c 	bl	8003724 <__addsf3>
 8015a0c:	f10a 0a01 	add.w	sl, sl, #1
 8015a10:	4606      	mov	r6, r0
 8015a12:	e7e0      	b.n	80159d6 <__kernel_rem_pio2f+0x312>
 8015a14:	3d01      	subs	r5, #1
 8015a16:	e76e      	b.n	80158f6 <__kernel_rem_pio2f+0x232>
 8015a18:	9b06      	ldr	r3, [sp, #24]
 8015a1a:	9a02      	ldr	r2, [sp, #8]
 8015a1c:	4648      	mov	r0, r9
 8015a1e:	1a99      	subs	r1, r3, r2
 8015a20:	f000 face 	bl	8015fc0 <scalbnf>
 8015a24:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8015a28:	4605      	mov	r5, r0
 8015a2a:	f7ee f935 	bl	8003c98 <__aeabi_fcmpge>
 8015a2e:	b300      	cbz	r0, 8015a72 <__kernel_rem_pio2f+0x3ae>
 8015a30:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8015a34:	4628      	mov	r0, r5
 8015a36:	f7ed ff7d 	bl	8003934 <__aeabi_fmul>
 8015a3a:	f7ee f957 	bl	8003cec <__aeabi_f2iz>
 8015a3e:	f7ed ff25 	bl	800388c <__aeabi_i2f>
 8015a42:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8015a46:	4681      	mov	r9, r0
 8015a48:	f7ed ff74 	bl	8003934 <__aeabi_fmul>
 8015a4c:	4601      	mov	r1, r0
 8015a4e:	4628      	mov	r0, r5
 8015a50:	f7ed fe66 	bl	8003720 <__aeabi_fsub>
 8015a54:	f7ee f94a 	bl	8003cec <__aeabi_f2iz>
 8015a58:	ab0a      	add	r3, sp, #40	; 0x28
 8015a5a:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015a5e:	4648      	mov	r0, r9
 8015a60:	f7ee f944 	bl	8003cec <__aeabi_f2iz>
 8015a64:	f108 0501 	add.w	r5, r8, #1
 8015a68:	ab0a      	add	r3, sp, #40	; 0x28
 8015a6a:	3708      	adds	r7, #8
 8015a6c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8015a70:	e748      	b.n	8015904 <__kernel_rem_pio2f+0x240>
 8015a72:	4628      	mov	r0, r5
 8015a74:	f7ee f93a 	bl	8003cec <__aeabi_f2iz>
 8015a78:	ab0a      	add	r3, sp, #40	; 0x28
 8015a7a:	4645      	mov	r5, r8
 8015a7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8015a80:	e740      	b.n	8015904 <__kernel_rem_pio2f+0x240>
 8015a82:	ab0a      	add	r3, sp, #40	; 0x28
 8015a84:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8015a88:	f7ed ff00 	bl	800388c <__aeabi_i2f>
 8015a8c:	4649      	mov	r1, r9
 8015a8e:	f7ed ff51 	bl	8003934 <__aeabi_fmul>
 8015a92:	4641      	mov	r1, r8
 8015a94:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8015a98:	4648      	mov	r0, r9
 8015a9a:	f7ed ff4b 	bl	8003934 <__aeabi_fmul>
 8015a9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015aa2:	4681      	mov	r9, r0
 8015aa4:	e738      	b.n	8015918 <__kernel_rem_pio2f+0x254>
 8015aa6:	f853 0b04 	ldr.w	r0, [r3], #4
 8015aaa:	f85b 1b04 	ldr.w	r1, [fp], #4
 8015aae:	9203      	str	r2, [sp, #12]
 8015ab0:	9302      	str	r3, [sp, #8]
 8015ab2:	f7ed ff3f 	bl	8003934 <__aeabi_fmul>
 8015ab6:	4601      	mov	r1, r0
 8015ab8:	4638      	mov	r0, r7
 8015aba:	f7ed fe33 	bl	8003724 <__addsf3>
 8015abe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8015ac2:	4607      	mov	r7, r0
 8015ac4:	f108 0801 	add.w	r8, r8, #1
 8015ac8:	9901      	ldr	r1, [sp, #4]
 8015aca:	4588      	cmp	r8, r1
 8015acc:	dc01      	bgt.n	8015ad2 <__kernel_rem_pio2f+0x40e>
 8015ace:	45c2      	cmp	sl, r8
 8015ad0:	dae9      	bge.n	8015aa6 <__kernel_rem_pio2f+0x3e2>
 8015ad2:	ab5a      	add	r3, sp, #360	; 0x168
 8015ad4:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8015ad8:	f843 7ca0 	str.w	r7, [r3, #-160]
 8015adc:	f109 39ff 	add.w	r9, r9, #4294967295
 8015ae0:	f10a 0a01 	add.w	sl, sl, #1
 8015ae4:	e720      	b.n	8015928 <__kernel_rem_pio2f+0x264>
 8015ae6:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015ae8:	2b02      	cmp	r3, #2
 8015aea:	dc07      	bgt.n	8015afc <__kernel_rem_pio2f+0x438>
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	dc4d      	bgt.n	8015b8c <__kernel_rem_pio2f+0x4c8>
 8015af0:	d02e      	beq.n	8015b50 <__kernel_rem_pio2f+0x48c>
 8015af2:	f006 0007 	and.w	r0, r6, #7
 8015af6:	b05b      	add	sp, #364	; 0x16c
 8015af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015afc:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015afe:	2b03      	cmp	r3, #3
 8015b00:	d1f7      	bne.n	8015af2 <__kernel_rem_pio2f+0x42e>
 8015b02:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8015b06:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8015b0a:	46b8      	mov	r8, r7
 8015b0c:	46aa      	mov	sl, r5
 8015b0e:	f1ba 0f00 	cmp.w	sl, #0
 8015b12:	dc48      	bgt.n	8015ba6 <__kernel_rem_pio2f+0x4e2>
 8015b14:	46a9      	mov	r9, r5
 8015b16:	f1b9 0f01 	cmp.w	r9, #1
 8015b1a:	dc5f      	bgt.n	8015bdc <__kernel_rem_pio2f+0x518>
 8015b1c:	2000      	movs	r0, #0
 8015b1e:	2d01      	cmp	r5, #1
 8015b20:	dc75      	bgt.n	8015c0e <__kernel_rem_pio2f+0x54a>
 8015b22:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8015b24:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8015b26:	2c00      	cmp	r4, #0
 8015b28:	d177      	bne.n	8015c1a <__kernel_rem_pio2f+0x556>
 8015b2a:	9900      	ldr	r1, [sp, #0]
 8015b2c:	600a      	str	r2, [r1, #0]
 8015b2e:	460a      	mov	r2, r1
 8015b30:	604b      	str	r3, [r1, #4]
 8015b32:	6090      	str	r0, [r2, #8]
 8015b34:	e7dd      	b.n	8015af2 <__kernel_rem_pio2f+0x42e>
 8015b36:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8015b3a:	f7ed fdf3 	bl	8003724 <__addsf3>
 8015b3e:	3d01      	subs	r5, #1
 8015b40:	2d00      	cmp	r5, #0
 8015b42:	daf8      	bge.n	8015b36 <__kernel_rem_pio2f+0x472>
 8015b44:	b10c      	cbz	r4, 8015b4a <__kernel_rem_pio2f+0x486>
 8015b46:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015b4a:	9b00      	ldr	r3, [sp, #0]
 8015b4c:	6018      	str	r0, [r3, #0]
 8015b4e:	e7d0      	b.n	8015af2 <__kernel_rem_pio2f+0x42e>
 8015b50:	2000      	movs	r0, #0
 8015b52:	af32      	add	r7, sp, #200	; 0xc8
 8015b54:	e7f4      	b.n	8015b40 <__kernel_rem_pio2f+0x47c>
 8015b56:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8015b5a:	f7ed fde3 	bl	8003724 <__addsf3>
 8015b5e:	3f01      	subs	r7, #1
 8015b60:	2f00      	cmp	r7, #0
 8015b62:	daf8      	bge.n	8015b56 <__kernel_rem_pio2f+0x492>
 8015b64:	b1bc      	cbz	r4, 8015b96 <__kernel_rem_pio2f+0x4d2>
 8015b66:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8015b6a:	9a00      	ldr	r2, [sp, #0]
 8015b6c:	4601      	mov	r1, r0
 8015b6e:	6013      	str	r3, [r2, #0]
 8015b70:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8015b72:	f7ed fdd5 	bl	8003720 <__aeabi_fsub>
 8015b76:	2701      	movs	r7, #1
 8015b78:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8015b7c:	42bd      	cmp	r5, r7
 8015b7e:	da0c      	bge.n	8015b9a <__kernel_rem_pio2f+0x4d6>
 8015b80:	b10c      	cbz	r4, 8015b86 <__kernel_rem_pio2f+0x4c2>
 8015b82:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015b86:	9b00      	ldr	r3, [sp, #0]
 8015b88:	6058      	str	r0, [r3, #4]
 8015b8a:	e7b2      	b.n	8015af2 <__kernel_rem_pio2f+0x42e>
 8015b8c:	462f      	mov	r7, r5
 8015b8e:	2000      	movs	r0, #0
 8015b90:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8015b94:	e7e4      	b.n	8015b60 <__kernel_rem_pio2f+0x49c>
 8015b96:	4603      	mov	r3, r0
 8015b98:	e7e7      	b.n	8015b6a <__kernel_rem_pio2f+0x4a6>
 8015b9a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8015b9e:	f7ed fdc1 	bl	8003724 <__addsf3>
 8015ba2:	3701      	adds	r7, #1
 8015ba4:	e7ea      	b.n	8015b7c <__kernel_rem_pio2f+0x4b8>
 8015ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8015baa:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8015bae:	4619      	mov	r1, r3
 8015bb0:	4610      	mov	r0, r2
 8015bb2:	9302      	str	r3, [sp, #8]
 8015bb4:	9201      	str	r2, [sp, #4]
 8015bb6:	f7ed fdb5 	bl	8003724 <__addsf3>
 8015bba:	9a01      	ldr	r2, [sp, #4]
 8015bbc:	4601      	mov	r1, r0
 8015bbe:	4681      	mov	r9, r0
 8015bc0:	4610      	mov	r0, r2
 8015bc2:	f7ed fdad 	bl	8003720 <__aeabi_fsub>
 8015bc6:	9b02      	ldr	r3, [sp, #8]
 8015bc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015bcc:	4619      	mov	r1, r3
 8015bce:	f7ed fda9 	bl	8003724 <__addsf3>
 8015bd2:	f848 0904 	str.w	r0, [r8], #-4
 8015bd6:	f8c8 9000 	str.w	r9, [r8]
 8015bda:	e798      	b.n	8015b0e <__kernel_rem_pio2f+0x44a>
 8015bdc:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8015be0:	f8d7 a000 	ldr.w	sl, [r7]
 8015be4:	4618      	mov	r0, r3
 8015be6:	4651      	mov	r1, sl
 8015be8:	9301      	str	r3, [sp, #4]
 8015bea:	f7ed fd9b 	bl	8003724 <__addsf3>
 8015bee:	9b01      	ldr	r3, [sp, #4]
 8015bf0:	4601      	mov	r1, r0
 8015bf2:	4680      	mov	r8, r0
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f7ed fd93 	bl	8003720 <__aeabi_fsub>
 8015bfa:	4651      	mov	r1, sl
 8015bfc:	f7ed fd92 	bl	8003724 <__addsf3>
 8015c00:	f847 0904 	str.w	r0, [r7], #-4
 8015c04:	f109 39ff 	add.w	r9, r9, #4294967295
 8015c08:	f8c7 8000 	str.w	r8, [r7]
 8015c0c:	e783      	b.n	8015b16 <__kernel_rem_pio2f+0x452>
 8015c0e:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 8015c12:	f7ed fd87 	bl	8003724 <__addsf3>
 8015c16:	3d01      	subs	r5, #1
 8015c18:	e781      	b.n	8015b1e <__kernel_rem_pio2f+0x45a>
 8015c1a:	9900      	ldr	r1, [sp, #0]
 8015c1c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8015c20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015c24:	600a      	str	r2, [r1, #0]
 8015c26:	604b      	str	r3, [r1, #4]
 8015c28:	460a      	mov	r2, r1
 8015c2a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015c2e:	e780      	b.n	8015b32 <__kernel_rem_pio2f+0x46e>

08015c30 <__kernel_sinf>:
 8015c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c34:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8015c38:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8015c3c:	4604      	mov	r4, r0
 8015c3e:	460f      	mov	r7, r1
 8015c40:	4691      	mov	r9, r2
 8015c42:	da03      	bge.n	8015c4c <__kernel_sinf+0x1c>
 8015c44:	f7ee f852 	bl	8003cec <__aeabi_f2iz>
 8015c48:	2800      	cmp	r0, #0
 8015c4a:	d035      	beq.n	8015cb8 <__kernel_sinf+0x88>
 8015c4c:	4621      	mov	r1, r4
 8015c4e:	4620      	mov	r0, r4
 8015c50:	f7ed fe70 	bl	8003934 <__aeabi_fmul>
 8015c54:	4605      	mov	r5, r0
 8015c56:	4601      	mov	r1, r0
 8015c58:	4620      	mov	r0, r4
 8015c5a:	f7ed fe6b 	bl	8003934 <__aeabi_fmul>
 8015c5e:	4929      	ldr	r1, [pc, #164]	; (8015d04 <__kernel_sinf+0xd4>)
 8015c60:	4606      	mov	r6, r0
 8015c62:	4628      	mov	r0, r5
 8015c64:	f7ed fe66 	bl	8003934 <__aeabi_fmul>
 8015c68:	4927      	ldr	r1, [pc, #156]	; (8015d08 <__kernel_sinf+0xd8>)
 8015c6a:	f7ed fd59 	bl	8003720 <__aeabi_fsub>
 8015c6e:	4629      	mov	r1, r5
 8015c70:	f7ed fe60 	bl	8003934 <__aeabi_fmul>
 8015c74:	4925      	ldr	r1, [pc, #148]	; (8015d0c <__kernel_sinf+0xdc>)
 8015c76:	f7ed fd55 	bl	8003724 <__addsf3>
 8015c7a:	4629      	mov	r1, r5
 8015c7c:	f7ed fe5a 	bl	8003934 <__aeabi_fmul>
 8015c80:	4923      	ldr	r1, [pc, #140]	; (8015d10 <__kernel_sinf+0xe0>)
 8015c82:	f7ed fd4d 	bl	8003720 <__aeabi_fsub>
 8015c86:	4629      	mov	r1, r5
 8015c88:	f7ed fe54 	bl	8003934 <__aeabi_fmul>
 8015c8c:	4921      	ldr	r1, [pc, #132]	; (8015d14 <__kernel_sinf+0xe4>)
 8015c8e:	f7ed fd49 	bl	8003724 <__addsf3>
 8015c92:	4680      	mov	r8, r0
 8015c94:	f1b9 0f00 	cmp.w	r9, #0
 8015c98:	d111      	bne.n	8015cbe <__kernel_sinf+0x8e>
 8015c9a:	4601      	mov	r1, r0
 8015c9c:	4628      	mov	r0, r5
 8015c9e:	f7ed fe49 	bl	8003934 <__aeabi_fmul>
 8015ca2:	491d      	ldr	r1, [pc, #116]	; (8015d18 <__kernel_sinf+0xe8>)
 8015ca4:	f7ed fd3c 	bl	8003720 <__aeabi_fsub>
 8015ca8:	4631      	mov	r1, r6
 8015caa:	f7ed fe43 	bl	8003934 <__aeabi_fmul>
 8015cae:	4601      	mov	r1, r0
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	f7ed fd37 	bl	8003724 <__addsf3>
 8015cb6:	4604      	mov	r4, r0
 8015cb8:	4620      	mov	r0, r4
 8015cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015cbe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8015cc2:	4638      	mov	r0, r7
 8015cc4:	f7ed fe36 	bl	8003934 <__aeabi_fmul>
 8015cc8:	4641      	mov	r1, r8
 8015cca:	4681      	mov	r9, r0
 8015ccc:	4630      	mov	r0, r6
 8015cce:	f7ed fe31 	bl	8003934 <__aeabi_fmul>
 8015cd2:	4601      	mov	r1, r0
 8015cd4:	4648      	mov	r0, r9
 8015cd6:	f7ed fd23 	bl	8003720 <__aeabi_fsub>
 8015cda:	4629      	mov	r1, r5
 8015cdc:	f7ed fe2a 	bl	8003934 <__aeabi_fmul>
 8015ce0:	4639      	mov	r1, r7
 8015ce2:	f7ed fd1d 	bl	8003720 <__aeabi_fsub>
 8015ce6:	490c      	ldr	r1, [pc, #48]	; (8015d18 <__kernel_sinf+0xe8>)
 8015ce8:	4605      	mov	r5, r0
 8015cea:	4630      	mov	r0, r6
 8015cec:	f7ed fe22 	bl	8003934 <__aeabi_fmul>
 8015cf0:	4601      	mov	r1, r0
 8015cf2:	4628      	mov	r0, r5
 8015cf4:	f7ed fd16 	bl	8003724 <__addsf3>
 8015cf8:	4601      	mov	r1, r0
 8015cfa:	4620      	mov	r0, r4
 8015cfc:	f7ed fd10 	bl	8003720 <__aeabi_fsub>
 8015d00:	e7d9      	b.n	8015cb6 <__kernel_sinf+0x86>
 8015d02:	bf00      	nop
 8015d04:	2f2ec9d3 	.word	0x2f2ec9d3
 8015d08:	32d72f34 	.word	0x32d72f34
 8015d0c:	3638ef1b 	.word	0x3638ef1b
 8015d10:	39500d01 	.word	0x39500d01
 8015d14:	3c088889 	.word	0x3c088889
 8015d18:	3e2aaaab 	.word	0x3e2aaaab

08015d1c <atanf>:
 8015d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d20:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8015d24:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8015d28:	4604      	mov	r4, r0
 8015d2a:	4680      	mov	r8, r0
 8015d2c:	db0e      	blt.n	8015d4c <atanf+0x30>
 8015d2e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8015d32:	dd04      	ble.n	8015d3e <atanf+0x22>
 8015d34:	4601      	mov	r1, r0
 8015d36:	f7ed fcf5 	bl	8003724 <__addsf3>
 8015d3a:	4604      	mov	r4, r0
 8015d3c:	e003      	b.n	8015d46 <atanf+0x2a>
 8015d3e:	2800      	cmp	r0, #0
 8015d40:	f300 80ce 	bgt.w	8015ee0 <atanf+0x1c4>
 8015d44:	4c67      	ldr	r4, [pc, #412]	; (8015ee4 <atanf+0x1c8>)
 8015d46:	4620      	mov	r0, r4
 8015d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015d4c:	4b66      	ldr	r3, [pc, #408]	; (8015ee8 <atanf+0x1cc>)
 8015d4e:	429d      	cmp	r5, r3
 8015d50:	dc0e      	bgt.n	8015d70 <atanf+0x54>
 8015d52:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8015d56:	da08      	bge.n	8015d6a <atanf+0x4e>
 8015d58:	4964      	ldr	r1, [pc, #400]	; (8015eec <atanf+0x1d0>)
 8015d5a:	f7ed fce3 	bl	8003724 <__addsf3>
 8015d5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015d62:	f7ed ffa3 	bl	8003cac <__aeabi_fcmpgt>
 8015d66:	2800      	cmp	r0, #0
 8015d68:	d1ed      	bne.n	8015d46 <atanf+0x2a>
 8015d6a:	f04f 36ff 	mov.w	r6, #4294967295
 8015d6e:	e01c      	b.n	8015daa <atanf+0x8e>
 8015d70:	f000 f8e0 	bl	8015f34 <fabsf>
 8015d74:	4b5e      	ldr	r3, [pc, #376]	; (8015ef0 <atanf+0x1d4>)
 8015d76:	4604      	mov	r4, r0
 8015d78:	429d      	cmp	r5, r3
 8015d7a:	dc7c      	bgt.n	8015e76 <atanf+0x15a>
 8015d7c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8015d80:	429d      	cmp	r5, r3
 8015d82:	dc67      	bgt.n	8015e54 <atanf+0x138>
 8015d84:	4601      	mov	r1, r0
 8015d86:	f7ed fccd 	bl	8003724 <__addsf3>
 8015d8a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015d8e:	f7ed fcc7 	bl	8003720 <__aeabi_fsub>
 8015d92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8015d96:	4605      	mov	r5, r0
 8015d98:	4620      	mov	r0, r4
 8015d9a:	f7ed fcc3 	bl	8003724 <__addsf3>
 8015d9e:	4601      	mov	r1, r0
 8015da0:	4628      	mov	r0, r5
 8015da2:	f7ed fe7b 	bl	8003a9c <__aeabi_fdiv>
 8015da6:	2600      	movs	r6, #0
 8015da8:	4604      	mov	r4, r0
 8015daa:	4621      	mov	r1, r4
 8015dac:	4620      	mov	r0, r4
 8015dae:	f7ed fdc1 	bl	8003934 <__aeabi_fmul>
 8015db2:	4601      	mov	r1, r0
 8015db4:	4607      	mov	r7, r0
 8015db6:	f7ed fdbd 	bl	8003934 <__aeabi_fmul>
 8015dba:	4605      	mov	r5, r0
 8015dbc:	494d      	ldr	r1, [pc, #308]	; (8015ef4 <atanf+0x1d8>)
 8015dbe:	f7ed fdb9 	bl	8003934 <__aeabi_fmul>
 8015dc2:	494d      	ldr	r1, [pc, #308]	; (8015ef8 <atanf+0x1dc>)
 8015dc4:	f7ed fcae 	bl	8003724 <__addsf3>
 8015dc8:	4629      	mov	r1, r5
 8015dca:	f7ed fdb3 	bl	8003934 <__aeabi_fmul>
 8015dce:	494b      	ldr	r1, [pc, #300]	; (8015efc <atanf+0x1e0>)
 8015dd0:	f7ed fca8 	bl	8003724 <__addsf3>
 8015dd4:	4629      	mov	r1, r5
 8015dd6:	f7ed fdad 	bl	8003934 <__aeabi_fmul>
 8015dda:	4949      	ldr	r1, [pc, #292]	; (8015f00 <atanf+0x1e4>)
 8015ddc:	f7ed fca2 	bl	8003724 <__addsf3>
 8015de0:	4629      	mov	r1, r5
 8015de2:	f7ed fda7 	bl	8003934 <__aeabi_fmul>
 8015de6:	4947      	ldr	r1, [pc, #284]	; (8015f04 <atanf+0x1e8>)
 8015de8:	f7ed fc9c 	bl	8003724 <__addsf3>
 8015dec:	4629      	mov	r1, r5
 8015dee:	f7ed fda1 	bl	8003934 <__aeabi_fmul>
 8015df2:	4945      	ldr	r1, [pc, #276]	; (8015f08 <atanf+0x1ec>)
 8015df4:	f7ed fc96 	bl	8003724 <__addsf3>
 8015df8:	4639      	mov	r1, r7
 8015dfa:	f7ed fd9b 	bl	8003934 <__aeabi_fmul>
 8015dfe:	4943      	ldr	r1, [pc, #268]	; (8015f0c <atanf+0x1f0>)
 8015e00:	4607      	mov	r7, r0
 8015e02:	4628      	mov	r0, r5
 8015e04:	f7ed fd96 	bl	8003934 <__aeabi_fmul>
 8015e08:	4941      	ldr	r1, [pc, #260]	; (8015f10 <atanf+0x1f4>)
 8015e0a:	f7ed fc89 	bl	8003720 <__aeabi_fsub>
 8015e0e:	4629      	mov	r1, r5
 8015e10:	f7ed fd90 	bl	8003934 <__aeabi_fmul>
 8015e14:	493f      	ldr	r1, [pc, #252]	; (8015f14 <atanf+0x1f8>)
 8015e16:	f7ed fc83 	bl	8003720 <__aeabi_fsub>
 8015e1a:	4629      	mov	r1, r5
 8015e1c:	f7ed fd8a 	bl	8003934 <__aeabi_fmul>
 8015e20:	493d      	ldr	r1, [pc, #244]	; (8015f18 <atanf+0x1fc>)
 8015e22:	f7ed fc7d 	bl	8003720 <__aeabi_fsub>
 8015e26:	4629      	mov	r1, r5
 8015e28:	f7ed fd84 	bl	8003934 <__aeabi_fmul>
 8015e2c:	493b      	ldr	r1, [pc, #236]	; (8015f1c <atanf+0x200>)
 8015e2e:	f7ed fc77 	bl	8003720 <__aeabi_fsub>
 8015e32:	4629      	mov	r1, r5
 8015e34:	f7ed fd7e 	bl	8003934 <__aeabi_fmul>
 8015e38:	4601      	mov	r1, r0
 8015e3a:	4638      	mov	r0, r7
 8015e3c:	f7ed fc72 	bl	8003724 <__addsf3>
 8015e40:	4621      	mov	r1, r4
 8015e42:	f7ed fd77 	bl	8003934 <__aeabi_fmul>
 8015e46:	1c73      	adds	r3, r6, #1
 8015e48:	4601      	mov	r1, r0
 8015e4a:	d133      	bne.n	8015eb4 <atanf+0x198>
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f7ed fc67 	bl	8003720 <__aeabi_fsub>
 8015e52:	e772      	b.n	8015d3a <atanf+0x1e>
 8015e54:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015e58:	f7ed fc62 	bl	8003720 <__aeabi_fsub>
 8015e5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015e60:	4605      	mov	r5, r0
 8015e62:	4620      	mov	r0, r4
 8015e64:	f7ed fc5e 	bl	8003724 <__addsf3>
 8015e68:	4601      	mov	r1, r0
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	f7ed fe16 	bl	8003a9c <__aeabi_fdiv>
 8015e70:	2601      	movs	r6, #1
 8015e72:	4604      	mov	r4, r0
 8015e74:	e799      	b.n	8015daa <atanf+0x8e>
 8015e76:	4b2a      	ldr	r3, [pc, #168]	; (8015f20 <atanf+0x204>)
 8015e78:	429d      	cmp	r5, r3
 8015e7a:	dc14      	bgt.n	8015ea6 <atanf+0x18a>
 8015e7c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8015e80:	f7ed fc4e 	bl	8003720 <__aeabi_fsub>
 8015e84:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8015e88:	4605      	mov	r5, r0
 8015e8a:	4620      	mov	r0, r4
 8015e8c:	f7ed fd52 	bl	8003934 <__aeabi_fmul>
 8015e90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8015e94:	f7ed fc46 	bl	8003724 <__addsf3>
 8015e98:	4601      	mov	r1, r0
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	f7ed fdfe 	bl	8003a9c <__aeabi_fdiv>
 8015ea0:	2602      	movs	r6, #2
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	e781      	b.n	8015daa <atanf+0x8e>
 8015ea6:	4601      	mov	r1, r0
 8015ea8:	481e      	ldr	r0, [pc, #120]	; (8015f24 <atanf+0x208>)
 8015eaa:	f7ed fdf7 	bl	8003a9c <__aeabi_fdiv>
 8015eae:	2603      	movs	r6, #3
 8015eb0:	4604      	mov	r4, r0
 8015eb2:	e77a      	b.n	8015daa <atanf+0x8e>
 8015eb4:	4b1c      	ldr	r3, [pc, #112]	; (8015f28 <atanf+0x20c>)
 8015eb6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8015eba:	f7ed fc31 	bl	8003720 <__aeabi_fsub>
 8015ebe:	4621      	mov	r1, r4
 8015ec0:	f7ed fc2e 	bl	8003720 <__aeabi_fsub>
 8015ec4:	4b19      	ldr	r3, [pc, #100]	; (8015f2c <atanf+0x210>)
 8015ec6:	4601      	mov	r1, r0
 8015ec8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015ecc:	f7ed fc28 	bl	8003720 <__aeabi_fsub>
 8015ed0:	f1b8 0f00 	cmp.w	r8, #0
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	f6bf af36 	bge.w	8015d46 <atanf+0x2a>
 8015eda:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8015ede:	e72c      	b.n	8015d3a <atanf+0x1e>
 8015ee0:	4c13      	ldr	r4, [pc, #76]	; (8015f30 <atanf+0x214>)
 8015ee2:	e730      	b.n	8015d46 <atanf+0x2a>
 8015ee4:	bfc90fdb 	.word	0xbfc90fdb
 8015ee8:	3edfffff 	.word	0x3edfffff
 8015eec:	7149f2ca 	.word	0x7149f2ca
 8015ef0:	3f97ffff 	.word	0x3f97ffff
 8015ef4:	3c8569d7 	.word	0x3c8569d7
 8015ef8:	3d4bda59 	.word	0x3d4bda59
 8015efc:	3d886b35 	.word	0x3d886b35
 8015f00:	3dba2e6e 	.word	0x3dba2e6e
 8015f04:	3e124925 	.word	0x3e124925
 8015f08:	3eaaaaab 	.word	0x3eaaaaab
 8015f0c:	bd15a221 	.word	0xbd15a221
 8015f10:	3d6ef16b 	.word	0x3d6ef16b
 8015f14:	3d9d8795 	.word	0x3d9d8795
 8015f18:	3de38e38 	.word	0x3de38e38
 8015f1c:	3e4ccccd 	.word	0x3e4ccccd
 8015f20:	401bffff 	.word	0x401bffff
 8015f24:	bf800000 	.word	0xbf800000
 8015f28:	0801780c 	.word	0x0801780c
 8015f2c:	080177fc 	.word	0x080177fc
 8015f30:	3fc90fdb 	.word	0x3fc90fdb

08015f34 <fabsf>:
 8015f34:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015f38:	4770      	bx	lr
	...

08015f3c <floorf>:
 8015f3c:	b570      	push	{r4, r5, r6, lr}
 8015f3e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8015f42:	3d7f      	subs	r5, #127	; 0x7f
 8015f44:	2d16      	cmp	r5, #22
 8015f46:	4601      	mov	r1, r0
 8015f48:	4604      	mov	r4, r0
 8015f4a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8015f4e:	dc26      	bgt.n	8015f9e <floorf+0x62>
 8015f50:	2d00      	cmp	r5, #0
 8015f52:	da0e      	bge.n	8015f72 <floorf+0x36>
 8015f54:	4917      	ldr	r1, [pc, #92]	; (8015fb4 <floorf+0x78>)
 8015f56:	f7ed fbe5 	bl	8003724 <__addsf3>
 8015f5a:	2100      	movs	r1, #0
 8015f5c:	f7ed fea6 	bl	8003cac <__aeabi_fcmpgt>
 8015f60:	b128      	cbz	r0, 8015f6e <floorf+0x32>
 8015f62:	2c00      	cmp	r4, #0
 8015f64:	da23      	bge.n	8015fae <floorf+0x72>
 8015f66:	4b14      	ldr	r3, [pc, #80]	; (8015fb8 <floorf+0x7c>)
 8015f68:	2e00      	cmp	r6, #0
 8015f6a:	bf18      	it	ne
 8015f6c:	461c      	movne	r4, r3
 8015f6e:	4621      	mov	r1, r4
 8015f70:	e01b      	b.n	8015faa <floorf+0x6e>
 8015f72:	4e12      	ldr	r6, [pc, #72]	; (8015fbc <floorf+0x80>)
 8015f74:	412e      	asrs	r6, r5
 8015f76:	4230      	tst	r0, r6
 8015f78:	d017      	beq.n	8015faa <floorf+0x6e>
 8015f7a:	490e      	ldr	r1, [pc, #56]	; (8015fb4 <floorf+0x78>)
 8015f7c:	f7ed fbd2 	bl	8003724 <__addsf3>
 8015f80:	2100      	movs	r1, #0
 8015f82:	f7ed fe93 	bl	8003cac <__aeabi_fcmpgt>
 8015f86:	2800      	cmp	r0, #0
 8015f88:	d0f1      	beq.n	8015f6e <floorf+0x32>
 8015f8a:	2c00      	cmp	r4, #0
 8015f8c:	bfbe      	ittt	lt
 8015f8e:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 8015f92:	fa43 f505 	asrlt.w	r5, r3, r5
 8015f96:	1964      	addlt	r4, r4, r5
 8015f98:	ea24 0406 	bic.w	r4, r4, r6
 8015f9c:	e7e7      	b.n	8015f6e <floorf+0x32>
 8015f9e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8015fa2:	d302      	bcc.n	8015faa <floorf+0x6e>
 8015fa4:	f7ed fbbe 	bl	8003724 <__addsf3>
 8015fa8:	4601      	mov	r1, r0
 8015faa:	4608      	mov	r0, r1
 8015fac:	bd70      	pop	{r4, r5, r6, pc}
 8015fae:	2400      	movs	r4, #0
 8015fb0:	e7dd      	b.n	8015f6e <floorf+0x32>
 8015fb2:	bf00      	nop
 8015fb4:	7149f2ca 	.word	0x7149f2ca
 8015fb8:	bf800000 	.word	0xbf800000
 8015fbc:	007fffff 	.word	0x007fffff

08015fc0 <scalbnf>:
 8015fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8015fc4:	b538      	push	{r3, r4, r5, lr}
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	460d      	mov	r5, r1
 8015fca:	4604      	mov	r4, r0
 8015fcc:	d02a      	beq.n	8016024 <scalbnf+0x64>
 8015fce:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8015fd2:	d304      	bcc.n	8015fde <scalbnf+0x1e>
 8015fd4:	4601      	mov	r1, r0
 8015fd6:	f7ed fba5 	bl	8003724 <__addsf3>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	e022      	b.n	8016024 <scalbnf+0x64>
 8015fde:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 8015fe2:	d117      	bne.n	8016014 <scalbnf+0x54>
 8015fe4:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8015fe8:	f7ed fca4 	bl	8003934 <__aeabi_fmul>
 8015fec:	4a17      	ldr	r2, [pc, #92]	; (801604c <scalbnf+0x8c>)
 8015fee:	4603      	mov	r3, r0
 8015ff0:	4295      	cmp	r5, r2
 8015ff2:	db0b      	blt.n	801600c <scalbnf+0x4c>
 8015ff4:	4604      	mov	r4, r0
 8015ff6:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8015ffa:	3a19      	subs	r2, #25
 8015ffc:	442a      	add	r2, r5
 8015ffe:	2afe      	cmp	r2, #254	; 0xfe
 8016000:	dd0a      	ble.n	8016018 <scalbnf+0x58>
 8016002:	4913      	ldr	r1, [pc, #76]	; (8016050 <scalbnf+0x90>)
 8016004:	4618      	mov	r0, r3
 8016006:	f361 001e 	bfi	r0, r1, #0, #31
 801600a:	e000      	b.n	801600e <scalbnf+0x4e>
 801600c:	4911      	ldr	r1, [pc, #68]	; (8016054 <scalbnf+0x94>)
 801600e:	f7ed fc91 	bl	8003934 <__aeabi_fmul>
 8016012:	e7e2      	b.n	8015fda <scalbnf+0x1a>
 8016014:	0dd2      	lsrs	r2, r2, #23
 8016016:	e7f1      	b.n	8015ffc <scalbnf+0x3c>
 8016018:	2a00      	cmp	r2, #0
 801601a:	dd05      	ble.n	8016028 <scalbnf+0x68>
 801601c:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8016020:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 8016024:	4618      	mov	r0, r3
 8016026:	bd38      	pop	{r3, r4, r5, pc}
 8016028:	f112 0f16 	cmn.w	r2, #22
 801602c:	da05      	bge.n	801603a <scalbnf+0x7a>
 801602e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8016032:	4295      	cmp	r5, r2
 8016034:	dce5      	bgt.n	8016002 <scalbnf+0x42>
 8016036:	4907      	ldr	r1, [pc, #28]	; (8016054 <scalbnf+0x94>)
 8016038:	e7e4      	b.n	8016004 <scalbnf+0x44>
 801603a:	3219      	adds	r2, #25
 801603c:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8016040:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 8016044:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8016048:	e7e1      	b.n	801600e <scalbnf+0x4e>
 801604a:	bf00      	nop
 801604c:	ffff3cb0 	.word	0xffff3cb0
 8016050:	7149f2ca 	.word	0x7149f2ca
 8016054:	0da24260 	.word	0x0da24260

08016058 <_init>:
 8016058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801605a:	bf00      	nop
 801605c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801605e:	bc08      	pop	{r3}
 8016060:	469e      	mov	lr, r3
 8016062:	4770      	bx	lr

08016064 <_fini>:
 8016064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016066:	bf00      	nop
 8016068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801606a:	bc08      	pop	{r3}
 801606c:	469e      	mov	lr, r3
 801606e:	4770      	bx	lr
